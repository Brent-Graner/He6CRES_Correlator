
open(PIDFILE, '> pidfile.txt') || die 'Couldn\'t write process ID to file.';
print PIDFILE "$$\n";
close(PIDFILE);

eval {
  # Call script(s).
  my $instrs;
  my $results = [];
$ENV{'SYSGEN'} = '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen';
  use Sg;
  $instrs = {
    'HDLCodeGenStatus' => 0.0,
    'HDL_PATH' => '/home/brent/Desktop/he6cres_correlator',
    'TEMP' => '/tmp',
    'TMP' => '/tmp',
    'Temp' => '/tmp',
    'Tmp' => '/tmp',
    'base_system_period_hardware' => 5.7143,
    'base_system_period_simulink' => 1.0,
    'block_icon_display' => 'Default',
    'ce_clr' => 0.0,
    'clock_domain' => 'default',
    'clock_loc' => 'd7hack',
    'clock_wrapper' => 'Clock Enables',
    'compilation' => 'NGC Netlist',
    'compilation_lut' => {
      'keys' => [
        'HDL Netlist',
        'NGC Netlist',
      ],
      'values' => [
        'target1',
        'target2',
      ],
    },
    'compilation_target' => 'NGC Netlist',
    'core_generation' => 1.0,
    'core_is_deployed' => 0.0,
    'coregen_core_generation_tmpdir' => '/tmp/sysgentmp-brent/cg_wk/c0e159b5f2482140d',
    'coregen_part_family' => 'virtex6',
    'createTestbench' => 0,
    'create_interface_document' => 'off',
    'dbl_ovrd' => -1.0,
    'dcm_input_clock_period' => 100.0,
    'deprecated_control' => 'off',
    'design' => 'he6_cres_correlator',
    'design_full_path' => '/home/brent/Desktop/he6cres_correlator/he6_cres_correlator.slx',
    'device' => 'xc6vsx475t-1ff1759',
    'device_speed' => '-1',
    'directory' => '/home/brent/Desktop/he6cres_correlator/he6_cres_correlator/sysgen',
    'disregard_subsystem_handles' => [
      178516.0001220703,
      179277.0001220703,
    ],
    'dsp_cache_root_path' => '/tmp/sysgentmp-brent',
    'fileDeliveryDefaults' => [
      [
        '(?i)\\.vhd$',
        { 'fileName' => '/home/brent/Desktop/he6cres_correlator/he6_cres_correlator/sysgen/sysgen/perl_results.vhd', },
      ],
      [
        '(?i)\\.v$',
        { 'fileName' => '/home/brent/Desktop/he6cres_correlator/he6_cres_correlator/sysgen/sysgen/perl_results.v', },
      ],
    ],
    'fxdptinstalled' => 0.0,
    'generateUsing71FrontEnd' => 1,
    'generating_island_subsystem_handle' => 74718.00012207031,
    'generating_subsystem_handle' => 74718.00012207031,
    'generation_directory' => './he6_cres_correlator/sysgen',
    'hdlDir' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl',
    'hdlKind' => 'vhdl',
    'hdl_path' => '/home/brent/Desktop/he6cres_correlator',
    'impl_file' => 'ISE Defaults*',
    'incr_netlist' => 'off',
    'isdeployed' => 0,
    'ise_version' => '14.7i',
    'master_sysgen_token_handle' => 74719.00012207031,
    'matlab' => '/usr/local/MATLAB/R2012b',
    'matlab_fixedpoint' => 0.0,
    'mdlHandle' => 74718.00012207031,
    'mdlPath' => '/home/brent/Desktop/he6cres_correlator/he6_cres_correlator.mdl',
    'modelDiagnostics' => [
      {
        'count' => 50986.0,
        'isMask' => 0.0,
        'type' => 'he6_cres_correlator Total blocks',
      },
      {
        'count' => 2.0,
        'isMask' => 0.0,
        'type' => 'Bias',
      },
      {
        'count' => 40.0,
        'isMask' => 0.0,
        'type' => 'Constant',
      },
      {
        'count' => 32.0,
        'isMask' => 0.0,
        'type' => 'Delay',
      },
      {
        'count' => 2.0,
        'isMask' => 0.0,
        'type' => 'DiscretePulseGenerator',
      },
      {
        'count' => 49.0,
        'isMask' => 0.0,
        'type' => 'From',
      },
      {
        'count' => 4.0,
        'isMask' => 0.0,
        'type' => 'Gain',
      },
      {
        'count' => 74.0,
        'isMask' => 0.0,
        'type' => 'Goto',
      },
      {
        'count' => 8218.0,
        'isMask' => 0.0,
        'type' => 'Inport',
      },
      {
        'count' => 8743.0,
        'isMask' => 0.0,
        'type' => 'Outport',
      },
      {
        'count' => 2.0,
        'isMask' => 0.0,
        'type' => 'RandomNumber',
      },
      {
        'count' => 29610.0,
        'isMask' => 0.0,
        'type' => 'S-Function',
      },
      {
        'count' => 2.0,
        'isMask' => 0.0,
        'type' => 'Step',
      },
      {
        'count' => 4068.0,
        'isMask' => 0.0,
        'type' => 'SubSystem',
      },
      {
        'count' => 140.0,
        'isMask' => 0.0,
        'type' => 'Terminator',
      },
      {
        'count' => 2.0,
        'isMask' => 1.0,
        'type' => 'Band-Limited White Noise.',
      },
      {
        'count' => 32.0,
        'isMask' => 1.0,
        'type' => 'Downsample',
      },
      {
        'count' => 2.0,
        'isMask' => 1.0,
        'type' => 'TenGbEWrap',
      },
      {
        'count' => 1297.0,
        'isMask' => 1.0,
        'type' => 'Xilinx Adder/Subtracter Block',
      },
      {
        'count' => 215.0,
        'isMask' => 1.0,
        'type' => 'Xilinx Arithmetic Relational Operator Block',
      },
      {
        'count' => 28.0,
        'isMask' => 1.0,
        'type' => 'Xilinx Assert Block',
      },
      {
        'count' => 18.0,
        'isMask' => 1.0,
        'type' => 'Xilinx Binary Shift Operator Block',
      },
      {
        'count' => 6548.0,
        'isMask' => 1.0,
        'type' => 'Xilinx Bit Slice Extractor Block',
      },
      {
        'count' => 1615.0,
        'isMask' => 1.0,
        'type' => 'Xilinx Bus Concatenator Block',
      },
      {
        'count' => 488.0,
        'isMask' => 1.0,
        'type' => 'Xilinx Bus Multiplexer Block',
      },
      {
        'count' => 2010.0,
        'isMask' => 1.0,
        'type' => 'Xilinx Constant Block Block',
      },
      {
        'count' => 191.0,
        'isMask' => 1.0,
        'type' => 'Xilinx Counter Block',
      },
      {
        'count' => 1855.0,
        'isMask' => 1.0,
        'type' => 'Xilinx Delay Block',
      },
      {
        'count' => 2.0,
        'isMask' => 1.0,
        'type' => 'Xilinx Disregard Subsystem For Generation Block',
      },
      {
        'count' => 1.0,
        'isMask' => 1.0,
        'type' => 'Xilinx Dual Port Random Access Memory Block',
      },
      {
        'count' => 82.0,
        'isMask' => 1.0,
        'type' => 'Xilinx Gateway In Block',
      },
      {
        'count' => 29.0,
        'isMask' => 1.0,
        'type' => 'Xilinx Gateway Out Block',
      },
      {
        'count' => 336.0,
        'isMask' => 1.0,
        'type' => 'Xilinx Input Scaler Block',
      },
      {
        'count' => 884.0,
        'isMask' => 1.0,
        'type' => 'Xilinx Inverter Block',
      },
      {
        'count' => 1735.0,
        'isMask' => 1.0,
        'type' => 'Xilinx Logical Block Block',
      },
      {
        'count' => 352.0,
        'isMask' => 1.0,
        'type' => 'Xilinx Multiplier Block',
      },
      {
        'count' => 66.0,
        'isMask' => 1.0,
        'type' => 'Xilinx Negate Block Block',
      },
      {
        'count' => 233.0,
        'isMask' => 1.0,
        'type' => 'Xilinx Register Block',
      },
      {
        'count' => 100.0,
        'isMask' => 1.0,
        'type' => 'Xilinx Single Port Random Access Memory Block',
      },
      {
        'count' => 91.0,
        'isMask' => 1.0,
        'type' => 'Xilinx Single Port Read-Only Memory Block',
      },
      {
        'count' => 1.0,
        'isMask' => 1.0,
        'type' => 'Xilinx System Generator Block',
      },
      {
        'count' => 523.0,
        'isMask' => 1.0,
        'type' => 'Xilinx Type Converter Block',
      },
      {
        'count' => 10879.0,
        'isMask' => 1.0,
        'type' => 'Xilinx Type Reinterpreter Block',
      },
      {
        'count' => 2.0,
        'isMask' => 1.0,
        'type' => 'adc5g',
      },
      {
        'count' => 16.0,
        'isMask' => 1.0,
        'type' => 'adder_tree',
      },
      {
        'count' => 1.0,
        'isMask' => 1.0,
        'type' => 'barrel_switcher',
      },
      {
        'count' => 1.0,
        'isMask' => 1.0,
        'type' => 'bi_real_unscr_4x',
      },
      {
        'count' => 1.0,
        'isMask' => 1.0,
        'type' => 'biplex_core',
      },
      {
        'count' => 8.0,
        'isMask' => 1.0,
        'type' => 'bit_reverse',
      },
      {
        'count' => 58.0,
        'isMask' => 1.0,
        'type' => 'bus_addsub',
      },
      {
        'count' => 100.0,
        'isMask' => 1.0,
        'type' => 'bus_convert',
      },
      {
        'count' => 669.0,
        'isMask' => 1.0,
        'type' => 'bus_create',
      },
      {
        'count' => 18.0,
        'isMask' => 1.0,
        'type' => 'bus_delay',
      },
      {
        'count' => 1.0,
        'isMask' => 1.0,
        'type' => 'bus_dual_port_ram',
      },
      {
        'count' => 815.0,
        'isMask' => 1.0,
        'type' => 'bus_expand',
      },
      {
        'count' => 23.0,
        'isMask' => 1.0,
        'type' => 'bus_mult',
      },
      {
        'count' => 29.0,
        'isMask' => 1.0,
        'type' => 'bus_mux',
      },
      {
        'count' => 5.0,
        'isMask' => 1.0,
        'type' => 'bus_negate',
      },
      {
        'count' => 25.0,
        'isMask' => 1.0,
        'type' => 'bus_relational',
      },
      {
        'count' => 247.0,
        'isMask' => 1.0,
        'type' => 'bus_replicate',
      },
      {
        'count' => 27.0,
        'isMask' => 1.0,
        'type' => 'bus_scale',
      },
      {
        'count' => 16.0,
        'isMask' => 1.0,
        'type' => 'bus_single_port_ram',
      },
      {
        'count' => 25.0,
        'isMask' => 1.0,
        'type' => 'butterfly_direct',
      },
      {
        'count' => 31.0,
        'isMask' => 1.0,
        'type' => 'c_to_ri',
      },
      {
        'count' => 64.0,
        'isMask' => 1.0,
        'type' => 'cmult',
      },
      {
        'count' => 23.0,
        'isMask' => 1.0,
        'type' => 'coeff_gen',
      },
      {
        'count' => 4.0,
        'isMask' => 1.0,
        'type' => 'complex_conj',
      },
      {
        'count' => 736.0,
        'isMask' => 1.0,
        'type' => 'convert',
      },
      {
        'count' => 288.0,
        'isMask' => 1.0,
        'type' => 'convert_of',
      },
      {
        'count' => 23.0,
        'isMask' => 1.0,
        'type' => 'cosin',
      },
      {
        'count' => 50.0,
        'isMask' => 1.0,
        'type' => 'delay_bram',
      },
      {
        'count' => 15.0,
        'isMask' => 1.0,
        'type' => 'delay_slr',
      },
      {
        'count' => 11.0,
        'isMask' => 1.0,
        'type' => 'edge_detect',
      },
      {
        'count' => 1.0,
        'isMask' => 1.0,
        'type' => 'fft_biplex_real_4x',
      },
      {
        'count' => 1.0,
        'isMask' => 1.0,
        'type' => 'fft_direct',
      },
      {
        'count' => 10.0,
        'isMask' => 1.0,
        'type' => 'fft_stage_n',
      },
      {
        'count' => 1.0,
        'isMask' => 1.0,
        'type' => 'fft_unscrambler',
      },
      {
        'count' => 1.0,
        'isMask' => 1.0,
        'type' => 'fft_wideband_real',
      },
      {
        'count' => 16.0,
        'isMask' => 1.0,
        'type' => 'first_tap_real',
      },
      {
        'count' => 2.0,
        'isMask' => 1.0,
        'type' => 'hilbert',
      },
      {
        'count' => 16.0,
        'isMask' => 1.0,
        'type' => 'last_tap_real',
      },
      {
        'count' => 1.0,
        'isMask' => 1.0,
        'type' => 'mirror_spectrum',
      },
      {
        'count' => 51.0,
        'isMask' => 1.0,
        'type' => 'munge',
      },
      {
        'count' => 16.0,
        'isMask' => 1.0,
        'type' => 'pfb_coeff_gen',
      },
      {
        'count' => 1.0,
        'isMask' => 1.0,
        'type' => 'pfb_fir_real',
      },
      {
        'count' => 32.0,
        'isMask' => 1.0,
        'type' => 'pfb_tap_real',
      },
      {
        'count' => 91.0,
        'isMask' => 1.0,
        'type' => 'pipeline',
      },
      {
        'count' => 4.0,
        'isMask' => 1.0,
        'type' => 'reorder',
      },
      {
        'count' => 99.0,
        'isMask' => 1.0,
        'type' => 'ri_to_c',
      },
      {
        'count' => 2.0,
        'isMask' => 1.0,
        'type' => 'snapshot',
      },
      {
        'count' => 1.0,
        'isMask' => 1.0,
        'type' => 'square_transposer',
      },
      {
        'count' => 17.0,
        'isMask' => 1.0,
        'type' => 'swreg',
      },
      {
        'count' => 59.0,
        'isMask' => 1.0,
        'type' => 'sync_delay',
      },
      {
        'count' => 4.0,
        'isMask' => 1.0,
        'type' => 'sync_delay_en',
      },
      {
        'count' => 2.0,
        'isMask' => 1.0,
        'type' => 'ten_GbE_v2',
      },
      {
        'count' => 23.0,
        'isMask' => 1.0,
        'type' => 'twiddle_general',
      },
      {
        'count' => 1.0,
        'isMask' => 1.0,
        'type' => 'twiddle_pass_through',
      },
      {
        'count' => 1.0,
        'isMask' => 1.0,
        'type' => 'twiddle_stage_2',
      },
      {
        'count' => 1.0,
        'isMask' => 1.0,
        'type' => 'xsg core config',
      },
    ],
    'model_globals_initialized' => 1.0,
    'model_path' => '/home/brent/Desktop/he6cres_correlator/he6_cres_correlator.mdl',
    'myxilinx' => '/opt/Xilinx/14.7/ISE_DS/ISE',
    'ngc_config' => {
      'include_cf' => 0.0,
      'include_clockwrapper' => 1.0,
    },
    'ngc_files' => [ 'xlpersistentdff.ngc', ],
    'num_sim_cycles' => '4096',
    'package' => 'ff1759',
    'part' => 'xc6vsx475t',
    'partFamily' => 'virtex6',
    'port_data_types_enabled' => 1.0,
    'preserve_hierarchy' => 0.0,
    'proj_type' => 'Project Navigator',
    'run_coregen' => '0',
    'sample_time_colors_enabled' => 0.0,
    'sampletimecolors' => 0.0,
    'sg_version' => '',
    'simulation_island_subsystem_handle' => 74718.00012207031,
    'simulink_accelerator_running' => 0.0,
    'simulink_debugger_running' => 0.0,
    'simulink_period' => 1.0,
    'speed' => '-1',
    'synth_file' => 'XST Defaults*',
    'synthesisTool' => 'XST',
    'synthesis_language' => 'vhdl',
    'synthesis_tool' => 'XST',
    'sysclk_period' => 5.7143,
    'sysgen' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen',
    'sysgenRoot' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen',
    'sysgenTokenSettings' => {
      'base_system_period_hardware' => 5.7143,
      'base_system_period_simulink' => 1.0,
      'block_icon_display' => 'Default',
      'ce_clr' => 0.0,
      'clock_loc' => 'd7hack',
      'clock_wrapper' => 'Clock Enables',
      'compilation' => 'NGC Netlist',
      'compilation_lut' => {
        'keys' => [
          'HDL Netlist',
          'NGC Netlist',
        ],
        'values' => [
          'target1',
          'target2',
        ],
      },
      'core_generation' => 1.0,
      'coregen_part_family' => 'virtex6',
      'create_interface_document' => 'off',
      'dbl_ovrd' => -1.0,
      'dcm_input_clock_period' => 100.0,
      'deprecated_control' => 'off',
      'directory' => './he6_cres_correlator/sysgen',
      'impl_file' => 'ISE Defaults*',
      'incr_netlist' => 'off',
      'master_sysgen_token_handle' => 74719.00012207031,
      'ngc_config' => {
        'include_cf' => 0.0,
        'include_clockwrapper' => 1.0,
      },
      'package' => 'ff1759',
      'part' => 'xc6vsx475t',
      'preserve_hierarchy' => 0.0,
      'proj_type' => 'Project Navigator',
      'simulation_island_subsystem_handle' => 74718.00012207031,
      'simulink_period' => 1.0,
      'speed' => '-1',
      'synth_file' => 'XST Defaults*',
      'synthesis_language' => 'vhdl',
      'synthesis_tool' => 'XST',
      'sysclk_period' => 5.7143,
      'testbench' => 0,
      'trim_vbits' => 1.0,
      'xilinx_device' => 'xc6vsx475t-1ff1759',
      'xilinxfamily' => 'virtex6',
    },
    'sysgen_Root' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen',
    'systemClockPeriod' => 5.7143,
    'tempdir' => '/tmp',
    'testbench' => 0,
    'tmpDir' => '/home/brent/Desktop/he6cres_correlator/he6_cres_correlator/sysgen/sysgen',
    'trim_vbits' => 1.0,
    'use_strict_names' => 1,
    'user_tips_enabled' => 0.0,
    'usertemp' => '/tmp/sysgentmp-brent',
    'using71Netlister' => 1,
    'verilog_files' => [
      'conv_pkg.v',
      'synth_reg.v',
      'synth_reg_w_init.v',
      'convert_type.v',
    ],
    'version' => '',
    'vhdl_files' => [
      'conv_pkg.vhd',
      'synth_reg.vhd',
      'synth_reg_w_init.vhd',
    ],
    'vsimtime' => '26021.772800 ns',
    'xilinx' => '/opt/Xilinx/14.7/ISE_DS/ISE',
    'xilinx_device' => 'xc6vsx475t-1ff1759',
    'xilinx_family' => 'virtex6',
    'xilinx_package' => 'ff1759',
    'xilinx_part' => 'xc6vsx475t',
    'xilinxdevice' => 'xc6vsx475t-1ff1759',
    'xilinxfamily' => 'virtex6',
    'xilinxpart' => 'xc6vsx475t',
  };
  push(@$results, &Sg::setAttributes($instrs));
  use SgDeliverFile;
  $instrs = {
    'collaborationName' => 'conv_pkg.vhd',
    'sourceFile' => 'hdl/conv_pkg.vhd',
    'templateKeyValues' => {},
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'collaborationName' => 'synth_reg.vhd',
    'sourceFile' => 'hdl/synth_reg.vhd',
    'templateKeyValues' => {},
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'collaborationName' => 'synth_reg_w_init.vhd',
    'sourceFile' => 'hdl/synth_reg_w_init.vhd',
    'templateKeyValues' => {},
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'collaborationName' => 'xlpersistentdff.ngc',
    'sourceFile' => 'hdl/xlpersistentdff.ngc',
    'templateKeyValues' => {},
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  use SgGenerateCores;
  $instrs = [
    'SELECT Multiplier virtex6 Xilinx,_Inc. 11.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET ccmimp = Distributed_Memory',
    'CSET clockenable = true',
    'CSET constvalue = 129',
    'CSET internaluser = 0',
    'CSET multiplier_construction = Use_Mults',
    'CSET multtype = Parallel_Multiplier',
    'CSET optgoal = Speed',
    'CSET outputwidthhigh = 15',
    'CSET outputwidthlow = 0',
    'CSET pipestages = 3',
    'CSET portatype = Unsigned',
    'CSET portawidth = 8',
    'CSET portbtype = Unsigned',
    'CSET portbwidth = 8',
    'CSET roundpoint = 0',
    'CSET sclrcepriority = CE_Overrides_SCLR',
    'CSET syncclear = true',
    'CSET use_custom_output_width = true',
    'CSET userounding = false',
    'CSET zerodetect = false',
    'CSET component_name = mult_11_2_b3e3ad78c7d21704',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '4bb46ad99556f3557e48d3f273fe554a',
    'sourceFile' => 'hdl/xlmult.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      b: in std_logic_vector(c_b_width - 1 downto 0);
      p: out std_logic_vector(c_output_width - 1 downto 0);
      clk: in std_logic;
      ce: in std_logic;
      sclr: in std_logic;
      a: in std_logic_vector(c_a_width - 1 downto 0)',
      'core_instance_text' => '        a => tmp_a,
        clk => clk,
        ce => internal_ce,
        sclr => internal_clr,
        p => tmp_p,
        b => tmp_b',
      'core_name0' => 'mult_11_2_b3e3ad78c7d21704',
      'entityName' => 'xlmult_he6_cres_correlator',
      'entity_name.0' => 'xlmult',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'efd075c0353dc2670dad7ba7b1998393',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic;
  type array_type_op_mem_20_24 is array (0 to (1 - 1)) of std_logic;
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    0 => \'0\');
  signal op_mem_20_24_front_din: std_logic;
  signal op_mem_20_24_back: std_logic;
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d(0);
  op_mem_20_24_back <= op_mem_20_24(0);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= std_logic_to_vector(op_mem_20_24_back);
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((1 - 1) downto 0);
    q : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_9f02caa990',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b32a0080f8f47e0be7ec44c6ad81b20b',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal ip_1_26: boolean;
  type array_type_op_mem_22_20 is array (0 to (1 - 1)) of boolean;
  signal op_mem_22_20: array_type_op_mem_22_20 := (
    0 => false);
  signal op_mem_22_20_front_din: boolean;
  signal op_mem_22_20_back: boolean;
  signal op_mem_22_20_push_front_pop_back_en: std_logic;
  signal internal_ip_12_1_bitnot: boolean;
begin
  ip_1_26 <= ((ip) = "1");
  op_mem_22_20_back <= op_mem_22_20(0);
  proc_op_mem_22_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_22_20_push_front_pop_back_en = \'1\')) then
        op_mem_22_20(0) <= op_mem_22_20_front_din;
      end if;
    end if;
  end process proc_op_mem_22_20;
  internal_ip_12_1_bitnot <= ((not boolean_to_vector(ip_1_26)) = "1");
  op_mem_22_20_push_front_pop_back_en <= \'0\';
  op <= boolean_to_vector(internal_ip_12_1_bitnot);
end',
      'crippled_entity' => 'is
  port (
    ip : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'inverter_e5b38cca3b',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '90c4aabfe14095dcfb9812719277ad4b',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  signal bit_2_26: std_logic;
  signal fully_2_1_bitnot: std_logic;
begin
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  bit_2_26 <= d0_1_24 or d1_1_27;
  fully_2_1_bitnot <= not bit_2_26;
  y <= std_logic_to_vector(fully_2_1_bitnot);
end',
      'crippled_entity' => 'is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'logical_dfe2dded7f',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '298203483c3de52896eed04fd75246a4',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  signal fully_2_1_bit: std_logic;
begin
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  fully_2_1_bit <= d0_1_24 and d1_1_27;
  y <= std_logic_to_vector(fully_2_1_bit);
end',
      'crippled_entity' => 'is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'logical_80f90b97d0',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f0372c20c4b6b49cad5f673d58ac5d53',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xldelay.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '993af81678c7e8657c3f1b5056bcf3d2',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xldelay.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '6322ead9f2a052d3337d0f550806eacb',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xldelay.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '6e6dbb97f54cbcfcb93887fa7d0feab6',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xldelay.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a66dcf4206167832fe70da6d09c1b56f',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xldelay.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a464150427c198f2ba9e6b3e0f4ef186',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xldelay.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ee5b27e6b77a2b6d5cbaa856cd205051',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xldelay.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '8d354eeb643c29d00ec71a3e2bb5e01c',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xldelay.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '61b3768cf93c8ae6e88296d8d7118ed6',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xldelay.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a3bfac37bc632ece4845206d92cf24f5',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xldelay.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '79cfaf8c15ce6d93b744ee6a4a4e8394',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  signal fully_2_1_bit: std_logic;
begin
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  fully_2_1_bit <= d0_1_24 or d1_1_27;
  y <= std_logic_to_vector(fully_2_1_bit);
end',
      'crippled_entity' => 'is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'logical_aacf6e1b0e',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '3b9126ea72ffb9d400356f6fb014fd0c',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xldelay.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '9accfa80e337d2ccdf52093c4c47385f',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal sel_1_20: std_logic_vector((3 - 1) downto 0);
  signal d0_1_24: std_logic_vector((64 - 1) downto 0);
  signal d1_1_27: std_logic_vector((64 - 1) downto 0);
  signal d2_1_30: std_logic_vector((64 - 1) downto 0);
  signal d3_1_33: std_logic_vector((64 - 1) downto 0);
  signal d4_1_36: std_logic_vector((64 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((64 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  d2_1_30 <= d2;
  d3_1_33 <= d3;
  d4_1_36 <= d4;
  proc_switch_6_1: process (d0_1_24, d1_1_27, d2_1_30, d3_1_33, d4_1_36, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "000" =>
        unregy_join_6_1 <= d0_1_24;
      when "001" =>
        unregy_join_6_1 <= d1_1_27;
      when "010" =>
        unregy_join_6_1 <= d2_1_30;
      when "011" =>
        unregy_join_6_1 <= d3_1_33;
      when others =>
        unregy_join_6_1 <= d4_1_36;
    end case;
  end process proc_switch_6_1;
  y <= unregy_join_6_1;
end',
      'crippled_entity' => 'is
  port (
    sel : in std_logic_vector((3 - 1) downto 0);
    d0 : in std_logic_vector((64 - 1) downto 0);
    d1 : in std_logic_vector((64 - 1) downto 0);
    d2 : in std_logic_vector((64 - 1) downto 0);
    d3 : in std_logic_vector((64 - 1) downto 0);
    d4 : in std_logic_vector((64 - 1) downto 0);
    y : out std_logic_vector((64 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'mux_ca50268c1f',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c7fa68b14266124c3a32cd5903c20f9d',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlregister.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e1bbab5d2db162b9f1a1a2057b0d7822',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_31: unsigned((20 - 1) downto 0);
  signal b_1_34: unsigned((20 - 1) downto 0);
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_12_3_rel <= a_1_31 = b_1_34;
  op <= boolean_to_vector(result_12_3_rel);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((20 - 1) downto 0);
    b : in std_logic_vector((20 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'relational_987cf0fdd7',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '1c15e43b2cb0e2493cbb9c38d1c14235',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "00";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((2 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_cda50df78a',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Binary_Counter virtex6 Xilinx,_Inc. 11.0',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET ainit_value = 0',
    'CSET ce = true',
    'CSET count_mode = UP',
    'CSET fb_latency = 0',
    'CSET final_count_value = 1',
    'CSET implementation = Fabric',
    'CSET increment_value = 1',
    'CSET latency = 1',
    'CSET load = false',
    'CSET output_width = 3',
    'CSET restrict_count = false',
    'CSET sclr = false',
    'CSET sinit = true',
    'CSET sinit_value = 0',
    'CSET sset = false',
    'CSET sync_ce_priority = Sync_Overrides_CE',
    'CSET sync_threshold_output = false',
    'CSET syncctrlpriority = Reset_Overrides_Set',
    'CSET component_name = cntr_11_0_9469f52619ca1400',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'bb2cdbe746f6c90ddb99f3aaf203ede1',
    'sourceFile' => 'hdl/xlcounter_limit.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)',
      'core_instance_text' => '        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net',
      'core_name0' => 'cntr_11_0_9469f52619ca1400',
      'entityName' => 'xlcounter_limit_he6_cres_correlator',
      'entity_name.0' => 'xlcounter_limit',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Binary_Counter virtex6 Xilinx,_Inc. 11.0',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET ainit_value = 0',
    'CSET ce = true',
    'CSET count_mode = UP',
    'CSET fb_latency = 0',
    'CSET final_count_value = 1',
    'CSET implementation = Fabric',
    'CSET increment_value = 1',
    'CSET latency = 1',
    'CSET load = false',
    'CSET output_width = 13',
    'CSET restrict_count = false',
    'CSET sclr = false',
    'CSET sinit = true',
    'CSET sinit_value = 0',
    'CSET sset = false',
    'CSET sync_ce_priority = Sync_Overrides_CE',
    'CSET sync_threshold_output = false',
    'CSET syncctrlpriority = Reset_Overrides_Set',
    'CSET component_name = cntr_11_0_02525873283338a3',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'efea221b39396c8000f94d79b0b83427',
    'sourceFile' => 'hdl/xlcounter_free.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)',
      'core_instance_text' => '        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net',
      'core_name0' => 'cntr_11_0_02525873283338a3',
      'entityName' => 'xlcounter_free_he6_cres_correlator',
      'entity_name.0' => 'xlcounter_free',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'bf4df6005918823794e1a33a0a56d8da',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "1111111111111";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((13 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_9fe7d9b9af',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '6cf68ed28d04b971d2b8db16d5dc4863',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "0000000000000000000000000000000000000000000000000000000000000000";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((64 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_c4c603edf2',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '13366d021ddc9f5413827bc05cb9e24f',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "1";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_6293007044',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f204abe04f29152d2cfc39e452b72dc7',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "01011111010111100001";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((20 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_faf12c8676',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b2a75e2915ffbfa198be36ff15bbedcf',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_31: unsigned((13 - 1) downto 0);
  signal b_1_34: unsigned((13 - 1) downto 0);
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_12_3_rel <= a_1_31 = b_1_34;
  op <= boolean_to_vector(result_12_3_rel);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((13 - 1) downto 0);
    b : in std_logic_vector((13 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'relational_6dfa374756',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Binary_Counter virtex6 Xilinx,_Inc. 11.0',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET ainit_value = 0',
    'CSET ce = true',
    'CSET count_mode = UP',
    'CSET fb_latency = 0',
    'CSET final_count_value = 1',
    'CSET implementation = Fabric',
    'CSET increment_value = 1',
    'CSET latency = 1',
    'CSET load = false',
    'CSET output_width = 20',
    'CSET restrict_count = false',
    'CSET sclr = false',
    'CSET sinit = true',
    'CSET sinit_value = 0',
    'CSET sset = false',
    'CSET sync_ce_priority = Sync_Overrides_CE',
    'CSET sync_threshold_output = false',
    'CSET syncctrlpriority = Reset_Overrides_Set',
    'CSET component_name = cntr_11_0_1f194baf1a2b1153',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '9138a017bffea2e696b8c6f6c847dc7a',
    'sourceFile' => 'hdl/xlcounter_free.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)',
      'core_instance_text' => '        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net',
      'core_name0' => 'cntr_11_0_1f194baf1a2b1153',
      'entityName' => 'xlcounter_free_he6_cres_correlator',
      'entity_name.0' => 'xlcounter_free',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'efef16d4e9c8b0bd8f714f06baf84edc',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((6 - 1) downto 0);
  signal in1_1_27: unsigned((6 - 1) downto 0);
  signal in2_1_31: unsigned((20 - 1) downto 0);
  signal in3_1_35: unsigned((32 - 1) downto 0);
  signal y_2_1_concat: unsigned((64 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((6 - 1) downto 0);
    in1 : in std_logic_vector((6 - 1) downto 0);
    in2 : in std_logic_vector((20 - 1) downto 0);
    in3 : in std_logic_vector((32 - 1) downto 0);
    y : out std_logic_vector((64 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_f9478c2ca9',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'bf290ef325a9158a3d67c2d8c3d1403c',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((32 - 1) downto 0);
  signal in1_1_27: unsigned((32 - 1) downto 0);
  signal y_2_1_concat: unsigned((64 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((32 - 1) downto 0);
    in1 : in std_logic_vector((32 - 1) downto 0);
    y : out std_logic_vector((64 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_62c4475a80',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '84fc55489e7bdd757008fd4ba5a7bae8',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: boolean;
  signal in1_1_27: unsigned((63 - 1) downto 0);
  signal y_2_1_concat: unsigned((64 - 1) downto 0);
begin
  in0_1_23 <= ((in0) = "1");
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(boolean_to_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((63 - 1) downto 0);
    y : out std_logic_vector((64 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_85fafd34b4',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '5d3c85aab0cce74a81ce217d988e3d4c',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '1983375cf82a738caeeef333de4f1b48',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '1fdbb77f34d3764ea29bd23e1eaaaaa1',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '6139a5cace1703fd133fa3cfb1a5acea',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b4715cd786ff794c20bd78b38d040dea',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((8 - 1) downto 0);
  signal in1_1_27: unsigned((8 - 1) downto 0);
  signal in2_1_31: unsigned((8 - 1) downto 0);
  signal in3_1_35: unsigned((8 - 1) downto 0);
  signal in4_1_39: unsigned((8 - 1) downto 0);
  signal in5_1_43: unsigned((8 - 1) downto 0);
  signal in6_1_47: unsigned((8 - 1) downto 0);
  signal in7_1_51: unsigned((8 - 1) downto 0);
  signal y_2_1_concat: unsigned((64 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  in5_1_43 <= std_logic_vector_to_unsigned(in5);
  in6_1_47 <= std_logic_vector_to_unsigned(in6);
  in7_1_51 <= std_logic_vector_to_unsigned(in7);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39) & unsigned_to_std_logic_vector(in5_1_43) & unsigned_to_std_logic_vector(in6_1_47) & unsigned_to_std_logic_vector(in7_1_51));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((8 - 1) downto 0);
    in1 : in std_logic_vector((8 - 1) downto 0);
    in2 : in std_logic_vector((8 - 1) downto 0);
    in3 : in std_logic_vector((8 - 1) downto 0);
    in4 : in std_logic_vector((8 - 1) downto 0);
    in5 : in std_logic_vector((8 - 1) downto 0);
    in6 : in std_logic_vector((8 - 1) downto 0);
    in7 : in std_logic_vector((8 - 1) downto 0);
    y : out std_logic_vector((64 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_15d98836ad',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '40a1a945129e58bf0eb6a88f152f50ce',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((8 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((8 - 1) downto 0);
    output_port : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_f21e7f2ddf',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c19ca8c1e176e4bce81ca5e3c962a7c8',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((8 - 1) downto 0);
  signal in1_1_27: unsigned((8 - 1) downto 0);
  signal in2_1_31: unsigned((8 - 1) downto 0);
  signal in3_1_35: unsigned((8 - 1) downto 0);
  signal in4_1_39: unsigned((8 - 1) downto 0);
  signal in5_1_43: unsigned((8 - 1) downto 0);
  signal in6_1_47: unsigned((8 - 1) downto 0);
  signal in7_1_51: unsigned((8 - 1) downto 0);
  signal in8_1_55: unsigned((8 - 1) downto 0);
  signal in9_1_59: unsigned((8 - 1) downto 0);
  signal in10_1_63: unsigned((8 - 1) downto 0);
  signal in11_1_68: unsigned((8 - 1) downto 0);
  signal in12_1_73: unsigned((8 - 1) downto 0);
  signal in13_1_78: unsigned((8 - 1) downto 0);
  signal in14_1_83: unsigned((8 - 1) downto 0);
  signal in15_1_88: unsigned((8 - 1) downto 0);
  signal y_2_1_concat: unsigned((128 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  in5_1_43 <= std_logic_vector_to_unsigned(in5);
  in6_1_47 <= std_logic_vector_to_unsigned(in6);
  in7_1_51 <= std_logic_vector_to_unsigned(in7);
  in8_1_55 <= std_logic_vector_to_unsigned(in8);
  in9_1_59 <= std_logic_vector_to_unsigned(in9);
  in10_1_63 <= std_logic_vector_to_unsigned(in10);
  in11_1_68 <= std_logic_vector_to_unsigned(in11);
  in12_1_73 <= std_logic_vector_to_unsigned(in12);
  in13_1_78 <= std_logic_vector_to_unsigned(in13);
  in14_1_83 <= std_logic_vector_to_unsigned(in14);
  in15_1_88 <= std_logic_vector_to_unsigned(in15);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39) & unsigned_to_std_logic_vector(in5_1_43) & unsigned_to_std_logic_vector(in6_1_47) & unsigned_to_std_logic_vector(in7_1_51) & unsigned_to_std_logic_vector(in8_1_55) & unsigned_to_std_logic_vector(in9_1_59) & unsigned_to_std_logic_vector(in10_1_63) & unsigned_to_std_logic_vector(in11_1_68) & unsigned_to_std_logic_vector(in12_1_73) & unsigned_to_std_logic_vector(in13_1_78) & unsigned_to_std_logic_vector(in14_1_83) & unsigned_to_std_logic_vector(in15_1_88));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((8 - 1) downto 0);
    in1 : in std_logic_vector((8 - 1) downto 0);
    in2 : in std_logic_vector((8 - 1) downto 0);
    in3 : in std_logic_vector((8 - 1) downto 0);
    in4 : in std_logic_vector((8 - 1) downto 0);
    in5 : in std_logic_vector((8 - 1) downto 0);
    in6 : in std_logic_vector((8 - 1) downto 0);
    in7 : in std_logic_vector((8 - 1) downto 0);
    in8 : in std_logic_vector((8 - 1) downto 0);
    in9 : in std_logic_vector((8 - 1) downto 0);
    in10 : in std_logic_vector((8 - 1) downto 0);
    in11 : in std_logic_vector((8 - 1) downto 0);
    in12 : in std_logic_vector((8 - 1) downto 0);
    in13 : in std_logic_vector((8 - 1) downto 0);
    in14 : in std_logic_vector((8 - 1) downto 0);
    in15 : in std_logic_vector((8 - 1) downto 0);
    y : out std_logic_vector((128 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_96b2f1cb93',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '57f1496f368ca03c45ad4e2bae591da4',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: signed((8 - 1) downto 0);
  signal output_port_5_5_force: unsigned((8 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_signed(input_port);
  output_port_5_5_force <= signed_to_unsigned(input_port_1_40);
  output_port <= unsigned_to_std_logic_vector(output_port_5_5_force);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((8 - 1) downto 0);
    output_port : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_d51df7ac30',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '7278cc6d2681503b42f7a4b4201bd1f5',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((18 - 1) downto 0);
  signal output_port_5_5_force: signed((18 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port_5_5_force <= unsigned_to_signed(input_port_1_40);
  output_port <= signed_to_std_logic_vector(output_port_5_5_force);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((18 - 1) downto 0);
    output_port : out std_logic_vector((18 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_9a0fa0f632',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '517e580171817efc6d024a11bdc1ad40',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '3d795031bf0504d660799b2c31242711',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '286e11e0b3341e3ba2b8455c43bb3c52',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((7 - 1) downto 0);
  signal y_2_1_concat: unsigned((8 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((7 - 1) downto 0);
    y : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_83e473517e',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c57ea3080e26b91e8e84b240574965e7',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal ip_1_26: unsigned((1 - 1) downto 0);
  type array_type_op_mem_22_20 is array (0 to (1 - 1)) of unsigned((1 - 1) downto 0);
  signal op_mem_22_20: array_type_op_mem_22_20 := (
    0 => "0");
  signal op_mem_22_20_front_din: unsigned((1 - 1) downto 0);
  signal op_mem_22_20_back: unsigned((1 - 1) downto 0);
  signal op_mem_22_20_push_front_pop_back_en: std_logic;
  signal internal_ip_12_1_bitnot: unsigned((1 - 1) downto 0);
begin
  ip_1_26 <= std_logic_vector_to_unsigned(ip);
  op_mem_22_20_back <= op_mem_22_20(0);
  proc_op_mem_22_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_22_20_push_front_pop_back_en = \'1\')) then
        op_mem_22_20(0) <= op_mem_22_20_front_din;
      end if;
    end if;
  end process proc_op_mem_22_20;
  internal_ip_12_1_bitnot <= std_logic_vector_to_unsigned(not unsigned_to_std_logic_vector(ip_1_26));
  op_mem_22_20_push_front_pop_back_en <= \'0\';
  op <= unsigned_to_std_logic_vector(internal_ip_12_1_bitnot);
end',
      'crippled_entity' => 'is
  port (
    ip : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'inverter_e2b989a05e',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f8bcc339ab1dd4d8c279cce5e794b5e3',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((8 - 1) downto 0);
  signal output_port_5_5_force: signed((8 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port_5_5_force <= unsigned_to_signed(input_port_1_40);
  output_port <= signed_to_std_logic_vector(output_port_5_5_force);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((8 - 1) downto 0);
    output_port : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_4389dc89bf',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c198ac020f1a64e07fa0f60d59dc73e3',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a14388b2516cfe5081a8b8b3633210a5',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e0ab518cf84980b84a9cb9ab5e4f252a',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_31: unsigned((28 - 1) downto 0);
  signal b_1_34: unsigned((28 - 1) downto 0);
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_12_3_rel <= a_1_31 = b_1_34;
  op <= boolean_to_vector(result_12_3_rel);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((28 - 1) downto 0);
    b : in std_logic_vector((28 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'relational_1ea7543d62',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '2149adfb7a08954f2fd022f3811419f2',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '1bf3dcf9a3aeee3c990d3b2b4a6f43c6',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c867a224ccb990c23c4279470e1d6ed1',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "1011111010111100000111111111";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((28 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_ea8b768d21',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Binary_Counter virtex6 Xilinx,_Inc. 11.0',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET ainit_value = 0',
    'CSET ce = true',
    'CSET count_mode = UP',
    'CSET fb_latency = 0',
    'CSET final_count_value = 1',
    'CSET implementation = Fabric',
    'CSET increment_value = 1',
    'CSET latency = 1',
    'CSET load = false',
    'CSET output_width = 28',
    'CSET restrict_count = false',
    'CSET sclr = false',
    'CSET sinit = true',
    'CSET sinit_value = 0',
    'CSET sset = false',
    'CSET sync_ce_priority = Sync_Overrides_CE',
    'CSET sync_threshold_output = false',
    'CSET syncctrlpriority = Reset_Overrides_Set',
    'CSET component_name = cntr_11_0_83c605fb3376e4cf',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '90dfb1039ffebbf6601d520b51d5b5ac',
    'sourceFile' => 'hdl/xlcounter_free.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)',
      'core_instance_text' => '        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net',
      'core_name0' => 'cntr_11_0_83c605fb3376e4cf',
      'entityName' => 'xlcounter_free_he6_cres_correlator',
      'entity_name.0' => 'xlcounter_free',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Binary_Counter virtex6 Xilinx,_Inc. 11.0',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET ainit_value = 0',
    'CSET ce = true',
    'CSET count_mode = UP',
    'CSET fb_latency = 0',
    'CSET final_count_value = 1',
    'CSET implementation = Fabric',
    'CSET increment_value = 1',
    'CSET latency = 1',
    'CSET load = false',
    'CSET output_width = 32',
    'CSET restrict_count = false',
    'CSET sclr = false',
    'CSET sinit = true',
    'CSET sinit_value = 0',
    'CSET sset = false',
    'CSET sync_ce_priority = Sync_Overrides_CE',
    'CSET sync_threshold_output = false',
    'CSET syncctrlpriority = Reset_Overrides_Set',
    'CSET component_name = cntr_11_0_8513360a51c30657',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '1346052cd98cf1ff6801cefba01dab4e',
    'sourceFile' => 'hdl/xlcounter_free.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)',
      'core_instance_text' => '        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net',
      'core_name0' => 'cntr_11_0_8513360a51c30657',
      'entityName' => 'xlcounter_free_he6_cres_correlator',
      'entity_name.0' => 'xlcounter_free',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Adder_Subtracter virtex6 Xilinx,_Inc. 11.0',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET AINIT_Value = 0',
    'CSET A_Type = Unsigned',
    'CSET A_Width = 33',
    'CSET Add_Mode = Add',
    'CSET B_Constant = false',
    'CSET B_Type = Unsigned',
    'CSET B_Value = 0',
    'CSET B_Width = 33',
    'CSET Borrow_Sense = Active_Low',
    'CSET Bypass = false',
    'CSET Bypass_CE_Priority = Bypass_Overrides_CE',
    'CSET Bypass_Sense = Active_Low',
    'CSET CE = false',
    'CSET C_In = false',
    'CSET C_Out = false',
    'CSET Implementation = Fabric',
    'CSET Latency = 0',
    'CSET Out_Width = 33',
    'CSET SCLR = false',
    'CSET SINIT = false',
    'CSET SINIT_Value = 0',
    'CSET SSET = false',
    'CSET Sync_CE_Priority = Sync_Overrides_CE',
    'CSET Sync_Ctrl_Priority = Reset_Overrides_Set',
    'CSET component_name = addsb_11_0_1366619f9bb096bd',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c9b69e9685aeba9a527a5d5c6ffe8b4b',
    'sourceFile' => 'hdl/xladdsub.vhd',
    'templateKeyValues' => {
      'core_component_def' => '    a: in std_logic_vector(33 - 1 downto 0);
    s: out std_logic_vector(c_output_width - 1 downto 0);
    b: in std_logic_vector(33 - 1 downto 0)',
      'core_instance_text' => '         a => full_a,
         s => core_s,
         b => full_b',
      'core_name0' => 'addsb_11_0_1366619f9bb096bd',
      'entityName' => 'xladdsub_he6_cres_correlator',
      'entity_name.0' => 'xladdsub',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'bb4b07126e44f4ac2f26949d304d15bc',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlregister.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'da9c9023cab3c5ff56efc339c78c44e4',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal count_reg_20_23: unsigned((9 - 1) downto 0) := "000000000";
  signal count_reg_20_23_rst: std_logic;
  signal rel_34_8: boolean;
  signal rst_limit_join_34_5: boolean;
  signal bool_44_4: boolean;
  signal count_reg_join_44_1: unsigned((10 - 1) downto 0);
  signal count_reg_join_44_1_rst: std_logic;
  signal rst_limit_join_44_1: boolean;
begin
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (count_reg_20_23_rst = \'1\')) then
        count_reg_20_23 <= "000000000";
      elsif (ce = \'1\') then 
        count_reg_20_23 <= count_reg_20_23 + std_logic_vector_to_unsigned("000000001");
      end if;
    end if;
  end process proc_count_reg_20_23;
  rel_34_8 <= count_reg_20_23 = std_logic_vector_to_unsigned("111111100");
  proc_if_34_5: process (rel_34_8)
  is
  begin
    if rel_34_8 then
      rst_limit_join_34_5 <= true;
    else 
      rst_limit_join_34_5 <= false;
    end if;
  end process proc_if_34_5;
  bool_44_4 <= false or rst_limit_join_34_5;
  proc_if_44_1: process (bool_44_4, count_reg_20_23, rst_limit_join_34_5)
  is
  begin
    if bool_44_4 then
      count_reg_join_44_1_rst <= \'1\';
    else 
      count_reg_join_44_1_rst <= \'0\';
    end if;
    if bool_44_4 then
      rst_limit_join_44_1 <= false;
    else 
      rst_limit_join_44_1 <= rst_limit_join_34_5;
    end if;
  end process proc_if_44_1;
  count_reg_20_23_rst <= count_reg_join_44_1_rst;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((9 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'counter_b8dbc870dd',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_RAM',
    'CSET operating_mode_a = READ_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 144',
    'CSET read_width_b = 144',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 512',
    'CSET write_width_a = 144',
    'CSET write_width_b = 144',
    'CSET component_name = bmg_72_b0a9af5037d5163a',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '1cf77e2b2ffe562df9282dcd9e6f25fc',
    'sourceFile' => 'hdl/xlspram.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      dina: in std_logic_vector(c_width - 1 downto 0);
      wea: in std_logic_vector(0 downto 0);
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => addr,
        clka => clk,
        dina => data_in,
        wea(0) => core_we,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_b0a9af5037d5163a',
      'entityName' => 'xlspram_he6_cres_correlator',
      'entity_name.0' => 'xlspram',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b84e31b4b6fe5200715beff5b3af9088',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b5cb0df599e8274b6f50bd1db40ec010',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd50ef65aa023a4e5bfb8e8b5d2ac20d7',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '3450375f33c55716882f2178c7e1df8b',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '28ec852c26bfed6f53565c5702c94d6d',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((19 - 1) downto 0);
  signal in1_1_27: unsigned((19 - 1) downto 0);
  signal in2_1_31: unsigned((19 - 1) downto 0);
  signal in3_1_35: unsigned((19 - 1) downto 0);
  signal y_2_1_concat: unsigned((76 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((19 - 1) downto 0);
    in1 : in std_logic_vector((19 - 1) downto 0);
    in2 : in std_logic_vector((19 - 1) downto 0);
    in3 : in std_logic_vector((19 - 1) downto 0);
    y : out std_logic_vector((76 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_2aea51ccde',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'cc9ebeab8a93c50de8297b6e7312881b',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: signed((19 - 1) downto 0);
  signal output_port_5_5_force: unsigned((19 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_signed(input_port);
  output_port_5_5_force <= signed_to_unsigned(input_port_1_40);
  output_port <= unsigned_to_std_logic_vector(output_port_5_5_force);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((19 - 1) downto 0);
    output_port : out std_logic_vector((19 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_bc4405cd1e',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Adder_Subtracter virtex6 Xilinx,_Inc. 11.0',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET AINIT_Value = 0',
    'CSET A_Type = Signed',
    'CSET A_Width = 19',
    'CSET Add_Mode = Add',
    'CSET B_Constant = false',
    'CSET B_Type = Signed',
    'CSET B_Value = 0',
    'CSET B_Width = 19',
    'CSET Borrow_Sense = Active_Low',
    'CSET Bypass = false',
    'CSET Bypass_CE_Priority = Bypass_Overrides_CE',
    'CSET Bypass_Sense = Active_Low',
    'CSET CE = true',
    'CSET C_In = false',
    'CSET C_Out = false',
    'CSET Implementation = Fabric',
    'CSET Latency = 1',
    'CSET Out_Width = 19',
    'CSET SCLR = false',
    'CSET SINIT = false',
    'CSET SINIT_Value = 0',
    'CSET SSET = false',
    'CSET Sync_CE_Priority = Sync_Overrides_CE',
    'CSET Sync_Ctrl_Priority = Reset_Overrides_Set',
    'CSET component_name = addsb_11_0_8610f827d96057ce',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '59a038530593248c8f34ab53655537e1',
    'sourceFile' => 'hdl/xladdsub.vhd',
    'templateKeyValues' => {
      'core_component_def' => '    a: in std_logic_vector(19 - 1 downto 0);
    clk: in std_logic:= \'0\';
    ce: in std_logic:= \'0\';
    s: out std_logic_vector(c_output_width - 1 downto 0);
    b: in std_logic_vector(19 - 1 downto 0)',
      'core_instance_text' => '         a => full_a,
         clk => clk,
         ce => internal_ce,
         s => core_s,
         b => full_b',
      'core_name0' => 'addsb_11_0_8610f827d96057ce',
      'entityName' => 'xladdsub_he6_cres_correlator',
      'entity_name.0' => 'xladdsub',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '631cd4bf08953c6ad7cfb350d9752aea',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((18 - 1) downto 0);
  signal in1_1_27: unsigned((18 - 1) downto 0);
  signal in2_1_31: unsigned((18 - 1) downto 0);
  signal in3_1_35: unsigned((18 - 1) downto 0);
  signal in4_1_39: unsigned((18 - 1) downto 0);
  signal in5_1_43: unsigned((18 - 1) downto 0);
  signal in6_1_47: unsigned((18 - 1) downto 0);
  signal in7_1_51: unsigned((18 - 1) downto 0);
  signal in8_1_55: unsigned((18 - 1) downto 0);
  signal in9_1_59: unsigned((18 - 1) downto 0);
  signal in10_1_63: unsigned((18 - 1) downto 0);
  signal in11_1_68: unsigned((18 - 1) downto 0);
  signal in12_1_73: unsigned((18 - 1) downto 0);
  signal in13_1_78: unsigned((18 - 1) downto 0);
  signal in14_1_83: unsigned((18 - 1) downto 0);
  signal in15_1_88: unsigned((18 - 1) downto 0);
  signal y_2_1_concat: unsigned((288 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  in5_1_43 <= std_logic_vector_to_unsigned(in5);
  in6_1_47 <= std_logic_vector_to_unsigned(in6);
  in7_1_51 <= std_logic_vector_to_unsigned(in7);
  in8_1_55 <= std_logic_vector_to_unsigned(in8);
  in9_1_59 <= std_logic_vector_to_unsigned(in9);
  in10_1_63 <= std_logic_vector_to_unsigned(in10);
  in11_1_68 <= std_logic_vector_to_unsigned(in11);
  in12_1_73 <= std_logic_vector_to_unsigned(in12);
  in13_1_78 <= std_logic_vector_to_unsigned(in13);
  in14_1_83 <= std_logic_vector_to_unsigned(in14);
  in15_1_88 <= std_logic_vector_to_unsigned(in15);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39) & unsigned_to_std_logic_vector(in5_1_43) & unsigned_to_std_logic_vector(in6_1_47) & unsigned_to_std_logic_vector(in7_1_51) & unsigned_to_std_logic_vector(in8_1_55) & unsigned_to_std_logic_vector(in9_1_59) & unsigned_to_std_logic_vector(in10_1_63) & unsigned_to_std_logic_vector(in11_1_68) & unsigned_to_std_logic_vector(in12_1_73) & unsigned_to_std_logic_vector(in13_1_78) & unsigned_to_std_logic_vector(in14_1_83) & unsigned_to_std_logic_vector(in15_1_88));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((18 - 1) downto 0);
    in1 : in std_logic_vector((18 - 1) downto 0);
    in2 : in std_logic_vector((18 - 1) downto 0);
    in3 : in std_logic_vector((18 - 1) downto 0);
    in4 : in std_logic_vector((18 - 1) downto 0);
    in5 : in std_logic_vector((18 - 1) downto 0);
    in6 : in std_logic_vector((18 - 1) downto 0);
    in7 : in std_logic_vector((18 - 1) downto 0);
    in8 : in std_logic_vector((18 - 1) downto 0);
    in9 : in std_logic_vector((18 - 1) downto 0);
    in10 : in std_logic_vector((18 - 1) downto 0);
    in11 : in std_logic_vector((18 - 1) downto 0);
    in12 : in std_logic_vector((18 - 1) downto 0);
    in13 : in std_logic_vector((18 - 1) downto 0);
    in14 : in std_logic_vector((18 - 1) downto 0);
    in15 : in std_logic_vector((18 - 1) downto 0);
    y : out std_logic_vector((288 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_99bf614bfc',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '6c5ae4ed7a90830b07c3ff2596ce4fc5',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: signed((18 - 1) downto 0);
  signal output_port_5_5_force: unsigned((18 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_signed(input_port);
  output_port_5_5_force <= signed_to_unsigned(input_port_1_40);
  output_port <= unsigned_to_std_logic_vector(output_port_5_5_force);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((18 - 1) downto 0);
    output_port : out std_logic_vector((18 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_580feec131',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '341b5632def2410570f7b52c8ebdee32',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((19 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((20 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((19 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((20 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_504cae28bd',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Adder_Subtracter virtex6 Xilinx,_Inc. 11.0',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET AINIT_Value = 0',
    'CSET A_Type = Signed',
    'CSET A_Width = 21',
    'CSET Add_Mode = Add',
    'CSET B_Constant = false',
    'CSET B_Type = Signed',
    'CSET B_Value = 0',
    'CSET B_Width = 21',
    'CSET Borrow_Sense = Active_Low',
    'CSET Bypass = false',
    'CSET Bypass_CE_Priority = Bypass_Overrides_CE',
    'CSET Bypass_Sense = Active_Low',
    'CSET CE = true',
    'CSET C_In = false',
    'CSET C_Out = false',
    'CSET Implementation = Fabric',
    'CSET Latency = 2',
    'CSET Out_Width = 21',
    'CSET SCLR = false',
    'CSET SINIT = false',
    'CSET SINIT_Value = 0',
    'CSET SSET = false',
    'CSET Sync_CE_Priority = Sync_Overrides_CE',
    'CSET Sync_Ctrl_Priority = Reset_Overrides_Set',
    'CSET component_name = addsb_11_0_227723d8114e1014',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'dd8de231fa08cffafebb23fa7c687222',
    'sourceFile' => 'hdl/xladdsub.vhd',
    'templateKeyValues' => {
      'core_component_def' => '    a: in std_logic_vector(21 - 1 downto 0);
    clk: in std_logic:= \'0\';
    ce: in std_logic:= \'0\';
    s: out std_logic_vector(c_output_width - 1 downto 0);
    b: in std_logic_vector(21 - 1 downto 0)',
      'core_instance_text' => '         a => full_a,
         clk => clk,
         ce => internal_ce,
         s => core_s,
         b => full_b',
      'core_name0' => 'addsb_11_0_227723d8114e1014',
      'entityName' => 'xladdsub_he6_cres_correlator',
      'entity_name.0' => 'xladdsub',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '4e5ef021c199111e8c4536f3ac1de1ef',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "0000000000000000001";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((19 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_4709ea49b5',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ef89c6b3ce8c5a3f0191ef6ca85f2409',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'bce1547d7b08e4bb34f2a841f4ab921f',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((20 - 1) downto 0);
  signal output_port_5_5_force: signed((20 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port_5_5_force <= unsigned_to_signed(input_port_1_40);
  output_port <= signed_to_std_logic_vector(output_port_5_5_force);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((20 - 1) downto 0);
    output_port : out std_logic_vector((20 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_f661f8d9b7',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '6531fc5dc936d23c947bd517d32fa9f2',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((19 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((19 - 1) downto 0);
    output_port : out std_logic_vector((19 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_d2180c9169',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '9d8fb65ef5d0bd11d018ca31310b0297',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d0_1_24: std_logic_vector((1 - 1) downto 0);
  signal d1_1_27: std_logic_vector((1 - 1) downto 0);
  signal fully_2_1_bit: std_logic_vector((1 - 1) downto 0);
begin
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  fully_2_1_bit <= d0_1_24 and d1_1_27;
  y <= fully_2_1_bit;
end',
      'crippled_entity' => 'is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'logical_938d99ac11',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '2eb84ff698244fc551a8f5460673f212',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((19 - 1) downto 0);
  signal output_port_5_5_force: signed((19 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port_5_5_force <= unsigned_to_signed(input_port_1_40);
  output_port <= signed_to_std_logic_vector(output_port_5_5_force);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((19 - 1) downto 0);
    output_port : out std_logic_vector((19 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_63700884f5',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a8c84fdaf0c9cfbf279f6884101fbc12',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '423e2ca1e6599dcbffb39228079b4f7e',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '9d579138346a2db0e4907dc9039bc666',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b192f39a7624bd0fb9e85188236da382',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b28698671bd06f26adbd551794f3fbba',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'dbcd26f2bb1b523b8652d07f097a2138',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '93a03beb8648cad02cc7ba85fe59c5e1',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f67d0062981022bb2188bba718d84857',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '898c346ee76fc3b8bcd6e5a725eaa68e',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '6158c737e0e4b355335dc151e833a044',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f8f605cdcd99d1a8d5a3f124dce7f38e',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'bf9b5cc80737f8c7d494e704c8141f62',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '0d66356392c7cc185812caf2635bbd2d',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '6744c563cc1b81934296ffecd24ce02e',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '3dbacd232ae827ead4fa079c99bcb3df',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e05524db8a1e8615f885f86edccf2537',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b581a89774c57a4f4537d53c2fc90663',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((72 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((72 - 1) downto 0);
    output_port : out std_logic_vector((72 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_8b4279cdc5',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '2c68a976beacc17ffea71a270e217e9d',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '39a575d6ffd94bed09ce7b1545ed0122',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'bb3fbc16d294d46828b0a2914818d95b',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '212e1a3f0e3f9ee7e88d1c0c09c6026e',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '8521677517d4f7a6f2f9548245e11f17',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'bd2ac5e6b651ebd3d1a7198a41f90a42',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '3432f76a0b68f58dd00caac8e3ecd198',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((19 - 1) downto 0);
  signal in1_1_27: unsigned((19 - 1) downto 0);
  signal in2_1_31: unsigned((19 - 1) downto 0);
  signal in3_1_35: unsigned((19 - 1) downto 0);
  signal in4_1_39: unsigned((19 - 1) downto 0);
  signal in5_1_43: unsigned((19 - 1) downto 0);
  signal in6_1_47: unsigned((19 - 1) downto 0);
  signal in7_1_51: unsigned((19 - 1) downto 0);
  signal in8_1_55: unsigned((19 - 1) downto 0);
  signal in9_1_59: unsigned((19 - 1) downto 0);
  signal in10_1_63: unsigned((19 - 1) downto 0);
  signal in11_1_68: unsigned((19 - 1) downto 0);
  signal in12_1_73: unsigned((19 - 1) downto 0);
  signal in13_1_78: unsigned((19 - 1) downto 0);
  signal in14_1_83: unsigned((19 - 1) downto 0);
  signal in15_1_88: unsigned((19 - 1) downto 0);
  signal y_2_1_concat: unsigned((304 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  in5_1_43 <= std_logic_vector_to_unsigned(in5);
  in6_1_47 <= std_logic_vector_to_unsigned(in6);
  in7_1_51 <= std_logic_vector_to_unsigned(in7);
  in8_1_55 <= std_logic_vector_to_unsigned(in8);
  in9_1_59 <= std_logic_vector_to_unsigned(in9);
  in10_1_63 <= std_logic_vector_to_unsigned(in10);
  in11_1_68 <= std_logic_vector_to_unsigned(in11);
  in12_1_73 <= std_logic_vector_to_unsigned(in12);
  in13_1_78 <= std_logic_vector_to_unsigned(in13);
  in14_1_83 <= std_logic_vector_to_unsigned(in14);
  in15_1_88 <= std_logic_vector_to_unsigned(in15);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39) & unsigned_to_std_logic_vector(in5_1_43) & unsigned_to_std_logic_vector(in6_1_47) & unsigned_to_std_logic_vector(in7_1_51) & unsigned_to_std_logic_vector(in8_1_55) & unsigned_to_std_logic_vector(in9_1_59) & unsigned_to_std_logic_vector(in10_1_63) & unsigned_to_std_logic_vector(in11_1_68) & unsigned_to_std_logic_vector(in12_1_73) & unsigned_to_std_logic_vector(in13_1_78) & unsigned_to_std_logic_vector(in14_1_83) & unsigned_to_std_logic_vector(in15_1_88));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((19 - 1) downto 0);
    in1 : in std_logic_vector((19 - 1) downto 0);
    in2 : in std_logic_vector((19 - 1) downto 0);
    in3 : in std_logic_vector((19 - 1) downto 0);
    in4 : in std_logic_vector((19 - 1) downto 0);
    in5 : in std_logic_vector((19 - 1) downto 0);
    in6 : in std_logic_vector((19 - 1) downto 0);
    in7 : in std_logic_vector((19 - 1) downto 0);
    in8 : in std_logic_vector((19 - 1) downto 0);
    in9 : in std_logic_vector((19 - 1) downto 0);
    in10 : in std_logic_vector((19 - 1) downto 0);
    in11 : in std_logic_vector((19 - 1) downto 0);
    in12 : in std_logic_vector((19 - 1) downto 0);
    in13 : in std_logic_vector((19 - 1) downto 0);
    in14 : in std_logic_vector((19 - 1) downto 0);
    in15 : in std_logic_vector((19 - 1) downto 0);
    y : out std_logic_vector((304 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_b117ea6d19',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '1899a3cb359c4a6df2e0f1f184ab3d7c',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal ip_17_23: signed((19 - 1) downto 0);
begin
  ip_17_23 <= std_logic_vector_to_signed(ip);
  op <= signed_to_std_logic_vector(ip_17_23);
end',
      'crippled_entity' => 'is
  port (
    ip : in std_logic_vector((19 - 1) downto 0);
    op : out std_logic_vector((19 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'scale_9f61027ba4',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b9eb8e2f1cc5bd53d5549b0ab1a15dde',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((18 - 1) downto 0);
  signal in1_1_27: unsigned((18 - 1) downto 0);
  signal in2_1_31: unsigned((18 - 1) downto 0);
  signal in3_1_35: unsigned((18 - 1) downto 0);
  signal in4_1_39: unsigned((18 - 1) downto 0);
  signal in5_1_43: unsigned((18 - 1) downto 0);
  signal in6_1_47: unsigned((18 - 1) downto 0);
  signal in7_1_51: unsigned((18 - 1) downto 0);
  signal y_2_1_concat: unsigned((144 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  in5_1_43 <= std_logic_vector_to_unsigned(in5);
  in6_1_47 <= std_logic_vector_to_unsigned(in6);
  in7_1_51 <= std_logic_vector_to_unsigned(in7);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39) & unsigned_to_std_logic_vector(in5_1_43) & unsigned_to_std_logic_vector(in6_1_47) & unsigned_to_std_logic_vector(in7_1_51));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((18 - 1) downto 0);
    in1 : in std_logic_vector((18 - 1) downto 0);
    in2 : in std_logic_vector((18 - 1) downto 0);
    in3 : in std_logic_vector((18 - 1) downto 0);
    in4 : in std_logic_vector((18 - 1) downto 0);
    in5 : in std_logic_vector((18 - 1) downto 0);
    in6 : in std_logic_vector((18 - 1) downto 0);
    in7 : in std_logic_vector((18 - 1) downto 0);
    y : out std_logic_vector((144 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_341bdeba15',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'fd8687f023e15f94417b7428731f3a71',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((18 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((18 - 1) downto 0);
    output_port : out std_logic_vector((18 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_9306b5127f',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '1e5aaf7d9f232a0c31fdb6df4fef1e64',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e43541f61033d159ab29e75968b74811',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '595e40037b374378a51bad2e032049c9',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '17c2deb00ee9c8ea0ce8a0fa81fd274e',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'be1b1b7bac7e6ccf706bfe55f24381b2',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '3f03acc53de3e96341b94bd1b1ac9ed0',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '998c6c1e9ac3dfd62bf23aec7bad31ec',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e699e73bf61e090a06553d8c17c792fe',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a8367d794b804715a11c85474c6300d8',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((144 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((144 - 1) downto 0);
    output_port : out std_logic_vector((144 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_d35711d5ec',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '704d2b1dbc7dd57107fdb7141d7e96df',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((72 - 1) downto 0);
  signal in1_1_27: unsigned((72 - 1) downto 0);
  signal y_2_1_concat: unsigned((144 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((72 - 1) downto 0);
    in1 : in std_logic_vector((72 - 1) downto 0);
    y : out std_logic_vector((144 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_364e99894a',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Adder_Subtracter virtex6 Xilinx,_Inc. 11.0',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET AINIT_Value = 0',
    'CSET A_Type = Signed',
    'CSET A_Width = 19',
    'CSET Add_Mode = Subtract',
    'CSET B_Constant = false',
    'CSET B_Type = Signed',
    'CSET B_Value = 0',
    'CSET B_Width = 19',
    'CSET Borrow_Sense = Active_Low',
    'CSET Bypass = false',
    'CSET Bypass_CE_Priority = Bypass_Overrides_CE',
    'CSET Bypass_Sense = Active_Low',
    'CSET CE = true',
    'CSET C_In = false',
    'CSET C_Out = false',
    'CSET Implementation = Fabric',
    'CSET Latency = 1',
    'CSET Out_Width = 19',
    'CSET SCLR = false',
    'CSET SINIT = false',
    'CSET SINIT_Value = 0',
    'CSET SSET = false',
    'CSET Sync_CE_Priority = Sync_Overrides_CE',
    'CSET Sync_Ctrl_Priority = Reset_Overrides_Set',
    'CSET component_name = addsb_11_0_88a3fd223f485e8a',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b004c425e2eb5150b38bcc4a1929af7d',
    'sourceFile' => 'hdl/xladdsub.vhd',
    'templateKeyValues' => {
      'core_component_def' => '    a: in std_logic_vector(19 - 1 downto 0);
    clk: in std_logic:= \'0\';
    ce: in std_logic:= \'0\';
    s: out std_logic_vector(c_output_width - 1 downto 0);
    b: in std_logic_vector(19 - 1 downto 0)',
      'core_instance_text' => '         a => full_a,
         clk => clk,
         ce => internal_ce,
         s => core_s,
         b => full_b',
      'core_name0' => 'addsb_11_0_88a3fd223f485e8a',
      'entityName' => 'xladdsub_he6_cres_correlator',
      'entity_name.0' => 'xladdsub',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b1af509874bb043f62c5c18290560aa7',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((76 - 1) downto 0);
  signal in1_1_27: unsigned((76 - 1) downto 0);
  signal in2_1_31: unsigned((76 - 1) downto 0);
  signal in3_1_35: unsigned((76 - 1) downto 0);
  signal y_2_1_concat: unsigned((304 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((76 - 1) downto 0);
    in1 : in std_logic_vector((76 - 1) downto 0);
    in2 : in std_logic_vector((76 - 1) downto 0);
    in3 : in std_logic_vector((76 - 1) downto 0);
    y : out std_logic_vector((304 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_80d9132ef6',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '65587d6f5e17dd6c6d12ea691beadc71',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((18 - 1) downto 0);
  signal in1_1_27: unsigned((18 - 1) downto 0);
  signal in2_1_31: unsigned((18 - 1) downto 0);
  signal in3_1_35: unsigned((18 - 1) downto 0);
  signal y_2_1_concat: unsigned((72 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((18 - 1) downto 0);
    in1 : in std_logic_vector((18 - 1) downto 0);
    in2 : in std_logic_vector((18 - 1) downto 0);
    in3 : in std_logic_vector((18 - 1) downto 0);
    y : out std_logic_vector((72 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_a246e373e7',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a9992314f67b05f75e842b8ed20262ed',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal ip_18_25: signed((18 - 1) downto 0);
  type array_type_op_mem_48_20 is array (0 to (1 - 1)) of signed((18 - 1) downto 0);
  signal op_mem_48_20: array_type_op_mem_48_20 := (
    0 => "000000000000000000");
  signal op_mem_48_20_front_din: signed((18 - 1) downto 0);
  signal op_mem_48_20_back: signed((18 - 1) downto 0);
  signal op_mem_48_20_push_front_pop_back_en: std_logic;
  signal cast_35_24: signed((19 - 1) downto 0);
  signal internal_ip_35_9_neg: signed((19 - 1) downto 0);
  signal internal_ip_join_30_1: signed((19 - 1) downto 0);
  signal cast_internal_ip_40_3_convert: signed((18 - 1) downto 0);
begin
  ip_18_25 <= std_logic_vector_to_signed(ip);
  op_mem_48_20_back <= op_mem_48_20(0);
  proc_op_mem_48_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_48_20_push_front_pop_back_en = \'1\')) then
        op_mem_48_20(0) <= op_mem_48_20_front_din;
      end if;
    end if;
  end process proc_op_mem_48_20;
  cast_35_24 <= s2s_cast(ip_18_25, 17, 19, 17);
  internal_ip_35_9_neg <=  -cast_35_24;
  proc_if_30_1: process (internal_ip_35_9_neg)
  is
  begin
    if false then
      internal_ip_join_30_1 <= std_logic_vector_to_signed("0000000000000000000");
    else 
      internal_ip_join_30_1 <= internal_ip_35_9_neg;
    end if;
  end process proc_if_30_1;
  cast_internal_ip_40_3_convert <= s2s_cast(internal_ip_join_30_1, 17, 18, 17);
  op_mem_48_20_push_front_pop_back_en <= \'0\';
  op <= signed_to_std_logic_vector(cast_internal_ip_40_3_convert);
end',
      'crippled_entity' => 'is
  port (
    ip : in std_logic_vector((18 - 1) downto 0);
    op : out std_logic_vector((18 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'negate_f983e30a8b',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f8d6b725fd0e481d6909d4092d001a97',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((72 - 1) downto 0);
begin
  d_1_22 <= d;
  q <= d_1_22;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((72 - 1) downto 0);
    q : out std_logic_vector((72 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_e1a1e37324',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f929c29933662587fe826c0bd9f59626',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((36 - 1) downto 0);
  signal in1_1_27: unsigned((36 - 1) downto 0);
  signal in2_1_31: unsigned((36 - 1) downto 0);
  signal in3_1_35: unsigned((36 - 1) downto 0);
  signal y_2_1_concat: unsigned((144 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((36 - 1) downto 0);
    in1 : in std_logic_vector((36 - 1) downto 0);
    in2 : in std_logic_vector((36 - 1) downto 0);
    in3 : in std_logic_vector((36 - 1) downto 0);
    y : out std_logic_vector((144 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_bbc53d9757',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c1edfa89b38f6059de7d9eb46739e84a',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((36 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((36 - 1) downto 0);
    output_port : out std_logic_vector((36 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_86b044698f',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '2ba8369486f6c04c7d935b319c32b2f9',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '38feb4e185d26e6c4cbff6840b5af153',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '890c17c878ee1e458798ba5b286c4074',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '94c5b1478295cdd5f8fd44f5c1d57faf',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b5f3f65fcf330476f8c4d5a918350d13',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((1 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((1 - 1) downto 0);
    output_port : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_81130c7f2d',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '8e81239646db2a996f1344e90c3c1b46',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '0624b780a1e02c29ccd3ea282ba7f821',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c6e6373112fbe0a419cd2f07353b3dd6',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '330c6610ca752c69c25ea73e3540df8c',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'cb840e412e429ef1dc4193d23739cbd7',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal sel_1_20: std_logic_vector((1 - 1) downto 0);
  signal d0_1_24: std_logic_vector((36 - 1) downto 0);
  signal d1_1_27: std_logic_vector((36 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic_vector((36 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => "000000000000000000000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((36 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((36 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal unregy_join_6_1: std_logic_vector((36 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (pipe_16_22_push_front_pop_back_en = \'1\')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= \'1\';
  y <= pipe_16_22_back;
end',
      'crippled_entity' => 'is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((36 - 1) downto 0);
    d1 : in std_logic_vector((36 - 1) downto 0);
    y : out std_logic_vector((36 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'mux_4bb6f691f7',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '14ce6e6ee2f920ebbaedd3ce1ea38cd3',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal in2_1_31: unsigned((1 - 1) downto 0);
  signal in3_1_35: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((4 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    in2 : in std_logic_vector((1 - 1) downto 0);
    in3 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((4 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_a0c7cd7a34',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '1c2f27202fd0bc0acfe9ca12b894e5dd',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: boolean;
  signal output_port_7_5_convert: unsigned((1 - 1) downto 0);
begin
  input_port_1_40 <= ((input_port) = "1");
  output_port_7_5_convert <= u2u_cast(std_logic_vector_to_unsigned(boolean_to_vector(input_port_1_40)), 0, 1, 0);
  output_port <= unsigned_to_std_logic_vector(output_port_7_5_convert);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((1 - 1) downto 0);
    output_port : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_112d91c147',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '2e2fac6b5513f4f7f53f6e95600afecc',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "1000000000";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((10 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_fbc2f0cce1',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'cc9c61714f955949074cf0d0ca24190b',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal rst_1_40: boolean;
  signal count_reg_20_23: unsigned((10 - 1) downto 0) := "0000000000";
  signal count_reg_20_23_rst: std_logic;
  signal bool_44_4: boolean;
  signal count_reg_join_44_1: unsigned((11 - 1) downto 0);
  signal count_reg_join_44_1_rst: std_logic;
  signal rst_limit_join_44_1: boolean;
begin
  rst_1_40 <= ((rst) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (count_reg_20_23_rst = \'1\')) then
        count_reg_20_23 <= "0000000000";
      elsif (ce = \'1\') then 
        count_reg_20_23 <= count_reg_20_23 + std_logic_vector_to_unsigned("0000000001");
      end if;
    end if;
  end process proc_count_reg_20_23;
  bool_44_4 <= rst_1_40 or false;
  proc_if_44_1: process (bool_44_4, count_reg_20_23)
  is
  begin
    if bool_44_4 then
      count_reg_join_44_1_rst <= \'1\';
    else 
      count_reg_join_44_1_rst <= \'0\';
    end if;
    if bool_44_4 then
      rst_limit_join_44_1 <= false;
    else 
      rst_limit_join_44_1 <= false;
    end if;
  end process proc_if_44_1;
  count_reg_20_23_rst <= count_reg_join_44_1_rst;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end',
      'crippled_entity' => 'is
  port (
    rst : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((10 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'counter_9037948c69',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f79808d89b8fb4602598a7f074923159',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((144 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (12 - 1)) of std_logic_vector((144 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((144 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((144 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(11);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 11 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((144 - 1) downto 0);
    q : out std_logic_vector((144 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_4f8ee98ddb',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '8fe25dde9e80795aab0f708207bf85b3',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_31: unsigned((10 - 1) downto 0);
  signal b_1_34: unsigned((10 - 1) downto 0);
  signal result_18_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_18_3_rel <= a_1_31 > b_1_34;
  op <= boolean_to_vector(result_18_3_rel);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((10 - 1) downto 0);
    b : in std_logic_vector((10 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'relational_e83dd85005',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '37bd8c413670dafe2432285b2d8b8c48',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic;
  type array_type_op_mem_20_24 is array (0 to (10 - 1)) of std_logic;
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    \'0\',
    \'0\',
    \'0\',
    \'0\',
    \'0\',
    \'0\',
    \'0\',
    \'0\',
    \'0\',
    \'0\');
  signal op_mem_20_24_front_din: std_logic;
  signal op_mem_20_24_back: std_logic;
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d(0);
  op_mem_20_24_back <= op_mem_20_24(9);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 9 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= std_logic_to_vector(op_mem_20_24_back);
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((1 - 1) downto 0);
    q : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_065ed9934e',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '86807c14219244b800eead1b624aff03',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic;
  type array_type_op_mem_20_24 is array (0 to (3 - 1)) of std_logic;
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    \'0\',
    \'0\',
    \'0\');
  signal op_mem_20_24_front_din: std_logic;
  signal op_mem_20_24_back: std_logic;
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d(0);
  op_mem_20_24_back <= op_mem_20_24(2);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 2 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= std_logic_to_vector(op_mem_20_24_back);
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((1 - 1) downto 0);
    q : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_23d71a76f2',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '5d30435472184eb4ada2f8e6c7f874ab',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((9 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((9 - 1) downto 0);
    output_port : out std_logic_vector((9 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_b754317574',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e6e1dd7cb6e44f2bcfbd3744353b2d0f',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b99b758d0d3b936d6e5841550969dd68',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'dcb425a322b0503b657f25280c294d49',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '25b9c51503ca124430cf7ea8ceab10db',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '16ad9ed2b52982a961e619e13d43314b',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '04069a604555b1fdc933fbc31c865786',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((9 - 1) downto 0);
  signal in1_1_27: unsigned((9 - 1) downto 0);
  signal in2_1_31: unsigned((9 - 1) downto 0);
  signal in3_1_35: unsigned((9 - 1) downto 0);
  signal y_2_1_concat: unsigned((36 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((9 - 1) downto 0);
    in1 : in std_logic_vector((9 - 1) downto 0);
    in2 : in std_logic_vector((9 - 1) downto 0);
    in3 : in std_logic_vector((9 - 1) downto 0);
    y : out std_logic_vector((36 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_88cfa744f5',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '4dece4d06aed54134bd1c288c21ce8fd',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xldelay.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_RAM',
    'CSET operating_mode_a = READ_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 512x36',
    'CSET read_width_a = 36',
    'CSET read_width_b = 36',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 512',
    'CSET write_width_a = 36',
    'CSET write_width_b = 36',
    'CSET component_name = bmg_72_d53572f04cfc7154',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '5ad4202d24fa6427c3aa0ef476611e81',
    'sourceFile' => 'hdl/xlspram.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      dina: in std_logic_vector(c_width - 1 downto 0);
      wea: in std_logic_vector(0 downto 0);
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => addr,
        clka => clk,
        dina => data_in,
        wea(0) => core_we,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_d53572f04cfc7154',
      'entityName' => 'xlspram_he6_cres_correlator',
      'entity_name.0' => 'xlspram',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '3c4d78f3dcb3a2888e899e43233e4029',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((144 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (3 - 1)) of std_logic_vector((144 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((144 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((144 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(2);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 2 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((144 - 1) downto 0);
    q : out std_logic_vector((144 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_3926436d8b',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '823820561dc563133ddef3a7b5a1cee2',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "0000000001";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((10 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_f1ac4bddff',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '33d0bd4da38e5cae4fc9beffbd0ed266',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "0000000000";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((10 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_498bc68c14',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '4ec8662b773838edef77c91b31221eac',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal load_1_29: boolean;
  signal din_1_35: unsigned((10 - 1) downto 0);
  signal en_1_45: boolean;
  signal count_reg_20_23_next: unsigned((10 - 1) downto 0);
  signal count_reg_20_23: unsigned((10 - 1) downto 0) := "0000000000";
  signal count_reg_20_23_en: std_logic;
  signal cast_54_19: signed((12 - 1) downto 0);
  signal count_reg_54_7_addsub: signed((12 - 1) downto 0);
  signal count_reg_join_48_3: signed((12 - 1) downto 0);
  signal count_reg_join_44_1: signed((12 - 1) downto 0);
  signal count_reg_join_44_1_en: std_logic;
  signal cast_count_reg_20_23_next: unsigned((10 - 1) downto 0);
begin
  load_1_29 <= ((load) = "1");
  din_1_35 <= std_logic_vector_to_unsigned(din);
  en_1_45 <= ((en) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (count_reg_20_23_en = \'1\')) then
        count_reg_20_23 <= count_reg_20_23_next;
      end if;
    end if;
  end process proc_count_reg_20_23;
  cast_54_19 <= u2s_cast(count_reg_20_23, 0, 12, 0);
  count_reg_54_7_addsub <= cast_54_19 - std_logic_vector_to_signed("000000000001");
  proc_if_48_3: process (count_reg_54_7_addsub, din_1_35, load_1_29)
  is
  begin
    if load_1_29 then
      count_reg_join_48_3 <= u2s_cast(din_1_35, 0, 12, 0);
    else 
      count_reg_join_48_3 <= count_reg_54_7_addsub;
    end if;
  end process proc_if_48_3;
  proc_if_44_1: process (count_reg_join_48_3, en_1_45)
  is
  begin
    if en_1_45 then
      count_reg_join_44_1_en <= \'1\';
    else 
      count_reg_join_44_1_en <= \'0\';
    end if;
    count_reg_join_44_1 <= count_reg_join_48_3;
  end process proc_if_44_1;
  cast_count_reg_20_23_next <= s2u_cast(count_reg_join_44_1, 0, 10, 0);
  count_reg_20_23_next <= cast_count_reg_20_23_next;
  count_reg_20_23_en <= count_reg_join_44_1_en;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end',
      'crippled_entity' => 'is
  port (
    load : in std_logic_vector((1 - 1) downto 0);
    din : in std_logic_vector((10 - 1) downto 0);
    en : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((10 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'counter_d3720c25c3',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '4cbc8f55ab0bdad8c93c57462ba138dc',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal sel_1_20: std_logic_vector((1 - 1) downto 0);
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  signal unregy_join_6_1: std_logic;
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  y <= std_logic_to_vector(unregy_join_6_1);
end',
      'crippled_entity' => 'is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'mux_1bef4ba0e4',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '62bc9f8a3c249b32ba23a34fb1c28724',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_31: unsigned((10 - 1) downto 0);
  signal b_1_34: unsigned((10 - 1) downto 0);
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_12_3_rel <= a_1_31 = b_1_34;
  op <= boolean_to_vector(result_12_3_rel);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((10 - 1) downto 0);
    b : in std_logic_vector((10 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'relational_0ffd72e037',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '91aa5fe6e672c7518ca04268dcbd48a9',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_31: unsigned((10 - 1) downto 0);
  signal b_1_34: unsigned((10 - 1) downto 0);
  signal result_14_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_14_3_rel <= a_1_31 /= b_1_34;
  op <= boolean_to_vector(result_14_3_rel);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((10 - 1) downto 0);
    b : in std_logic_vector((10 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'relational_f6702ea2f7',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '3537ae1cefd65989e2a868a2cbe2d526',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a74f894ed8f6f714e88dafa1ada326da',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal rst_1_40: boolean;
  signal en_1_45: boolean;
  signal count_reg_20_23: unsigned((10 - 1) downto 0) := "0000000000";
  signal count_reg_20_23_rst: std_logic;
  signal count_reg_20_23_en: std_logic;
  signal bool_44_4: boolean;
  signal rst_limit_join_44_1: boolean;
  signal count_reg_join_44_1: unsigned((11 - 1) downto 0);
  signal count_reg_join_44_1_en: std_logic;
  signal count_reg_join_44_1_rst: std_logic;
begin
  rst_1_40 <= ((rst) = "1");
  en_1_45 <= ((en) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (count_reg_20_23_rst = \'1\')) then
        count_reg_20_23 <= "0000000000";
      elsif ((ce = \'1\') and (count_reg_20_23_en = \'1\')) then 
        count_reg_20_23 <= count_reg_20_23 + std_logic_vector_to_unsigned("0000000001");
      end if;
    end if;
  end process proc_count_reg_20_23;
  bool_44_4 <= rst_1_40 or false;
  proc_if_44_1: process (bool_44_4, count_reg_20_23, en_1_45)
  is
  begin
    if bool_44_4 then
      count_reg_join_44_1_rst <= \'1\';
    elsif en_1_45 then
      count_reg_join_44_1_rst <= \'0\';
    else 
      count_reg_join_44_1_rst <= \'0\';
    end if;
    if en_1_45 then
      count_reg_join_44_1_en <= \'1\';
    else 
      count_reg_join_44_1_en <= \'0\';
    end if;
    if bool_44_4 then
      rst_limit_join_44_1 <= false;
    elsif en_1_45 then
      rst_limit_join_44_1 <= false;
    else 
      rst_limit_join_44_1 <= false;
    end if;
  end process proc_if_44_1;
  count_reg_20_23_rst <= count_reg_join_44_1_rst;
  count_reg_20_23_en <= count_reg_join_44_1_en;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end',
      'crippled_entity' => 'is
  port (
    rst : in std_logic_vector((1 - 1) downto 0);
    en : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((10 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'counter_a1cad1a9ea',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '88e224189d5cae0148910703f705e5eb',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal sel_1_20: std_logic_vector((1 - 1) downto 0);
  signal d0_1_24: std_logic_vector((9 - 1) downto 0);
  signal d1_1_27: std_logic_vector((9 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic_vector((9 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => "000000000");
  signal pipe_16_22_front_din: std_logic_vector((9 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((9 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal unregy_join_6_1: std_logic_vector((9 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (pipe_16_22_push_front_pop_back_en = \'1\')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= \'1\';
  y <= pipe_16_22_back;
end',
      'crippled_entity' => 'is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((9 - 1) downto 0);
    d1 : in std_logic_vector((9 - 1) downto 0);
    y : out std_logic_vector((9 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'mux_57bd0e235a',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '4b03b09a20eabc3993ecbd5182074e67',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '21911b0552b5ab269facb20a8c9eff32',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'cab9d02c6e5cd304c4e3a1a029ed3e34',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((9 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (3 - 1)) of std_logic_vector((9 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000",
    "000000000",
    "000000000");
  signal op_mem_20_24_front_din: std_logic_vector((9 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((9 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(2);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 2 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((9 - 1) downto 0);
    q : out std_logic_vector((9 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_e23bc04d9c',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '6e5cc330c90fee5614302f2507629bf3',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((144 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (4 - 1)) of std_logic_vector((144 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((144 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((144 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(3);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 3 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((144 - 1) downto 0);
    q : out std_logic_vector((144 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_adfe2fa7b6',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd823588562f3cd5a1e0f46c2dd77fce3',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((9 - 1) downto 0);
begin
  d_1_22 <= d;
  q <= d_1_22;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((9 - 1) downto 0);
    q : out std_logic_vector((9 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_a99984b20e',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '9aa6319ee73ab61f0bdd70c7d30e7aac',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((1 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (3 - 1)) of std_logic_vector((1 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "0",
    "0",
    "0");
  signal op_mem_20_24_front_din: std_logic_vector((1 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((1 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(2);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 2 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((1 - 1) downto 0);
    q : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_85c2ef968b',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd167fa9c5b18fa387aab7ae5d5bdb150',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic;
  type array_type_op_mem_20_24 is array (0 to (4 - 1)) of std_logic;
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    \'0\',
    \'0\',
    \'0\',
    \'0\');
  signal op_mem_20_24_front_din: std_logic;
  signal op_mem_20_24_back: std_logic;
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d(0);
  op_mem_20_24_back <= op_mem_20_24(3);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 3 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= std_logic_to_vector(op_mem_20_24_back);
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((1 - 1) downto 0);
    q : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_c53de546ea',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 0, 100, 80, 180, 40, 140, C0, 1C0, 20, 120, A0, 1A0, 60, 160, E0, 1E0, 10, 110, 90, 190, 50, 150, D0, 1D0, 30, 130, B0, 1B0, 70, 170, F0, 1F0, 8, 108, 88, 188, 48, 148, C8, 1C8, 28, 128, A8, 1A8, 68, 168, E8, 1E8, 18, 118, 98, 198, 58, 158, D8, 1D8, 38, 138, B8, 1B8, 78, 178, F8, 1F8, 4, 104, 84, 184, 44, 144, C4, 1C4, 24, 124, A4, 1A4, 64, 164, E4, 1E4, 14, 114, 94, 194, 54, 154, D4, 1D4, 34, 134, B4, 1B4, 74, 174, F4, 1F4, C, 10C, 8C, 18C, 4C, 14C, CC, 1CC, 2C, 12C, AC, 1AC, 6C, 16C, EC, 1EC, 1C, 11C, 9C, 19C, 5C, 15C, DC, 1DC, 3C, 13C, BC, 1BC, 7C, 17C, FC, 1FC, 2, 102, 82, 182, 42, 142, C2, 1C2, 22, 122, A2, 1A2, 62, 162, E2, 1E2, 12, 112, 92, 192, 52, 152, D2, 1D2, 32, 132, B2, 1B2, 72, 172, F2, 1F2, A, 10A, 8A, 18A, 4A, 14A, CA, 1CA, 2A, 12A, AA, 1AA, 6A, 16A, EA, 1EA, 1A, 11A, 9A, 19A, 5A, 15A, DA, 1DA, 3A, 13A, BA, 1BA, 7A, 17A, FA, 1FA, 6, 106, 86, 186, 46, 146, C6, 1C6, 26, 126, A6, 1A6, 66, 166, E6, 1E6, 16, 116, 96, 196, 56, 156, D6, 1D6, 36, 136, B6, 1B6, 76, 176, F6, 1F6, E, 10E, 8E, 18E, 4E, 14E, CE, 1CE, 2E, 12E, AE, 1AE, 6E, 16E, EE, 1EE, 1E, 11E, 9E, 19E, 5E, 15E, DE, 1DE, 3E, 13E, BE, 1BE, 7E, 17E, FE, 1FE, 1, 101, 81, 181, 41, 141, C1, 1C1, 21, 121, A1, 1A1, 61, 161, E1, 1E1, 11, 111, 91, 191, 51, 151, D1, 1D1, 31, 131, B1, 1B1, 71, 171, F1, 1F1, 9, 109, 89, 189, 49, 149, C9, 1C9, 29, 129, A9, 1A9, 69, 169, E9, 1E9, 19, 119, 99, 199, 59, 159, D9, 1D9, 39, 139, B9, 1B9, 79, 179, F9, 1F9, 5, 105, 85, 185, 45, 145, C5, 1C5, 25, 125, A5, 1A5, 65, 165, E5, 1E5, 15, 115, 95, 195, 55, 155, D5, 1D5, 35, 135, B5, 1B5, 75, 175, F5, 1F5, D, 10D, 8D, 18D, 4D, 14D, CD, 1CD, 2D, 12D, AD, 1AD, 6D, 16D, ED, 1ED, 1D, 11D, 9D, 19D, 5D, 15D, DD, 1DD, 3D, 13D, BD, 1BD, 7D, 17D, FD, 1FD, 3, 103, 83, 183, 43, 143, C3, 1C3, 23, 123, A3, 1A3, 63, 163, E3, 1E3, 13, 113, 93, 193, 53, 153, D3, 1D3, 33, 133, B3, 1B3, 73, 173, F3, 1F3, B, 10B, 8B, 18B, 4B, 14B, CB, 1CB, 2B, 12B, AB, 1AB, 6B, 16B, EB, 1EB, 1B, 11B, 9B, 19B, 5B, 15B, DB, 1DB, 3B, 13B, BB, 1BB, 7B, 17B, FB, 1FB, 7, 107, 87, 187, 47, 147, C7, 1C7, 27, 127, A7, 1A7, 67, 167, E7, 1E7, 17, 117, 97, 197, 57, 157, D7, 1D7, 37, 137, B7, 1B7, 77, 177, F7, 1F7, F, 10F, 8F, 18F, 4F, 14F, CF, 1CF, 2F, 12F, AF, 1AF, 6F, 16F, EF, 1EF, 1F, 11F, 9F, 19F, 5F, 15F, DF, 1DF, 3F, 13F, BF, 1BF, 7F, 17F, FF, 1FF;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 512x36',
    'CSET read_width_a = 9',
    'CSET read_width_b = 9',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 512',
    'CSET write_width_a = 9',
    'CSET write_width_b = 9',
    'CSET component_name = bmg_72_7670ae7947456b32',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f9ee246fc70e0f7ed833f078eef5c013',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_7670ae7947456b32',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'df8df4d1bf74bb8548239b25fe330204',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic;
  type array_type_op_mem_20_24 is array (0 to (6 - 1)) of std_logic;
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    \'0\',
    \'0\',
    \'0\',
    \'0\',
    \'0\',
    \'0\');
  signal op_mem_20_24_front_din: std_logic;
  signal op_mem_20_24_back: std_logic;
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d(0);
  op_mem_20_24_back <= op_mem_20_24(5);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 5 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= std_logic_to_vector(op_mem_20_24_back);
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((1 - 1) downto 0);
    q : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_aab7b18c27',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 1FF, FF, 17F, 7F, 1BF, BF, 13F, 3F, 1DF, DF, 15F, 5F, 19F, 9F, 11F, 1F, 1EF, EF, 16F, 6F, 1AF, AF, 12F, 2F, 1CF, CF, 14F, 4F, 18F, 8F, 10F, F, 1F7, F7, 177, 77, 1B7, B7, 137, 37, 1D7, D7, 157, 57, 197, 97, 117, 17, 1E7, E7, 167, 67, 1A7, A7, 127, 27, 1C7, C7, 147, 47, 187, 87, 107, 7, 1FB, FB, 17B, 7B, 1BB, BB, 13B, 3B, 1DB, DB, 15B, 5B, 19B, 9B, 11B, 1B, 1EB, EB, 16B, 6B, 1AB, AB, 12B, 2B, 1CB, CB, 14B, 4B, 18B, 8B, 10B, B, 1F3, F3, 173, 73, 1B3, B3, 133, 33, 1D3, D3, 153, 53, 193, 93, 113, 13, 1E3, E3, 163, 63, 1A3, A3, 123, 23, 1C3, C3, 143, 43, 183, 83, 103, 3, 1FD, FD, 17D, 7D, 1BD, BD, 13D, 3D, 1DD, DD, 15D, 5D, 19D, 9D, 11D, 1D, 1ED, ED, 16D, 6D, 1AD, AD, 12D, 2D, 1CD, CD, 14D, 4D, 18D, 8D, 10D, D, 1F5, F5, 175, 75, 1B5, B5, 135, 35, 1D5, D5, 155, 55, 195, 95, 115, 15, 1E5, E5, 165, 65, 1A5, A5, 125, 25, 1C5, C5, 145, 45, 185, 85, 105, 5, 1F9, F9, 179, 79, 1B9, B9, 139, 39, 1D9, D9, 159, 59, 199, 99, 119, 19, 1E9, E9, 169, 69, 1A9, A9, 129, 29, 1C9, C9, 149, 49, 189, 89, 109, 9, 1F1, F1, 171, 71, 1B1, B1, 131, 31, 1D1, D1, 151, 51, 191, 91, 111, 11, 1E1, E1, 161, 61, 1A1, A1, 121, 21, 1C1, C1, 141, 41, 181, 81, 101, 1, 1FE, FE, 17E, 7E, 1BE, BE, 13E, 3E, 1DE, DE, 15E, 5E, 19E, 9E, 11E, 1E, 1EE, EE, 16E, 6E, 1AE, AE, 12E, 2E, 1CE, CE, 14E, 4E, 18E, 8E, 10E, E, 1F6, F6, 176, 76, 1B6, B6, 136, 36, 1D6, D6, 156, 56, 196, 96, 116, 16, 1E6, E6, 166, 66, 1A6, A6, 126, 26, 1C6, C6, 146, 46, 186, 86, 106, 6, 1FA, FA, 17A, 7A, 1BA, BA, 13A, 3A, 1DA, DA, 15A, 5A, 19A, 9A, 11A, 1A, 1EA, EA, 16A, 6A, 1AA, AA, 12A, 2A, 1CA, CA, 14A, 4A, 18A, 8A, 10A, A, 1F2, F2, 172, 72, 1B2, B2, 132, 32, 1D2, D2, 152, 52, 192, 92, 112, 12, 1E2, E2, 162, 62, 1A2, A2, 122, 22, 1C2, C2, 142, 42, 182, 82, 102, 2, 1FC, FC, 17C, 7C, 1BC, BC, 13C, 3C, 1DC, DC, 15C, 5C, 19C, 9C, 11C, 1C, 1EC, EC, 16C, 6C, 1AC, AC, 12C, 2C, 1CC, CC, 14C, 4C, 18C, 8C, 10C, C, 1F4, F4, 174, 74, 1B4, B4, 134, 34, 1D4, D4, 154, 54, 194, 94, 114, 14, 1E4, E4, 164, 64, 1A4, A4, 124, 24, 1C4, C4, 144, 44, 184, 84, 104, 4, 1F8, F8, 178, 78, 1B8, B8, 138, 38, 1D8, D8, 158, 58, 198, 98, 118, 18, 1E8, E8, 168, 68, 1A8, A8, 128, 28, 1C8, C8, 148, 48, 188, 88, 108, 8, 1F0, F0, 170, 70, 1B0, B0, 130, 30, 1D0, D0, 150, 50, 190, 90, 110, 10, 1E0, E0, 160, 60, 1A0, A0, 120, 20, 1C0, C0, 140, 40, 180, 80, 100, 0;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 512x36',
    'CSET read_width_a = 9',
    'CSET read_width_b = 9',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 512',
    'CSET write_width_a = 9',
    'CSET write_width_b = 9',
    'CSET component_name = bmg_72_7e5123d892e8a550',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '57479e5ebf37a724a780566deea23fb5',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_7e5123d892e8a550',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '79c98a01f06b4c1b18287c00638cd331',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((144 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (6 - 1)) of std_logic_vector((144 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((144 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((144 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(5);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 5 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((144 - 1) downto 0);
    q : out std_logic_vector((144 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_60ee3d33cd',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 1FF, 1FE, 1FD, 1FC, 1FB, 1FA, 1F9, 1F8, 1F7, 1F6, 1F5, 1F4, 1F3, 1F2, 1F1, 1F0, 1EF, 1EE, 1ED, 1EC, 1EB, 1EA, 1E9, 1E8, 1E7, 1E6, 1E5, 1E4, 1E3, 1E2, 1E1, 1E0, 1DF, 1DE, 1DD, 1DC, 1DB, 1DA, 1D9, 1D8, 1D7, 1D6, 1D5, 1D4, 1D3, 1D2, 1D1, 1D0, 1CF, 1CE, 1CD, 1CC, 1CB, 1CA, 1C9, 1C8, 1C7, 1C6, 1C5, 1C4, 1C3, 1C2, 1C1, 1C0, 1BF, 1BE, 1BD, 1BC, 1BB, 1BA, 1B9, 1B8, 1B7, 1B6, 1B5, 1B4, 1B3, 1B2, 1B1, 1B0, 1AF, 1AE, 1AD, 1AC, 1AB, 1AA, 1A9, 1A8, 1A7, 1A6, 1A5, 1A4, 1A3, 1A2, 1A1, 1A0, 19F, 19E, 19D, 19C, 19B, 19A, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 18F, 18E, 18D, 18C, 18B, 18A, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 17F, 17E, 17D, 17C, 17B, 17A, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 16F, 16E, 16D, 16C, 16B, 16A, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 15F, 15E, 15D, 15C, 15B, 15A, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 14F, 14E, 14D, 14C, 14B, 14A, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 13F, 13E, 13D, 13C, 13B, 13A, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 12F, 12E, 12D, 12C, 12B, 12A, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 11F, 11E, 11D, 11C, 11B, 11A, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 10F, 10E, 10D, 10C, 10B, 10A, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, FF, FE, FD, FC, FB, FA, F9, F8, F7, F6, F5, F4, F3, F2, F1, F0, EF, EE, ED, EC, EB, EA, E9, E8, E7, E6, E5, E4, E3, E2, E1, E0, DF, DE, DD, DC, DB, DA, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0, CF, CE, CD, CC, CB, CA, C9, C8, C7, C6, C5, C4, C3, C2, C1, C0, BF, BE, BD, BC, BB, BA, B9, B8, B7, B6, B5, B4, B3, B2, B1, B0, AF, AE, AD, AC, AB, AA, A9, A8, A7, A6, A5, A4, A3, A2, A1, A0, 9F, 9E, 9D, 9C, 9B, 9A, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 8F, 8E, 8D, 8C, 8B, 8A, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 7F, 7E, 7D, 7C, 7B, 7A, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 6F, 6E, 6D, 6C, 6B, 6A, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 5F, 5E, 5D, 5C, 5B, 5A, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 4F, 4E, 4D, 4C, 4B, 4A, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 3F, 3E, 3D, 3C, 3B, 3A, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 2F, 2E, 2D, 2C, 2B, 2A, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 1F, 1E, 1D, 1C, 1B, 1A, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, F, E, D, C, B, A, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 512x36',
    'CSET read_width_a = 9',
    'CSET read_width_b = 9',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 512',
    'CSET write_width_a = 9',
    'CSET write_width_b = 9',
    'CSET component_name = bmg_72_51693f3038eeb355',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '4cb5ae65dbed304092c64c6d51d55377',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_51693f3038eeb355',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Binary_Counter virtex6 Xilinx,_Inc. 11.0',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET ainit_value = 0',
    'CSET ce = true',
    'CSET count_mode = DOWN',
    'CSET fb_latency = 0',
    'CSET final_count_value = 1',
    'CSET implementation = Fabric',
    'CSET increment_value = 1',
    'CSET latency = 1',
    'CSET load = true',
    'CSET output_width = 10',
    'CSET restrict_count = false',
    'CSET sclr = false',
    'CSET sinit = true',
    'CSET sinit_value = 0',
    'CSET sset = false',
    'CSET sync_ce_priority = Sync_Overrides_CE',
    'CSET sync_threshold_output = false',
    'CSET syncctrlpriority = Reset_Overrides_Set',
    'CSET component_name = cntr_11_0_2fa687a4fd8aa200',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a2b52116e141e700a252e366519de905',
    'sourceFile' => 'hdl/xlcounter_free.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      load: in std_logic;
      l: in std_logic_vector(op_width - 1 downto 0);
      q: out std_logic_vector(op_width - 1 downto 0)',
      'core_instance_text' => '        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        load => load(0),
        l => din,
        q => op_net',
      'core_name0' => 'cntr_11_0_2fa687a4fd8aa200',
      'entityName' => 'xlcounter_free_he6_cres_correlator',
      'entity_name.0' => 'xlcounter_free',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '366d999d672ac834e4f4c913b87f398c',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((144 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (1 - 1)) of std_logic_vector((144 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    0 => "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((144 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((144 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(0);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((144 - 1) downto 0);
    q : out std_logic_vector((144 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_dc6e12a537',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'bea4305dc882ee0c60c8116a045af5da',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic;
  type array_type_op_mem_20_24 is array (0 to (5 - 1)) of std_logic;
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    \'0\',
    \'0\',
    \'0\',
    \'0\',
    \'0\');
  signal op_mem_20_24_front_din: std_logic;
  signal op_mem_20_24_back: std_logic;
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d(0);
  op_mem_20_24_back <= op_mem_20_24(4);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 4 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= std_logic_to_vector(op_mem_20_24_back);
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((1 - 1) downto 0);
    q : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_a14e3dd1bd',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '12854e4ab40aa91a388097ebd8775a86',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic_vector((144 - 1) downto 0);
  signal d1_1_27: std_logic_vector((144 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic_vector((144 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((144 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((144 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((144 - 1) downto 0);
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (pipe_16_22_push_front_pop_back_en = \'1\')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= \'1\';
  y <= pipe_16_22_back;
end',
      'crippled_entity' => 'is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((144 - 1) downto 0);
    d1 : in std_logic_vector((144 - 1) downto 0);
    y : out std_logic_vector((144 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'mux_6fe6de4a52',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '893cc303230bb1ebc55fc5fbc84f3a4c',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((19 - 1) downto 0);
  signal in1_1_27: unsigned((19 - 1) downto 0);
  signal in2_1_31: unsigned((19 - 1) downto 0);
  signal in3_1_35: unsigned((19 - 1) downto 0);
  signal in4_1_39: unsigned((19 - 1) downto 0);
  signal in5_1_43: unsigned((19 - 1) downto 0);
  signal in6_1_47: unsigned((19 - 1) downto 0);
  signal in7_1_51: unsigned((19 - 1) downto 0);
  signal y_2_1_concat: unsigned((152 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  in5_1_43 <= std_logic_vector_to_unsigned(in5);
  in6_1_47 <= std_logic_vector_to_unsigned(in6);
  in7_1_51 <= std_logic_vector_to_unsigned(in7);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39) & unsigned_to_std_logic_vector(in5_1_43) & unsigned_to_std_logic_vector(in6_1_47) & unsigned_to_std_logic_vector(in7_1_51));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((19 - 1) downto 0);
    in1 : in std_logic_vector((19 - 1) downto 0);
    in2 : in std_logic_vector((19 - 1) downto 0);
    in3 : in std_logic_vector((19 - 1) downto 0);
    in4 : in std_logic_vector((19 - 1) downto 0);
    in5 : in std_logic_vector((19 - 1) downto 0);
    in6 : in std_logic_vector((19 - 1) downto 0);
    in7 : in std_logic_vector((19 - 1) downto 0);
    y : out std_logic_vector((152 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_18a603ff3c',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a309a6264e4348166c0220987a48a9be',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_17_32: signed((18 - 1) downto 0);
  signal b_17_35: signed((18 - 1) downto 0);
  type array_type_op_mem_91_20 is array (0 to (1 - 1)) of signed((19 - 1) downto 0);
  signal op_mem_91_20: array_type_op_mem_91_20 := (
    0 => "0000000000000000000");
  signal op_mem_91_20_front_din: signed((19 - 1) downto 0);
  signal op_mem_91_20_back: signed((19 - 1) downto 0);
  signal op_mem_91_20_push_front_pop_back_en: std_logic;
  type array_type_cout_mem_92_22 is array (0 to (1 - 1)) of unsigned((1 - 1) downto 0);
  signal cout_mem_92_22: array_type_cout_mem_92_22 := (
    0 => "0");
  signal cout_mem_92_22_front_din: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_back: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_push_front_pop_back_en: std_logic;
  signal prev_mode_93_22_next: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22_reg_i: std_logic_vector((3 - 1) downto 0);
  signal prev_mode_93_22_reg_o: std_logic_vector((3 - 1) downto 0);
  signal cast_69_18: signed((19 - 1) downto 0);
  signal cast_69_22: signed((19 - 1) downto 0);
  signal internal_s_69_5_addsub: signed((19 - 1) downto 0);
begin
  a_17_32 <= std_logic_vector_to_signed(a);
  b_17_35 <= std_logic_vector_to_signed(b);
  op_mem_91_20_back <= op_mem_91_20(0);
  proc_op_mem_91_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_91_20_push_front_pop_back_en = \'1\')) then
        op_mem_91_20(0) <= op_mem_91_20_front_din;
      end if;
    end if;
  end process proc_op_mem_91_20;
  cout_mem_92_22_back <= cout_mem_92_22(0);
  proc_cout_mem_92_22: process (clk)
  is
    variable i_x_000000: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (cout_mem_92_22_push_front_pop_back_en = \'1\')) then
        cout_mem_92_22(0) <= cout_mem_92_22_front_din;
      end if;
    end if;
  end process proc_cout_mem_92_22;
  prev_mode_93_22_reg_i <= unsigned_to_std_logic_vector(prev_mode_93_22_next);
  prev_mode_93_22 <= std_logic_vector_to_unsigned(prev_mode_93_22_reg_o);
  prev_mode_93_22_reg_inst: entity work.synth_reg_w_init
    generic map (
      init_index => 2, 
      init_value => b"010", 
      latency => 1, 
      width => 3)
    port map (
      ce => ce, 
      clk => clk, 
      clr => clr, 
      i => prev_mode_93_22_reg_i, 
      o => prev_mode_93_22_reg_o);
  cast_69_18 <= s2s_cast(a_17_32, 17, 19, 17);
  cast_69_22 <= s2s_cast(b_17_35, 17, 19, 17);
  internal_s_69_5_addsub <= cast_69_18 + cast_69_22;
  op_mem_91_20_front_din <= internal_s_69_5_addsub;
  op_mem_91_20_push_front_pop_back_en <= \'1\';
  cout_mem_92_22_front_din <= std_logic_vector_to_unsigned("0");
  cout_mem_92_22_push_front_pop_back_en <= \'1\';
  prev_mode_93_22_next <= std_logic_vector_to_unsigned("000");
  s <= signed_to_std_logic_vector(op_mem_91_20_back);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((18 - 1) downto 0);
    b : in std_logic_vector((18 - 1) downto 0);
    s : out std_logic_vector((19 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'addsub_e140b59ec8',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a9233aa5aafccb6c4ad0c1bd10424ca1',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((20 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((21 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((20 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((21 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_c615d93998',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'bf47f6226af7dc204120ae835177b53d',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: signed((20 - 1) downto 0);
  signal output_port_5_5_force: unsigned((20 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_signed(input_port);
  output_port_5_5_force <= signed_to_unsigned(input_port_1_40);
  output_port <= unsigned_to_std_logic_vector(output_port_5_5_force);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((20 - 1) downto 0);
    output_port : out std_logic_vector((20 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_4a8cbc85ce',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Adder_Subtracter virtex6 Xilinx,_Inc. 11.0',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET AINIT_Value = 0',
    'CSET A_Type = Signed',
    'CSET A_Width = 22',
    'CSET Add_Mode = Add',
    'CSET B_Constant = false',
    'CSET B_Type = Signed',
    'CSET B_Value = 0',
    'CSET B_Width = 22',
    'CSET Borrow_Sense = Active_Low',
    'CSET Bypass = false',
    'CSET Bypass_CE_Priority = Bypass_Overrides_CE',
    'CSET Bypass_Sense = Active_Low',
    'CSET CE = true',
    'CSET C_In = false',
    'CSET C_Out = false',
    'CSET Implementation = Fabric',
    'CSET Latency = 2',
    'CSET Out_Width = 22',
    'CSET SCLR = false',
    'CSET SINIT = false',
    'CSET SINIT_Value = 0',
    'CSET SSET = false',
    'CSET Sync_CE_Priority = Sync_Overrides_CE',
    'CSET Sync_Ctrl_Priority = Reset_Overrides_Set',
    'CSET component_name = addsb_11_0_d9b3a3982e052de0',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f4b0223f4e959ecd032665e98587ffa8',
    'sourceFile' => 'hdl/xladdsub.vhd',
    'templateKeyValues' => {
      'core_component_def' => '    a: in std_logic_vector(22 - 1 downto 0);
    clk: in std_logic:= \'0\';
    ce: in std_logic:= \'0\';
    s: out std_logic_vector(c_output_width - 1 downto 0);
    b: in std_logic_vector(22 - 1 downto 0)',
      'core_instance_text' => '         a => full_a,
         clk => clk,
         ce => internal_ce,
         s => core_s,
         b => full_b',
      'core_name0' => 'addsb_11_0_d9b3a3982e052de0',
      'entityName' => 'xladdsub_he6_cres_correlator',
      'entity_name.0' => 'xladdsub',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '58f4b20085fd622ac39ccf5b47791a4d',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '56e3e19ccb2ee936cc3aae545e8799ac',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((21 - 1) downto 0);
  signal output_port_5_5_force: signed((21 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port_5_5_force <= unsigned_to_signed(input_port_1_40);
  output_port <= signed_to_std_logic_vector(output_port_5_5_force);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((21 - 1) downto 0);
    output_port : out std_logic_vector((21 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_d357e69fa3',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '0aa6cfa1a8e928952358a18ef4583f86',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  type array_type_latency_pipe_5_26 is array (0 to (3 - 1)) of std_logic;
  signal latency_pipe_5_26: array_type_latency_pipe_5_26 := (
    \'0\',
    \'0\',
    \'0\');
  signal latency_pipe_5_26_front_din: std_logic;
  signal latency_pipe_5_26_back: std_logic;
  signal latency_pipe_5_26_push_front_pop_back_en: std_logic;
  signal bit_2_27: std_logic;
  signal fully_2_1_bitnot: std_logic;
begin
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  latency_pipe_5_26_back <= latency_pipe_5_26(2);
  proc_latency_pipe_5_26: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (latency_pipe_5_26_push_front_pop_back_en = \'1\')) then
        for i in 2 downto 1 loop 
          latency_pipe_5_26(i) <= latency_pipe_5_26(i-1);
        end loop;
        latency_pipe_5_26(0) <= latency_pipe_5_26_front_din;
      end if;
    end if;
  end process proc_latency_pipe_5_26;
  bit_2_27 <= d0_1_24 and d1_1_27;
  fully_2_1_bitnot <= not bit_2_27;
  latency_pipe_5_26_front_din <= fully_2_1_bitnot;
  latency_pipe_5_26_push_front_pop_back_en <= \'1\';
  y <= std_logic_to_vector(latency_pipe_5_26_back);
end',
      'crippled_entity' => 'is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'logical_5bc1b3bb27',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ce82f00853eb97460518f18fb7cf0183',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '7694c6c0f421542daeab912b92f6b4c3',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '1f38d2ba7d9f31c47ce4aad688ef84b6',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  type array_type_latency_pipe_5_26 is array (0 to (2 - 1)) of std_logic;
  signal latency_pipe_5_26: array_type_latency_pipe_5_26 := (
    \'0\',
    \'0\');
  signal latency_pipe_5_26_front_din: std_logic;
  signal latency_pipe_5_26_back: std_logic;
  signal latency_pipe_5_26_push_front_pop_back_en: std_logic;
  signal bit_2_27: std_logic;
  signal fully_2_1_bitnot: std_logic;
begin
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  latency_pipe_5_26_back <= latency_pipe_5_26(1);
  proc_latency_pipe_5_26: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (latency_pipe_5_26_push_front_pop_back_en = \'1\')) then
        for i in 1 downto 1 loop 
          latency_pipe_5_26(i) <= latency_pipe_5_26(i-1);
        end loop;
        latency_pipe_5_26(0) <= latency_pipe_5_26_front_din;
      end if;
    end if;
  end process proc_latency_pipe_5_26;
  bit_2_27 <= d0_1_24 and d1_1_27;
  fully_2_1_bitnot <= not bit_2_27;
  latency_pipe_5_26_front_din <= fully_2_1_bitnot;
  latency_pipe_5_26_push_front_pop_back_en <= \'1\';
  y <= std_logic_to_vector(latency_pipe_5_26_back);
end',
      'crippled_entity' => 'is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'logical_89dc141487',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '7a72192302247cfdaed5f8aae13d083b',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  type array_type_latency_pipe_5_26 is array (0 to (1 - 1)) of std_logic;
  signal latency_pipe_5_26: array_type_latency_pipe_5_26 := (
    0 => \'0\');
  signal latency_pipe_5_26_front_din: std_logic;
  signal latency_pipe_5_26_back: std_logic;
  signal latency_pipe_5_26_push_front_pop_back_en: std_logic;
  signal fully_2_1_bit: std_logic;
begin
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  latency_pipe_5_26_back <= latency_pipe_5_26(0);
  proc_latency_pipe_5_26: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (latency_pipe_5_26_push_front_pop_back_en = \'1\')) then
        latency_pipe_5_26(0) <= latency_pipe_5_26_front_din;
      end if;
    end if;
  end process proc_latency_pipe_5_26;
  fully_2_1_bit <= d0_1_24 and d1_1_27;
  latency_pipe_5_26_front_din <= fully_2_1_bit;
  latency_pipe_5_26_push_front_pop_back_en <= \'1\';
  y <= std_logic_to_vector(latency_pipe_5_26_back);
end',
      'crippled_entity' => 'is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'logical_799f62af22',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '2b78cc3fd38b3c598d957df0f9ec7250',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '54444a87508dd408254c552c2ae0d37d',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '797a5db9f66ffbab1c483b20f3eb9d86',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'aa26fd4ec4da1477bfb7a35935496ba4',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd36cbbf48f206b3f045cef75a33f90a2',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c7b43eb1b212c687f3471d9164354bc6',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ff54179dc6db053ddbfc1335abb61ec7',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '196a5c8c0fc2112880951c1cab67fb2f',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '9beb7d7401935737d9fb52debd392de2',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a09cce1d8b46e46ad867f384420366ea',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c85f64ab5fe349b8e27159d28bd7eefc',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b18a1f2480ce8593e4e8e1e6a033ce6b',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '53e3e8243a2d9dc9b63f8af4862356c7',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '1abf98657306c83ca6d875d15b6ab920',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '91b2c49edeea30fc93a28ee057c3e46e',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '18757ff6d4533bd0236ccd406a2175cc',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'fcbd673bd7370cee438b55a29f4c52df',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal in2_1_31: unsigned((1 - 1) downto 0);
  signal in3_1_35: unsigned((1 - 1) downto 0);
  signal in4_1_39: unsigned((1 - 1) downto 0);
  signal in5_1_43: unsigned((1 - 1) downto 0);
  signal in6_1_47: unsigned((1 - 1) downto 0);
  signal in7_1_51: unsigned((1 - 1) downto 0);
  signal in8_1_55: unsigned((1 - 1) downto 0);
  signal in9_1_59: unsigned((1 - 1) downto 0);
  signal in10_1_63: unsigned((1 - 1) downto 0);
  signal in11_1_68: unsigned((1 - 1) downto 0);
  signal in12_1_73: unsigned((1 - 1) downto 0);
  signal in13_1_78: unsigned((1 - 1) downto 0);
  signal in14_1_83: unsigned((1 - 1) downto 0);
  signal in15_1_88: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((16 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  in5_1_43 <= std_logic_vector_to_unsigned(in5);
  in6_1_47 <= std_logic_vector_to_unsigned(in6);
  in7_1_51 <= std_logic_vector_to_unsigned(in7);
  in8_1_55 <= std_logic_vector_to_unsigned(in8);
  in9_1_59 <= std_logic_vector_to_unsigned(in9);
  in10_1_63 <= std_logic_vector_to_unsigned(in10);
  in11_1_68 <= std_logic_vector_to_unsigned(in11);
  in12_1_73 <= std_logic_vector_to_unsigned(in12);
  in13_1_78 <= std_logic_vector_to_unsigned(in13);
  in14_1_83 <= std_logic_vector_to_unsigned(in14);
  in15_1_88 <= std_logic_vector_to_unsigned(in15);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39) & unsigned_to_std_logic_vector(in5_1_43) & unsigned_to_std_logic_vector(in6_1_47) & unsigned_to_std_logic_vector(in7_1_51) & unsigned_to_std_logic_vector(in8_1_55) & unsigned_to_std_logic_vector(in9_1_59) & unsigned_to_std_logic_vector(in10_1_63) & unsigned_to_std_logic_vector(in11_1_68) & unsigned_to_std_logic_vector(in12_1_73) & unsigned_to_std_logic_vector(in13_1_78) & unsigned_to_std_logic_vector(in14_1_83) & unsigned_to_std_logic_vector(in15_1_88));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    in2 : in std_logic_vector((1 - 1) downto 0);
    in3 : in std_logic_vector((1 - 1) downto 0);
    in4 : in std_logic_vector((1 - 1) downto 0);
    in5 : in std_logic_vector((1 - 1) downto 0);
    in6 : in std_logic_vector((1 - 1) downto 0);
    in7 : in std_logic_vector((1 - 1) downto 0);
    in8 : in std_logic_vector((1 - 1) downto 0);
    in9 : in std_logic_vector((1 - 1) downto 0);
    in10 : in std_logic_vector((1 - 1) downto 0);
    in11 : in std_logic_vector((1 - 1) downto 0);
    in12 : in std_logic_vector((1 - 1) downto 0);
    in13 : in std_logic_vector((1 - 1) downto 0);
    in14 : in std_logic_vector((1 - 1) downto 0);
    in15 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((16 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_2f53a7da07',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b726d34820358c1874ce4a8a4c3c9158',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '5af109cf27e65c849439d38d4f7ae64f',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '04b2f219e8718d61d201b52b1f349248',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((20 - 1) downto 0);
  signal in1_1_27: unsigned((20 - 1) downto 0);
  signal in2_1_31: unsigned((20 - 1) downto 0);
  signal in3_1_35: unsigned((20 - 1) downto 0);
  signal in4_1_39: unsigned((20 - 1) downto 0);
  signal in5_1_43: unsigned((20 - 1) downto 0);
  signal in6_1_47: unsigned((20 - 1) downto 0);
  signal in7_1_51: unsigned((20 - 1) downto 0);
  signal in8_1_55: unsigned((20 - 1) downto 0);
  signal in9_1_59: unsigned((20 - 1) downto 0);
  signal in10_1_63: unsigned((20 - 1) downto 0);
  signal in11_1_68: unsigned((20 - 1) downto 0);
  signal in12_1_73: unsigned((20 - 1) downto 0);
  signal in13_1_78: unsigned((20 - 1) downto 0);
  signal in14_1_83: unsigned((20 - 1) downto 0);
  signal in15_1_88: unsigned((20 - 1) downto 0);
  signal y_2_1_concat: unsigned((320 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  in5_1_43 <= std_logic_vector_to_unsigned(in5);
  in6_1_47 <= std_logic_vector_to_unsigned(in6);
  in7_1_51 <= std_logic_vector_to_unsigned(in7);
  in8_1_55 <= std_logic_vector_to_unsigned(in8);
  in9_1_59 <= std_logic_vector_to_unsigned(in9);
  in10_1_63 <= std_logic_vector_to_unsigned(in10);
  in11_1_68 <= std_logic_vector_to_unsigned(in11);
  in12_1_73 <= std_logic_vector_to_unsigned(in12);
  in13_1_78 <= std_logic_vector_to_unsigned(in13);
  in14_1_83 <= std_logic_vector_to_unsigned(in14);
  in15_1_88 <= std_logic_vector_to_unsigned(in15);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39) & unsigned_to_std_logic_vector(in5_1_43) & unsigned_to_std_logic_vector(in6_1_47) & unsigned_to_std_logic_vector(in7_1_51) & unsigned_to_std_logic_vector(in8_1_55) & unsigned_to_std_logic_vector(in9_1_59) & unsigned_to_std_logic_vector(in10_1_63) & unsigned_to_std_logic_vector(in11_1_68) & unsigned_to_std_logic_vector(in12_1_73) & unsigned_to_std_logic_vector(in13_1_78) & unsigned_to_std_logic_vector(in14_1_83) & unsigned_to_std_logic_vector(in15_1_88));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((20 - 1) downto 0);
    in1 : in std_logic_vector((20 - 1) downto 0);
    in2 : in std_logic_vector((20 - 1) downto 0);
    in3 : in std_logic_vector((20 - 1) downto 0);
    in4 : in std_logic_vector((20 - 1) downto 0);
    in5 : in std_logic_vector((20 - 1) downto 0);
    in6 : in std_logic_vector((20 - 1) downto 0);
    in7 : in std_logic_vector((20 - 1) downto 0);
    in8 : in std_logic_vector((20 - 1) downto 0);
    in9 : in std_logic_vector((20 - 1) downto 0);
    in10 : in std_logic_vector((20 - 1) downto 0);
    in11 : in std_logic_vector((20 - 1) downto 0);
    in12 : in std_logic_vector((20 - 1) downto 0);
    in13 : in std_logic_vector((20 - 1) downto 0);
    in14 : in std_logic_vector((20 - 1) downto 0);
    in15 : in std_logic_vector((20 - 1) downto 0);
    y : out std_logic_vector((320 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_ac56edb97a',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '44235bee1d5428a6b90b61434ec3e07f',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlconvert.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Adder_Subtracter virtex6 Xilinx,_Inc. 11.0',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET AINIT_Value = 0',
    'CSET A_Type = Signed',
    'CSET A_Width = 21',
    'CSET Add_Mode = Add',
    'CSET B_Constant = false',
    'CSET B_Type = Signed',
    'CSET B_Value = 0',
    'CSET B_Width = 21',
    'CSET Borrow_Sense = Active_Low',
    'CSET Bypass = false',
    'CSET Bypass_CE_Priority = Bypass_Overrides_CE',
    'CSET Bypass_Sense = Active_Low',
    'CSET CE = false',
    'CSET C_In = false',
    'CSET C_Out = false',
    'CSET Implementation = Fabric',
    'CSET Latency = 0',
    'CSET Out_Width = 21',
    'CSET SCLR = false',
    'CSET SINIT = false',
    'CSET SINIT_Value = 0',
    'CSET SSET = false',
    'CSET Sync_CE_Priority = Sync_Overrides_CE',
    'CSET Sync_Ctrl_Priority = Reset_Overrides_Set',
    'CSET component_name = addsb_11_0_5b4a22e47f2359ce',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b325fe3d044452eaf95690ed25ea4a60',
    'sourceFile' => 'hdl/xladdsub.vhd',
    'templateKeyValues' => {
      'core_component_def' => '    a: in std_logic_vector(21 - 1 downto 0);
    s: out std_logic_vector(c_output_width - 1 downto 0);
    b: in std_logic_vector(21 - 1 downto 0)',
      'core_instance_text' => '         a => full_a,
         s => core_s,
         b => full_b',
      'core_name0' => 'addsb_11_0_5b4a22e47f2359ce',
      'entityName' => 'xladdsub_he6_cres_correlator',
      'entity_name.0' => 'xladdsub',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '297e6db192cdd58710a7b31444668611',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "0000000000000000000";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((19 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_b366689086',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '7e3f04b90b2b98d643e06ba16e46cc1b',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '8180e6490b1628d7af75a0f75c304b06',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d0_1_24: std_logic_vector((1 - 1) downto 0);
  signal d1_1_27: std_logic_vector((1 - 1) downto 0);
  signal bit_2_26: std_logic_vector((1 - 1) downto 0);
  signal fully_2_1_bitnot: std_logic_vector((1 - 1) downto 0);
begin
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  bit_2_26 <= d0_1_24 or d1_1_27;
  fully_2_1_bitnot <= not bit_2_26;
  y <= fully_2_1_bitnot;
end',
      'crippled_entity' => 'is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'logical_b1e9d7c303',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f32bc094cb2eafbaa9ebd7c6c48768db',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((4 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((4 - 1) downto 0);
    output_port : out std_logic_vector((4 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_d610556e85',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd2d97c2b03162944ddc2414be08208ae',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e7bbf81c175eafbc3aaa3d494e8610b5',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'de3b5e2dc042033cda46196d1e0a21d2',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '4e78e985281076225507c14a1982f841',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'efc943ac1c7dbba04fcc7d5d515ce972',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b1cadc8c605929532a28caa2ca7c34cc',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_31: unsigned((4 - 1) downto 0);
  signal b_1_34: unsigned((4 - 1) downto 0);
  type array_type_op_mem_32_22 is array (0 to (1 - 1)) of boolean;
  signal op_mem_32_22: array_type_op_mem_32_22 := (
    0 => false);
  signal op_mem_32_22_front_din: boolean;
  signal op_mem_32_22_back: boolean;
  signal op_mem_32_22_push_front_pop_back_en: std_logic;
  signal result_14_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  op_mem_32_22_back <= op_mem_32_22(0);
  proc_op_mem_32_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_32_22_push_front_pop_back_en = \'1\')) then
        op_mem_32_22(0) <= op_mem_32_22_front_din;
      end if;
    end if;
  end process proc_op_mem_32_22;
  result_14_3_rel <= a_1_31 /= b_1_34;
  op_mem_32_22_front_din <= result_14_3_rel;
  op_mem_32_22_push_front_pop_back_en <= \'1\';
  op <= boolean_to_vector(op_mem_32_22_back);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((4 - 1) downto 0);
    b : in std_logic_vector((4 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'relational_01718d4f17',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ea7e1dc0bc8f871f4f42fa5b0822ed64',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_17_32: signed((18 - 1) downto 0);
  signal b_17_35: signed((18 - 1) downto 0);
  type array_type_op_mem_91_20 is array (0 to (1 - 1)) of signed((19 - 1) downto 0);
  signal op_mem_91_20: array_type_op_mem_91_20 := (
    0 => "0000000000000000000");
  signal op_mem_91_20_front_din: signed((19 - 1) downto 0);
  signal op_mem_91_20_back: signed((19 - 1) downto 0);
  signal op_mem_91_20_push_front_pop_back_en: std_logic;
  type array_type_cout_mem_92_22 is array (0 to (1 - 1)) of unsigned((1 - 1) downto 0);
  signal cout_mem_92_22: array_type_cout_mem_92_22 := (
    0 => "0");
  signal cout_mem_92_22_front_din: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_back: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_push_front_pop_back_en: std_logic;
  signal prev_mode_93_22_next: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22_reg_i: std_logic_vector((3 - 1) downto 0);
  signal prev_mode_93_22_reg_o: std_logic_vector((3 - 1) downto 0);
  signal cast_71_18: signed((19 - 1) downto 0);
  signal cast_71_22: signed((19 - 1) downto 0);
  signal internal_s_71_5_addsub: signed((19 - 1) downto 0);
begin
  a_17_32 <= std_logic_vector_to_signed(a);
  b_17_35 <= std_logic_vector_to_signed(b);
  op_mem_91_20_back <= op_mem_91_20(0);
  proc_op_mem_91_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_91_20_push_front_pop_back_en = \'1\')) then
        op_mem_91_20(0) <= op_mem_91_20_front_din;
      end if;
    end if;
  end process proc_op_mem_91_20;
  cout_mem_92_22_back <= cout_mem_92_22(0);
  proc_cout_mem_92_22: process (clk)
  is
    variable i_x_000000: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (cout_mem_92_22_push_front_pop_back_en = \'1\')) then
        cout_mem_92_22(0) <= cout_mem_92_22_front_din;
      end if;
    end if;
  end process proc_cout_mem_92_22;
  prev_mode_93_22_reg_i <= unsigned_to_std_logic_vector(prev_mode_93_22_next);
  prev_mode_93_22 <= std_logic_vector_to_unsigned(prev_mode_93_22_reg_o);
  prev_mode_93_22_reg_inst: entity work.synth_reg_w_init
    generic map (
      init_index => 2, 
      init_value => b"010", 
      latency => 1, 
      width => 3)
    port map (
      ce => ce, 
      clk => clk, 
      clr => clr, 
      i => prev_mode_93_22_reg_i, 
      o => prev_mode_93_22_reg_o);
  cast_71_18 <= s2s_cast(a_17_32, 17, 19, 17);
  cast_71_22 <= s2s_cast(b_17_35, 17, 19, 17);
  internal_s_71_5_addsub <= cast_71_18 - cast_71_22;
  op_mem_91_20_front_din <= internal_s_71_5_addsub;
  op_mem_91_20_push_front_pop_back_en <= \'1\';
  cout_mem_92_22_front_din <= std_logic_vector_to_unsigned("0");
  cout_mem_92_22_push_front_pop_back_en <= \'1\';
  prev_mode_93_22_next <= std_logic_vector_to_unsigned("000");
  s <= signed_to_std_logic_vector(op_mem_91_20_back);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((18 - 1) downto 0);
    b : in std_logic_vector((18 - 1) downto 0);
    s : out std_logic_vector((19 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'addsub_7461f1deba',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f4268b7f9a962f2853e2e76107adc70e',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((2 - 1) downto 0);
  signal in1_1_27: unsigned((2 - 1) downto 0);
  signal in2_1_31: unsigned((2 - 1) downto 0);
  signal in3_1_35: unsigned((2 - 1) downto 0);
  signal in4_1_39: unsigned((2 - 1) downto 0);
  signal in5_1_43: unsigned((2 - 1) downto 0);
  signal in6_1_47: unsigned((2 - 1) downto 0);
  signal in7_1_51: unsigned((2 - 1) downto 0);
  signal y_2_1_concat: unsigned((16 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  in5_1_43 <= std_logic_vector_to_unsigned(in5);
  in6_1_47 <= std_logic_vector_to_unsigned(in6);
  in7_1_51 <= std_logic_vector_to_unsigned(in7);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39) & unsigned_to_std_logic_vector(in5_1_43) & unsigned_to_std_logic_vector(in6_1_47) & unsigned_to_std_logic_vector(in7_1_51));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((2 - 1) downto 0);
    in1 : in std_logic_vector((2 - 1) downto 0);
    in2 : in std_logic_vector((2 - 1) downto 0);
    in3 : in std_logic_vector((2 - 1) downto 0);
    in4 : in std_logic_vector((2 - 1) downto 0);
    in5 : in std_logic_vector((2 - 1) downto 0);
    in6 : in std_logic_vector((2 - 1) downto 0);
    in7 : in std_logic_vector((2 - 1) downto 0);
    y : out std_logic_vector((16 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_910f8ba85a',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c9205e020f199dc2604b57fa93037de1',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((2 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((2 - 1) downto 0);
    output_port : out std_logic_vector((2 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_9a54e08c7c',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '5cdf4cc109f45222f6a79a6b4c1743ef',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a3bf7b2c91f23974a12bf22a0d1c4970',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'fdea943048f1ed036812e63c92f07e3d',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '552a186c7d58d52db17d90222289268d',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f24fa392ccd3f9ac67e9d55e67ac14ab',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '97732e74bb0afdd80dfc1d0f21ef8a37',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '88653a74462148f848edb3e1de7ce590',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '63342fe1f343b290f1dd11cfe5c391aa',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd9a61ec1b788fea50f6a773f35c647ef',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((16 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((16 - 1) downto 0);
    output_port : out std_logic_vector((16 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_ddc3ebdd7c',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '7c762ad6d93cc0750a1ad13f8335d084',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((20 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((20 - 1) downto 0);
    output_port : out std_logic_vector((20 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_713b6c5d29',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '1a906d6f4874ee0253cc41a657e22099',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b7cff13af4435e1e38593b5bcda392d7',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '55c3159f3de1ffefceed289724477c52',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '7670fa58a2eb047f2c7566da06862b14',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f89a1e7766c7052d6c603da04f42b618',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '7dbd4b4ae43efa640d25d018f563ef05',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '95939f15c0e333a02f28a42e68f73fe9',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ad4a2a80d1e91ba1967f66f7f9947a78',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '049fb4803d7b9e468ef283b7002f3c76',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '6d5474a9dca03f8bb783632c9005d951',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'da83cf7279b35932704d34f996c4d9dd',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '560910e6ed420d39d63334f71a47bfe0',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'de5388787b1560485d8a4784042332f4',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '9e83fa7f99306bcdd1ae307b04fd02bf',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '55c53e789434a586b277753dd3baa5ca',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '52956028b87c5cdbc820635b72c2277f',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '0003aae1bd29d406841fe6e43d3c36b6',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal sel_1_20: std_logic_vector((1 - 1) downto 0);
  signal d0_1_24: std_logic_vector((20 - 1) downto 0);
  signal d1_1_27: std_logic_vector((20 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (2 - 1)) of std_logic_vector((20 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    "00000000000000000000",
    "00000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((20 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((20 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal unregy_join_6_1: std_logic_vector((20 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(1);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (pipe_16_22_push_front_pop_back_en = \'1\')) then
        for i in 1 downto 1 loop 
          pipe_16_22(i) <= pipe_16_22(i-1);
        end loop;
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= \'1\';
  y <= pipe_16_22_back;
end',
      'crippled_entity' => 'is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((20 - 1) downto 0);
    d1 : in std_logic_vector((20 - 1) downto 0);
    y : out std_logic_vector((20 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'mux_ce20fdf7b8',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'dbe38c17960dbc8faeb93c72a3897012',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((152 - 1) downto 0);
  signal in1_1_27: unsigned((152 - 1) downto 0);
  signal y_2_1_concat: unsigned((304 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((152 - 1) downto 0);
    in1 : in std_logic_vector((152 - 1) downto 0);
    y : out std_logic_vector((304 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_07f4466348',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '908c27b641ca752b17d493067e198c76',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "0000";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((4 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_4c449dd556',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '8a1b976b1dcb526961b06b1ac35fc978',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((9 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (1 - 1)) of std_logic_vector((9 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    0 => "000000000");
  signal op_mem_20_24_front_din: std_logic_vector((9 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((9 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(0);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((9 - 1) downto 0);
    q : out std_logic_vector((9 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_09771002d6',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '42aca3f4125d08328a991f895e186120',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((144 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (2 - 1)) of std_logic_vector((144 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((144 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((144 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(1);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 1 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((144 - 1) downto 0);
    q : out std_logic_vector((144 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_479574aa10',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '060bf8eb9087084cd48cbe08a37726ef',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal count_reg_20_23: unsigned((9 - 1) downto 0) := "000000000";
begin
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk\'event and (clk = \'1\')) then
      if (ce = \'1\') then
        count_reg_20_23 <= count_reg_20_23 + std_logic_vector_to_unsigned("000000001");
      end if;
    end if;
  end process proc_count_reg_20_23;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((9 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'counter_ca85bf174a',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '02876b50e053d3d61c7b711120cc4775',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((144 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (5 - 1)) of std_logic_vector((144 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((144 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((144 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(4);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 4 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((144 - 1) downto 0);
    q : out std_logic_vector((144 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_f8b24bd8d7',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c757019693f8032fa79ae996578cb9a4',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic;
  type array_type_op_mem_20_24 is array (0 to (2 - 1)) of std_logic;
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    \'0\',
    \'0\');
  signal op_mem_20_24_front_din: std_logic;
  signal op_mem_20_24_back: std_logic;
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d(0);
  op_mem_20_24_back <= op_mem_20_24(1);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 1 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= std_logic_to_vector(op_mem_20_24_back);
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((1 - 1) downto 0);
    q : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_e18fb31a3d',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'fa9917dccfa432e5bda8c103b25249d7',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic;
  type array_type_op_mem_20_24 is array (0 to (7 - 1)) of std_logic;
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    \'0\',
    \'0\',
    \'0\',
    \'0\',
    \'0\',
    \'0\',
    \'0\');
  signal op_mem_20_24_front_din: std_logic;
  signal op_mem_20_24_back: std_logic;
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d(0);
  op_mem_20_24_back <= op_mem_20_24(6);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 6 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= std_logic_to_vector(op_mem_20_24_back);
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((1 - 1) downto 0);
    q : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_fa260f7d22',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '7fcfb545454ce3e83e5fd8fd14400f00',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d0_1_24: std_logic_vector((4 - 1) downto 0);
  signal d1_1_27: std_logic_vector((4 - 1) downto 0);
  type array_type_latency_pipe_5_26 is array (0 to (1 - 1)) of std_logic_vector((4 - 1) downto 0);
  signal latency_pipe_5_26: array_type_latency_pipe_5_26 := (
    0 => "0000");
  signal latency_pipe_5_26_front_din: std_logic_vector((4 - 1) downto 0);
  signal latency_pipe_5_26_back: std_logic_vector((4 - 1) downto 0);
  signal latency_pipe_5_26_push_front_pop_back_en: std_logic;
  signal fully_2_1_bit: std_logic_vector((4 - 1) downto 0);
begin
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  latency_pipe_5_26_back <= latency_pipe_5_26(0);
  proc_latency_pipe_5_26: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (latency_pipe_5_26_push_front_pop_back_en = \'1\')) then
        latency_pipe_5_26(0) <= latency_pipe_5_26_front_din;
      end if;
    end if;
  end process proc_latency_pipe_5_26;
  fully_2_1_bit <= d0_1_24 or d1_1_27;
  latency_pipe_5_26_front_din <= fully_2_1_bit;
  latency_pipe_5_26_push_front_pop_back_en <= \'1\';
  y <= latency_pipe_5_26_back;
end',
      'crippled_entity' => 'is
  port (
    d0 : in std_logic_vector((4 - 1) downto 0);
    d1 : in std_logic_vector((4 - 1) downto 0);
    y : out std_logic_vector((4 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'logical_8c69d6f164',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'cdb0f6e061c4a02fe7d08bad75bf97cb',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal sel_1_20: std_logic_vector((1 - 1) downto 0);
  signal d0_1_24: std_logic_vector((144 - 1) downto 0);
  signal d1_1_27: std_logic_vector((144 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (2 - 1)) of std_logic_vector((144 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((144 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((144 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal unregy_join_6_1: std_logic_vector((144 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(1);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (pipe_16_22_push_front_pop_back_en = \'1\')) then
        for i in 1 downto 1 loop 
          pipe_16_22(i) <= pipe_16_22(i-1);
        end loop;
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= \'1\';
  y <= pipe_16_22_back;
end',
      'crippled_entity' => 'is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((144 - 1) downto 0);
    d1 : in std_logic_vector((144 - 1) downto 0);
    y : out std_logic_vector((144 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'mux_340b095e64',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '29a48e020a25b71a9eb8eeef97c079d6',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e6569336281f730553ab968a3674eb37',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e0bc3ffdcbfde9feb00b7e9ee34c20a8',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '7b6b1033e92c155dd70a67b8f10d4921',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '2880e02b1120e115a0711a8371c30eb1',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'fa58427e9f853bc7ab14f9c47aae6ddb',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c5b4aaac785025412de8f56374d88cd2',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'eb8b3a7ebaea12d83e634848b179cc00',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'be89c498a74d50f399537e431785a412',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b7b3e0e638a31b9ed94955808c32169d',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((20 - 1) downto 0);
  signal in1_1_27: unsigned((20 - 1) downto 0);
  signal in2_1_31: unsigned((20 - 1) downto 0);
  signal in3_1_35: unsigned((20 - 1) downto 0);
  signal in4_1_39: unsigned((20 - 1) downto 0);
  signal in5_1_43: unsigned((20 - 1) downto 0);
  signal in6_1_47: unsigned((20 - 1) downto 0);
  signal in7_1_51: unsigned((20 - 1) downto 0);
  signal y_2_1_concat: unsigned((160 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  in5_1_43 <= std_logic_vector_to_unsigned(in5);
  in6_1_47 <= std_logic_vector_to_unsigned(in6);
  in7_1_51 <= std_logic_vector_to_unsigned(in7);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39) & unsigned_to_std_logic_vector(in5_1_43) & unsigned_to_std_logic_vector(in6_1_47) & unsigned_to_std_logic_vector(in7_1_51));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((20 - 1) downto 0);
    in1 : in std_logic_vector((20 - 1) downto 0);
    in2 : in std_logic_vector((20 - 1) downto 0);
    in3 : in std_logic_vector((20 - 1) downto 0);
    in4 : in std_logic_vector((20 - 1) downto 0);
    in5 : in std_logic_vector((20 - 1) downto 0);
    in6 : in std_logic_vector((20 - 1) downto 0);
    in7 : in std_logic_vector((20 - 1) downto 0);
    y : out std_logic_vector((160 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_babbadab38',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '50021edc9253ef5441e06634957c0b49',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_17_32: signed((18 - 1) downto 0);
  signal b_17_35: signed((19 - 1) downto 0);
  type array_type_op_mem_91_20 is array (0 to (1 - 1)) of signed((20 - 1) downto 0);
  signal op_mem_91_20: array_type_op_mem_91_20 := (
    0 => "00000000000000000000");
  signal op_mem_91_20_front_din: signed((20 - 1) downto 0);
  signal op_mem_91_20_back: signed((20 - 1) downto 0);
  signal op_mem_91_20_push_front_pop_back_en: std_logic;
  type array_type_cout_mem_92_22 is array (0 to (1 - 1)) of unsigned((1 - 1) downto 0);
  signal cout_mem_92_22: array_type_cout_mem_92_22 := (
    0 => "0");
  signal cout_mem_92_22_front_din: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_back: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_push_front_pop_back_en: std_logic;
  signal prev_mode_93_22_next: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22_reg_i: std_logic_vector((3 - 1) downto 0);
  signal prev_mode_93_22_reg_o: std_logic_vector((3 - 1) downto 0);
  signal cast_69_18: signed((20 - 1) downto 0);
  signal cast_69_22: signed((20 - 1) downto 0);
  signal internal_s_69_5_addsub: signed((20 - 1) downto 0);
begin
  a_17_32 <= std_logic_vector_to_signed(a);
  b_17_35 <= std_logic_vector_to_signed(b);
  op_mem_91_20_back <= op_mem_91_20(0);
  proc_op_mem_91_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_91_20_push_front_pop_back_en = \'1\')) then
        op_mem_91_20(0) <= op_mem_91_20_front_din;
      end if;
    end if;
  end process proc_op_mem_91_20;
  cout_mem_92_22_back <= cout_mem_92_22(0);
  proc_cout_mem_92_22: process (clk)
  is
    variable i_x_000000: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (cout_mem_92_22_push_front_pop_back_en = \'1\')) then
        cout_mem_92_22(0) <= cout_mem_92_22_front_din;
      end if;
    end if;
  end process proc_cout_mem_92_22;
  prev_mode_93_22_reg_i <= unsigned_to_std_logic_vector(prev_mode_93_22_next);
  prev_mode_93_22 <= std_logic_vector_to_unsigned(prev_mode_93_22_reg_o);
  prev_mode_93_22_reg_inst: entity work.synth_reg_w_init
    generic map (
      init_index => 2, 
      init_value => b"010", 
      latency => 1, 
      width => 3)
    port map (
      ce => ce, 
      clk => clk, 
      clr => clr, 
      i => prev_mode_93_22_reg_i, 
      o => prev_mode_93_22_reg_o);
  cast_69_18 <= s2s_cast(a_17_32, 17, 20, 17);
  cast_69_22 <= s2s_cast(b_17_35, 17, 20, 17);
  internal_s_69_5_addsub <= cast_69_18 + cast_69_22;
  op_mem_91_20_front_din <= internal_s_69_5_addsub;
  op_mem_91_20_push_front_pop_back_en <= \'1\';
  cout_mem_92_22_front_din <= std_logic_vector_to_unsigned("0");
  cout_mem_92_22_push_front_pop_back_en <= \'1\';
  prev_mode_93_22_next <= std_logic_vector_to_unsigned("000");
  s <= signed_to_std_logic_vector(op_mem_91_20_back);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((18 - 1) downto 0);
    b : in std_logic_vector((19 - 1) downto 0);
    s : out std_logic_vector((20 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'addsub_c1b57d7d0a',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a6bf6160c64f67cfd22c1d6dca524c13',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((21 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((22 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((21 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((22 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_e6bc20c81b',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '25026a7cfe55a494c6c3282a3758ea34',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: signed((21 - 1) downto 0);
  signal output_port_5_5_force: unsigned((21 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_signed(input_port);
  output_port_5_5_force <= signed_to_unsigned(input_port_1_40);
  output_port <= unsigned_to_std_logic_vector(output_port_5_5_force);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((21 - 1) downto 0);
    output_port : out std_logic_vector((21 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_f0ca8483cb',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Adder_Subtracter virtex6 Xilinx,_Inc. 11.0',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET AINIT_Value = 0',
    'CSET A_Type = Signed',
    'CSET A_Width = 23',
    'CSET Add_Mode = Add',
    'CSET B_Constant = false',
    'CSET B_Type = Signed',
    'CSET B_Value = 0',
    'CSET B_Width = 23',
    'CSET Borrow_Sense = Active_Low',
    'CSET Bypass = false',
    'CSET Bypass_CE_Priority = Bypass_Overrides_CE',
    'CSET Bypass_Sense = Active_Low',
    'CSET CE = true',
    'CSET C_In = false',
    'CSET C_Out = false',
    'CSET Implementation = Fabric',
    'CSET Latency = 2',
    'CSET Out_Width = 23',
    'CSET SCLR = false',
    'CSET SINIT = false',
    'CSET SINIT_Value = 0',
    'CSET SSET = false',
    'CSET Sync_CE_Priority = Sync_Overrides_CE',
    'CSET Sync_Ctrl_Priority = Reset_Overrides_Set',
    'CSET component_name = addsb_11_0_e90c40e5de2551a6',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '433bb35b713608da69b5a9b22b0bc3dc',
    'sourceFile' => 'hdl/xladdsub.vhd',
    'templateKeyValues' => {
      'core_component_def' => '    a: in std_logic_vector(23 - 1 downto 0);
    clk: in std_logic:= \'0\';
    ce: in std_logic:= \'0\';
    s: out std_logic_vector(c_output_width - 1 downto 0);
    b: in std_logic_vector(23 - 1 downto 0)',
      'core_instance_text' => '         a => full_a,
         clk => clk,
         ce => internal_ce,
         s => core_s,
         b => full_b',
      'core_name0' => 'addsb_11_0_e90c40e5de2551a6',
      'entityName' => 'xladdsub_he6_cres_correlator',
      'entity_name.0' => 'xladdsub',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '23170c53f35fc4635cbcd3f5e55a3bdd',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '92bcedd6e6aca429b8de64235e924b07',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((22 - 1) downto 0);
  signal output_port_5_5_force: signed((22 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port_5_5_force <= unsigned_to_signed(input_port_1_40);
  output_port <= signed_to_std_logic_vector(output_port_5_5_force);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((22 - 1) downto 0);
    output_port : out std_logic_vector((22 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_c84451c80b',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '9377e83c638dd96c2a0947c5b896e9c5',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  signal d2_1_30: std_logic;
  type array_type_latency_pipe_5_26 is array (0 to (2 - 1)) of std_logic;
  signal latency_pipe_5_26: array_type_latency_pipe_5_26 := (
    \'0\',
    \'0\');
  signal latency_pipe_5_26_front_din: std_logic;
  signal latency_pipe_5_26_back: std_logic;
  signal latency_pipe_5_26_push_front_pop_back_en: std_logic;
  signal bit_2_27: std_logic;
  signal fully_2_1_bitnot: std_logic;
begin
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  d2_1_30 <= d2(0);
  latency_pipe_5_26_back <= latency_pipe_5_26(1);
  proc_latency_pipe_5_26: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (latency_pipe_5_26_push_front_pop_back_en = \'1\')) then
        for i in 1 downto 1 loop 
          latency_pipe_5_26(i) <= latency_pipe_5_26(i-1);
        end loop;
        latency_pipe_5_26(0) <= latency_pipe_5_26_front_din;
      end if;
    end if;
  end process proc_latency_pipe_5_26;
  bit_2_27 <= d0_1_24 and d1_1_27 and d2_1_30;
  fully_2_1_bitnot <= not bit_2_27;
  latency_pipe_5_26_front_din <= fully_2_1_bitnot;
  latency_pipe_5_26_push_front_pop_back_en <= \'1\';
  y <= std_logic_to_vector(latency_pipe_5_26_back);
end',
      'crippled_entity' => 'is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    d2 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'logical_fe87bb6ae4',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ead769a612a5bcdc3e9d8b88142a0737',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b95f479a2c447c2deaf0cc2fe1348b55',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ca4b388a632148944facab6e9fbef33b',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '10de412b3533ac0575e2320544a59544',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '93e9d72e788defb0db187272c387991b',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ad0ec3f7fa9ca2529ba7e746010cc67d',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '739442957ccd607aca02de4d175b7b82',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b9e11f28c85e7453e0909a498413dd83',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '94b0938d9b87a0fdcf3f97b66372c7d5',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'dffae5c0e6071eecfc1155966f7f5b03',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '61042dbf9c17c7aed5c275f38c6981b3',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '9921662abbed3b37e34a8839863335d1',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '7edcfc9ec1edc2376a94e68fe62bf663',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '1e0c185a0d9763f71348e9bfd8889bb9',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '55f975b06bd02ee772ed22579635f664',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '111c6f18c022ed5673420a00d6198a60',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a4f06992cefa1ad487aeeae1a4ac47ed',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '34d270f64e76a0935711d3ed055522f0',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '51ac34ef1ea406c1cc93a23a32f42910',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '8732d0ec495f979a6a91404b0bb54581',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((21 - 1) downto 0);
  signal in1_1_27: unsigned((21 - 1) downto 0);
  signal in2_1_31: unsigned((21 - 1) downto 0);
  signal in3_1_35: unsigned((21 - 1) downto 0);
  signal in4_1_39: unsigned((21 - 1) downto 0);
  signal in5_1_43: unsigned((21 - 1) downto 0);
  signal in6_1_47: unsigned((21 - 1) downto 0);
  signal in7_1_51: unsigned((21 - 1) downto 0);
  signal in8_1_55: unsigned((21 - 1) downto 0);
  signal in9_1_59: unsigned((21 - 1) downto 0);
  signal in10_1_63: unsigned((21 - 1) downto 0);
  signal in11_1_68: unsigned((21 - 1) downto 0);
  signal in12_1_73: unsigned((21 - 1) downto 0);
  signal in13_1_78: unsigned((21 - 1) downto 0);
  signal in14_1_83: unsigned((21 - 1) downto 0);
  signal in15_1_88: unsigned((21 - 1) downto 0);
  signal y_2_1_concat: unsigned((336 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  in5_1_43 <= std_logic_vector_to_unsigned(in5);
  in6_1_47 <= std_logic_vector_to_unsigned(in6);
  in7_1_51 <= std_logic_vector_to_unsigned(in7);
  in8_1_55 <= std_logic_vector_to_unsigned(in8);
  in9_1_59 <= std_logic_vector_to_unsigned(in9);
  in10_1_63 <= std_logic_vector_to_unsigned(in10);
  in11_1_68 <= std_logic_vector_to_unsigned(in11);
  in12_1_73 <= std_logic_vector_to_unsigned(in12);
  in13_1_78 <= std_logic_vector_to_unsigned(in13);
  in14_1_83 <= std_logic_vector_to_unsigned(in14);
  in15_1_88 <= std_logic_vector_to_unsigned(in15);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39) & unsigned_to_std_logic_vector(in5_1_43) & unsigned_to_std_logic_vector(in6_1_47) & unsigned_to_std_logic_vector(in7_1_51) & unsigned_to_std_logic_vector(in8_1_55) & unsigned_to_std_logic_vector(in9_1_59) & unsigned_to_std_logic_vector(in10_1_63) & unsigned_to_std_logic_vector(in11_1_68) & unsigned_to_std_logic_vector(in12_1_73) & unsigned_to_std_logic_vector(in13_1_78) & unsigned_to_std_logic_vector(in14_1_83) & unsigned_to_std_logic_vector(in15_1_88));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((21 - 1) downto 0);
    in1 : in std_logic_vector((21 - 1) downto 0);
    in2 : in std_logic_vector((21 - 1) downto 0);
    in3 : in std_logic_vector((21 - 1) downto 0);
    in4 : in std_logic_vector((21 - 1) downto 0);
    in5 : in std_logic_vector((21 - 1) downto 0);
    in6 : in std_logic_vector((21 - 1) downto 0);
    in7 : in std_logic_vector((21 - 1) downto 0);
    in8 : in std_logic_vector((21 - 1) downto 0);
    in9 : in std_logic_vector((21 - 1) downto 0);
    in10 : in std_logic_vector((21 - 1) downto 0);
    in11 : in std_logic_vector((21 - 1) downto 0);
    in12 : in std_logic_vector((21 - 1) downto 0);
    in13 : in std_logic_vector((21 - 1) downto 0);
    in14 : in std_logic_vector((21 - 1) downto 0);
    in15 : in std_logic_vector((21 - 1) downto 0);
    y : out std_logic_vector((336 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_59dd31cdf4',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '37b88c9a6f6d938d496654382738781d',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlconvert.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Adder_Subtracter virtex6 Xilinx,_Inc. 11.0',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET AINIT_Value = 0',
    'CSET A_Type = Signed',
    'CSET A_Width = 22',
    'CSET Add_Mode = Add',
    'CSET B_Constant = false',
    'CSET B_Type = Signed',
    'CSET B_Value = 0',
    'CSET B_Width = 22',
    'CSET Borrow_Sense = Active_Low',
    'CSET Bypass = false',
    'CSET Bypass_CE_Priority = Bypass_Overrides_CE',
    'CSET Bypass_Sense = Active_Low',
    'CSET CE = false',
    'CSET C_In = false',
    'CSET C_Out = false',
    'CSET Implementation = Fabric',
    'CSET Latency = 0',
    'CSET Out_Width = 22',
    'CSET SCLR = false',
    'CSET SINIT = false',
    'CSET SINIT_Value = 0',
    'CSET SSET = false',
    'CSET Sync_CE_Priority = Sync_Overrides_CE',
    'CSET Sync_Ctrl_Priority = Reset_Overrides_Set',
    'CSET component_name = addsb_11_0_3892e7a2bbe55936',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '4cd32b6a8f4d08d4ead11fac587a3897',
    'sourceFile' => 'hdl/xladdsub.vhd',
    'templateKeyValues' => {
      'core_component_def' => '    a: in std_logic_vector(22 - 1 downto 0);
    s: out std_logic_vector(c_output_width - 1 downto 0);
    b: in std_logic_vector(22 - 1 downto 0)',
      'core_instance_text' => '         a => full_a,
         s => core_s,
         b => full_b',
      'core_name0' => 'addsb_11_0_3892e7a2bbe55936',
      'entityName' => 'xladdsub_he6_cres_correlator',
      'entity_name.0' => 'xladdsub',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'edafd22cb7f01a3c778cda465747d2ba',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '452b1ec85d698c38b79ec5073cd62dbf',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal ip_17_23: signed((20 - 1) downto 0);
begin
  ip_17_23 <= std_logic_vector_to_signed(ip);
  op <= signed_to_std_logic_vector(ip_17_23);
end',
      'crippled_entity' => 'is
  port (
    ip : in std_logic_vector((20 - 1) downto 0);
    op : out std_logic_vector((20 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'scale_97239b8ed2',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '6664b7e7cb75df5f2e79af2aecc9ab20',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_17_32: signed((18 - 1) downto 0);
  signal b_17_35: signed((19 - 1) downto 0);
  type array_type_op_mem_91_20 is array (0 to (1 - 1)) of signed((20 - 1) downto 0);
  signal op_mem_91_20: array_type_op_mem_91_20 := (
    0 => "00000000000000000000");
  signal op_mem_91_20_front_din: signed((20 - 1) downto 0);
  signal op_mem_91_20_back: signed((20 - 1) downto 0);
  signal op_mem_91_20_push_front_pop_back_en: std_logic;
  type array_type_cout_mem_92_22 is array (0 to (1 - 1)) of unsigned((1 - 1) downto 0);
  signal cout_mem_92_22: array_type_cout_mem_92_22 := (
    0 => "0");
  signal cout_mem_92_22_front_din: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_back: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_push_front_pop_back_en: std_logic;
  signal prev_mode_93_22_next: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22_reg_i: std_logic_vector((3 - 1) downto 0);
  signal prev_mode_93_22_reg_o: std_logic_vector((3 - 1) downto 0);
  signal cast_71_18: signed((20 - 1) downto 0);
  signal cast_71_22: signed((20 - 1) downto 0);
  signal internal_s_71_5_addsub: signed((20 - 1) downto 0);
begin
  a_17_32 <= std_logic_vector_to_signed(a);
  b_17_35 <= std_logic_vector_to_signed(b);
  op_mem_91_20_back <= op_mem_91_20(0);
  proc_op_mem_91_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_91_20_push_front_pop_back_en = \'1\')) then
        op_mem_91_20(0) <= op_mem_91_20_front_din;
      end if;
    end if;
  end process proc_op_mem_91_20;
  cout_mem_92_22_back <= cout_mem_92_22(0);
  proc_cout_mem_92_22: process (clk)
  is
    variable i_x_000000: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (cout_mem_92_22_push_front_pop_back_en = \'1\')) then
        cout_mem_92_22(0) <= cout_mem_92_22_front_din;
      end if;
    end if;
  end process proc_cout_mem_92_22;
  prev_mode_93_22_reg_i <= unsigned_to_std_logic_vector(prev_mode_93_22_next);
  prev_mode_93_22 <= std_logic_vector_to_unsigned(prev_mode_93_22_reg_o);
  prev_mode_93_22_reg_inst: entity work.synth_reg_w_init
    generic map (
      init_index => 2, 
      init_value => b"010", 
      latency => 1, 
      width => 3)
    port map (
      ce => ce, 
      clk => clk, 
      clr => clr, 
      i => prev_mode_93_22_reg_i, 
      o => prev_mode_93_22_reg_o);
  cast_71_18 <= s2s_cast(a_17_32, 17, 20, 17);
  cast_71_22 <= s2s_cast(b_17_35, 17, 20, 17);
  internal_s_71_5_addsub <= cast_71_18 - cast_71_22;
  op_mem_91_20_front_din <= internal_s_71_5_addsub;
  op_mem_91_20_push_front_pop_back_en <= \'1\';
  cout_mem_92_22_front_din <= std_logic_vector_to_unsigned("0");
  cout_mem_92_22_push_front_pop_back_en <= \'1\';
  prev_mode_93_22_next <= std_logic_vector_to_unsigned("000");
  s <= signed_to_std_logic_vector(op_mem_91_20_back);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((18 - 1) downto 0);
    b : in std_logic_vector((19 - 1) downto 0);
    s : out std_logic_vector((20 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'addsub_5f641f1cd5',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f2032764d891b4918eda4a6785bbac08',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((21 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((21 - 1) downto 0);
    output_port : out std_logic_vector((21 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_299ca43e25',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '6df5cc6d67bbba17f0422e98fb8a9ccb',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal sel_1_20: std_logic_vector((1 - 1) downto 0);
  signal d0_1_24: std_logic_vector((21 - 1) downto 0);
  signal d1_1_27: std_logic_vector((21 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (2 - 1)) of std_logic_vector((21 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    "000000000000000000000",
    "000000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((21 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((21 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal unregy_join_6_1: std_logic_vector((21 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(1);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (pipe_16_22_push_front_pop_back_en = \'1\')) then
        for i in 1 downto 1 loop 
          pipe_16_22(i) <= pipe_16_22(i-1);
        end loop;
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= \'1\';
  y <= pipe_16_22_back;
end',
      'crippled_entity' => 'is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((21 - 1) downto 0);
    d1 : in std_logic_vector((21 - 1) downto 0);
    y : out std_logic_vector((21 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'mux_46aae2a33a',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f20b93781653128abbebe1aaffb20381',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((37 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((38 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((37 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((38 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_83820b2faf',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '80492c2a937ea64263d06cc89ea91e34',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: signed((37 - 1) downto 0);
  signal output_port_5_5_force: unsigned((37 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_signed(input_port);
  output_port_5_5_force <= signed_to_unsigned(input_port_1_40);
  output_port <= unsigned_to_std_logic_vector(output_port_5_5_force);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((37 - 1) downto 0);
    output_port : out std_logic_vector((37 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_db4c53ade5',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Adder_Subtracter virtex6 Xilinx,_Inc. 11.0',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET AINIT_Value = 0',
    'CSET A_Type = Signed',
    'CSET A_Width = 39',
    'CSET Add_Mode = Add',
    'CSET B_Constant = false',
    'CSET B_Type = Signed',
    'CSET B_Value = 0',
    'CSET B_Width = 39',
    'CSET Borrow_Sense = Active_Low',
    'CSET Bypass = false',
    'CSET Bypass_CE_Priority = Bypass_Overrides_CE',
    'CSET Bypass_Sense = Active_Low',
    'CSET CE = true',
    'CSET C_In = false',
    'CSET C_Out = false',
    'CSET Implementation = Fabric',
    'CSET Latency = 2',
    'CSET Out_Width = 39',
    'CSET SCLR = false',
    'CSET SINIT = false',
    'CSET SINIT_Value = 0',
    'CSET SSET = false',
    'CSET Sync_CE_Priority = Sync_Overrides_CE',
    'CSET Sync_Ctrl_Priority = Reset_Overrides_Set',
    'CSET component_name = addsb_11_0_14f58d3187abde45',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '1c8161586b83be43a560a71ce44f4a09',
    'sourceFile' => 'hdl/xladdsub.vhd',
    'templateKeyValues' => {
      'core_component_def' => '    a: in std_logic_vector(39 - 1 downto 0);
    clk: in std_logic:= \'0\';
    ce: in std_logic:= \'0\';
    s: out std_logic_vector(c_output_width - 1 downto 0);
    b: in std_logic_vector(39 - 1 downto 0)',
      'core_instance_text' => '         a => full_a,
         clk => clk,
         ce => internal_ce,
         s => core_s,
         b => full_b',
      'core_name0' => 'addsb_11_0_14f58d3187abde45',
      'entityName' => 'xladdsub_he6_cres_correlator',
      'entity_name.0' => 'xladdsub',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '4f95323e4a1970266fb312b83dc869bf',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "00000000000000000011111111111111111";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((35 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_2da6af93c2',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f20343dcdee8f01e424b9ea253c0c9fa',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f2159b02e9b56f71860cc5fd953f68c3',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((38 - 1) downto 0);
  signal output_port_5_5_force: signed((38 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port_5_5_force <= unsigned_to_signed(input_port_1_40);
  output_port <= signed_to_std_logic_vector(output_port_5_5_force);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((38 - 1) downto 0);
    output_port : out std_logic_vector((38 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_620dd01637',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b66ade94e3a922bfc1f6a0d328bf94de',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((35 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((35 - 1) downto 0);
    output_port : out std_logic_vector((35 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_ec14c62a89',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'efe33a2ee3fdda6d6385c9a81564e090',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((37 - 1) downto 0);
  signal output_port_5_5_force: signed((37 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port_5_5_force <= unsigned_to_signed(input_port_1_40);
  output_port <= signed_to_std_logic_vector(output_port_5_5_force);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((37 - 1) downto 0);
    output_port : out std_logic_vector((37 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_5b4829fb41',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a376413b53396f3b6d0ca557fc3fa512',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '929e4376a76367f4af7d025179ab7dd4',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '3e41f21829cbaba6f1b816babc8c9241',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '3cc642015deaa8dcfbe34d93b5df58f9',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '8efb303fd13ce855dcaa21235633c944',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '45592b1480c7a4132a4db1feca062e17',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '142074acb0a3c9a290db399343b9089b',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b865efda3b92bd1e591b25ce5af9f33c',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '7d942f88d5086c674f4ff19984e8eb70',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((145 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (3 - 1)) of std_logic_vector((145 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((145 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((145 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(2);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 2 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((145 - 1) downto 0);
    q : out std_logic_vector((145 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_c52fce8d02',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b6d4acd01310e83139438f25ebcace0b',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((144 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal in2_1_31: unsigned((144 - 1) downto 0);
  signal y_2_1_concat: unsigned((289 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((144 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    in2 : in std_logic_vector((144 - 1) downto 0);
    y : out std_logic_vector((289 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_671fe83589',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd9f050ceef88d6c08529526401fbc071',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((145 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((145 - 1) downto 0);
    output_port : out std_logic_vector((145 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_341d1e6e2c',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'bfa4447635f5d4a7d1fe20d333eb1557',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '4c26c58b070a7ae5ae8e59c60ac79d96',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '0d5a7ba8337d299a27edeb28a60e810f',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '77c00fb2a64d5891bfc4d1e0ef2baadf',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '5cffe89e1b4be25b07380f9ec2ec67d3',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((74 - 1) downto 0);
  signal in1_1_27: unsigned((74 - 1) downto 0);
  signal in2_1_31: unsigned((74 - 1) downto 0);
  signal in3_1_35: unsigned((74 - 1) downto 0);
  signal y_2_1_concat: unsigned((296 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((74 - 1) downto 0);
    in1 : in std_logic_vector((74 - 1) downto 0);
    in2 : in std_logic_vector((74 - 1) downto 0);
    in3 : in std_logic_vector((74 - 1) downto 0);
    y : out std_logic_vector((296 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_d67a480105',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f0742f2fd63fb54ba96c1c6b377b81df',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((74 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((74 - 1) downto 0);
    output_port : out std_logic_vector((74 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_efdf1c3890',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '6d963209143809274068410b44a3d2bb',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'fae1532c886e1f64ac5ca48b78596b76',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((36 - 1) downto 0);
  signal in1_1_27: unsigned((36 - 1) downto 0);
  signal y_2_1_concat: unsigned((72 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((36 - 1) downto 0);
    in1 : in std_logic_vector((36 - 1) downto 0);
    y : out std_logic_vector((72 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_c3ccc04d1a',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c3770c873e7330157dd41a3643332326',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xldelay.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd299727c09e45af4a88698e8297e03ba',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((37 - 1) downto 0);
  signal in1_1_27: unsigned((37 - 1) downto 0);
  signal y_2_1_concat: unsigned((74 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((37 - 1) downto 0);
    in1 : in std_logic_vector((37 - 1) downto 0);
    y : out std_logic_vector((74 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_56d57d2c92',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e3a0c9a748f443d86c0dc8db19d87143',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_17_32: signed((36 - 1) downto 0);
  signal b_17_35: signed((36 - 1) downto 0);
  type array_type_op_mem_91_20 is array (0 to (1 - 1)) of signed((37 - 1) downto 0);
  signal op_mem_91_20: array_type_op_mem_91_20 := (
    0 => "0000000000000000000000000000000000000");
  signal op_mem_91_20_front_din: signed((37 - 1) downto 0);
  signal op_mem_91_20_back: signed((37 - 1) downto 0);
  signal op_mem_91_20_push_front_pop_back_en: std_logic;
  type array_type_cout_mem_92_22 is array (0 to (1 - 1)) of unsigned((1 - 1) downto 0);
  signal cout_mem_92_22: array_type_cout_mem_92_22 := (
    0 => "0");
  signal cout_mem_92_22_front_din: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_back: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_push_front_pop_back_en: std_logic;
  signal prev_mode_93_22_next: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22_reg_i: std_logic_vector((3 - 1) downto 0);
  signal prev_mode_93_22_reg_o: std_logic_vector((3 - 1) downto 0);
  signal cast_69_18: signed((37 - 1) downto 0);
  signal cast_69_22: signed((37 - 1) downto 0);
  signal internal_s_69_5_addsub: signed((37 - 1) downto 0);
begin
  a_17_32 <= std_logic_vector_to_signed(a);
  b_17_35 <= std_logic_vector_to_signed(b);
  op_mem_91_20_back <= op_mem_91_20(0);
  proc_op_mem_91_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_91_20_push_front_pop_back_en = \'1\')) then
        op_mem_91_20(0) <= op_mem_91_20_front_din;
      end if;
    end if;
  end process proc_op_mem_91_20;
  cout_mem_92_22_back <= cout_mem_92_22(0);
  proc_cout_mem_92_22: process (clk)
  is
    variable i_x_000000: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (cout_mem_92_22_push_front_pop_back_en = \'1\')) then
        cout_mem_92_22(0) <= cout_mem_92_22_front_din;
      end if;
    end if;
  end process proc_cout_mem_92_22;
  prev_mode_93_22_reg_i <= unsigned_to_std_logic_vector(prev_mode_93_22_next);
  prev_mode_93_22 <= std_logic_vector_to_unsigned(prev_mode_93_22_reg_o);
  prev_mode_93_22_reg_inst: entity work.synth_reg_w_init
    generic map (
      init_index => 2, 
      init_value => b"010", 
      latency => 1, 
      width => 3)
    port map (
      ce => ce, 
      clk => clk, 
      clr => clr, 
      i => prev_mode_93_22_reg_i, 
      o => prev_mode_93_22_reg_o);
  cast_69_18 <= s2s_cast(a_17_32, 34, 37, 34);
  cast_69_22 <= s2s_cast(b_17_35, 34, 37, 34);
  internal_s_69_5_addsub <= cast_69_18 + cast_69_22;
  op_mem_91_20_front_din <= internal_s_69_5_addsub;
  op_mem_91_20_push_front_pop_back_en <= \'1\';
  cout_mem_92_22_front_din <= std_logic_vector_to_unsigned("0");
  cout_mem_92_22_push_front_pop_back_en <= \'1\';
  prev_mode_93_22_next <= std_logic_vector_to_unsigned("000");
  s <= signed_to_std_logic_vector(op_mem_91_20_back);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((36 - 1) downto 0);
    b : in std_logic_vector((36 - 1) downto 0);
    s : out std_logic_vector((37 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'addsub_44b396c607',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b63d7ab1cfa568818e22f43e92bb2f87',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_17_32: signed((36 - 1) downto 0);
  signal b_17_35: signed((36 - 1) downto 0);
  type array_type_op_mem_91_20 is array (0 to (1 - 1)) of signed((37 - 1) downto 0);
  signal op_mem_91_20: array_type_op_mem_91_20 := (
    0 => "0000000000000000000000000000000000000");
  signal op_mem_91_20_front_din: signed((37 - 1) downto 0);
  signal op_mem_91_20_back: signed((37 - 1) downto 0);
  signal op_mem_91_20_push_front_pop_back_en: std_logic;
  type array_type_cout_mem_92_22 is array (0 to (1 - 1)) of unsigned((1 - 1) downto 0);
  signal cout_mem_92_22: array_type_cout_mem_92_22 := (
    0 => "0");
  signal cout_mem_92_22_front_din: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_back: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_push_front_pop_back_en: std_logic;
  signal prev_mode_93_22_next: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22_reg_i: std_logic_vector((3 - 1) downto 0);
  signal prev_mode_93_22_reg_o: std_logic_vector((3 - 1) downto 0);
  signal cast_71_18: signed((37 - 1) downto 0);
  signal cast_71_22: signed((37 - 1) downto 0);
  signal internal_s_71_5_addsub: signed((37 - 1) downto 0);
begin
  a_17_32 <= std_logic_vector_to_signed(a);
  b_17_35 <= std_logic_vector_to_signed(b);
  op_mem_91_20_back <= op_mem_91_20(0);
  proc_op_mem_91_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_91_20_push_front_pop_back_en = \'1\')) then
        op_mem_91_20(0) <= op_mem_91_20_front_din;
      end if;
    end if;
  end process proc_op_mem_91_20;
  cout_mem_92_22_back <= cout_mem_92_22(0);
  proc_cout_mem_92_22: process (clk)
  is
    variable i_x_000000: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (cout_mem_92_22_push_front_pop_back_en = \'1\')) then
        cout_mem_92_22(0) <= cout_mem_92_22_front_din;
      end if;
    end if;
  end process proc_cout_mem_92_22;
  prev_mode_93_22_reg_i <= unsigned_to_std_logic_vector(prev_mode_93_22_next);
  prev_mode_93_22 <= std_logic_vector_to_unsigned(prev_mode_93_22_reg_o);
  prev_mode_93_22_reg_inst: entity work.synth_reg_w_init
    generic map (
      init_index => 2, 
      init_value => b"010", 
      latency => 1, 
      width => 3)
    port map (
      ce => ce, 
      clk => clk, 
      clr => clr, 
      i => prev_mode_93_22_reg_i, 
      o => prev_mode_93_22_reg_o);
  cast_71_18 <= s2s_cast(a_17_32, 34, 37, 34);
  cast_71_22 <= s2s_cast(b_17_35, 34, 37, 34);
  internal_s_71_5_addsub <= cast_71_18 - cast_71_22;
  op_mem_91_20_front_din <= internal_s_71_5_addsub;
  op_mem_91_20_push_front_pop_back_en <= \'1\';
  cout_mem_92_22_front_din <= std_logic_vector_to_unsigned("0");
  cout_mem_92_22_push_front_pop_back_en <= \'1\';
  prev_mode_93_22_next <= std_logic_vector_to_unsigned("000");
  s <= signed_to_std_logic_vector(op_mem_91_20_back);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((36 - 1) downto 0);
    b : in std_logic_vector((36 - 1) downto 0);
    s : out std_logic_vector((37 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'addsub_74747a130a',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd748e732186e4a45763b88ed78ee3aa8',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlconvert.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Multiplier virtex6 Xilinx,_Inc. 11.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET ccmimp = Distributed_Memory',
    'CSET clockenable = true',
    'CSET constvalue = 129',
    'CSET internaluser = 0',
    'CSET multiplier_construction = Use_Mults',
    'CSET multtype = Parallel_Multiplier',
    'CSET optgoal = Speed',
    'CSET outputwidthhigh = 35',
    'CSET outputwidthlow = 0',
    'CSET pipestages = 3',
    'CSET portatype = Signed',
    'CSET portawidth = 18',
    'CSET portbtype = Signed',
    'CSET portbwidth = 18',
    'CSET roundpoint = 0',
    'CSET sclrcepriority = CE_Overrides_SCLR',
    'CSET syncclear = true',
    'CSET use_custom_output_width = true',
    'CSET userounding = false',
    'CSET zerodetect = false',
    'CSET component_name = mult_11_2_ecdcb40ad0958e64',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '16f8a43426077da1c146b777ce099734',
    'sourceFile' => 'hdl/xlmult.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      b: in std_logic_vector(c_b_width - 1 downto 0);
      p: out std_logic_vector(c_output_width - 1 downto 0);
      clk: in std_logic;
      ce: in std_logic;
      sclr: in std_logic;
      a: in std_logic_vector(c_a_width - 1 downto 0)',
      'core_instance_text' => '        a => tmp_a,
        clk => clk,
        ce => internal_ce,
        sclr => internal_clr,
        p => tmp_p,
        b => tmp_b',
      'core_name0' => 'mult_11_2_ecdcb40ad0958e64',
      'entityName' => 'xlmult_he6_cres_correlator',
      'entity_name.0' => 'xlmult',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '5f3750d53b4428fc0644ccfb6991d343',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((36 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (1 - 1)) of std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    0 => "000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(0);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((36 - 1) downto 0);
    q : out std_logic_vector((36 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_e4b9fcaf02',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '2fb7689b64edbb99111a16393c497b72',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xldelay.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '33c9b14f553819f7ccf376ee948ae080',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((145 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (7 - 1)) of std_logic_vector((145 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((145 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((145 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(6);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 6 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((145 - 1) downto 0);
    q : out std_logic_vector((145 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_0a6280bd95',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '5c546df684f9def9f3be924fc38a9631',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'fbb07504516ede1c26df5ca53e035fdf',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '95ba99c77aa99f36bc040c888afa5249',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '02a66d9704078f228f3f83205f3094cc',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c5a2ce9c4fb881b533875ffd01ee80d8',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd55a8d70038ed858702fafed2dd89844',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'bd94dd3466e5179e5d8397f6f5962fd1',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '2158b12bb9bacdbd02a392a6cafc165e',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e10eef5c9224f1d4b51ed6c83a478735',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '2cd895003e0fd445bf1ccbecf998ce79',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal in2_1_31: unsigned((1 - 1) downto 0);
  signal in3_1_35: unsigned((1 - 1) downto 0);
  signal in4_1_39: unsigned((1 - 1) downto 0);
  signal in5_1_43: unsigned((1 - 1) downto 0);
  signal in6_1_47: unsigned((1 - 1) downto 0);
  signal in7_1_51: unsigned((1 - 1) downto 0);
  signal in8_1_55: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((9 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  in5_1_43 <= std_logic_vector_to_unsigned(in5);
  in6_1_47 <= std_logic_vector_to_unsigned(in6);
  in7_1_51 <= std_logic_vector_to_unsigned(in7);
  in8_1_55 <= std_logic_vector_to_unsigned(in8);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39) & unsigned_to_std_logic_vector(in5_1_43) & unsigned_to_std_logic_vector(in6_1_47) & unsigned_to_std_logic_vector(in7_1_51) & unsigned_to_std_logic_vector(in8_1_55));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    in2 : in std_logic_vector((1 - 1) downto 0);
    in3 : in std_logic_vector((1 - 1) downto 0);
    in4 : in std_logic_vector((1 - 1) downto 0);
    in5 : in std_logic_vector((1 - 1) downto 0);
    in6 : in std_logic_vector((1 - 1) downto 0);
    in7 : in std_logic_vector((1 - 1) downto 0);
    in8 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((9 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_0cc72cd991',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '26c90b101ce1ca8b2f28c242a8215ef7',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "0";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_963ed6358a',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '389be4316d66ef74575b2bf3fe4e4043',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((9 - 1) downto 0);
  signal y_2_1_concat: unsigned((10 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((9 - 1) downto 0);
    y : out std_logic_vector((10 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_9779a5cf83',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '1dfa991b6fcc87fd614ec7220fc20863',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Adder_Subtracter virtex6 Xilinx,_Inc. 11.0',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET AINIT_Value = 0',
    'CSET A_Type = Unsigned',
    'CSET A_Width = 3',
    'CSET Add_Mode = Add',
    'CSET B_Constant = false',
    'CSET B_Type = Unsigned',
    'CSET B_Value = 0',
    'CSET B_Width = 3',
    'CSET Borrow_Sense = Active_Low',
    'CSET Bypass = false',
    'CSET Bypass_CE_Priority = Bypass_Overrides_CE',
    'CSET Bypass_Sense = Active_Low',
    'CSET CE = false',
    'CSET C_In = false',
    'CSET C_Out = false',
    'CSET Implementation = Fabric',
    'CSET Latency = 0',
    'CSET Out_Width = 3',
    'CSET SCLR = false',
    'CSET SINIT = false',
    'CSET SINIT_Value = 0',
    'CSET SSET = false',
    'CSET Sync_CE_Priority = Sync_Overrides_CE',
    'CSET Sync_Ctrl_Priority = Reset_Overrides_Set',
    'CSET component_name = addsb_11_0_6a49eeb869ee9525',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '4000d2160d87b67b673c54332df2c083',
    'sourceFile' => 'hdl/xladdsub.vhd',
    'templateKeyValues' => {
      'core_component_def' => '    a: in std_logic_vector(3 - 1 downto 0);
    s: out std_logic_vector(c_output_width - 1 downto 0);
    b: in std_logic_vector(3 - 1 downto 0)',
      'core_instance_text' => '         a => full_a,
         s => core_s,
         b => full_b',
      'core_name0' => 'addsb_11_0_6a49eeb869ee9525',
      'entityName' => 'xladdsub_he6_cres_correlator',
      'entity_name.0' => 'xladdsub',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'fac3b025d423863550e200d7b9da1074',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '52c4ac5bfba7a5aae8a1022c3b579062',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((2 - 1) downto 0);
  signal in1_1_27: unsigned((8 - 1) downto 0);
  signal y_2_1_concat: unsigned((10 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((2 - 1) downto 0);
    in1 : in std_logic_vector((8 - 1) downto 0);
    y : out std_logic_vector((10 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_7eef56098d',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '3d873d44c4fdd6f09d5399124ae0306d',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlconvert_pipeline.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '7042960c7341f9043ae26b18c2fcbbfb',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((9 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (2 - 1)) of std_logic_vector((9 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000",
    "000000000");
  signal op_mem_20_24_front_din: std_logic_vector((9 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((9 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(1);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 1 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((9 - 1) downto 0);
    q : out std_logic_vector((9 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_6104cbef7a',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '15e674eb2be5710d63581a67267f8727',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '14fb45de9357b915c172f1498220e80b',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((289 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (6 - 1)) of std_logic_vector((289 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((289 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((289 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(5);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 5 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((289 - 1) downto 0);
    q : out std_logic_vector((289 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_4583411594',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '799d7dbc65ff662bfeefbeb4f39c5ed5',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((18 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (4 - 1)) of std_logic_vector((18 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000",
    "000000000000000000",
    "000000000000000000",
    "000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((18 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((18 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(3);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 3 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((18 - 1) downto 0);
    q : out std_logic_vector((18 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_2f744cdafb',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ce169fb14637b1d54c864a09bb870a5e',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal ip_18_25: signed((18 - 1) downto 0);
  type array_type_op_mem_48_20 is array (0 to (4 - 1)) of signed((18 - 1) downto 0);
  signal op_mem_48_20: array_type_op_mem_48_20 := (
    "000000000000000000",
    "000000000000000000",
    "000000000000000000",
    "000000000000000000");
  signal op_mem_48_20_front_din: signed((18 - 1) downto 0);
  signal op_mem_48_20_back: signed((18 - 1) downto 0);
  signal op_mem_48_20_push_front_pop_back_en: std_logic;
  signal cast_35_24: signed((19 - 1) downto 0);
  signal internal_ip_35_9_neg: signed((19 - 1) downto 0);
  signal internal_ip_join_30_1: signed((19 - 1) downto 0);
  signal internal_ip_40_3_convert: signed((18 - 1) downto 0);
begin
  ip_18_25 <= std_logic_vector_to_signed(ip);
  op_mem_48_20_back <= op_mem_48_20(3);
  proc_op_mem_48_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_48_20_push_front_pop_back_en = \'1\')) then
        for i in 3 downto 1 loop 
          op_mem_48_20(i) <= op_mem_48_20(i-1);
        end loop;
        op_mem_48_20(0) <= op_mem_48_20_front_din;
      end if;
    end if;
  end process proc_op_mem_48_20;
  cast_35_24 <= s2s_cast(ip_18_25, 17, 19, 17);
  internal_ip_35_9_neg <=  -cast_35_24;
  proc_if_30_1: process (internal_ip_35_9_neg)
  is
  begin
    if false then
      internal_ip_join_30_1 <= std_logic_vector_to_signed("0000000000000000000");
    else 
      internal_ip_join_30_1 <= internal_ip_35_9_neg;
    end if;
  end process proc_if_30_1;
  internal_ip_40_3_convert <= std_logic_vector_to_signed(convert_type(signed_to_std_logic_vector(internal_ip_join_30_1), 19, 17, xlSigned, 18, 17, xlSigned, xlTruncate, xlSaturate));
  op_mem_48_20_front_din <= internal_ip_40_3_convert;
  op_mem_48_20_push_front_pop_back_en <= \'1\';
  op <= signed_to_std_logic_vector(op_mem_48_20_back);
end',
      'crippled_entity' => 'is
  port (
    ip : in std_logic_vector((18 - 1) downto 0);
    op : out std_logic_vector((18 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'negate_894f23b88c',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e4bf4bad85722cf5c2db8a1bfb3ca2ec',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic_vector((18 - 1) downto 0);
  signal d1_1_27: std_logic_vector((18 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (2 - 1)) of std_logic_vector((18 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    "000000000000000000",
    "000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((18 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((18 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((18 - 1) downto 0);
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(1);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (pipe_16_22_push_front_pop_back_en = \'1\')) then
        for i in 1 downto 1 loop 
          pipe_16_22(i) <= pipe_16_22(i-1);
        end loop;
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= \'1\';
  y <= pipe_16_22_back;
end',
      'crippled_entity' => 'is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((18 - 1) downto 0);
    d1 : in std_logic_vector((18 - 1) downto 0);
    y : out std_logic_vector((18 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'mux_1896e7760c',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '5f438f5f01adf036594bdf08b7211442',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((289 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (3 - 1)) of std_logic_vector((289 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((289 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((289 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(2);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 2 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((289 - 1) downto 0);
    q : out std_logic_vector((289 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_80f3e767fa',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 7FFFC0000, 7FFFBFCDC, 7FFDBF9B8, 7FFABF693, 7FF67F36F, 7FF0BF04B, 7FE9FED28, 7FE1FEA04, 7FD8BE6E1, 7FCE3E3BD, 7FC27E09B, 7FB5BDD78, 7FA77DA56, 7F97FD734, 7F877D412, 7F757D0F1, 7F627CDD1, 7F4E3CAB1, 7F387C791, 7F21BC472, 7F09BC153, 7EF07BE35, 7ED63BB18, 7EBA7B7FC, 7E9D7B4E0, 7E7F7B1C5, 7E603AEAA, 7E3F7AB91, 7E1DBA878, 7DFABA560, 7DD6BA249, 7DB139F32, 7D8A79C1D, 7D62B9909, 7D39B95F5, 7D0F792E3, 7CE3F8FD2, 7CB778CC2, 7C89789B3, 7C5A786A5, 7C2A38398, 7BF8B808D, 7BC637D82, 7B9237A79, 7B5D37771, 7B26F746B, 7AEFB7166, 7AB6F6E62, 7A7D36B60, 7A423685F, 7A063655F, 79C8B6262, 798A75F65, 794AB5C6A, 7909F5971, 78C7F5679, 7884B5383, 78407508F, 77FAF4D9C, 77B434AAB, 776C747BC, 7723744CE, 76D9741E3, 768E33EF9, 7641F3C11, 75F47392B, 75A5B3647, 7555F3364, 7504F3084, 74B2F2DA6, 745FB2ACA, 740B727F0, 73B632517, 735FB2242, 7307F1F6E, 72AF31C9C, 7255719CD, 71FA716FF, 719E71434, 71413116C, 70E2F0EA5, 7083B0BE1, 70233091F, 6FC1B0660, 6F5F303A3, 6EFB700E8, 6E96EFE30, 6E312FB7B, 6DCA2F8C8, 6D626F617, 6CF96F369, 6C8F6F0BE, 6C246EE15, 6BB82EB6F, 6B4B2E8CB, 6ADCEE62A, 6A6DAE38C, 69FDAE0F1, 698C6DE58, 691A2DBC3, 68A6AD930, 68326D6A0, 67BD2D412, 6746ED188, 66CFACF01, 66576CC7C, 65DE2C9FA, 6563EC77C, 64E8AC500, 646C6C288, 63EF6C012, 63712BDA0, 62F22BB31, 62722B8C5, 61F12B65C, 616F2B3F6, 60EC6B193, 6068AAF34, 5FE3EACD8, 5F5E2AA7F, 5ED7AA829, 5E502A5D7, 5DC7AA388, 5D3E6A13D, 5CB469EF5, 5C2929CB0, 5B9D29A6E, 5B1069831, 5A82A95F6, 59F3E93BF, 5964A918C, 58D428F5C, 5842E8D2F, 57B0E8B07, 571E288E2, 568A686C0, 55F5E84A2, 556068288, 54CA28071, 543327E5E, 539B67C4F, 5302A7A44, 52692783C, 51CEE7638, 5133E7438, 50982723C, 4FFBA7043, 4F5E26E4F, 4EC026C5E, 4E2126A71, 4D81A6888, 4CE1266A3, 4C3FE64C2, 4B9E262E5, 4AFBA610C, 4A5825F37, 49B425D66, 490F65B98, 486A259CF, 47C3E580A, 471D2564A, 4675A548D, 45CD652D4, 452465120, 447AE4F6F, 43D0A4DC3, 4325E4C1B, 427A64A77, 41CE248D8, 41216473C, 4074245A5, 3FC624413, 3F1764284, 3E68240FA, 3DB863F74, 3D07E3DF2, 3C56E3C75, 3BA523AFC, 3AF323987, 3A4063817, 398CE36AB, 38D923544, 3824A33E1, 376FA3282, 36BA63128, 360422FD3, 354DA2E82, 3496A2D35, 33DF22BED, 332722AA9, 326E6296A, 31B56282F, 30FBE26F9, 3041E25C8, 2F876249B, 2ECCA2373, 2E112224F, 2D5562130, 2C9922015, 2BDC61EFF, 2B1F61DEE, 2A61E1CE1, 29A3E1BD9, 28E5A1AD6, 2826E19D7, 2767A18DE, 26A8617E8, 25E8616F8, 25282160C, 2467A1525, 23A6A1442, 22E561365, 2223E128C, 2161E11B8, 209FA10E8, 1FDCE101E, 1F1A20F58, 1E56E0E97, 1D9360DDB, 1CCFA0D23, 1C0BA0C71, 1B4760BC3, 1A82E0B1A, 19BDE0A76, 18F8E09D7, 1833A093C, 176DE08A6, 16A820816, 15E22078A, 151BE0703, 1455A0680, 138EE0603, 12C82058B, 120120517, 113A204A8, 1072E043F, FAB603DA, EE3A037A, E1BE031F, D53E02C8, C8BE0277, BC3E022B, AFBA01E3, A33201A1, 96AA0163, 8A22012A, 7D9600F7, 710E00C8, 647E009E, 57F20079, 4B620059, 3ED6003E, 32460027, 25B60016, 1922000A, C920002, 20000, FF3720002, FE6E2000A, FDA4E0016, FCDBE0027, FC12E003E, FB4A20059, FA8120079, F9B86009E, F8EF600C8, F826E00F7, F75E2012A, F695A0163, F5CD201A1, F504A01E3, F43C6022B, F37460277, F2AC602C8, F1E46031F, F11CA037A, F054E03DA, EF8D6043F, EEC6204A8, EDFF20517, ED382058B, EC7160603, EBAAA0680, EAE460703, EA1E2078A, E95820816, E892608A6, E7CCA093C, E707609D7, E64260A76, E57D60B1A, E4B8E0BC3, E3F4A0C71, E330A0D23, E26CE0DDB, E1A960E97, E0E620F58, E0236101E, DF60A10E8, DE9E611B8, DDDC6128C, DD1AE1365, DC59A1442, DB98A1525, DAD82160C, DA17E16F8, D957E17E8, D898A18DE, D7D9619D7, D71AA1AD6, D65C61BD9, D59E61CE1, D4E0E1DEE, D423E1EFF, D36722015, D2AAE2130, D1EF2224F, D133A2373, D078E249B, CFBE625C8, CF04626F9, CE4AE282F, CD91E296A, CCD922AA9, CC2122BED, CB69A2D35, CAB2A2E82, C9FC22FD3, C945E3128, C890A3282, C7DBA33E1, C72723544, C673636AB, C5BFE3817, C50D23987, C45B23AFC, C3A963C75, C2F863DF2, C247E3F74, C198240FA, C0E8E4284, C03A24413, BF8C245A5, BEDEE473C, BE32248D8, BD85E4A77, BCDA64C1B, BC2FA4DC3, BB8564F6F, BADBE5120, BA32E52D4, B98AA548D, B8E32564A, B83C6580A, B796259CF, B6F0E5B98, B64C25D66, B5A825F37, B504A610C, B462262E5, B3C0664C2, B31F266A3, B27EA6888, B1DF26A71, B14026C5E, B0A226E4F, B004A7043, AF682723C, AECC67438, AE3167638, AD972783C, ACFDA7A44, AC64E7C4F, ABCD27E5E, AB3628071, AA9FE8288, AA0A684A2, A975E86C0, A8E2288E2, A84F68B07, A7BD68D2F, A72C28F5C, A69BA918C, A60C693BF, A57DA95F6, A4EFE9831, A46329A6E, A3D729CB0, A34BE9EF5, A2C1EA13D, A238AA388, A1B02A5D7, A128AA829, A0A22AA7F, A01C6ACD8, 9F97AAF34, 9F13EB193, 9E912B3F6, 9E0F2B65C, 9D8E2B8C5, 9D0E2BB31, 9C8F2BDA0, 9C10EC012, 9B93EC288, 9B17AC500, 9A9C6C77C, 9A222C9FA, 99A8ECC7C, 9930ACF01, 98B96D188, 98432D412, 97CDED6A0, 9759AD930, 96E62DBC3, 9673EDE58, 9602AE0F1, 9592AE38C, 95236E62A, 94B52E8CB, 94482EB6F, 93DBEEE15, 9370EF0BE, 9306EF369, 929DEF617, 92362F8C8, 91CF2FB7B, 91696FE30, 9104F00E8, 90A1303A3, 903EB0660, 8FDD3091F, 8F7CB0BE1, 8F1D70EA5, 8EBF3116C, 8E61F1434, 8E05F16FF, 8DAAF19CD, 8D5131C9C, 8CF871F6E, 8CA0B2242, 8C4A32517, 8BF4F27F0, 8BA0B2ACA, 8B4D72DA6, 8AFB73084, 8AAA73364, 8A5AB3647, 8A0BF392B, 89BE73C11, 897233EF9, 8926F41E3, 88DCF44CE, 8893F47BC, 884C34AAB, 880574D9C, 87BFF508F, 877BB5383, 873875679, 86F675971, 86B5B5C6A, 8675F5F65, 8637B6262, 85FA3655F, 85BE3685F, 858336B60, 854976E62, 8510B7166, 84D97746B, 84A337771, 846E37A79, 843A37D82, 8407B808D, 83D638398, 83A5F86A5, 8376F89B3, 8348F8CC2, 831C78FD2, 82F0F92E3, 82C6B95F5, 829DB9909, 8275F9C1D, 824F39F32, 8229BA249, 8205BA560, 81E2BA878, 81C0FAB91, 81A03AEAA, 8180FB1C5, 8162FB4E0, 8145FB7FC, 812A3BB18, 810FFBE35, 80F6BC153, 80DEBC472, 80C7FC791, 80B23CAB1, 809DFCDD1, 808AFD0F1, 8078FD412, 80687D734, 8058FDA56, 804ABDD78, 803DFE09B, 80323E3BD, 8027BE6E1, 801E7EA04, 80167ED28, 800FBF04B, 8009FF36F, 8005BF693, 8002BF9B8, 8000BFCDC;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 512x36',
    'CSET read_width_a = 36',
    'CSET read_width_b = 36',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 512',
    'CSET write_width_a = 36',
    'CSET write_width_b = 36',
    'CSET component_name = bmg_72_81b435f9a41a8de3',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '5157afb2ccba937dc018711f9585d0ab',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_81b435f9a41a8de3',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a66856acdddd536c291e67f3024df333',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlpassthrough.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ed9057cdda22f0e298eb638800508a9c',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((18 - 1) downto 0);
  signal in1_1_27: unsigned((18 - 1) downto 0);
  signal y_2_1_concat: unsigned((36 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((18 - 1) downto 0);
    in1 : in std_logic_vector((18 - 1) downto 0);
    y : out std_logic_vector((36 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_b198bd62b0',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'aaf3e10b372dce1604fab13c125777e2',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal rst_1_40: boolean;
  signal count_reg_20_23: unsigned((9 - 1) downto 0) := "000000000";
  signal count_reg_20_23_rst: std_logic;
  signal bool_44_4: boolean;
  signal rst_limit_join_44_1: boolean;
  signal count_reg_join_44_1: unsigned((10 - 1) downto 0);
  signal count_reg_join_44_1_rst: std_logic;
begin
  rst_1_40 <= ((rst) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (count_reg_20_23_rst = \'1\')) then
        count_reg_20_23 <= "000000000";
      elsif (ce = \'1\') then 
        count_reg_20_23 <= count_reg_20_23 + std_logic_vector_to_unsigned("000000001");
      end if;
    end if;
  end process proc_count_reg_20_23;
  bool_44_4 <= rst_1_40 or false;
  proc_if_44_1: process (bool_44_4, count_reg_20_23)
  is
  begin
    if bool_44_4 then
      count_reg_join_44_1_rst <= \'1\';
    else 
      count_reg_join_44_1_rst <= \'0\';
    end if;
    if bool_44_4 then
      rst_limit_join_44_1 <= false;
    else 
      rst_limit_join_44_1 <= false;
    end if;
  end process proc_if_44_1;
  count_reg_20_23_rst <= count_reg_join_44_1_rst;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end',
      'crippled_entity' => 'is
  port (
    rst : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((9 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'counter_d5d467f1b8',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '24331b56e93d0e9f954a55559ea3e7a1',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((160 - 1) downto 0);
  signal in1_1_27: unsigned((160 - 1) downto 0);
  signal y_2_1_concat: unsigned((320 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((160 - 1) downto 0);
    in1 : in std_logic_vector((160 - 1) downto 0);
    y : out std_logic_vector((320 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_2a42ff61a3',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '5257a0eb5f203098dd35d83136a607ea',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "01";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((2 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_a7e2bb9e12',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '5af09cf4c9b970cc1064b4dcf561a713',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal load_1_29: boolean;
  signal din_1_35: unsigned((2 - 1) downto 0);
  signal en_1_45: boolean;
  signal count_reg_20_23_next: unsigned((2 - 1) downto 0);
  signal count_reg_20_23: unsigned((2 - 1) downto 0) := "00";
  signal count_reg_20_23_en: std_logic;
  signal cast_54_19: signed((4 - 1) downto 0);
  signal count_reg_54_7_addsub: signed((4 - 1) downto 0);
  signal count_reg_join_48_3: signed((4 - 1) downto 0);
  signal count_reg_join_44_1: signed((4 - 1) downto 0);
  signal count_reg_join_44_1_en: std_logic;
  signal cast_count_reg_20_23_next: unsigned((2 - 1) downto 0);
begin
  load_1_29 <= ((load) = "1");
  din_1_35 <= std_logic_vector_to_unsigned(din);
  en_1_45 <= ((en) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (count_reg_20_23_en = \'1\')) then
        count_reg_20_23 <= count_reg_20_23_next;
      end if;
    end if;
  end process proc_count_reg_20_23;
  cast_54_19 <= u2s_cast(count_reg_20_23, 0, 4, 0);
  count_reg_54_7_addsub <= cast_54_19 - std_logic_vector_to_signed("0001");
  proc_if_48_3: process (count_reg_54_7_addsub, din_1_35, load_1_29)
  is
  begin
    if load_1_29 then
      count_reg_join_48_3 <= u2s_cast(din_1_35, 0, 4, 0);
    else 
      count_reg_join_48_3 <= count_reg_54_7_addsub;
    end if;
  end process proc_if_48_3;
  proc_if_44_1: process (count_reg_join_48_3, en_1_45)
  is
  begin
    if en_1_45 then
      count_reg_join_44_1_en <= \'1\';
    else 
      count_reg_join_44_1_en <= \'0\';
    end if;
    count_reg_join_44_1 <= count_reg_join_48_3;
  end process proc_if_44_1;
  cast_count_reg_20_23_next <= s2u_cast(count_reg_join_44_1, 0, 2, 0);
  count_reg_20_23_next <= cast_count_reg_20_23_next;
  count_reg_20_23_en <= count_reg_join_44_1_en;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end',
      'crippled_entity' => 'is
  port (
    load : in std_logic_vector((1 - 1) downto 0);
    din : in std_logic_vector((2 - 1) downto 0);
    en : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((2 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'counter_e095645f0c',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '3e38df6234de90c5b0953b584276e970',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_31: unsigned((2 - 1) downto 0);
  signal b_1_34: unsigned((2 - 1) downto 0);
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_12_3_rel <= a_1_31 = b_1_34;
  op <= boolean_to_vector(result_12_3_rel);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((2 - 1) downto 0);
    b : in std_logic_vector((2 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'relational_5f1eb17108',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '5e85df7ec719ce87aaaf17afb6ac7fb4',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_31: unsigned((2 - 1) downto 0);
  signal b_1_34: unsigned((2 - 1) downto 0);
  signal result_14_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_14_3_rel <= a_1_31 /= b_1_34;
  op <= boolean_to_vector(result_14_3_rel);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((2 - 1) downto 0);
    b : in std_logic_vector((2 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'relational_f9928864ea',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '49cb840f1fef3a380c8ba37e565647c7',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal rst_1_40: boolean;
  signal count_reg_20_23: unsigned((1 - 1) downto 0) := "0";
  signal count_reg_20_23_rst: std_logic;
  signal bool_44_4: boolean;
  signal rst_limit_join_44_1: boolean;
  signal count_reg_join_44_1: unsigned((2 - 1) downto 0);
  signal count_reg_join_44_1_rst: std_logic;
begin
  rst_1_40 <= ((rst) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (count_reg_20_23_rst = \'1\')) then
        count_reg_20_23 <= "0";
      elsif (ce = \'1\') then 
        count_reg_20_23 <= count_reg_20_23 + std_logic_vector_to_unsigned("1");
      end if;
    end if;
  end process proc_count_reg_20_23;
  bool_44_4 <= rst_1_40 or false;
  proc_if_44_1: process (bool_44_4, count_reg_20_23)
  is
  begin
    if bool_44_4 then
      count_reg_join_44_1_rst <= \'1\';
    else 
      count_reg_join_44_1_rst <= \'0\';
    end if;
    if bool_44_4 then
      rst_limit_join_44_1 <= false;
    else 
      rst_limit_join_44_1 <= false;
    end if;
  end process proc_if_44_1;
  count_reg_20_23_rst <= count_reg_join_44_1_rst;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end',
      'crippled_entity' => 'is
  port (
    rst : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'counter_9b03e3d644',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd0b19cbae7df67c9b5577867a563a337',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((144 - 1) downto 0);
begin
  d_1_22 <= d;
  q <= d_1_22;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((144 - 1) downto 0);
    q : out std_logic_vector((144 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_e7ebd6b9c6',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '9b2180a4a44034237c1876cc7f82fd40',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic;
begin
  d_1_22 <= d(0);
  q <= std_logic_to_vector(d_1_22);
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((1 - 1) downto 0);
    q : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_0341f7be44',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ad097c78bc9c6e56c45eefde724ea4d9',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '7a02177f41d5ad7ac04ab80f7cc902de',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((144 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (10 - 1)) of std_logic_vector((144 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((144 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((144 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(9);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 9 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((144 - 1) downto 0);
    q : out std_logic_vector((144 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_3a07e89d7c',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '758de299ad9f682d2bf3ddaacfae8044',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((1 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (6 - 1)) of std_logic_vector((1 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "0",
    "0",
    "0",
    "0",
    "0",
    "0");
  signal op_mem_20_24_front_din: std_logic_vector((1 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((1 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(5);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 5 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((1 - 1) downto 0);
    q : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_5b3ce5f2ae',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'daaf7a8245ec86133746047872343ec8',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((72 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (6 - 1)) of std_logic_vector((72 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((72 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((72 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(5);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 5 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((72 - 1) downto 0);
    q : out std_logic_vector((72 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_d045e729a5',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e3ff4deebbe64a78401f7eba957c64af',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((72 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (5 - 1)) of std_logic_vector((72 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((72 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((72 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(4);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 4 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((72 - 1) downto 0);
    q : out std_logic_vector((72 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_35ebbe4bd4',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '443f04f199d5f33145335f7e1c93c272',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((72 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (3 - 1)) of std_logic_vector((72 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((72 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((72 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(2);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 2 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((72 - 1) downto 0);
    q : out std_logic_vector((72 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_18feacf6a1',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '9aa73fdd6ec50e4aeec4418435217113',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal sel_1_20: std_logic_vector((1 - 1) downto 0);
  signal d0_1_24: std_logic_vector((72 - 1) downto 0);
  signal d1_1_27: std_logic_vector((72 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (7 - 1)) of std_logic_vector((72 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    "000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((72 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((72 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal unregy_join_6_1: std_logic_vector((72 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(6);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (pipe_16_22_push_front_pop_back_en = \'1\')) then
        for i in 6 downto 1 loop 
          pipe_16_22(i) <= pipe_16_22(i-1);
        end loop;
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= \'1\';
  y <= pipe_16_22_back;
end',
      'crippled_entity' => 'is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((72 - 1) downto 0);
    d1 : in std_logic_vector((72 - 1) downto 0);
    y : out std_logic_vector((72 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'mux_d98188e61d',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '675dc59c5edf0a73374f36f0973c9fe5',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal sel_1_20: std_logic_vector((1 - 1) downto 0);
  signal d0_1_24: std_logic_vector((72 - 1) downto 0);
  signal d1_1_27: std_logic_vector((72 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic_vector((72 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => "000000000000000000000000000000000000000000000000000000000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((72 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((72 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal unregy_join_6_1: std_logic_vector((72 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (pipe_16_22_push_front_pop_back_en = \'1\')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= \'1\';
  y <= pipe_16_22_back;
end',
      'crippled_entity' => 'is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((72 - 1) downto 0);
    d1 : in std_logic_vector((72 - 1) downto 0);
    y : out std_logic_vector((72 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'mux_3d87a88ac3',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd5ae0b17cbb1d9d07f4e4fc30092c0cf',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((36 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (256 - 1)) of std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(255);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 255 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((36 - 1) downto 0);
    q : out std_logic_vector((36 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_1f855d073b',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '469d0b121781904ac966646231cd68c5',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "000000001";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((9 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_b4ec9de7d1',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '4ec7211565fb5370885d253fd4556ebc',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "000000000";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((9 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_fd85eb7067',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '4d54d02eccb7e9661541234c5cb7c5ba',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "100000000";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((9 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_4a391b9a0e',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd5d587a1483d9c7368c9deeff72eeed7',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal load_1_29: boolean;
  signal din_1_35: unsigned((9 - 1) downto 0);
  signal en_1_45: boolean;
  signal count_reg_20_23_next: unsigned((9 - 1) downto 0);
  signal count_reg_20_23: unsigned((9 - 1) downto 0) := "000000000";
  signal count_reg_20_23_en: std_logic;
  signal cast_54_19: signed((11 - 1) downto 0);
  signal count_reg_54_7_addsub: signed((11 - 1) downto 0);
  signal count_reg_join_48_3: signed((11 - 1) downto 0);
  signal count_reg_join_44_1: signed((11 - 1) downto 0);
  signal count_reg_join_44_1_en: std_logic;
  signal cast_count_reg_20_23_next: unsigned((9 - 1) downto 0);
begin
  load_1_29 <= ((load) = "1");
  din_1_35 <= std_logic_vector_to_unsigned(din);
  en_1_45 <= ((en) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (count_reg_20_23_en = \'1\')) then
        count_reg_20_23 <= count_reg_20_23_next;
      end if;
    end if;
  end process proc_count_reg_20_23;
  cast_54_19 <= u2s_cast(count_reg_20_23, 0, 11, 0);
  count_reg_54_7_addsub <= cast_54_19 - std_logic_vector_to_signed("00000000001");
  proc_if_48_3: process (count_reg_54_7_addsub, din_1_35, load_1_29)
  is
  begin
    if load_1_29 then
      count_reg_join_48_3 <= u2s_cast(din_1_35, 0, 11, 0);
    else 
      count_reg_join_48_3 <= count_reg_54_7_addsub;
    end if;
  end process proc_if_48_3;
  proc_if_44_1: process (count_reg_join_48_3, en_1_45)
  is
  begin
    if en_1_45 then
      count_reg_join_44_1_en <= \'1\';
    else 
      count_reg_join_44_1_en <= \'0\';
    end if;
    count_reg_join_44_1 <= count_reg_join_48_3;
  end process proc_if_44_1;
  cast_count_reg_20_23_next <= s2u_cast(count_reg_join_44_1, 0, 9, 0);
  count_reg_20_23_next <= cast_count_reg_20_23_next;
  count_reg_20_23_en <= count_reg_join_44_1_en;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end',
      'crippled_entity' => 'is
  port (
    load : in std_logic_vector((1 - 1) downto 0);
    din : in std_logic_vector((9 - 1) downto 0);
    en : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((9 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'counter_1dea202a2f',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '0a63ec0c3ee5b001c3703d08c6cdfb43',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_31: unsigned((9 - 1) downto 0);
  signal b_1_34: unsigned((9 - 1) downto 0);
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_12_3_rel <= a_1_31 = b_1_34;
  op <= boolean_to_vector(result_12_3_rel);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((9 - 1) downto 0);
    b : in std_logic_vector((9 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'relational_6c3ee657fa',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '92622afe276f2073e58b81817cc03bd6',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_31: unsigned((9 - 1) downto 0);
  signal b_1_34: unsigned((9 - 1) downto 0);
  signal result_14_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_14_3_rel <= a_1_31 /= b_1_34;
  op <= boolean_to_vector(result_14_3_rel);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((9 - 1) downto 0);
    b : in std_logic_vector((9 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'relational_78eac2928d',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '8017f0911834ec3597996b6c0260c801',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e94602a5f43fa27958249e103210b7d1',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  signal d2_1_30: std_logic;
  type array_type_latency_pipe_5_26 is array (0 to (3 - 1)) of std_logic;
  signal latency_pipe_5_26: array_type_latency_pipe_5_26 := (
    \'0\',
    \'0\',
    \'0\');
  signal latency_pipe_5_26_front_din: std_logic;
  signal latency_pipe_5_26_back: std_logic;
  signal latency_pipe_5_26_push_front_pop_back_en: std_logic;
  signal bit_2_27: std_logic;
  signal fully_2_1_bitnot: std_logic;
begin
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  d2_1_30 <= d2(0);
  latency_pipe_5_26_back <= latency_pipe_5_26(2);
  proc_latency_pipe_5_26: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (latency_pipe_5_26_push_front_pop_back_en = \'1\')) then
        for i in 2 downto 1 loop 
          latency_pipe_5_26(i) <= latency_pipe_5_26(i-1);
        end loop;
        latency_pipe_5_26(0) <= latency_pipe_5_26_front_din;
      end if;
    end if;
  end process proc_latency_pipe_5_26;
  bit_2_27 <= d0_1_24 and d1_1_27 and d2_1_30;
  fully_2_1_bitnot <= not bit_2_27;
  latency_pipe_5_26_front_din <= fully_2_1_bitnot;
  latency_pipe_5_26_push_front_pop_back_en <= \'1\';
  y <= std_logic_to_vector(latency_pipe_5_26_back);
end',
      'crippled_entity' => 'is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    d2 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'logical_3013ab8805',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '2931cd02700672360e2854ce2c3c9e64',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '7afbbe7a0bcc2bd8790bc23033fdf2d2',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((2 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((2 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_e6f5ee726b',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '510e7637a95c15bd5a168840e10b7a00',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((2 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((3 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((2 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((3 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_6160d7387c',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '0833dabd9d0eb67f2b9ed8a0aa34cc9c',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlconvert_pipeline.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '888276a634a3c22de191ece79e572675',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((2 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (2 - 1)) of std_logic_vector((2 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "00",
    "00");
  signal op_mem_20_24_front_din: std_logic_vector((2 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((2 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(1);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 1 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((2 - 1) downto 0);
    q : out std_logic_vector((2 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_fcebea29b9',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e36a49588c68b2de2f9ae9415773de7e',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xldelay.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'dccb5139836550f8f578b5111ef7f5d9',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((2 - 1) downto 0);
  signal y_2_1_concat: unsigned((3 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((2 - 1) downto 0);
    y : out std_logic_vector((3 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_4a9a9a25a3',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '25cd18f4560ff29a25fb04793e7b1ceb',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'fbe3924f701fffca341e4696be80d40f',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '5e9135ec3702eb7fb95dee33550530e4',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Distributed_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET ce_overrides = sync_controls_overrides_ce',
    'CSET coefficient_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 7FFFC0000, 5A82A95F6, 20000, A57DA95F6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;',
    '
]',
    'CSET common_output_ce = false',
    'CSET common_output_clk = false',
    'CSET data_width = 36',
    'CSET default_data = 0',
    'CSET default_data_radix = 16',
    'CSET depth = 16',
    'CSET dual_port_address = non_registered',
    'CSET dual_port_output_clock_enable = false',
    'CSET input_clock_enable = false',
    'CSET input_options = non_registered',
    'CSET memory_type = rom',
    'CSET output_options = registered',
    'CSET qualify_we_with_i_ce = false',
    'CSET reset_qdpo = false',
    'CSET reset_qspo = false',
    'CSET single_port_output_clock_enable = true',
    'CSET sync_reset_qdpo = false',
    'CSET sync_reset_qspo = false',
    'CSET component_name = dmg_72_4bdef3e2183e064a',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '5051a8b6959cdd04a8ac14ac51791487',
    'sourceFile' => 'hdl/xlsprom_dist.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      a: in std_logic_vector(c_address_width - 1 downto 0);
      clk: in std_logic;
      qspo_ce: in std_logic;
      qspo: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        a => core_addr,
        clk => clk,
        qspo_ce => core_ce,
        qspo => core_data_out',
      'core_name0' => 'dmg_72_4bdef3e2183e064a',
      'entityName' => 'xlsprom_dist_he6_cres_correlator',
      'entity_name.0' => 'xlsprom_dist',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '9585c0cee1f67cd6525d539c8afb3677',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlpassthrough.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '6d9849c50dc31682ac77d65663bb94cc',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a5e0cd8e29f4aef0fba24cc330aaafd8',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((36 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (128 - 1)) of std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(127);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 127 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((36 - 1) downto 0);
    q : out std_logic_vector((36 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_c33e9b879a',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd79079c104728231229f8185fe35b4f8',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "00000001";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_b437b02512',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '6881e3e9fe47f0cbdc2e654a4e3326e1',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "00000000";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_91ef1678ca',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '3357ffe50653e9d14d4f9101dfc712bf',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "10000000";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_e8aae5d3bb',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ed2982918034e914e232b6b5a3120cd5',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal load_1_29: boolean;
  signal din_1_35: unsigned((8 - 1) downto 0);
  signal en_1_45: boolean;
  signal count_reg_20_23_next: unsigned((8 - 1) downto 0);
  signal count_reg_20_23: unsigned((8 - 1) downto 0) := "00000000";
  signal count_reg_20_23_en: std_logic;
  signal cast_54_19: signed((10 - 1) downto 0);
  signal count_reg_54_7_addsub: signed((10 - 1) downto 0);
  signal count_reg_join_48_3: signed((10 - 1) downto 0);
  signal count_reg_join_44_1: signed((10 - 1) downto 0);
  signal count_reg_join_44_1_en: std_logic;
  signal cast_count_reg_20_23_next: unsigned((8 - 1) downto 0);
begin
  load_1_29 <= ((load) = "1");
  din_1_35 <= std_logic_vector_to_unsigned(din);
  en_1_45 <= ((en) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (count_reg_20_23_en = \'1\')) then
        count_reg_20_23 <= count_reg_20_23_next;
      end if;
    end if;
  end process proc_count_reg_20_23;
  cast_54_19 <= u2s_cast(count_reg_20_23, 0, 10, 0);
  count_reg_54_7_addsub <= cast_54_19 - std_logic_vector_to_signed("0000000001");
  proc_if_48_3: process (count_reg_54_7_addsub, din_1_35, load_1_29)
  is
  begin
    if load_1_29 then
      count_reg_join_48_3 <= u2s_cast(din_1_35, 0, 10, 0);
    else 
      count_reg_join_48_3 <= count_reg_54_7_addsub;
    end if;
  end process proc_if_48_3;
  proc_if_44_1: process (count_reg_join_48_3, en_1_45)
  is
  begin
    if en_1_45 then
      count_reg_join_44_1_en <= \'1\';
    else 
      count_reg_join_44_1_en <= \'0\';
    end if;
    count_reg_join_44_1 <= count_reg_join_48_3;
  end process proc_if_44_1;
  cast_count_reg_20_23_next <= s2u_cast(count_reg_join_44_1, 0, 8, 0);
  count_reg_20_23_next <= cast_count_reg_20_23_next;
  count_reg_20_23_en <= count_reg_join_44_1_en;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end',
      'crippled_entity' => 'is
  port (
    load : in std_logic_vector((1 - 1) downto 0);
    din : in std_logic_vector((8 - 1) downto 0);
    en : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'counter_a98fb09579',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a40234a17f28f2875a29b26c0a65bcc1',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_31: unsigned((8 - 1) downto 0);
  signal b_1_34: unsigned((8 - 1) downto 0);
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_12_3_rel <= a_1_31 = b_1_34;
  op <= boolean_to_vector(result_12_3_rel);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((8 - 1) downto 0);
    b : in std_logic_vector((8 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'relational_54048c8b02',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f656afd1eff99591face4c094ec46614',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_31: unsigned((8 - 1) downto 0);
  signal b_1_34: unsigned((8 - 1) downto 0);
  signal result_14_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_14_3_rel <= a_1_31 /= b_1_34;
  op <= boolean_to_vector(result_14_3_rel);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((8 - 1) downto 0);
    b : in std_logic_vector((8 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'relational_16235eb2bf',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd44044eb81f12be6b9c483d829f6a4de',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal rst_1_40: boolean;
  signal count_reg_20_23: unsigned((8 - 1) downto 0) := "00000000";
  signal count_reg_20_23_rst: std_logic;
  signal bool_44_4: boolean;
  signal rst_limit_join_44_1: boolean;
  signal count_reg_join_44_1: unsigned((9 - 1) downto 0);
  signal count_reg_join_44_1_rst: std_logic;
begin
  rst_1_40 <= ((rst) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (count_reg_20_23_rst = \'1\')) then
        count_reg_20_23 <= "00000000";
      elsif (ce = \'1\') then 
        count_reg_20_23 <= count_reg_20_23 + std_logic_vector_to_unsigned("00000001");
      end if;
    end if;
  end process proc_count_reg_20_23;
  bool_44_4 <= rst_1_40 or false;
  proc_if_44_1: process (bool_44_4, count_reg_20_23)
  is
  begin
    if bool_44_4 then
      count_reg_join_44_1_rst <= \'1\';
    else 
      count_reg_join_44_1_rst <= \'0\';
    end if;
    if bool_44_4 then
      rst_limit_join_44_1 <= false;
    else 
      rst_limit_join_44_1 <= false;
    end if;
  end process proc_if_44_1;
  count_reg_20_23_rst <= count_reg_join_44_1_rst;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end',
      'crippled_entity' => 'is
  port (
    rst : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'counter_11ccef49a2',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '5db8117c49a5ea5767418950198257c1',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b56ca156a5102fe38d440275cf1e4d3f',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c9aa915784b421069991219248540fb1',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '8e4be598ec3a0d78bbf66c7db65257e0',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal in2_1_31: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((3 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    in2 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((3 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_452c4d3410',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '00be63b0668839e1d0849f185ec03b3a',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((2 - 1) downto 0);
  signal in1_1_27: unsigned((2 - 1) downto 0);
  signal y_2_1_concat: unsigned((4 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((2 - 1) downto 0);
    in1 : in std_logic_vector((2 - 1) downto 0);
    y : out std_logic_vector((4 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_bd20dd351d',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '70e32e816279d78b17be64e7575ae5a8',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlconvert_pipeline.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b3ebe976e59446286d6216fe96a94407',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((3 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (2 - 1)) of std_logic_vector((3 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000",
    "000");
  signal op_mem_20_24_front_din: std_logic_vector((3 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((3 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(1);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 1 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((3 - 1) downto 0);
    q : out std_logic_vector((3 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_6edcd04662',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ee1d59aa999906caac649f20360ca4cc',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xldelay.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f61d0d71e2faeae47828b0c43c6f97d9',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((3 - 1) downto 0);
  signal y_2_1_concat: unsigned((4 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((3 - 1) downto 0);
    y : out std_logic_vector((4 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_949f038a6d',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '6749ea19d56925609a16dff5c06b76d6',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ffda81b93a5870857a0492e521251024',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '1c64fee439855df38ffa6a5e930ce17e',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 7FFFC0000, 7641F3C11, 5A82A95F6, 30FBE26F9, 20000, CF04626F9, A57DA95F6, 89BE73C11;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 512x36',
    'CSET read_width_a = 36',
    'CSET read_width_b = 36',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 8',
    'CSET write_width_a = 36',
    'CSET write_width_b = 36',
    'CSET component_name = bmg_72_98882796f45625cb',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c20d6b39633c24a7aac4fcccac3c2d53',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_98882796f45625cb',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'db22dc4d243e61f9571a7ac85e900f52',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlpassthrough.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a47d48d423cef099fbdac956f1a4ce21',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '10d463dfcf6082fd48fed80c70e6beb7',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((36 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (64 - 1)) of std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(63);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 63 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((36 - 1) downto 0);
    q : out std_logic_vector((36 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_9b6c7a899e',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '538e91b9afa9a360bc51bc0f34c944b6',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "0000001";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((7 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_180df391de',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b5248d3f5b5143ba54a49d01587b0d86',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "0000000";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((7 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_7244cd602b',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'db61cfd489a472805db2684370ef5f3f',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "1000000";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((7 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_7b07120b87',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'dce601d3830a917bb08d98a34f7d99d2',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal load_1_29: boolean;
  signal din_1_35: unsigned((7 - 1) downto 0);
  signal en_1_45: boolean;
  signal count_reg_20_23_next: unsigned((7 - 1) downto 0);
  signal count_reg_20_23: unsigned((7 - 1) downto 0) := "0000000";
  signal count_reg_20_23_en: std_logic;
  signal cast_54_19: signed((9 - 1) downto 0);
  signal count_reg_54_7_addsub: signed((9 - 1) downto 0);
  signal count_reg_join_48_3: signed((9 - 1) downto 0);
  signal count_reg_join_44_1: signed((9 - 1) downto 0);
  signal count_reg_join_44_1_en: std_logic;
  signal cast_count_reg_20_23_next: unsigned((7 - 1) downto 0);
begin
  load_1_29 <= ((load) = "1");
  din_1_35 <= std_logic_vector_to_unsigned(din);
  en_1_45 <= ((en) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (count_reg_20_23_en = \'1\')) then
        count_reg_20_23 <= count_reg_20_23_next;
      end if;
    end if;
  end process proc_count_reg_20_23;
  cast_54_19 <= u2s_cast(count_reg_20_23, 0, 9, 0);
  count_reg_54_7_addsub <= cast_54_19 - std_logic_vector_to_signed("000000001");
  proc_if_48_3: process (count_reg_54_7_addsub, din_1_35, load_1_29)
  is
  begin
    if load_1_29 then
      count_reg_join_48_3 <= u2s_cast(din_1_35, 0, 9, 0);
    else 
      count_reg_join_48_3 <= count_reg_54_7_addsub;
    end if;
  end process proc_if_48_3;
  proc_if_44_1: process (count_reg_join_48_3, en_1_45)
  is
  begin
    if en_1_45 then
      count_reg_join_44_1_en <= \'1\';
    else 
      count_reg_join_44_1_en <= \'0\';
    end if;
    count_reg_join_44_1 <= count_reg_join_48_3;
  end process proc_if_44_1;
  cast_count_reg_20_23_next <= s2u_cast(count_reg_join_44_1, 0, 7, 0);
  count_reg_20_23_next <= cast_count_reg_20_23_next;
  count_reg_20_23_en <= count_reg_join_44_1_en;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end',
      'crippled_entity' => 'is
  port (
    load : in std_logic_vector((1 - 1) downto 0);
    din : in std_logic_vector((7 - 1) downto 0);
    en : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((7 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'counter_82d8714dde',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '66dfbca33c2eb8499dfa0680a72e029e',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_31: unsigned((7 - 1) downto 0);
  signal b_1_34: unsigned((7 - 1) downto 0);
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_12_3_rel <= a_1_31 = b_1_34;
  op <= boolean_to_vector(result_12_3_rel);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((7 - 1) downto 0);
    b : in std_logic_vector((7 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'relational_9a3978c602',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '9275a22a9596054be859a55eb4c3d6fc',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_31: unsigned((7 - 1) downto 0);
  signal b_1_34: unsigned((7 - 1) downto 0);
  signal result_14_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_14_3_rel <= a_1_31 /= b_1_34;
  op <= boolean_to_vector(result_14_3_rel);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((7 - 1) downto 0);
    b : in std_logic_vector((7 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'relational_23065a6aa3',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c31a1930156ae513a4cbcf205d897552',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal rst_1_40: boolean;
  signal count_reg_20_23: unsigned((7 - 1) downto 0) := "0000000";
  signal count_reg_20_23_rst: std_logic;
  signal bool_44_4: boolean;
  signal rst_limit_join_44_1: boolean;
  signal count_reg_join_44_1: unsigned((8 - 1) downto 0);
  signal count_reg_join_44_1_rst: std_logic;
begin
  rst_1_40 <= ((rst) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (count_reg_20_23_rst = \'1\')) then
        count_reg_20_23 <= "0000000";
      elsif (ce = \'1\') then 
        count_reg_20_23 <= count_reg_20_23 + std_logic_vector_to_unsigned("0000001");
      end if;
    end if;
  end process proc_count_reg_20_23;
  bool_44_4 <= rst_1_40 or false;
  proc_if_44_1: process (bool_44_4, count_reg_20_23)
  is
  begin
    if bool_44_4 then
      count_reg_join_44_1_rst <= \'1\';
    else 
      count_reg_join_44_1_rst <= \'0\';
    end if;
    if bool_44_4 then
      rst_limit_join_44_1 <= false;
    else 
      rst_limit_join_44_1 <= false;
    end if;
  end process proc_if_44_1;
  count_reg_20_23_rst <= count_reg_join_44_1_rst;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end',
      'crippled_entity' => 'is
  port (
    rst : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((7 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'counter_aaa565147f',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f45b25b0e39993676c6aaf8cde33be8d',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '31c5ae7557b164ccf41d7eb11a0d55fb',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ee1c3b64e38537cbbc81270153fd472e',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((2 - 1) downto 0);
  signal in1_1_27: unsigned((3 - 1) downto 0);
  signal y_2_1_concat: unsigned((5 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((2 - 1) downto 0);
    in1 : in std_logic_vector((3 - 1) downto 0);
    y : out std_logic_vector((5 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_8f12c32de0',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '94bc5553ffd3d5a3931e38327fd22771',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlconvert_pipeline.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f79b32586ed5338066b0d3fa99357436',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((4 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (2 - 1)) of std_logic_vector((4 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "0000",
    "0000");
  signal op_mem_20_24_front_din: std_logic_vector((4 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((4 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(1);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 1 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((4 - 1) downto 0);
    q : out std_logic_vector((4 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_4f82bd00e5',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '611a2b0c4b7ee80e61adf56d673935fe',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xldelay.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd73e06601d9b99bbe9d1bb9c60172be7',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((4 - 1) downto 0);
  signal y_2_1_concat: unsigned((5 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((4 - 1) downto 0);
    y : out std_logic_vector((5 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_cf540617d5',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd16c56ffd505d5e1c95d97d1657753bc',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '7817421f80cc176e78e47fc54e18c70b',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '4ea728fe438247bea096f9c54298e76f',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 7FFFC0000, 7D8A79C1D, 7641F3C11, 6A6DAE38C, 5A82A95F6, 471D2564A, 30FBE26F9, 18F8E09D7, 20000, E707609D7, CF04626F9, B8E32564A, A57DA95F6, 9592AE38C, 89BE73C11, 8275F9C1D;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 512x36',
    'CSET read_width_a = 36',
    'CSET read_width_b = 36',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 16',
    'CSET write_width_a = 36',
    'CSET write_width_b = 36',
    'CSET component_name = bmg_72_448274d16c9804a7',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'be8e47e1ff8330e232d1351dc7214c86',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_448274d16c9804a7',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '7f2333102ab6c4ab8f5a113b1cb55d52',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlpassthrough.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c364676d930135ba0941dbf0bb0f6cd1',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '1d388508c64744c8ed27c29081e822e6',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((36 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (32 - 1)) of std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(31);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 31 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((36 - 1) downto 0);
    q : out std_logic_vector((36 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_895e998e80',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '4e163d7f31d7f1730f06e420761e0c64',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "000001";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((6 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_a267c870be',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'af2bad13c77b7b041e1467dc41d140d0',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "000000";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((6 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_7ea0f2fff7',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '64d46ae81054cf988daec38e904bcb92',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "100000";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((6 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_961b61f8a1',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '512447c72471128ab430622fa6134993',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal load_1_29: boolean;
  signal din_1_35: unsigned((6 - 1) downto 0);
  signal en_1_45: boolean;
  signal count_reg_20_23_next: unsigned((6 - 1) downto 0);
  signal count_reg_20_23: unsigned((6 - 1) downto 0) := "000000";
  signal count_reg_20_23_en: std_logic;
  signal cast_54_19: signed((8 - 1) downto 0);
  signal count_reg_54_7_addsub: signed((8 - 1) downto 0);
  signal count_reg_join_48_3: signed((8 - 1) downto 0);
  signal count_reg_join_44_1: signed((8 - 1) downto 0);
  signal count_reg_join_44_1_en: std_logic;
  signal cast_count_reg_20_23_next: unsigned((6 - 1) downto 0);
begin
  load_1_29 <= ((load) = "1");
  din_1_35 <= std_logic_vector_to_unsigned(din);
  en_1_45 <= ((en) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (count_reg_20_23_en = \'1\')) then
        count_reg_20_23 <= count_reg_20_23_next;
      end if;
    end if;
  end process proc_count_reg_20_23;
  cast_54_19 <= u2s_cast(count_reg_20_23, 0, 8, 0);
  count_reg_54_7_addsub <= cast_54_19 - std_logic_vector_to_signed("00000001");
  proc_if_48_3: process (count_reg_54_7_addsub, din_1_35, load_1_29)
  is
  begin
    if load_1_29 then
      count_reg_join_48_3 <= u2s_cast(din_1_35, 0, 8, 0);
    else 
      count_reg_join_48_3 <= count_reg_54_7_addsub;
    end if;
  end process proc_if_48_3;
  proc_if_44_1: process (count_reg_join_48_3, en_1_45)
  is
  begin
    if en_1_45 then
      count_reg_join_44_1_en <= \'1\';
    else 
      count_reg_join_44_1_en <= \'0\';
    end if;
    count_reg_join_44_1 <= count_reg_join_48_3;
  end process proc_if_44_1;
  cast_count_reg_20_23_next <= s2u_cast(count_reg_join_44_1, 0, 6, 0);
  count_reg_20_23_next <= cast_count_reg_20_23_next;
  count_reg_20_23_en <= count_reg_join_44_1_en;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end',
      'crippled_entity' => 'is
  port (
    load : in std_logic_vector((1 - 1) downto 0);
    din : in std_logic_vector((6 - 1) downto 0);
    en : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((6 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'counter_9686286f74',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '9163d19d006ec8f52dad0282d12b679c',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_31: unsigned((6 - 1) downto 0);
  signal b_1_34: unsigned((6 - 1) downto 0);
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_12_3_rel <= a_1_31 = b_1_34;
  op <= boolean_to_vector(result_12_3_rel);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((6 - 1) downto 0);
    b : in std_logic_vector((6 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'relational_931d61fb72',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '162cd14d16c67b581f57f28fba5ced10',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_31: unsigned((6 - 1) downto 0);
  signal b_1_34: unsigned((6 - 1) downto 0);
  signal result_14_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_14_3_rel <= a_1_31 /= b_1_34;
  op <= boolean_to_vector(result_14_3_rel);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((6 - 1) downto 0);
    b : in std_logic_vector((6 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'relational_fe487ce1c7',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ae35600884154d1aaba912316e7b8d39',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal rst_1_40: boolean;
  signal count_reg_20_23: unsigned((6 - 1) downto 0) := "000000";
  signal count_reg_20_23_rst: std_logic;
  signal bool_44_4: boolean;
  signal rst_limit_join_44_1: boolean;
  signal count_reg_join_44_1: unsigned((7 - 1) downto 0);
  signal count_reg_join_44_1_rst: std_logic;
begin
  rst_1_40 <= ((rst) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (count_reg_20_23_rst = \'1\')) then
        count_reg_20_23 <= "000000";
      elsif (ce = \'1\') then 
        count_reg_20_23 <= count_reg_20_23 + std_logic_vector_to_unsigned("000001");
      end if;
    end if;
  end process proc_count_reg_20_23;
  bool_44_4 <= rst_1_40 or false;
  proc_if_44_1: process (bool_44_4, count_reg_20_23)
  is
  begin
    if bool_44_4 then
      count_reg_join_44_1_rst <= \'1\';
    else 
      count_reg_join_44_1_rst <= \'0\';
    end if;
    if bool_44_4 then
      rst_limit_join_44_1 <= false;
    else 
      rst_limit_join_44_1 <= false;
    end if;
  end process proc_if_44_1;
  count_reg_20_23_rst <= count_reg_join_44_1_rst;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end',
      'crippled_entity' => 'is
  port (
    rst : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((6 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'counter_a117680706',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '81b1ea45d76d34e6d3aece10641355a7',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'eefdac4e74eda7039b529ed95437aa9b',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '96bb04ebdb343233b2e999d7c9ceb304',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '2f1b439370ff7a186fae652e7e609bf6',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '235492a9aabe8c74b34f80766817b2ca',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '7e64b4ae9f143dfe37ebdfd78f7d96bd',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '90f89fbcba43e1f2743587899ee93d7b',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '3a782772a0ee9fee058f57a05408089a',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal in2_1_31: unsigned((1 - 1) downto 0);
  signal in3_1_35: unsigned((1 - 1) downto 0);
  signal in4_1_39: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((5 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    in2 : in std_logic_vector((1 - 1) downto 0);
    in3 : in std_logic_vector((1 - 1) downto 0);
    in4 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((5 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_2b3acb49f4',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '77533fdacaa5d60033793de5140be072',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((2 - 1) downto 0);
  signal in1_1_27: unsigned((4 - 1) downto 0);
  signal y_2_1_concat: unsigned((6 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((2 - 1) downto 0);
    in1 : in std_logic_vector((4 - 1) downto 0);
    y : out std_logic_vector((6 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_ae3f02567e',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ea49dde27182efac7084069e9ea31602',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlconvert_pipeline.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a727e70a32152099e6470108826a3199',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((5 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (2 - 1)) of std_logic_vector((5 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "00000",
    "00000");
  signal op_mem_20_24_front_din: std_logic_vector((5 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((5 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(1);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 1 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((5 - 1) downto 0);
    q : out std_logic_vector((5 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_38f665f8aa',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a5d144ecbb9f80c12626d9a7b977fcdf',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xldelay.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '35c1a76fb9470a6ee0cc8487965bfc85',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((5 - 1) downto 0);
  signal y_2_1_concat: unsigned((6 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((5 - 1) downto 0);
    y : out std_logic_vector((6 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_ac785d9b37',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '410835f280ce412afb1e9af557486de1',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '53593d98701bc6301196560d408af2b5',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e445c41d246b162058b22bc8729ee8c2',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 7FFFC0000, 7F627CDD1, 7D8A79C1D, 7A7D36B60, 7641F3C11, 70E2F0EA5, 6A6DAE38C, 62F22BB31, 5A82A95F6, 5133E7438, 471D2564A, 3C56E3C75, 30FBE26F9, 25282160C, 18F8E09D7, C8BE0277, 20000, F37460277, E707609D7, DAD82160C, CF04626F9, C3A963C75, B8E32564A, AECC67438, A57DA95F6, 9D0E2BB31, 9592AE38C, 8F1D70EA5, 89BE73C11, 858336B60, 8275F9C1D, 809DFCDD1;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 512x36',
    'CSET read_width_a = 36',
    'CSET read_width_b = 36',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 32',
    'CSET write_width_a = 36',
    'CSET write_width_b = 36',
    'CSET component_name = bmg_72_a6d704d36eb848a5',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '9f7b87bf0ac0c8b26ef10ff1492f0af2',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_a6d704d36eb848a5',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '56197af9a233b9bd4f1431641c104a41',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlpassthrough.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '1a5e3c651fd09e9108917f634834b39a',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f5a8991ef3cbfde7f11032613a8e5763',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((36 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (16 - 1)) of std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(15);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 15 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((36 - 1) downto 0);
    q : out std_logic_vector((36 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_3a3620b5a6',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ebf68832c148b48ebeed45be1fa6f494',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "00001";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((5 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_582a3706dd',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '4522f477ee817d9344e420e7e82c7ec4',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "00000";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((5 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_fe72737ca0',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c6c785c7da534170701dbff999551b5f',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "10000";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((5 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_ef0e2e5fc6',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '8eddc26245887d1ff5b1871572cd300a',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal load_1_29: boolean;
  signal din_1_35: unsigned((5 - 1) downto 0);
  signal en_1_45: boolean;
  signal count_reg_20_23_next: unsigned((5 - 1) downto 0);
  signal count_reg_20_23: unsigned((5 - 1) downto 0) := "00000";
  signal count_reg_20_23_en: std_logic;
  signal cast_54_19: signed((7 - 1) downto 0);
  signal count_reg_54_7_addsub: signed((7 - 1) downto 0);
  signal count_reg_join_48_3: signed((7 - 1) downto 0);
  signal count_reg_join_44_1: signed((7 - 1) downto 0);
  signal count_reg_join_44_1_en: std_logic;
  signal cast_count_reg_20_23_next: unsigned((5 - 1) downto 0);
begin
  load_1_29 <= ((load) = "1");
  din_1_35 <= std_logic_vector_to_unsigned(din);
  en_1_45 <= ((en) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (count_reg_20_23_en = \'1\')) then
        count_reg_20_23 <= count_reg_20_23_next;
      end if;
    end if;
  end process proc_count_reg_20_23;
  cast_54_19 <= u2s_cast(count_reg_20_23, 0, 7, 0);
  count_reg_54_7_addsub <= cast_54_19 - std_logic_vector_to_signed("0000001");
  proc_if_48_3: process (count_reg_54_7_addsub, din_1_35, load_1_29)
  is
  begin
    if load_1_29 then
      count_reg_join_48_3 <= u2s_cast(din_1_35, 0, 7, 0);
    else 
      count_reg_join_48_3 <= count_reg_54_7_addsub;
    end if;
  end process proc_if_48_3;
  proc_if_44_1: process (count_reg_join_48_3, en_1_45)
  is
  begin
    if en_1_45 then
      count_reg_join_44_1_en <= \'1\';
    else 
      count_reg_join_44_1_en <= \'0\';
    end if;
    count_reg_join_44_1 <= count_reg_join_48_3;
  end process proc_if_44_1;
  cast_count_reg_20_23_next <= s2u_cast(count_reg_join_44_1, 0, 5, 0);
  count_reg_20_23_next <= cast_count_reg_20_23_next;
  count_reg_20_23_en <= count_reg_join_44_1_en;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end',
      'crippled_entity' => 'is
  port (
    load : in std_logic_vector((1 - 1) downto 0);
    din : in std_logic_vector((5 - 1) downto 0);
    en : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((5 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'counter_9e5adb68be',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b9b8874384342e8df155cd2fa01f6ece',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_31: unsigned((5 - 1) downto 0);
  signal b_1_34: unsigned((5 - 1) downto 0);
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_12_3_rel <= a_1_31 = b_1_34;
  op <= boolean_to_vector(result_12_3_rel);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((5 - 1) downto 0);
    b : in std_logic_vector((5 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'relational_9ece3c8c4e',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '1167186bd3ee0a0898f6e43d489ee960',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_31: unsigned((5 - 1) downto 0);
  signal b_1_34: unsigned((5 - 1) downto 0);
  signal result_14_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_14_3_rel <= a_1_31 /= b_1_34;
  op <= boolean_to_vector(result_14_3_rel);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((5 - 1) downto 0);
    b : in std_logic_vector((5 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'relational_dc5bc996c9',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c35f8e10e9d401ff8bb963e7e31267cc',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal rst_1_40: boolean;
  signal count_reg_20_23: unsigned((5 - 1) downto 0) := "00000";
  signal count_reg_20_23_rst: std_logic;
  signal bool_44_4: boolean;
  signal rst_limit_join_44_1: boolean;
  signal count_reg_join_44_1: unsigned((6 - 1) downto 0);
  signal count_reg_join_44_1_rst: std_logic;
begin
  rst_1_40 <= ((rst) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (count_reg_20_23_rst = \'1\')) then
        count_reg_20_23 <= "00000";
      elsif (ce = \'1\') then 
        count_reg_20_23 <= count_reg_20_23 + std_logic_vector_to_unsigned("00001");
      end if;
    end if;
  end process proc_count_reg_20_23;
  bool_44_4 <= rst_1_40 or false;
  proc_if_44_1: process (bool_44_4, count_reg_20_23)
  is
  begin
    if bool_44_4 then
      count_reg_join_44_1_rst <= \'1\';
    else 
      count_reg_join_44_1_rst <= \'0\';
    end if;
    if bool_44_4 then
      rst_limit_join_44_1 <= false;
    else 
      rst_limit_join_44_1 <= false;
    end if;
  end process proc_if_44_1;
  count_reg_20_23_rst <= count_reg_join_44_1_rst;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end',
      'crippled_entity' => 'is
  port (
    rst : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((5 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'counter_a2ece21d6a',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '4a3f284e5470b606ff276bf3d4ae7a92',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f728acd2317e45c68064f678a1252bb1',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '1ca29d12479c9c862c68a9bca825a33c',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '53c85c89925fb092098d73bdf4e1c362',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '5a78ff8b3871a4733d281c23e68e9dc2',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '60347f68c85997cafba359fd5a761e43',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd30ce1db11dac273798410239a8b840b',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal in2_1_31: unsigned((1 - 1) downto 0);
  signal in3_1_35: unsigned((1 - 1) downto 0);
  signal in4_1_39: unsigned((1 - 1) downto 0);
  signal in5_1_43: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((6 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  in5_1_43 <= std_logic_vector_to_unsigned(in5);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39) & unsigned_to_std_logic_vector(in5_1_43));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    in2 : in std_logic_vector((1 - 1) downto 0);
    in3 : in std_logic_vector((1 - 1) downto 0);
    in4 : in std_logic_vector((1 - 1) downto 0);
    in5 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((6 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_2dc093ca7a',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '246883af96ef3952a01735e6e9ef48c2',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((2 - 1) downto 0);
  signal in1_1_27: unsigned((5 - 1) downto 0);
  signal y_2_1_concat: unsigned((7 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((2 - 1) downto 0);
    in1 : in std_logic_vector((5 - 1) downto 0);
    y : out std_logic_vector((7 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_75261c7c53',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '0d953c8f1f9263d5e2e9e9fea5d01ddc',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlconvert_pipeline.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'bd75928697feda499764461be22b0c48',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((6 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (2 - 1)) of std_logic_vector((6 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000",
    "000000");
  signal op_mem_20_24_front_din: std_logic_vector((6 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((6 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(1);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 1 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((6 - 1) downto 0);
    q : out std_logic_vector((6 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_da3bb0b159',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '57554961371f7082c3e4be8c3fc5924b',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xldelay.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '75121ba1d4f4317c3b5d929419ddbd97',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((6 - 1) downto 0);
  signal y_2_1_concat: unsigned((7 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((6 - 1) downto 0);
    y : out std_logic_vector((7 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_c6a9b6687e',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b506ac8fd0b71f9edfcda21434b328a4',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c4c418a45e8bf3ea8e253968e15523ac',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e31d5d629d035fc3b107e8f4e445c607',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 7FFFC0000, 7FD8BE6E1, 7F627CDD1, 7E9D7B4E0, 7D8A79C1D, 7C2A38398, 7A7D36B60, 7884B5383, 7641F3C11, 73B632517, 70E2F0EA5, 6DCA2F8C8, 6A6DAE38C, 66CFACF01, 62F22BB31, 5ED7AA829, 5A82A95F6, 55F5E84A2, 5133E7438, 4C3FE64C2, 471D2564A, 41CE248D8, 3C56E3C75, 36BA63128, 30FBE26F9, 2B1F61DEE, 25282160C, 1F1A20F58, 18F8E09D7, 12C82058B, C8BE0277, 647E009E, 20000, F9B86009E, F37460277, ED382058B, E707609D7, E0E620F58, DAD82160C, D4E0E1DEE, CF04626F9, C945E3128, C3A963C75, BE32248D8, B8E32564A, B3C0664C2, AECC67438, AA0A684A2, A57DA95F6, A128AA829, 9D0E2BB31, 9930ACF01, 9592AE38C, 92362F8C8, 8F1D70EA5, 8C4A32517, 89BE73C11, 877BB5383, 858336B60, 83D638398, 8275F9C1D, 8162FB4E0, 809DFCDD1, 8027BE6E1;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 512x36',
    'CSET read_width_a = 36',
    'CSET read_width_b = 36',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 64',
    'CSET write_width_a = 36',
    'CSET write_width_b = 36',
    'CSET component_name = bmg_72_b3a5d690118dc305',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '376f5b924828624e80513ceff7c7373a',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_b3a5d690118dc305',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '3e38c70da3ccb95de367c2356762c6c6',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlpassthrough.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '5273a528a7c1623f300fb099c12ef372',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b0f0bdb8cdda60ed6c2c392227bb7dff',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((36 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (8 - 1)) of std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(7);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 7 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((36 - 1) downto 0);
    q : out std_logic_vector((36 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_faa52967c8',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'bab4e5f03ee70a1f19e04ed8bab64e3b',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "0001";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((4 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_67ad97ca70',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'fadb300e660d2c903d1fcb082af6b277',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "1000";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((4 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_145086465d',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e5d7caaf28e4df2580664a69be7df07d',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal load_1_29: boolean;
  signal din_1_35: unsigned((4 - 1) downto 0);
  signal en_1_45: boolean;
  signal count_reg_20_23_next: unsigned((4 - 1) downto 0);
  signal count_reg_20_23: unsigned((4 - 1) downto 0) := "0000";
  signal count_reg_20_23_en: std_logic;
  signal cast_54_19: signed((6 - 1) downto 0);
  signal count_reg_54_7_addsub: signed((6 - 1) downto 0);
  signal count_reg_join_48_3: signed((6 - 1) downto 0);
  signal count_reg_join_44_1: signed((6 - 1) downto 0);
  signal count_reg_join_44_1_en: std_logic;
  signal cast_count_reg_20_23_next: unsigned((4 - 1) downto 0);
begin
  load_1_29 <= ((load) = "1");
  din_1_35 <= std_logic_vector_to_unsigned(din);
  en_1_45 <= ((en) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (count_reg_20_23_en = \'1\')) then
        count_reg_20_23 <= count_reg_20_23_next;
      end if;
    end if;
  end process proc_count_reg_20_23;
  cast_54_19 <= u2s_cast(count_reg_20_23, 0, 6, 0);
  count_reg_54_7_addsub <= cast_54_19 - std_logic_vector_to_signed("000001");
  proc_if_48_3: process (count_reg_54_7_addsub, din_1_35, load_1_29)
  is
  begin
    if load_1_29 then
      count_reg_join_48_3 <= u2s_cast(din_1_35, 0, 6, 0);
    else 
      count_reg_join_48_3 <= count_reg_54_7_addsub;
    end if;
  end process proc_if_48_3;
  proc_if_44_1: process (count_reg_join_48_3, en_1_45)
  is
  begin
    if en_1_45 then
      count_reg_join_44_1_en <= \'1\';
    else 
      count_reg_join_44_1_en <= \'0\';
    end if;
    count_reg_join_44_1 <= count_reg_join_48_3;
  end process proc_if_44_1;
  cast_count_reg_20_23_next <= s2u_cast(count_reg_join_44_1, 0, 4, 0);
  count_reg_20_23_next <= cast_count_reg_20_23_next;
  count_reg_20_23_en <= count_reg_join_44_1_en;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end',
      'crippled_entity' => 'is
  port (
    load : in std_logic_vector((1 - 1) downto 0);
    din : in std_logic_vector((4 - 1) downto 0);
    en : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((4 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'counter_230536be32',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ed6a8def7bf6484a39b73ea223890ecf',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_31: unsigned((4 - 1) downto 0);
  signal b_1_34: unsigned((4 - 1) downto 0);
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_12_3_rel <= a_1_31 = b_1_34;
  op <= boolean_to_vector(result_12_3_rel);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((4 - 1) downto 0);
    b : in std_logic_vector((4 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'relational_4d3cfceaf4',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '7281288dfdea268164419c50e848831c',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_31: unsigned((4 - 1) downto 0);
  signal b_1_34: unsigned((4 - 1) downto 0);
  signal result_14_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_14_3_rel <= a_1_31 /= b_1_34;
  op <= boolean_to_vector(result_14_3_rel);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((4 - 1) downto 0);
    b : in std_logic_vector((4 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'relational_d930162434',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '05293d01b511713036cd134af586ba26',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal rst_1_40: boolean;
  signal count_reg_20_23: unsigned((4 - 1) downto 0) := "0000";
  signal count_reg_20_23_rst: std_logic;
  signal bool_44_4: boolean;
  signal count_reg_join_44_1: unsigned((5 - 1) downto 0);
  signal count_reg_join_44_1_rst: std_logic;
  signal rst_limit_join_44_1: boolean;
begin
  rst_1_40 <= ((rst) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (count_reg_20_23_rst = \'1\')) then
        count_reg_20_23 <= "0000";
      elsif (ce = \'1\') then 
        count_reg_20_23 <= count_reg_20_23 + std_logic_vector_to_unsigned("0001");
      end if;
    end if;
  end process proc_count_reg_20_23;
  bool_44_4 <= rst_1_40 or false;
  proc_if_44_1: process (bool_44_4, count_reg_20_23)
  is
  begin
    if bool_44_4 then
      count_reg_join_44_1_rst <= \'1\';
    else 
      count_reg_join_44_1_rst <= \'0\';
    end if;
    if bool_44_4 then
      rst_limit_join_44_1 <= false;
    else 
      rst_limit_join_44_1 <= false;
    end if;
  end process proc_if_44_1;
  count_reg_20_23_rst <= count_reg_join_44_1_rst;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end',
      'crippled_entity' => 'is
  port (
    rst : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((4 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'counter_6068817c97',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '5714da0746c7979f5125413c42992a0a',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b25747344810e3c4f8ac572a3b0fa4e2',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'bb90c24ee01193e1a9683f18fe70cdd1',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '1eefb94725826afc94850e9d1f026ba0',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'afbbb68549b63bb95e359aa6ce6aaa63',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'fe82085340a30304948af458aace9ff5',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '3e04b528dacab24146751d2916a56ca1',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ebf8467633058b4f954119dee4f7205e',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal in2_1_31: unsigned((1 - 1) downto 0);
  signal in3_1_35: unsigned((1 - 1) downto 0);
  signal in4_1_39: unsigned((1 - 1) downto 0);
  signal in5_1_43: unsigned((1 - 1) downto 0);
  signal in6_1_47: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((7 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  in5_1_43 <= std_logic_vector_to_unsigned(in5);
  in6_1_47 <= std_logic_vector_to_unsigned(in6);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39) & unsigned_to_std_logic_vector(in5_1_43) & unsigned_to_std_logic_vector(in6_1_47));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    in2 : in std_logic_vector((1 - 1) downto 0);
    in3 : in std_logic_vector((1 - 1) downto 0);
    in4 : in std_logic_vector((1 - 1) downto 0);
    in5 : in std_logic_vector((1 - 1) downto 0);
    in6 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((7 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_eb5f1ca7f9',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '53da6b4861847a2af596e7c218c57724',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((2 - 1) downto 0);
  signal in1_1_27: unsigned((6 - 1) downto 0);
  signal y_2_1_concat: unsigned((8 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((2 - 1) downto 0);
    in1 : in std_logic_vector((6 - 1) downto 0);
    y : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_dc245eb1d2',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '18d3161abdd0c9e94373e6f670d94ae8',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlconvert_pipeline.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ccc6e7072471b1b3b49d81f6711d9c7f',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((7 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (2 - 1)) of std_logic_vector((7 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "0000000",
    "0000000");
  signal op_mem_20_24_front_din: std_logic_vector((7 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((7 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(1);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 1 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((7 - 1) downto 0);
    q : out std_logic_vector((7 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_8a9e828e57',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f1597a68a36c86777ca95c05b3d6b86b',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xldelay.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd3747e651a47f16d03915858331f965c',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '537e26decc7dc8f1834763ad2d43062d',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 7FFFC0000, 7FF67F36F, 7FD8BE6E1, 7FA77DA56, 7F627CDD1, 7F09BC153, 7E9D7B4E0, 7E1DBA878, 7D8A79C1D, 7CE3F8FD2, 7C2A38398, 7B5D37771, 7A7D36B60, 798A75F65, 7884B5383, 776C747BC, 7641F3C11, 7504F3084, 73B632517, 7255719CD, 70E2F0EA5, 6F5F303A3, 6DCA2F8C8, 6C246EE15, 6A6DAE38C, 68A6AD930, 66CFACF01, 64E8AC500, 62F22BB31, 60EC6B193, 5ED7AA829, 5CB469EF5, 5A82A95F6, 5842E8D2F, 55F5E84A2, 539B67C4F, 5133E7438, 4EC026C5E, 4C3FE64C2, 49B425D66, 471D2564A, 447AE4F6F, 41CE248D8, 3F1764284, 3C56E3C75, 398CE36AB, 36BA63128, 33DF22BED, 30FBE26F9, 2E112224F, 2B1F61DEE, 2826E19D7, 25282160C, 2223E128C, 1F1A20F58, 1C0BA0C71, 18F8E09D7, 15E22078A, 12C82058B, FAB603DA, C8BE0277, 96AA0163, 647E009E, 32460027, 20000, FCDBE0027, F9B86009E, F695A0163, F37460277, F054E03DA, ED382058B, EA1E2078A, E707609D7, E3F4A0C71, E0E620F58, DDDC6128C, DAD82160C, D7D9619D7, D4E0E1DEE, D1EF2224F, CF04626F9, CC2122BED, C945E3128, C673636AB, C3A963C75, C0E8E4284, BE32248D8, BB8564F6F, B8E32564A, B64C25D66, B3C0664C2, B14026C5E, AECC67438, AC64E7C4F, AA0A684A2, A7BD68D2F, A57DA95F6, A34BE9EF5, A128AA829, 9F13EB193, 9D0E2BB31, 9B17AC500, 9930ACF01, 9759AD930, 9592AE38C, 93DBEEE15, 92362F8C8, 90A1303A3, 8F1D70EA5, 8DAAF19CD, 8C4A32517, 8AFB73084, 89BE73C11, 8893F47BC, 877BB5383, 8675F5F65, 858336B60, 84A337771, 83D638398, 831C78FD2, 8275F9C1D, 81E2BA878, 8162FB4E0, 80F6BC153, 809DFCDD1, 8058FDA56, 8027BE6E1, 8009FF36F;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 512x36',
    'CSET read_width_a = 36',
    'CSET read_width_b = 36',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 128',
    'CSET write_width_a = 36',
    'CSET write_width_b = 36',
    'CSET component_name = bmg_72_8e2f9d152d14263e',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'fe6d55c3a139e8385bdde96a07e09cfe',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_8e2f9d152d14263e',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '37b904b5e4155f1cdeb08455e655ad58',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlpassthrough.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '2959ce174e6c40b23fbc12ab696bb689',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '46a54ea8cc701768c2221032797a0c8c',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((36 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (4 - 1)) of std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(3);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 3 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((36 - 1) downto 0);
    q : out std_logic_vector((36 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_bdaf6c9e55',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '3e32d0c3084ab554ef45ac9172ce46a7',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "001";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((3 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_a1c496ea88',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd8fe814692903faea56ecec2003964cb',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "000";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((3 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_822933f89b',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '3cbb4b7449173f2ec4bd2eb1d7435974',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "100";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((3 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_469094441c',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '709e7a9bea0c136676b145b9691d8917',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal load_1_29: boolean;
  signal din_1_35: unsigned((3 - 1) downto 0);
  signal en_1_45: boolean;
  signal count_reg_20_23_next: unsigned((3 - 1) downto 0);
  signal count_reg_20_23: unsigned((3 - 1) downto 0) := "000";
  signal count_reg_20_23_en: std_logic;
  signal cast_54_19: signed((5 - 1) downto 0);
  signal count_reg_54_7_addsub: signed((5 - 1) downto 0);
  signal count_reg_join_48_3: signed((5 - 1) downto 0);
  signal count_reg_join_44_1: signed((5 - 1) downto 0);
  signal count_reg_join_44_1_en: std_logic;
  signal cast_count_reg_20_23_next: unsigned((3 - 1) downto 0);
begin
  load_1_29 <= ((load) = "1");
  din_1_35 <= std_logic_vector_to_unsigned(din);
  en_1_45 <= ((en) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (count_reg_20_23_en = \'1\')) then
        count_reg_20_23 <= count_reg_20_23_next;
      end if;
    end if;
  end process proc_count_reg_20_23;
  cast_54_19 <= u2s_cast(count_reg_20_23, 0, 5, 0);
  count_reg_54_7_addsub <= cast_54_19 - std_logic_vector_to_signed("00001");
  proc_if_48_3: process (count_reg_54_7_addsub, din_1_35, load_1_29)
  is
  begin
    if load_1_29 then
      count_reg_join_48_3 <= u2s_cast(din_1_35, 0, 5, 0);
    else 
      count_reg_join_48_3 <= count_reg_54_7_addsub;
    end if;
  end process proc_if_48_3;
  proc_if_44_1: process (count_reg_join_48_3, en_1_45)
  is
  begin
    if en_1_45 then
      count_reg_join_44_1_en <= \'1\';
    else 
      count_reg_join_44_1_en <= \'0\';
    end if;
    count_reg_join_44_1 <= count_reg_join_48_3;
  end process proc_if_44_1;
  cast_count_reg_20_23_next <= s2u_cast(count_reg_join_44_1, 0, 3, 0);
  count_reg_20_23_next <= cast_count_reg_20_23_next;
  count_reg_20_23_en <= count_reg_join_44_1_en;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end',
      'crippled_entity' => 'is
  port (
    load : in std_logic_vector((1 - 1) downto 0);
    din : in std_logic_vector((3 - 1) downto 0);
    en : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((3 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'counter_ed7367cb5c',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '0d2830fc6f3d63f3fed155175c35a0f2',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_31: unsigned((3 - 1) downto 0);
  signal b_1_34: unsigned((3 - 1) downto 0);
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_12_3_rel <= a_1_31 = b_1_34;
  op <= boolean_to_vector(result_12_3_rel);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((3 - 1) downto 0);
    b : in std_logic_vector((3 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'relational_8fc7f5539b',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '91e16f9e52f2fc6ba0a751b004ae0945',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_31: unsigned((3 - 1) downto 0);
  signal b_1_34: unsigned((3 - 1) downto 0);
  signal result_14_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_14_3_rel <= a_1_31 /= b_1_34;
  op <= boolean_to_vector(result_14_3_rel);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((3 - 1) downto 0);
    b : in std_logic_vector((3 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'relational_47b317dab6',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '43a48aa67be1ad0da1605b1fe4d64258',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal rst_1_40: boolean;
  signal count_reg_20_23: unsigned((3 - 1) downto 0) := "000";
  signal count_reg_20_23_rst: std_logic;
  signal bool_44_4: boolean;
  signal count_reg_join_44_1: unsigned((4 - 1) downto 0);
  signal count_reg_join_44_1_rst: std_logic;
  signal rst_limit_join_44_1: boolean;
begin
  rst_1_40 <= ((rst) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (count_reg_20_23_rst = \'1\')) then
        count_reg_20_23 <= "000";
      elsif (ce = \'1\') then 
        count_reg_20_23 <= count_reg_20_23 + std_logic_vector_to_unsigned("001");
      end if;
    end if;
  end process proc_count_reg_20_23;
  bool_44_4 <= rst_1_40 or false;
  proc_if_44_1: process (bool_44_4, count_reg_20_23)
  is
  begin
    if bool_44_4 then
      count_reg_join_44_1_rst <= \'1\';
    else 
      count_reg_join_44_1_rst <= \'0\';
    end if;
    if bool_44_4 then
      rst_limit_join_44_1 <= false;
    else 
      rst_limit_join_44_1 <= false;
    end if;
  end process proc_if_44_1;
  count_reg_20_23_rst <= count_reg_join_44_1_rst;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end',
      'crippled_entity' => 'is
  port (
    rst : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((3 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'counter_290f1e76bd',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '4ad87ff37c2e170b317a24c36185b4a2',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '7b6f2db086e8bf2cd33a343f11053154',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '9971aa1e6f66f7e43ff38d2d78b3873b',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'be168c85e4070d043fb0f9f27d7b8f85',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '60a29f2448c2ee8882ce502a0d6dd3ca',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '9a144477cfa346c0ab0b992ee31b9321',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '7921e26ae08d0aa078a35e87a4fbd946',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '64657bda3ae47a4d41494c20c62db0bc',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ad69d20baa0e2e5e20874f2b50c7438e',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal in2_1_31: unsigned((1 - 1) downto 0);
  signal in3_1_35: unsigned((1 - 1) downto 0);
  signal in4_1_39: unsigned((1 - 1) downto 0);
  signal in5_1_43: unsigned((1 - 1) downto 0);
  signal in6_1_47: unsigned((1 - 1) downto 0);
  signal in7_1_51: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((8 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  in5_1_43 <= std_logic_vector_to_unsigned(in5);
  in6_1_47 <= std_logic_vector_to_unsigned(in6);
  in7_1_51 <= std_logic_vector_to_unsigned(in7);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39) & unsigned_to_std_logic_vector(in5_1_43) & unsigned_to_std_logic_vector(in6_1_47) & unsigned_to_std_logic_vector(in7_1_51));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    in2 : in std_logic_vector((1 - 1) downto 0);
    in3 : in std_logic_vector((1 - 1) downto 0);
    in4 : in std_logic_vector((1 - 1) downto 0);
    in5 : in std_logic_vector((1 - 1) downto 0);
    in6 : in std_logic_vector((1 - 1) downto 0);
    in7 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_7673b9b993',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '3ec0df22102e4f0582fbd179d3fe8db0',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((8 - 1) downto 0);
  signal y_2_1_concat: unsigned((9 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((8 - 1) downto 0);
    y : out std_logic_vector((9 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_1ece14600f',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'af4a5c7711e1391ce3b8ff60bbf1d805',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c27b67fb6c5f8170dcf3f2289271d0a7',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '293414c027d001d64f8f773b0f948994',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((2 - 1) downto 0);
  signal in1_1_27: unsigned((7 - 1) downto 0);
  signal y_2_1_concat: unsigned((9 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((2 - 1) downto 0);
    in1 : in std_logic_vector((7 - 1) downto 0);
    y : out std_logic_vector((9 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_f62149b02a',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '57c3e8e45e674ca6a6dc72d85e7e4a6d',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xldelay.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '73b157004097607fd7f4b3e9ab24f228',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlconvert_pipeline.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'fb8e414a27927891e911dc1d8d84d766',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((8 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (2 - 1)) of std_logic_vector((8 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "00000000",
    "00000000");
  signal op_mem_20_24_front_din: std_logic_vector((8 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((8 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(1);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 1 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((8 - 1) downto 0);
    q : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_23f848c85b',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 7FFFC0000, 7FFDBF9B8, 7FF67F36F, 7FE9FED28, 7FD8BE6E1, 7FC27E09B, 7FA77DA56, 7F877D412, 7F627CDD1, 7F387C791, 7F09BC153, 7ED63BB18, 7E9D7B4E0, 7E603AEAA, 7E1DBA878, 7DD6BA249, 7D8A79C1D, 7D39B95F5, 7CE3F8FD2, 7C89789B3, 7C2A38398, 7BC637D82, 7B5D37771, 7AEFB7166, 7A7D36B60, 7A063655F, 798A75F65, 7909F5971, 7884B5383, 77FAF4D9C, 776C747BC, 76D9741E3, 7641F3C11, 75A5B3647, 7504F3084, 745FB2ACA, 73B632517, 7307F1F6E, 7255719CD, 719E71434, 70E2F0EA5, 70233091F, 6F5F303A3, 6E96EFE30, 6DCA2F8C8, 6CF96F369, 6C246EE15, 6B4B2E8CB, 6A6DAE38C, 698C6DE58, 68A6AD930, 67BD2D412, 66CFACF01, 65DE2C9FA, 64E8AC500, 63EF6C012, 62F22BB31, 61F12B65C, 60EC6B193, 5FE3EACD8, 5ED7AA829, 5DC7AA388, 5CB469EF5, 5B9D29A6E, 5A82A95F6, 5964A918C, 5842E8D2F, 571E288E2, 55F5E84A2, 54CA28071, 539B67C4F, 52692783C, 5133E7438, 4FFBA7043, 4EC026C5E, 4D81A6888, 4C3FE64C2, 4AFBA610C, 49B425D66, 486A259CF, 471D2564A, 45CD652D4, 447AE4F6F, 4325E4C1B, 41CE248D8, 4074245A5, 3F1764284, 3DB863F74, 3C56E3C75, 3AF323987, 398CE36AB, 3824A33E1, 36BA63128, 354DA2E82, 33DF22BED, 326E6296A, 30FBE26F9, 2F876249B, 2E112224F, 2C9922015, 2B1F61DEE, 29A3E1BD9, 2826E19D7, 26A8617E8, 25282160C, 23A6A1442, 2223E128C, 209FA10E8, 1F1A20F58, 1D9360DDB, 1C0BA0C71, 1A82E0B1A, 18F8E09D7, 176DE08A6, 15E22078A, 1455A0680, 12C82058B, 113A204A8, FAB603DA, E1BE031F, C8BE0277, AFBA01E3, 96AA0163, 7D9600F7, 647E009E, 4B620059, 32460027, 1922000A, 20000, FE6E2000A, FCDBE0027, FB4A20059, F9B86009E, F826E00F7, F695A0163, F504A01E3, F37460277, F1E46031F, F054E03DA, EEC6204A8, ED382058B, EBAAA0680, EA1E2078A, E892608A6, E707609D7, E57D60B1A, E3F4A0C71, E26CE0DDB, E0E620F58, DF60A10E8, DDDC6128C, DC59A1442, DAD82160C, D957E17E8, D7D9619D7, D65C61BD9, D4E0E1DEE, D36722015, D1EF2224F, D078E249B, CF04626F9, CD91E296A, CC2122BED, CAB2A2E82, C945E3128, C7DBA33E1, C673636AB, C50D23987, C3A963C75, C247E3F74, C0E8E4284, BF8C245A5, BE32248D8, BCDA64C1B, BB8564F6F, BA32E52D4, B8E32564A, B796259CF, B64C25D66, B504A610C, B3C0664C2, B27EA6888, B14026C5E, B004A7043, AECC67438, AD972783C, AC64E7C4F, AB3628071, AA0A684A2, A8E2288E2, A7BD68D2F, A69BA918C, A57DA95F6, A46329A6E, A34BE9EF5, A238AA388, A128AA829, A01C6ACD8, 9F13EB193, 9E0F2B65C, 9D0E2BB31, 9C10EC012, 9B17AC500, 9A222C9FA, 9930ACF01, 98432D412, 9759AD930, 9673EDE58, 9592AE38C, 94B52E8CB, 93DBEEE15, 9306EF369, 92362F8C8, 91696FE30, 90A1303A3, 8FDD3091F, 8F1D70EA5, 8E61F1434, 8DAAF19CD, 8CF871F6E, 8C4A32517, 8BA0B2ACA, 8AFB73084, 8A5AB3647, 89BE73C11, 8926F41E3, 8893F47BC, 880574D9C, 877BB5383, 86F675971, 8675F5F65, 85FA3655F, 858336B60, 8510B7166, 84A337771, 843A37D82, 83D638398, 8376F89B3, 831C78FD2, 82C6B95F5, 8275F9C1D, 8229BA249, 81E2BA878, 81A03AEAA, 8162FB4E0, 812A3BB18, 80F6BC153, 80C7FC791, 809DFCDD1, 8078FD412, 8058FDA56, 803DFE09B, 8027BE6E1, 80167ED28, 8009FF36F, 8002BF9B8;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 512x36',
    'CSET read_width_a = 36',
    'CSET read_width_b = 36',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 256',
    'CSET write_width_a = 36',
    'CSET write_width_b = 36',
    'CSET component_name = bmg_72_3f3c61289e7ba7ea',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '91929add4f4228ec7c4693f4a4b9b2b1',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_3f3c61289e7ba7ea',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '56e49bc759413e7cb250b2ffbdfa42ab',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlpassthrough.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'beb25f82b9c8a4ff2dfb4ab0f55c50ed',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '714226d6ce60f465780e15779e2d4bb5',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((36 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (2 - 1)) of std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(1);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 1 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((36 - 1) downto 0);
    q : out std_logic_vector((36 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_38898c80c0',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b1f0ae968b381ba6ab9669a6ba2c3226',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "10";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((2 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_e8ddc079e9',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f6b31aae9700b8d1ecd0ae3311c1c2b5',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal rst_1_40: boolean;
  signal count_reg_20_23: unsigned((2 - 1) downto 0) := "00";
  signal count_reg_20_23_rst: std_logic;
  signal bool_44_4: boolean;
  signal count_reg_join_44_1: unsigned((3 - 1) downto 0);
  signal count_reg_join_44_1_rst: std_logic;
  signal rst_limit_join_44_1: boolean;
begin
  rst_1_40 <= ((rst) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (count_reg_20_23_rst = \'1\')) then
        count_reg_20_23 <= "00";
      elsif (ce = \'1\') then 
        count_reg_20_23 <= count_reg_20_23 + std_logic_vector_to_unsigned("01");
      end if;
    end if;
  end process proc_count_reg_20_23;
  bool_44_4 <= rst_1_40 or false;
  proc_if_44_1: process (bool_44_4, count_reg_20_23)
  is
  begin
    if bool_44_4 then
      count_reg_join_44_1_rst <= \'1\';
    else 
      count_reg_join_44_1_rst <= \'0\';
    end if;
    if bool_44_4 then
      rst_limit_join_44_1 <= false;
    else 
      rst_limit_join_44_1 <= false;
    end if;
  end process proc_if_44_1;
  count_reg_20_23_rst <= count_reg_join_44_1_rst;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end',
      'crippled_entity' => 'is
  port (
    rst : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((2 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'counter_107ada62c3',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '7c46352171db6c9f0f0a744c40699a95',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c2dcf3c11cab077ec177f5bd64890b8c',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((36 - 1) downto 0);
  signal in1_1_27: unsigned((36 - 1) downto 0);
  signal in2_1_31: unsigned((36 - 1) downto 0);
  signal in3_1_35: unsigned((36 - 1) downto 0);
  signal in4_1_39: unsigned((36 - 1) downto 0);
  signal in5_1_43: unsigned((36 - 1) downto 0);
  signal in6_1_47: unsigned((36 - 1) downto 0);
  signal in7_1_51: unsigned((36 - 1) downto 0);
  signal y_2_1_concat: unsigned((288 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  in5_1_43 <= std_logic_vector_to_unsigned(in5);
  in6_1_47 <= std_logic_vector_to_unsigned(in6);
  in7_1_51 <= std_logic_vector_to_unsigned(in7);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39) & unsigned_to_std_logic_vector(in5_1_43) & unsigned_to_std_logic_vector(in6_1_47) & unsigned_to_std_logic_vector(in7_1_51));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((36 - 1) downto 0);
    in1 : in std_logic_vector((36 - 1) downto 0);
    in2 : in std_logic_vector((36 - 1) downto 0);
    in3 : in std_logic_vector((36 - 1) downto 0);
    in4 : in std_logic_vector((36 - 1) downto 0);
    in5 : in std_logic_vector((36 - 1) downto 0);
    in6 : in std_logic_vector((36 - 1) downto 0);
    in7 : in std_logic_vector((36 - 1) downto 0);
    y : out std_logic_vector((288 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_45fe083dcb',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '23f00760b2fefd1d2c00ae1aaa0aeb01',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '397543d102a45b0c3942ac7644641e17',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '500c42967283eb04cf52191ad8663fcb',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd53b404d544abd83461fc2c1781e12d2',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'db967eebfff40a51237a50f0b0bf7470',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '8aa40f9ac7343c6337ac71d49748e23b',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f78249dc95a6c997bc7bfb0980cfbd7c',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '73d29fdba0238858a1d5c82ce8664711',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '4df966a703381e4755d88cda53a957cf',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '539d1617f40abc1c448d7dc2fe55a922',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ef802f66e6ac130f462f07995db7770e',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '575596b3f4d0e40f43b9af3dbd03c95c',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a282dae586f8887fc71b21ec3723bbe6',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '0b3deceafd6cc5aab37f9f6ae1f14463',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd65d1cb56abfba3af522475cb69f9a5a',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '596e4ffb74d535e0f70675abb265f3a5',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd76d23eeb275af37d3ce751bd35706be',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '89a44adfc6b40f4fe56434244ea4218e',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd6bbb18b48e9d9e4a98925f0f8037a65',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((18 - 1) downto 0);
  signal in1_1_27: unsigned((18 - 1) downto 0);
  signal in2_1_31: unsigned((18 - 1) downto 0);
  signal in3_1_35: unsigned((18 - 1) downto 0);
  signal in4_1_39: unsigned((18 - 1) downto 0);
  signal in5_1_43: unsigned((18 - 1) downto 0);
  signal in6_1_47: unsigned((18 - 1) downto 0);
  signal in7_1_51: unsigned((18 - 1) downto 0);
  signal in8_1_55: unsigned((18 - 1) downto 0);
  signal in9_1_59: unsigned((18 - 1) downto 0);
  signal in10_1_63: unsigned((18 - 1) downto 0);
  signal in11_1_68: unsigned((18 - 1) downto 0);
  signal in12_1_73: unsigned((18 - 1) downto 0);
  signal in13_1_78: unsigned((18 - 1) downto 0);
  signal in14_1_83: unsigned((18 - 1) downto 0);
  signal in15_1_88: unsigned((18 - 1) downto 0);
  signal in16_1_93: unsigned((18 - 1) downto 0);
  signal in17_1_98: unsigned((18 - 1) downto 0);
  signal in18_1_103: unsigned((18 - 1) downto 0);
  signal in19_1_108: unsigned((18 - 1) downto 0);
  signal in20_1_113: unsigned((18 - 1) downto 0);
  signal in21_1_118: unsigned((18 - 1) downto 0);
  signal in22_1_123: unsigned((18 - 1) downto 0);
  signal in23_1_128: unsigned((18 - 1) downto 0);
  signal in24_1_133: unsigned((18 - 1) downto 0);
  signal in25_1_138: unsigned((18 - 1) downto 0);
  signal in26_1_143: unsigned((18 - 1) downto 0);
  signal in27_1_148: unsigned((18 - 1) downto 0);
  signal in28_1_153: unsigned((18 - 1) downto 0);
  signal in29_1_158: unsigned((18 - 1) downto 0);
  signal in30_1_163: unsigned((18 - 1) downto 0);
  signal in31_1_168: unsigned((18 - 1) downto 0);
  signal y_2_1_concat: unsigned((576 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  in5_1_43 <= std_logic_vector_to_unsigned(in5);
  in6_1_47 <= std_logic_vector_to_unsigned(in6);
  in7_1_51 <= std_logic_vector_to_unsigned(in7);
  in8_1_55 <= std_logic_vector_to_unsigned(in8);
  in9_1_59 <= std_logic_vector_to_unsigned(in9);
  in10_1_63 <= std_logic_vector_to_unsigned(in10);
  in11_1_68 <= std_logic_vector_to_unsigned(in11);
  in12_1_73 <= std_logic_vector_to_unsigned(in12);
  in13_1_78 <= std_logic_vector_to_unsigned(in13);
  in14_1_83 <= std_logic_vector_to_unsigned(in14);
  in15_1_88 <= std_logic_vector_to_unsigned(in15);
  in16_1_93 <= std_logic_vector_to_unsigned(in16);
  in17_1_98 <= std_logic_vector_to_unsigned(in17);
  in18_1_103 <= std_logic_vector_to_unsigned(in18);
  in19_1_108 <= std_logic_vector_to_unsigned(in19);
  in20_1_113 <= std_logic_vector_to_unsigned(in20);
  in21_1_118 <= std_logic_vector_to_unsigned(in21);
  in22_1_123 <= std_logic_vector_to_unsigned(in22);
  in23_1_128 <= std_logic_vector_to_unsigned(in23);
  in24_1_133 <= std_logic_vector_to_unsigned(in24);
  in25_1_138 <= std_logic_vector_to_unsigned(in25);
  in26_1_143 <= std_logic_vector_to_unsigned(in26);
  in27_1_148 <= std_logic_vector_to_unsigned(in27);
  in28_1_153 <= std_logic_vector_to_unsigned(in28);
  in29_1_158 <= std_logic_vector_to_unsigned(in29);
  in30_1_163 <= std_logic_vector_to_unsigned(in30);
  in31_1_168 <= std_logic_vector_to_unsigned(in31);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39) & unsigned_to_std_logic_vector(in5_1_43) & unsigned_to_std_logic_vector(in6_1_47) & unsigned_to_std_logic_vector(in7_1_51) & unsigned_to_std_logic_vector(in8_1_55) & unsigned_to_std_logic_vector(in9_1_59) & unsigned_to_std_logic_vector(in10_1_63) & unsigned_to_std_logic_vector(in11_1_68) & unsigned_to_std_logic_vector(in12_1_73) & unsigned_to_std_logic_vector(in13_1_78) & unsigned_to_std_logic_vector(in14_1_83) & unsigned_to_std_logic_vector(in15_1_88) & unsigned_to_std_logic_vector(in16_1_93) & unsigned_to_std_logic_vector(in17_1_98) & unsigned_to_std_logic_vector(in18_1_103) & unsigned_to_std_logic_vector(in19_1_108) & unsigned_to_std_logic_vector(in20_1_113) & unsigned_to_std_logic_vector(in21_1_118) & unsigned_to_std_logic_vector(in22_1_123) & unsigned_to_std_logic_vector(in23_1_128) & unsigned_to_std_logic_vector(in24_1_133) & unsigned_to_std_logic_vector(in25_1_138) & unsigned_to_std_logic_vector(in26_1_143) & unsigned_to_std_logic_vector(in27_1_148) & unsigned_to_std_logic_vector(in28_1_153) & unsigned_to_std_logic_vector(in29_1_158) & unsigned_to_std_logic_vector(in30_1_163) & unsigned_to_std_logic_vector(in31_1_168));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((18 - 1) downto 0);
    in1 : in std_logic_vector((18 - 1) downto 0);
    in2 : in std_logic_vector((18 - 1) downto 0);
    in3 : in std_logic_vector((18 - 1) downto 0);
    in4 : in std_logic_vector((18 - 1) downto 0);
    in5 : in std_logic_vector((18 - 1) downto 0);
    in6 : in std_logic_vector((18 - 1) downto 0);
    in7 : in std_logic_vector((18 - 1) downto 0);
    in8 : in std_logic_vector((18 - 1) downto 0);
    in9 : in std_logic_vector((18 - 1) downto 0);
    in10 : in std_logic_vector((18 - 1) downto 0);
    in11 : in std_logic_vector((18 - 1) downto 0);
    in12 : in std_logic_vector((18 - 1) downto 0);
    in13 : in std_logic_vector((18 - 1) downto 0);
    in14 : in std_logic_vector((18 - 1) downto 0);
    in15 : in std_logic_vector((18 - 1) downto 0);
    in16 : in std_logic_vector((18 - 1) downto 0);
    in17 : in std_logic_vector((18 - 1) downto 0);
    in18 : in std_logic_vector((18 - 1) downto 0);
    in19 : in std_logic_vector((18 - 1) downto 0);
    in20 : in std_logic_vector((18 - 1) downto 0);
    in21 : in std_logic_vector((18 - 1) downto 0);
    in22 : in std_logic_vector((18 - 1) downto 0);
    in23 : in std_logic_vector((18 - 1) downto 0);
    in24 : in std_logic_vector((18 - 1) downto 0);
    in25 : in std_logic_vector((18 - 1) downto 0);
    in26 : in std_logic_vector((18 - 1) downto 0);
    in27 : in std_logic_vector((18 - 1) downto 0);
    in28 : in std_logic_vector((18 - 1) downto 0);
    in29 : in std_logic_vector((18 - 1) downto 0);
    in30 : in std_logic_vector((18 - 1) downto 0);
    in31 : in std_logic_vector((18 - 1) downto 0);
    y : out std_logic_vector((576 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_926d9060d2',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '1b90553b4939f35ce43f52f4d43fa486',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '5a2247b2bbf44c45f971ddf601475bf8',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd2c68e34c6f07f19d3b294b1c04d9cb9',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '0b120190141d2fdcd341410162615265',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'dd9a6beaada78b6dc4ed30654b770795',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '5c0ad6520c23d11f57284d41fdc12dbd',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '0475710d8bdf87ba95df1fe5f775f9a5',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '54ddcf3ae3224135a04b943bc4d32e08',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b5a45ae03ec6ff54bca9d0605a304125',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '9aa467f019d91954a9959bfb3375b8b3',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '938ea67145fa68663da34ddf0e96d712',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '344fff8bf9bddc12f71ee5bf6ab3f707',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '0a02ae7effe29c8f530c53b6f3e0945d',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a858af2ac5db2309700c425981829625',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '6dc736571adccaa142b18a0855270068',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c9cacbb8a9162ce8b0c2154ee4109588',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c6a59cd7f60b716b8f19229face4180e',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '1107e6ff5a8eba811faebd176444bc3a',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c909600bb0fd7956ef2714bad7cac1ec',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '20cf298fd5b56124a2c01b31141579ef',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '8c789fe4f4b55b5c7aa4bcd07e9f26a0',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '5ed58f1d00cc3863dc60b02cc40d24c9',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'dca1f9261d02ab2d6b73e15457db7d97',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a45910fb38f6529990f508c116b914bf',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '558225379b77d2dd7a7ef90170ae01d3',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '04ed942a222f33f7b0079f6cd931efa1',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e56140cf6359364b9788e691b9dba3ca',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '6bae28b4b3348f99f13a62f10bdd0a74',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '2171a593745421e04c5c10c47df22427',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '691bd7d23d22a21ac894174c38d5e731',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '79a660e3347e1c22e45e708c3bba73ce',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '1280f499f68d2d860218abe6385c6ccb',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '9471cce135f70e52b4c191fd71d73785',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal in2_1_31: unsigned((1 - 1) downto 0);
  signal in3_1_35: unsigned((1 - 1) downto 0);
  signal in4_1_39: unsigned((1 - 1) downto 0);
  signal in5_1_43: unsigned((1 - 1) downto 0);
  signal in6_1_47: unsigned((1 - 1) downto 0);
  signal in7_1_51: unsigned((1 - 1) downto 0);
  signal in8_1_55: unsigned((1 - 1) downto 0);
  signal in9_1_59: unsigned((1 - 1) downto 0);
  signal in10_1_63: unsigned((1 - 1) downto 0);
  signal in11_1_68: unsigned((1 - 1) downto 0);
  signal in12_1_73: unsigned((1 - 1) downto 0);
  signal in13_1_78: unsigned((1 - 1) downto 0);
  signal in14_1_83: unsigned((1 - 1) downto 0);
  signal in15_1_88: unsigned((1 - 1) downto 0);
  signal in16_1_93: unsigned((1 - 1) downto 0);
  signal in17_1_98: unsigned((1 - 1) downto 0);
  signal in18_1_103: unsigned((1 - 1) downto 0);
  signal in19_1_108: unsigned((1 - 1) downto 0);
  signal in20_1_113: unsigned((1 - 1) downto 0);
  signal in21_1_118: unsigned((1 - 1) downto 0);
  signal in22_1_123: unsigned((1 - 1) downto 0);
  signal in23_1_128: unsigned((1 - 1) downto 0);
  signal in24_1_133: unsigned((1 - 1) downto 0);
  signal in25_1_138: unsigned((1 - 1) downto 0);
  signal in26_1_143: unsigned((1 - 1) downto 0);
  signal in27_1_148: unsigned((1 - 1) downto 0);
  signal in28_1_153: unsigned((1 - 1) downto 0);
  signal in29_1_158: unsigned((1 - 1) downto 0);
  signal in30_1_163: unsigned((1 - 1) downto 0);
  signal in31_1_168: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((32 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  in5_1_43 <= std_logic_vector_to_unsigned(in5);
  in6_1_47 <= std_logic_vector_to_unsigned(in6);
  in7_1_51 <= std_logic_vector_to_unsigned(in7);
  in8_1_55 <= std_logic_vector_to_unsigned(in8);
  in9_1_59 <= std_logic_vector_to_unsigned(in9);
  in10_1_63 <= std_logic_vector_to_unsigned(in10);
  in11_1_68 <= std_logic_vector_to_unsigned(in11);
  in12_1_73 <= std_logic_vector_to_unsigned(in12);
  in13_1_78 <= std_logic_vector_to_unsigned(in13);
  in14_1_83 <= std_logic_vector_to_unsigned(in14);
  in15_1_88 <= std_logic_vector_to_unsigned(in15);
  in16_1_93 <= std_logic_vector_to_unsigned(in16);
  in17_1_98 <= std_logic_vector_to_unsigned(in17);
  in18_1_103 <= std_logic_vector_to_unsigned(in18);
  in19_1_108 <= std_logic_vector_to_unsigned(in19);
  in20_1_113 <= std_logic_vector_to_unsigned(in20);
  in21_1_118 <= std_logic_vector_to_unsigned(in21);
  in22_1_123 <= std_logic_vector_to_unsigned(in22);
  in23_1_128 <= std_logic_vector_to_unsigned(in23);
  in24_1_133 <= std_logic_vector_to_unsigned(in24);
  in25_1_138 <= std_logic_vector_to_unsigned(in25);
  in26_1_143 <= std_logic_vector_to_unsigned(in26);
  in27_1_148 <= std_logic_vector_to_unsigned(in27);
  in28_1_153 <= std_logic_vector_to_unsigned(in28);
  in29_1_158 <= std_logic_vector_to_unsigned(in29);
  in30_1_163 <= std_logic_vector_to_unsigned(in30);
  in31_1_168 <= std_logic_vector_to_unsigned(in31);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39) & unsigned_to_std_logic_vector(in5_1_43) & unsigned_to_std_logic_vector(in6_1_47) & unsigned_to_std_logic_vector(in7_1_51) & unsigned_to_std_logic_vector(in8_1_55) & unsigned_to_std_logic_vector(in9_1_59) & unsigned_to_std_logic_vector(in10_1_63) & unsigned_to_std_logic_vector(in11_1_68) & unsigned_to_std_logic_vector(in12_1_73) & unsigned_to_std_logic_vector(in13_1_78) & unsigned_to_std_logic_vector(in14_1_83) & unsigned_to_std_logic_vector(in15_1_88) & unsigned_to_std_logic_vector(in16_1_93) & unsigned_to_std_logic_vector(in17_1_98) & unsigned_to_std_logic_vector(in18_1_103) & unsigned_to_std_logic_vector(in19_1_108) & unsigned_to_std_logic_vector(in20_1_113) & unsigned_to_std_logic_vector(in21_1_118) & unsigned_to_std_logic_vector(in22_1_123) & unsigned_to_std_logic_vector(in23_1_128) & unsigned_to_std_logic_vector(in24_1_133) & unsigned_to_std_logic_vector(in25_1_138) & unsigned_to_std_logic_vector(in26_1_143) & unsigned_to_std_logic_vector(in27_1_148) & unsigned_to_std_logic_vector(in28_1_153) & unsigned_to_std_logic_vector(in29_1_158) & unsigned_to_std_logic_vector(in30_1_163) & unsigned_to_std_logic_vector(in31_1_168));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    in2 : in std_logic_vector((1 - 1) downto 0);
    in3 : in std_logic_vector((1 - 1) downto 0);
    in4 : in std_logic_vector((1 - 1) downto 0);
    in5 : in std_logic_vector((1 - 1) downto 0);
    in6 : in std_logic_vector((1 - 1) downto 0);
    in7 : in std_logic_vector((1 - 1) downto 0);
    in8 : in std_logic_vector((1 - 1) downto 0);
    in9 : in std_logic_vector((1 - 1) downto 0);
    in10 : in std_logic_vector((1 - 1) downto 0);
    in11 : in std_logic_vector((1 - 1) downto 0);
    in12 : in std_logic_vector((1 - 1) downto 0);
    in13 : in std_logic_vector((1 - 1) downto 0);
    in14 : in std_logic_vector((1 - 1) downto 0);
    in15 : in std_logic_vector((1 - 1) downto 0);
    in16 : in std_logic_vector((1 - 1) downto 0);
    in17 : in std_logic_vector((1 - 1) downto 0);
    in18 : in std_logic_vector((1 - 1) downto 0);
    in19 : in std_logic_vector((1 - 1) downto 0);
    in20 : in std_logic_vector((1 - 1) downto 0);
    in21 : in std_logic_vector((1 - 1) downto 0);
    in22 : in std_logic_vector((1 - 1) downto 0);
    in23 : in std_logic_vector((1 - 1) downto 0);
    in24 : in std_logic_vector((1 - 1) downto 0);
    in25 : in std_logic_vector((1 - 1) downto 0);
    in26 : in std_logic_vector((1 - 1) downto 0);
    in27 : in std_logic_vector((1 - 1) downto 0);
    in28 : in std_logic_vector((1 - 1) downto 0);
    in29 : in std_logic_vector((1 - 1) downto 0);
    in30 : in std_logic_vector((1 - 1) downto 0);
    in31 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((32 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_9ac2145b44',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '5ca92821abaa1dcbd99ac760d7a75031',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((288 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((288 - 1) downto 0);
    output_port : out std_logic_vector((288 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_a6651f657f',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a7d2f15a0a12403de73d35f9cdcd120e',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '8a633deef2893aaa8d6f8faf9a24dd19',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '9f88d3dd0ff426ed4e1cbcbfc2dcca44',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((21 - 1) downto 0);
  signal in1_1_27: unsigned((21 - 1) downto 0);
  signal in2_1_31: unsigned((21 - 1) downto 0);
  signal in3_1_35: unsigned((21 - 1) downto 0);
  signal in4_1_39: unsigned((21 - 1) downto 0);
  signal in5_1_43: unsigned((21 - 1) downto 0);
  signal in6_1_47: unsigned((21 - 1) downto 0);
  signal in7_1_51: unsigned((21 - 1) downto 0);
  signal in8_1_55: unsigned((21 - 1) downto 0);
  signal in9_1_59: unsigned((21 - 1) downto 0);
  signal in10_1_63: unsigned((21 - 1) downto 0);
  signal in11_1_68: unsigned((21 - 1) downto 0);
  signal in12_1_73: unsigned((21 - 1) downto 0);
  signal in13_1_78: unsigned((21 - 1) downto 0);
  signal in14_1_83: unsigned((21 - 1) downto 0);
  signal in15_1_88: unsigned((21 - 1) downto 0);
  signal in16_1_93: unsigned((21 - 1) downto 0);
  signal in17_1_98: unsigned((21 - 1) downto 0);
  signal in18_1_103: unsigned((21 - 1) downto 0);
  signal in19_1_108: unsigned((21 - 1) downto 0);
  signal in20_1_113: unsigned((21 - 1) downto 0);
  signal in21_1_118: unsigned((21 - 1) downto 0);
  signal in22_1_123: unsigned((21 - 1) downto 0);
  signal in23_1_128: unsigned((21 - 1) downto 0);
  signal in24_1_133: unsigned((21 - 1) downto 0);
  signal in25_1_138: unsigned((21 - 1) downto 0);
  signal in26_1_143: unsigned((21 - 1) downto 0);
  signal in27_1_148: unsigned((21 - 1) downto 0);
  signal in28_1_153: unsigned((21 - 1) downto 0);
  signal in29_1_158: unsigned((21 - 1) downto 0);
  signal in30_1_163: unsigned((21 - 1) downto 0);
  signal in31_1_168: unsigned((21 - 1) downto 0);
  signal y_2_1_concat: unsigned((672 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  in5_1_43 <= std_logic_vector_to_unsigned(in5);
  in6_1_47 <= std_logic_vector_to_unsigned(in6);
  in7_1_51 <= std_logic_vector_to_unsigned(in7);
  in8_1_55 <= std_logic_vector_to_unsigned(in8);
  in9_1_59 <= std_logic_vector_to_unsigned(in9);
  in10_1_63 <= std_logic_vector_to_unsigned(in10);
  in11_1_68 <= std_logic_vector_to_unsigned(in11);
  in12_1_73 <= std_logic_vector_to_unsigned(in12);
  in13_1_78 <= std_logic_vector_to_unsigned(in13);
  in14_1_83 <= std_logic_vector_to_unsigned(in14);
  in15_1_88 <= std_logic_vector_to_unsigned(in15);
  in16_1_93 <= std_logic_vector_to_unsigned(in16);
  in17_1_98 <= std_logic_vector_to_unsigned(in17);
  in18_1_103 <= std_logic_vector_to_unsigned(in18);
  in19_1_108 <= std_logic_vector_to_unsigned(in19);
  in20_1_113 <= std_logic_vector_to_unsigned(in20);
  in21_1_118 <= std_logic_vector_to_unsigned(in21);
  in22_1_123 <= std_logic_vector_to_unsigned(in22);
  in23_1_128 <= std_logic_vector_to_unsigned(in23);
  in24_1_133 <= std_logic_vector_to_unsigned(in24);
  in25_1_138 <= std_logic_vector_to_unsigned(in25);
  in26_1_143 <= std_logic_vector_to_unsigned(in26);
  in27_1_148 <= std_logic_vector_to_unsigned(in27);
  in28_1_153 <= std_logic_vector_to_unsigned(in28);
  in29_1_158 <= std_logic_vector_to_unsigned(in29);
  in30_1_163 <= std_logic_vector_to_unsigned(in30);
  in31_1_168 <= std_logic_vector_to_unsigned(in31);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39) & unsigned_to_std_logic_vector(in5_1_43) & unsigned_to_std_logic_vector(in6_1_47) & unsigned_to_std_logic_vector(in7_1_51) & unsigned_to_std_logic_vector(in8_1_55) & unsigned_to_std_logic_vector(in9_1_59) & unsigned_to_std_logic_vector(in10_1_63) & unsigned_to_std_logic_vector(in11_1_68) & unsigned_to_std_logic_vector(in12_1_73) & unsigned_to_std_logic_vector(in13_1_78) & unsigned_to_std_logic_vector(in14_1_83) & unsigned_to_std_logic_vector(in15_1_88) & unsigned_to_std_logic_vector(in16_1_93) & unsigned_to_std_logic_vector(in17_1_98) & unsigned_to_std_logic_vector(in18_1_103) & unsigned_to_std_logic_vector(in19_1_108) & unsigned_to_std_logic_vector(in20_1_113) & unsigned_to_std_logic_vector(in21_1_118) & unsigned_to_std_logic_vector(in22_1_123) & unsigned_to_std_logic_vector(in23_1_128) & unsigned_to_std_logic_vector(in24_1_133) & unsigned_to_std_logic_vector(in25_1_138) & unsigned_to_std_logic_vector(in26_1_143) & unsigned_to_std_logic_vector(in27_1_148) & unsigned_to_std_logic_vector(in28_1_153) & unsigned_to_std_logic_vector(in29_1_158) & unsigned_to_std_logic_vector(in30_1_163) & unsigned_to_std_logic_vector(in31_1_168));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((21 - 1) downto 0);
    in1 : in std_logic_vector((21 - 1) downto 0);
    in2 : in std_logic_vector((21 - 1) downto 0);
    in3 : in std_logic_vector((21 - 1) downto 0);
    in4 : in std_logic_vector((21 - 1) downto 0);
    in5 : in std_logic_vector((21 - 1) downto 0);
    in6 : in std_logic_vector((21 - 1) downto 0);
    in7 : in std_logic_vector((21 - 1) downto 0);
    in8 : in std_logic_vector((21 - 1) downto 0);
    in9 : in std_logic_vector((21 - 1) downto 0);
    in10 : in std_logic_vector((21 - 1) downto 0);
    in11 : in std_logic_vector((21 - 1) downto 0);
    in12 : in std_logic_vector((21 - 1) downto 0);
    in13 : in std_logic_vector((21 - 1) downto 0);
    in14 : in std_logic_vector((21 - 1) downto 0);
    in15 : in std_logic_vector((21 - 1) downto 0);
    in16 : in std_logic_vector((21 - 1) downto 0);
    in17 : in std_logic_vector((21 - 1) downto 0);
    in18 : in std_logic_vector((21 - 1) downto 0);
    in19 : in std_logic_vector((21 - 1) downto 0);
    in20 : in std_logic_vector((21 - 1) downto 0);
    in21 : in std_logic_vector((21 - 1) downto 0);
    in22 : in std_logic_vector((21 - 1) downto 0);
    in23 : in std_logic_vector((21 - 1) downto 0);
    in24 : in std_logic_vector((21 - 1) downto 0);
    in25 : in std_logic_vector((21 - 1) downto 0);
    in26 : in std_logic_vector((21 - 1) downto 0);
    in27 : in std_logic_vector((21 - 1) downto 0);
    in28 : in std_logic_vector((21 - 1) downto 0);
    in29 : in std_logic_vector((21 - 1) downto 0);
    in30 : in std_logic_vector((21 - 1) downto 0);
    in31 : in std_logic_vector((21 - 1) downto 0);
    y : out std_logic_vector((672 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_2710aa5601',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '045fce71563a3df4b96bd515f7062b02',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '36af1460e09cf66dcef66e5cd663629f',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '68a7b8bdac8208bba8647d360a7d8fb8',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '4685cd7e17e147fe9ec63abdefe8b089',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '188b58e537f620818b1f2d2d075ac516',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '81a09a4e8d18870e81667e71b16aa830',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e8605d03958e0e1dc650ef0b6420617c',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ae0a7725fbfebc101bd356fae415c1cb',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '900def3b86a620b0fa65abb470c7b30f',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '08913e1dad125e0112af1d6ccd973fad',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f38a2693ac1f2ff346d2394c9ae5011e',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'cd8212931d0f529b58cd918dc55b856f',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a6a6aa388b497a4f3c9667b18e820274',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '53f6b7b3e5b825c6e8c5bef5adea6a21',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '415d76dd074216fe48dea5ee15488713',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd9b5b9dfcdabe65f0625373268b9cabd',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c60c1b5637aa459896b0058cd55045f0',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '072b52c70f40a95c8ddc73990bf6f5db',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '3562d996c53994671603bf1799153aa5',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'aef7a82e8e7ca4c55dc298f84397804a',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ed2f398ef340df74df4b33c2b787e8e6',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'af84081d17049c9d94e0f19c8a44b119',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '5736805225992f41122b3dc6fbbf3f5a',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '8ca03a4a2a2b335a14b090b79e83ff65',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e859bc225259db3cc284d718dbc04877',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '66d53df0fde7118a5cb780f689ef888d',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ac99b5d20f7e1a4dc71059b08a31f3d4',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a67fdb2defb370e3d06ef549284cf4a2',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '8957a1bdff44ed38ce07270533eb9ae0',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '2d57b7b52a47bd73469579a6e43fc0c6',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '00fee5f31350b801bef7e5afe72021d2',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '9ff97bde87a906b68d4729a6f6842dd7',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '197fab63b15d1fbe077eca741640d39d',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'fd2e7129a1f1da9d4223896074384015',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '864a3449be1badde5871f4808bc03475',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '22ffd372c48378b7b98c60ed24db0a8f',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '650c0b96d78a4eb5de72275ab5323fc4',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '02be8c3406302a4d38712a46447bfedc',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '9ac6ef762208d71ec683b49c9daa3e22',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '753c01ec7dd149aa8443a4cfe2fd7821',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b8124e4b2856930c572eeb2acf7d6f37',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((20 - 1) downto 0);
  signal in1_1_27: unsigned((20 - 1) downto 0);
  signal in2_1_31: unsigned((20 - 1) downto 0);
  signal in3_1_35: unsigned((20 - 1) downto 0);
  signal in4_1_39: unsigned((20 - 1) downto 0);
  signal in5_1_43: unsigned((20 - 1) downto 0);
  signal in6_1_47: unsigned((20 - 1) downto 0);
  signal in7_1_51: unsigned((20 - 1) downto 0);
  signal in8_1_55: unsigned((20 - 1) downto 0);
  signal in9_1_59: unsigned((20 - 1) downto 0);
  signal in10_1_63: unsigned((20 - 1) downto 0);
  signal in11_1_68: unsigned((20 - 1) downto 0);
  signal in12_1_73: unsigned((20 - 1) downto 0);
  signal in13_1_78: unsigned((20 - 1) downto 0);
  signal in14_1_83: unsigned((20 - 1) downto 0);
  signal in15_1_88: unsigned((20 - 1) downto 0);
  signal in16_1_93: unsigned((20 - 1) downto 0);
  signal in17_1_98: unsigned((20 - 1) downto 0);
  signal in18_1_103: unsigned((20 - 1) downto 0);
  signal in19_1_108: unsigned((20 - 1) downto 0);
  signal in20_1_113: unsigned((20 - 1) downto 0);
  signal in21_1_118: unsigned((20 - 1) downto 0);
  signal in22_1_123: unsigned((20 - 1) downto 0);
  signal in23_1_128: unsigned((20 - 1) downto 0);
  signal in24_1_133: unsigned((20 - 1) downto 0);
  signal in25_1_138: unsigned((20 - 1) downto 0);
  signal in26_1_143: unsigned((20 - 1) downto 0);
  signal in27_1_148: unsigned((20 - 1) downto 0);
  signal in28_1_153: unsigned((20 - 1) downto 0);
  signal in29_1_158: unsigned((20 - 1) downto 0);
  signal in30_1_163: unsigned((20 - 1) downto 0);
  signal in31_1_168: unsigned((20 - 1) downto 0);
  signal y_2_1_concat: unsigned((640 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  in5_1_43 <= std_logic_vector_to_unsigned(in5);
  in6_1_47 <= std_logic_vector_to_unsigned(in6);
  in7_1_51 <= std_logic_vector_to_unsigned(in7);
  in8_1_55 <= std_logic_vector_to_unsigned(in8);
  in9_1_59 <= std_logic_vector_to_unsigned(in9);
  in10_1_63 <= std_logic_vector_to_unsigned(in10);
  in11_1_68 <= std_logic_vector_to_unsigned(in11);
  in12_1_73 <= std_logic_vector_to_unsigned(in12);
  in13_1_78 <= std_logic_vector_to_unsigned(in13);
  in14_1_83 <= std_logic_vector_to_unsigned(in14);
  in15_1_88 <= std_logic_vector_to_unsigned(in15);
  in16_1_93 <= std_logic_vector_to_unsigned(in16);
  in17_1_98 <= std_logic_vector_to_unsigned(in17);
  in18_1_103 <= std_logic_vector_to_unsigned(in18);
  in19_1_108 <= std_logic_vector_to_unsigned(in19);
  in20_1_113 <= std_logic_vector_to_unsigned(in20);
  in21_1_118 <= std_logic_vector_to_unsigned(in21);
  in22_1_123 <= std_logic_vector_to_unsigned(in22);
  in23_1_128 <= std_logic_vector_to_unsigned(in23);
  in24_1_133 <= std_logic_vector_to_unsigned(in24);
  in25_1_138 <= std_logic_vector_to_unsigned(in25);
  in26_1_143 <= std_logic_vector_to_unsigned(in26);
  in27_1_148 <= std_logic_vector_to_unsigned(in27);
  in28_1_153 <= std_logic_vector_to_unsigned(in28);
  in29_1_158 <= std_logic_vector_to_unsigned(in29);
  in30_1_163 <= std_logic_vector_to_unsigned(in30);
  in31_1_168 <= std_logic_vector_to_unsigned(in31);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39) & unsigned_to_std_logic_vector(in5_1_43) & unsigned_to_std_logic_vector(in6_1_47) & unsigned_to_std_logic_vector(in7_1_51) & unsigned_to_std_logic_vector(in8_1_55) & unsigned_to_std_logic_vector(in9_1_59) & unsigned_to_std_logic_vector(in10_1_63) & unsigned_to_std_logic_vector(in11_1_68) & unsigned_to_std_logic_vector(in12_1_73) & unsigned_to_std_logic_vector(in13_1_78) & unsigned_to_std_logic_vector(in14_1_83) & unsigned_to_std_logic_vector(in15_1_88) & unsigned_to_std_logic_vector(in16_1_93) & unsigned_to_std_logic_vector(in17_1_98) & unsigned_to_std_logic_vector(in18_1_103) & unsigned_to_std_logic_vector(in19_1_108) & unsigned_to_std_logic_vector(in20_1_113) & unsigned_to_std_logic_vector(in21_1_118) & unsigned_to_std_logic_vector(in22_1_123) & unsigned_to_std_logic_vector(in23_1_128) & unsigned_to_std_logic_vector(in24_1_133) & unsigned_to_std_logic_vector(in25_1_138) & unsigned_to_std_logic_vector(in26_1_143) & unsigned_to_std_logic_vector(in27_1_148) & unsigned_to_std_logic_vector(in28_1_153) & unsigned_to_std_logic_vector(in29_1_158) & unsigned_to_std_logic_vector(in30_1_163) & unsigned_to_std_logic_vector(in31_1_168));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((20 - 1) downto 0);
    in1 : in std_logic_vector((20 - 1) downto 0);
    in2 : in std_logic_vector((20 - 1) downto 0);
    in3 : in std_logic_vector((20 - 1) downto 0);
    in4 : in std_logic_vector((20 - 1) downto 0);
    in5 : in std_logic_vector((20 - 1) downto 0);
    in6 : in std_logic_vector((20 - 1) downto 0);
    in7 : in std_logic_vector((20 - 1) downto 0);
    in8 : in std_logic_vector((20 - 1) downto 0);
    in9 : in std_logic_vector((20 - 1) downto 0);
    in10 : in std_logic_vector((20 - 1) downto 0);
    in11 : in std_logic_vector((20 - 1) downto 0);
    in12 : in std_logic_vector((20 - 1) downto 0);
    in13 : in std_logic_vector((20 - 1) downto 0);
    in14 : in std_logic_vector((20 - 1) downto 0);
    in15 : in std_logic_vector((20 - 1) downto 0);
    in16 : in std_logic_vector((20 - 1) downto 0);
    in17 : in std_logic_vector((20 - 1) downto 0);
    in18 : in std_logic_vector((20 - 1) downto 0);
    in19 : in std_logic_vector((20 - 1) downto 0);
    in20 : in std_logic_vector((20 - 1) downto 0);
    in21 : in std_logic_vector((20 - 1) downto 0);
    in22 : in std_logic_vector((20 - 1) downto 0);
    in23 : in std_logic_vector((20 - 1) downto 0);
    in24 : in std_logic_vector((20 - 1) downto 0);
    in25 : in std_logic_vector((20 - 1) downto 0);
    in26 : in std_logic_vector((20 - 1) downto 0);
    in27 : in std_logic_vector((20 - 1) downto 0);
    in28 : in std_logic_vector((20 - 1) downto 0);
    in29 : in std_logic_vector((20 - 1) downto 0);
    in30 : in std_logic_vector((20 - 1) downto 0);
    in31 : in std_logic_vector((20 - 1) downto 0);
    y : out std_logic_vector((640 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_55e429ab82',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f23624e5e18b35ce116c8d3e702b6e83',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((2 - 1) downto 0);
  signal in1_1_27: unsigned((2 - 1) downto 0);
  signal in2_1_31: unsigned((2 - 1) downto 0);
  signal in3_1_35: unsigned((2 - 1) downto 0);
  signal in4_1_39: unsigned((2 - 1) downto 0);
  signal in5_1_43: unsigned((2 - 1) downto 0);
  signal in6_1_47: unsigned((2 - 1) downto 0);
  signal in7_1_51: unsigned((2 - 1) downto 0);
  signal in8_1_55: unsigned((2 - 1) downto 0);
  signal in9_1_59: unsigned((2 - 1) downto 0);
  signal in10_1_63: unsigned((2 - 1) downto 0);
  signal in11_1_68: unsigned((2 - 1) downto 0);
  signal in12_1_73: unsigned((2 - 1) downto 0);
  signal in13_1_78: unsigned((2 - 1) downto 0);
  signal in14_1_83: unsigned((2 - 1) downto 0);
  signal in15_1_88: unsigned((2 - 1) downto 0);
  signal y_2_1_concat: unsigned((32 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  in5_1_43 <= std_logic_vector_to_unsigned(in5);
  in6_1_47 <= std_logic_vector_to_unsigned(in6);
  in7_1_51 <= std_logic_vector_to_unsigned(in7);
  in8_1_55 <= std_logic_vector_to_unsigned(in8);
  in9_1_59 <= std_logic_vector_to_unsigned(in9);
  in10_1_63 <= std_logic_vector_to_unsigned(in10);
  in11_1_68 <= std_logic_vector_to_unsigned(in11);
  in12_1_73 <= std_logic_vector_to_unsigned(in12);
  in13_1_78 <= std_logic_vector_to_unsigned(in13);
  in14_1_83 <= std_logic_vector_to_unsigned(in14);
  in15_1_88 <= std_logic_vector_to_unsigned(in15);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39) & unsigned_to_std_logic_vector(in5_1_43) & unsigned_to_std_logic_vector(in6_1_47) & unsigned_to_std_logic_vector(in7_1_51) & unsigned_to_std_logic_vector(in8_1_55) & unsigned_to_std_logic_vector(in9_1_59) & unsigned_to_std_logic_vector(in10_1_63) & unsigned_to_std_logic_vector(in11_1_68) & unsigned_to_std_logic_vector(in12_1_73) & unsigned_to_std_logic_vector(in13_1_78) & unsigned_to_std_logic_vector(in14_1_83) & unsigned_to_std_logic_vector(in15_1_88));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((2 - 1) downto 0);
    in1 : in std_logic_vector((2 - 1) downto 0);
    in2 : in std_logic_vector((2 - 1) downto 0);
    in3 : in std_logic_vector((2 - 1) downto 0);
    in4 : in std_logic_vector((2 - 1) downto 0);
    in5 : in std_logic_vector((2 - 1) downto 0);
    in6 : in std_logic_vector((2 - 1) downto 0);
    in7 : in std_logic_vector((2 - 1) downto 0);
    in8 : in std_logic_vector((2 - 1) downto 0);
    in9 : in std_logic_vector((2 - 1) downto 0);
    in10 : in std_logic_vector((2 - 1) downto 0);
    in11 : in std_logic_vector((2 - 1) downto 0);
    in12 : in std_logic_vector((2 - 1) downto 0);
    in13 : in std_logic_vector((2 - 1) downto 0);
    in14 : in std_logic_vector((2 - 1) downto 0);
    in15 : in std_logic_vector((2 - 1) downto 0);
    y : out std_logic_vector((32 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_45806cd13a',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '28870deb3646c6bc50cab9700589fd2b',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ac2f739d29145151bc66bce28e960f84',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '230c277854b00954cab5d8e7752e8391',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '697140b2927c3ff9df3716f7a2cee197',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f29ccc58b1305aba93a5e617ed7d38d9',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b6a81c39344abf9aba454f7b078c5ff3',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'cba1beb2e745e4c2efaec878c73fed99',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b14fd2388883760b9419fe0b064f8a84',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '81ee9c64a62e4381b0cb3e59bc513cba',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '1b94d6d48dc9e944dac2fbc4ddeaa6a9',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c65a653b4a335132f00b52d9e8785970',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '5b9a9616b98e24a82bae2774d9a4a01e',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '790f09d17060ebd8d6765c91422a894b',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '515325c0df8cad3a867aa6ba905d277a',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '4deba6cadde54f5be203a4e3c1f85d88',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '12554ca9ee5d5df57387c5f8bb8849eb',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'cfbd19a3be4e24991c1f835b4e981483',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((32 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((32 - 1) downto 0);
    output_port : out std_logic_vector((32 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_c5d4d59b73',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '22a6533109a16bec4244ff4fcfaeae99',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'cae6d204ea4e90a20b3305e8b8ec1060',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '2076494de7a56d5fc6acf3d89a12ad55',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '54f634f471c2805a52746037535f5e21',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'aca434978f1854055fd86fc0597c48e1',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c55e29bf53812858bf0760a0d89fa259',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '73e03389766e7c7bd063b62233412328',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f8ba8219b0ec62c34e168585394605ba',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '6ad0fb0976d6a29dea213e578ab8ce0f',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'cc902cd754b70e087c6968db20370596',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '2d495574cf829e751d7eee33e0777281',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '1ca50388e05b76f7b3b71698bb89b43d',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f87d1b4d278bb9c0a64e87331f5bca9b',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c5146214eb50d68f19b17f069fadb474',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '07b5a06e1a2b03783a9b63176b9c0220',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b20e0e691ea4ce31408e2a3ac5018a2f',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '318da6d5c4b5475ea96973d553c2e7e8',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '08223113b68927a489fb7b2d853ab52f',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '1adc047018e9a65be65b547d8888c808',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f02e843d0c2cd6bfd5001358915b0c18',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd2ae1895a0f227b2d4f597f6b6eab646',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c25187cc6aa4ed338a621cd8b70b7840',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '7d6c6efe854c555e7c26bbe77bd14b26',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '5d795c87a8de5f66620d00666dc517d4',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '9e1ad6d22d4d2ed9a82824640956d447',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '8db3cfcea6c9b728c5d4377907dbb215',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f98d249a91a2bebe5fbbadd55f6a74ab',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '7790381855e0b9dcee12916dd4a10caf',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '58ec65b8251cafe2d87555a9997d5fbd',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b6a5868e204777a2b00e4c354e9f793d',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '477fa2abb043f5607cf787cee76d0772',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd3453b22cd8e921fbb9c8a3754f1c36d',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '2f88aee3bbaa64b754fd86403597c640',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'fe5df77a32b28f139780c707a3eafeb4',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '29ae2b51c00e01112f715bb45d12ee53',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '48e957daacdb516b61445fd72ef3c28c',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '52f598affdc84af6cf1f34779e422de4',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'bd2f8665c3718a33829171193f4e5159',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e74f8e68d4e23edc6ec5d9440915774e',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd6d784c2206fca4b2d69fbd669b3b30d',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '55dc18260a6dafd056fd86e0806f0cbb',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd0885e6c2765e9322ec2b0bb33c0c7d7',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '7ce690e5e370a22ab287f5c52de5c206',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b9a17693dc8b2f94c2a1c23eabaf1a31',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ad2a367603e72315930aae72b09643a5',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a56cd003e8de55441892f1cd57ae6c6c',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd573aa3a8339b56418face349ec4cd2a',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((288 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal in2_1_31: unsigned((288 - 1) downto 0);
  signal y_2_1_concat: unsigned((577 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((288 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    in2 : in std_logic_vector((288 - 1) downto 0);
    y : out std_logic_vector((577 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_5c078b6592',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '626a881458f4fd566464a3b1faab9837',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((289 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((289 - 1) downto 0);
    output_port : out std_logic_vector((289 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_7239e29d34',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd23a861f8b4ace0c86f9669cca1c02eb',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '9accae1aa3b34a27e30db66bc8ecba3b',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '9efeb8f253aa7269b62f52b60334e0cd',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '7a349b4e8d796add6a0cd8ec701a0d63',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '1e7f258e8d91367c88ab4c38e7ba6781',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((74 - 1) downto 0);
  signal in1_1_27: unsigned((74 - 1) downto 0);
  signal in2_1_31: unsigned((74 - 1) downto 0);
  signal in3_1_35: unsigned((74 - 1) downto 0);
  signal in4_1_39: unsigned((74 - 1) downto 0);
  signal in5_1_43: unsigned((74 - 1) downto 0);
  signal in6_1_47: unsigned((74 - 1) downto 0);
  signal in7_1_51: unsigned((74 - 1) downto 0);
  signal y_2_1_concat: unsigned((592 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  in5_1_43 <= std_logic_vector_to_unsigned(in5);
  in6_1_47 <= std_logic_vector_to_unsigned(in6);
  in7_1_51 <= std_logic_vector_to_unsigned(in7);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39) & unsigned_to_std_logic_vector(in5_1_43) & unsigned_to_std_logic_vector(in6_1_47) & unsigned_to_std_logic_vector(in7_1_51));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((74 - 1) downto 0);
    in1 : in std_logic_vector((74 - 1) downto 0);
    in2 : in std_logic_vector((74 - 1) downto 0);
    in3 : in std_logic_vector((74 - 1) downto 0);
    in4 : in std_logic_vector((74 - 1) downto 0);
    in5 : in std_logic_vector((74 - 1) downto 0);
    in6 : in std_logic_vector((74 - 1) downto 0);
    in7 : in std_logic_vector((74 - 1) downto 0);
    y : out std_logic_vector((592 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_27b3914525',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c4f06d284dc70d640762e0c1b9eb64dd',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '50f716d18f55e16115f8e27729e00080',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ed46c21cdb39e6b2173bc8428ffa2bcd',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a79b6bd6478e58928a8dc6413b31fddb',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '9d39731d79cee14fb9fb06de7984b4ff',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '5980c67138ce10887fa9f8169a8598f2',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '699e33f77c3ebc7db9982fbea854c6e1',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '06447deda0fe3bbe3648a18bf0a7ba9f',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '6f5b4b6bdf64f3fd863f237e83809f5f',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((288 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (1 - 1)) of std_logic_vector((288 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    0 => "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((288 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((288 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(0);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((288 - 1) downto 0);
    q : out std_logic_vector((288 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_19d8b2f2b7',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '5ff1ea017323091d22896a3e0b6d79ea',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xldelay.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '814aab35ae62d8525b2044f6077ce2be',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((289 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (8 - 1)) of std_logic_vector((289 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((289 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((289 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(7);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 7 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((289 - 1) downto 0);
    q : out std_logic_vector((289 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_e06ce28c9b',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a29aaad0feeea4cb64007c48e84339cb',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((2 - 1) downto 0);
  signal in1_1_27: unsigned((9 - 1) downto 0);
  signal y_2_1_concat: unsigned((11 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((2 - 1) downto 0);
    in1 : in std_logic_vector((9 - 1) downto 0);
    y : out std_logic_vector((11 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_4fd36a24a3',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a4a387d2b64462ddf839353dc69ae168',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlconvert_pipeline.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e83aff9da64d1a3aa5a1da09240ec7fb',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((10 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (2 - 1)) of std_logic_vector((10 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "0000000000",
    "0000000000");
  signal op_mem_20_24_front_din: std_logic_vector((10 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((10 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(1);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 1 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((10 - 1) downto 0);
    q : out std_logic_vector((10 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_325391d82e',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '789139406ae5f322d0776ec2a2802f62',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xldelay.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '2c1d36df21106f51830cfd3e7f4432a2',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((10 - 1) downto 0);
  signal y_2_1_concat: unsigned((11 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((10 - 1) downto 0);
    y : out std_logic_vector((11 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_811dd91a3d',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '50f76e684e494563bb91ee44794ba76a',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '773cb14e13079b3322d789895eac3498',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '8d6f94133665a4f6ef30440333f831b3',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'bf1d4b4df34aa7608cda734879df3e30',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((577 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (6 - 1)) of std_logic_vector((577 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (






  signal op_mem_20_24_front_din: std_logic_vector((577 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((577 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(5);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 5 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((577 - 1) downto 0);
    q : out std_logic_vector((577 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_0eaf48e9e6',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '3b87469e547fcfed1c6b1e6aa6fffc02',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((577 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (3 - 1)) of std_logic_vector((577 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (



  signal op_mem_20_24_front_din: std_logic_vector((577 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((577 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(2);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 2 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((577 - 1) downto 0);
    q : out std_logic_vector((577 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_9c1a7479f7',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 7FFFC0000, 7FFFFFE6E, 7FFFBFCDC, 7FFEBFB4A, 7FFDBF9B8, 7FFC7F825, 7FFABF693, 7FF8BF501, 7FF67F36F, 7FF3BF1DD, 7FF0BF04B, 7FED7EEB9, 7FE9FED28, 7FE63EB96, 7FE1FEA04, 7FDD7E872, 7FD8BE6E1, 7FD3BE54F, 7FCE3E3BD, 7FC87E22C, 7FC27E09B, 7FBC3DF09, 7FB5BDD78, 7FAEBDBE7, 7FA77DA56, 7F9FFD8C5, 7F97FD734, 7F8FFD5A3, 7F877D412, 7F7EBD282, 7F757D0F1, 7F6C3CF61, 7F627CDD1, 7F587CC41, 7F4E3CAB1, 7F437C921, 7F387C791, 7F2D3C601, 7F21BC472, 7F15FC2E3, 7F09BC153, 7EFD3BFC4, 7EF07BE35, 7EE37BCA7, 7ED63BB18, 7EC87B98A, 7EBA7B7FC, 7EAC3B66E, 7E9D7B4E0, 7E8EBB352, 7E7F7B1C5, 7E6FFB037, 7E603AEAA, 7E4FFAD1D, 7E3F7AB91, 7E2EBAA04, 7E1DBA878, 7E0C7A6EC, 7DFABA560, 7DE8FA3D4, 7DD6BA249, 7DC3FA0BD, 7DB139F32, 7D9DF9DA8, 7D8A79C1D, 7D76B9A93, 7D62B9909, 7D4E7977F, 7D39B95F5, 7D24B946C, 7D0F792E3, 7CF9F915A, 7CE3F8FD2, 7CCDF8E4A, 7CB778CC2, 7CA078B3A, 7C89789B3, 7C723882C, 7C5A786A5, 7C427851E, 7C2A38398, 7C11B8212, 7BF8B808D, 7BDF77F07, 7BC637D82, 7BAC37BFE, 7B9237A79, 7B77F78F5, 7B5D37771, 7B42375EE, 7B26F746B, 7B0B772E8, 7AEFB7166, 7AD376FE4, 7AB6F6E62, 7A9A36CE1, 7A7D36B60, 7A5FF69DF, 7A423685F, 7A24766DF, 7A063655F, 79E7B63E0, 79C8B6262, 79A9B60E3, 798A75F65, 796AB5DE7, 794AB5C6A, 792A75AED, 7909F5971, 78E8F57F5, 78C7F5679, 78A6754FE, 7884B5383, 7862B5209, 78407508F, 781DB4F15, 77FAF4D9C, 77D7B4C23, 77B434AAB, 779074933, 776C747BC, 774834645, 7723744CE, 76FEB4358, 76D9741E3, 76B3F406E, 768E33EF9, 766833D85, 7641F3C11, 761B33A9E, 75F47392B, 75CD337B9, 75A5B3647, 757DF34D5, 7555F3364, 752DB31F4, 7504F3084, 74DC32F15, 74B2F2DA6, 748972C38, 745FB2ACA, 7435B295C, 740B727F0, 73E0F2683, 73B632517, 738AF23AC, 735FB2242, 7333F20D7, 7307F1F6E, 72DBB1E05, 72AF31C9C, 728271B34, 7255719CD, 7227F1866, 71FA716FF, 71CC71599, 719E71434, 716FF12D0, 71413116C, 711231008, 70E2F0EA5, 70B370D43, 7083B0BE1, 7053B0A80, 70233091F, 6FF2B07BF, 6FC1B0660, 6F90B0501, 6F5F303A3, 6F2D70245, 6EFB700E8, 6EC96FF8C, 6E96EFE30, 6E642FCD5, 6E312FB7B, 6DFDAFA21, 6DCA2F8C8, 6D966F76F, 6D626F617, 6D2DEF4C0, 6CF96F369, 6CC46F213, 6C8F6F0BE, 6C59EEF69, 6C246EE15, 6BEE6ECC1, 6BB82EB6F, 6B81EEA1D, 6B4B2E8CB, 6B142E77A, 6ADCEE62A, 6AA56E4DB, 6A6DAE38C, 6A35AE23E, 69FDAE0F1, 69C52DFA4, 698C6DE58, 69536DD0D, 691A2DBC3, 68E0ADA79, 68A6AD930, 686CAD7E7, 68326D6A0, 67F7ED559, 67BD2D412, 67822D2CD, 6746ED188, 670B6D044, 66CFACF01, 6693ACDBE, 66576CC7C, 661AECB3B, 65DE2C9FA, 65A12C8BB, 6563EC77C, 65266C63E, 64E8AC500, 64AAAC3C4, 646C6C288, 642E2C14D, 63EF6C012, 63B06BED9, 63712BDA0, 6331EBC68, 62F22BB31, 62B22B9FA, 62722B8C5, 6231AB790, 61F12B65C, 61B06B528, 616F2B3F6, 612DEB2C4, 60EC6B193, 60AAAB063, 6068AAF34, 60266AE05, 5FE3EACD8, 5FA12ABAB, 5F5E2AA7F, 5F1B2A954, 5ED7AA829, 5E93EA700, 5E502A5D7, 5E0C2A4AF, 5DC7AA388, 5D832A262, 5D3E6A13D, 5CF96A018, 5CB469EF5, 5C6EE9DD2, 5C2929CB0, 5BE369B8F, 5B9D29A6E, 5B56E994F, 5B1069831, 5AC9A9713, 5A82A95F6, 5A3B694DA, 59F3E93BF, 59AC692A5, 5964A918C, 591C69073, 58D428F5C, 588BA8E45, 5842E8D2F, 57FA28C1B, 57B0E8B07, 5767A89F4, 571E288E2, 56D4687D0, 568A686C0, 5640285B1, 55F5E84A2, 55AB28394, 556068288, 55156817C, 54CA28071, 547EE7F67, 543327E5E, 53E767D56, 539B67C4F, 534F27B49, 5302A7A44, 52B62793F, 52692783C, 521C2773A, 51CEE7638, 5181A7538, 5133E7438, 50E627339, 50982723C, 5049E713F, 4FFBA7043, 4FACE6F48, 4F5E26E4F, 4F0F26D56, 4EC026C5E, 4E70A6B67, 4E2126A71, 4DD16697C, 4D81A6888, 4D3166795, 4CE1266A3, 4C90A65B2, 4C3FE64C2, 4BEF263D3, 4B9E262E5, 4B4CE61F8, 4AFBA610C, 4AA9E6021, 4A5825F37, 4A0665E4E, 49B425D66, 4961E5C7E, 490F65B98, 48BCE5AB3, 486A259CF, 4817258EC, 47C3E580A, 4770A572A, 471D2564A, 46C96556B, 4675A548D, 4621A53B0, 45CD652D4, 4578E51F9, 452465120, 44CFE5047, 447AE4F6F, 4425E4E99, 43D0A4DC3, 437B64CEF, 4325E4C1B, 42D024B49, 427A64A77, 4224649A7, 41CE248D8, 4177E480A, 41216473C, 40CAE4670, 4074245A5, 401D244DB, 3FC624413, 3F6EE434B, 3F1764284, 3EBFE41BE, 3E68240FA, 3E1064036, 3DB863F74, 3D6023EB2, 3D07E3DF2, 3CAF63D33, 3C56E3C75, 3BFE23BB8, 3BA523AFC, 3B4C23A41, 3AF323987, 3A99E38CF, 3A4063817, 39E6A3761, 398CE36AB, 3933235F7, 38D923544, 387EE3492, 3824A33E1, 37CA63331, 376FA3282, 3715231D5, 36BA63128, 365F6307D, 360422FD3, 35A922F2A, 354DA2E82, 34F222DDB, 3496A2D35, 343AE2C90, 33DF22BED, 338322B4A, 332722AA9, 32CAE2A09, 326E6296A, 3211E28CC, 31B56282F, 3158A2794, 30FBE26F9, 309EE2660, 3041E25C8, 2FE4A2531, 2F876249B, 2F2A22406, 2ECCA2373, 2E6EE22E0, 2E112224F, 2DB3621BF, 2D5562130, 2CF7620A2, 2C9922015, 2C3AE1F8A, 2BDC61EFF, 2B7DE1E76, 2B1F61DEE, 2AC0A1D67, 2A61E1CE1, 2A02E1C5D, 29A3E1BD9, 2944E1B57, 28E5A1AD6, 288661A56, 2826E19D7, 27C76195A, 2767A18DE, 270821862, 26A8617E8, 26486176F, 25E8616F8, 258861681, 25282160C, 24C7E1598, 2467A1525, 2407214B3, 23A6A1442, 2346213D3, 22E561365, 2284A12F8, 2223E128C, 21C2E1221, 2161E11B8, 2100A1150, 209FA10E8, 203E61083, 1FDCE101E, 1F7BA0FBA, 1F1A20F58, 1EB8A0EF7, 1E56E0E97, 1DF520E38, 1D9360DDB, 1D31A0D7F, 1CCFA0D23, 1C6DA0CC9, 1C0BA0C71, 1BA9A0C19, 1B4760BC3, 1AE520B6E, 1A82E0B1A, 1A2060AC7, 19BDE0A76, 195B60A26, 18F8E09D7, 189620989, 1833A093C, 17D0E08F1, 176DE08A6, 170B2085D, 16A820816, 1645207CF, 15E22078A, 157F20746, 151BE0703, 14B8E06C1, 1455A0680, 13F260641, 138EE0603, 132BA05C6, 12C82058B, 1264A0550, 120120517, 119DA04DF, 113A204A8, 10D660473, 1072E043F, 100F2040C, FAB603DA, F47603A9, EE3A037A, E7FE034C, E1BE031F, DB7E02F3, D53E02C8, CEFE029F, C8BE0277, C27E0250, BC3E022B, B5FA0206, AFBA01E3, A97601C1, A33201A1, 9CEE0181, 96AA0163, 90660146, 8A22012A, 83DE0110, 7D9600F7, 775200DF, 710E00C8, 6AC600B2, 647E009E, 5E3A008B, 57F20079, 51AA0068, 4B620059, 451E004B, 3ED6003E, 388E0032, 32460027, 2BFE001E, 25B60016, 1F6E000F, 1922000A, 12DA0006, C920002, 64A0001, 20000, FF9BA0001, FF3720002, FED2A0006, FE6E2000A, FE096000F, FDA4E0016, FD406001E, FCDBE0027, FC7760032, FC12E003E, FBAE6004B, FB4A20059, FAE5A0068, FA8120079, FA1CA008B, F9B86009E, F953E00B2, F8EF600C8, F88B200DF, F826E00F7, F7C260110, F75E2012A, F6F9E0146, F695A0163, F63160181, F5CD201A1, F568E01C1, F504A01E3, F4A0A0206, F43C6022B, F3D860250, F37460277, F3106029F, F2AC602C8, F248602F3, F1E46031F, F1806034C, F11CA037A, F0B8E03A9, F054E03DA, EFF12040C, EF8D6043F, EF29E0473, EEC6204A8, EE62A04DF, EDFF20517, ED9BA0550, ED382058B, ECD4A05C6, EC7160603, EC0DE0641, EBAAA0680, EB47606C1, EAE460703, EA8120746, EA1E2078A, E9BB207CF, E95820816, E8F52085D, E892608A6, E82F608F1, E7CCA093C, E76A20989, E707609D7, E6A4E0A26, E64260A76, E5DFE0AC7, E57D60B1A, E51B20B6E, E4B8E0BC3, E456A0C19, E3F4A0C71, E392A0CC9, E330A0D23, E2CEA0D7F, E26CE0DDB, E20B20E38, E1A960E97, E147A0EF7, E0E620F58, E084A0FBA, E0236101E, DFC1E1083, DF60A10E8, DEFFA1150, DE9E611B8, DE3D61221, DDDC6128C, DD7BA12F8, DD1AE1365, DCBA213D3, DC59A1442, DBF9214B3, DB98A1525, DB3861598, DAD82160C, DA77E1681, DA17E16F8, D9B7E176F, D957E17E8, D8F821862, D898A18DE, D838E195A, D7D9619D7, D779E1A56, D71AA1AD6, D6BB61B57, D65C61BD9, D5FD61C5D, D59E61CE1, D53FA1D67, D4E0E1DEE, D48261E76, D423E1EFF, D3C561F8A, D36722015, D308E20A2, D2AAE2130, D24CE21BF, D1EF2224F, D191622E0, D133A2373, D0D622406, D078E249B, D01BA2531, CFBE625C8, CF6162660, CF04626F9, CEA7A2794, CE4AE282F, CDEE628CC, CD91E296A, CD3562A09, CCD922AA9, CC7D22B4A, CC2122BED, CBC562C90, CB69A2D35, CB0E22DDB, CAB2A2E82, CA5722F2A, C9FC22FD3, C9A0E307D, C945E3128, C8EB231D5, C890A3282, C835E3331, C7DBA33E1, C78163492, C72723544, C6CD235F7, C673636AB, C619A3761, C5BFE3817, C566638CF, C50D23987, C4B423A41, C45B23AFC, C40223BB8, C3A963C75, C350E3D33, C2F863DF2, C2A023EB2, C247E3F74, C1EFE4036, C198240FA, C140641BE, C0E8E4284, C0916434B, C03A24413, BFE3244DB, BF8C245A5, BF3564670, BEDEE473C, BE886480A, BE32248D8, BDDBE49A7, BD85E4A77, BD3024B49, BCDA64C1B, BC84E4CEF, BC2FA4DC3, BBDA64E99, BB8564F6F, BB3065047, BADBE5120, BA87651F9, BA32E52D4, B9DEA53B0, B98AA548D, B936E556B, B8E32564A, B88FA572A, B83C6580A, B7E9258EC, B796259CF, B74365AB3, B6F0E5B98, B69E65C7E, B64C25D66, B5F9E5E4E, B5A825F37, B55666021, B504A610C, B4B3661F8, B462262E5, B411263D3, B3C0664C2, B36FA65B2, B31F266A3, B2CEE6795, B27EA6888, B22EE697C, B1DF26A71, B18FA6B67, B14026C5E, B0F126D56, B0A226E4F, B05366F48, B004A7043, AFB66713F, AF682723C, AF1A27339, AECC67438, AE7EA7538, AE3167638, ADE42773A, AD972783C, AD4A2793F, ACFDA7A44, ACB127B49, AC64E7C4F, AC18E7D56, ABCD27E5E, AB8167F67, AB3628071, AAEAE817C, AA9FE8288, AA5528394, AA0A684A2, A9C0285B1, A975E86C0, A92BE87D0, A8E2288E2, A898A89F4, A84F68B07, A80628C1B, A7BD68D2F, A774A8E45, A72C28F5C, A6E3E9073, A69BA918C, A653E92A5, A60C693BF, A5C4E94DA, A57DA95F6, A536A9713, A4EFE9831, A4A96994F, A46329A6E, A41CE9B8F, A3D729CB0, A39169DD2, A34BE9EF5, A306EA018, A2C1EA13D, A27D2A262, A238AA388, A1F42A4AF, A1B02A5D7, A16C6A700, A128AA829, A0E52A954, A0A22AA7F, A05F2ABAB, A01C6ACD8, 9FD9EAE05, 9F97AAF34, 9F55AB063, 9F13EB193, 9ED26B2C4, 9E912B3F6, 9E4FEB528, 9E0F2B65C, 9DCEAB790, 9D8E2B8C5, 9D4E2B9FA, 9D0E2BB31, 9CCE6BC68, 9C8F2BDA0, 9C4FEBED9, 9C10EC012, 9BD22C14D, 9B93EC288, 9B55AC3C4, 9B17AC500, 9AD9EC63E, 9A9C6C77C, 9A5F2C8BB, 9A222C9FA, 99E56CB3B, 99A8ECC7C, 996CACDBE, 9930ACF01, 98F4ED044, 98B96D188, 987E2D2CD, 98432D412, 98086D559, 97CDED6A0, 9793AD7E7, 9759AD930, 971FADA79, 96E62DBC3, 96ACEDD0D, 9673EDE58, 963B2DFA4, 9602AE0F1, 95CAAE23E, 9592AE38C, 955AEE4DB, 95236E62A, 94EC2E77A, 94B52E8CB, 947E6EA1D, 94482EB6F, 9411EECC1, 93DBEEE15, 93A66EF69, 9370EF0BE, 933BEF213, 9306EF369, 92D26F4C0, 929DEF617, 9269EF76F, 92362F8C8, 9202AFA21, 91CF2FB7B, 919C2FCD5, 91696FE30, 9136EFF8C, 9104F00E8, 90D2F0245, 90A1303A3, 906FB0501, 903EB0660, 900DB07BF, 8FDD3091F, 8FACB0A80, 8F7CB0BE1, 8F4CF0D43, 8F1D70EA5, 8EEE31008, 8EBF3116C, 8E90712D0, 8E61F1434, 8E33F1599, 8E05F16FF, 8DD871866, 8DAAF19CD, 8D7DF1B34, 8D5131C9C, 8D24B1E05, 8CF871F6E, 8CCC720D7, 8CA0B2242, 8C75723AC, 8C4A32517, 8C1F72683, 8BF4F27F0, 8BCAB295C, 8BA0B2ACA, 8B76F2C38, 8B4D72DA6, 8B2432F15, 8AFB73084, 8AD2B31F4, 8AAA73364, 8A82734D5, 8A5AB3647, 8A33337B9, 8A0BF392B, 89E533A9E, 89BE73C11, 899833D85, 897233EF9, 894C7406E, 8926F41E3, 8901B4358, 88DCF44CE, 88B834645, 8893F47BC, 886FF4933, 884C34AAB, 8828B4C23, 880574D9C, 87E2B4F15, 87BFF508F, 879DB5209, 877BB5383, 8759F54FE, 873875679, 8717757F5, 86F675971, 86D5F5AED, 86B5B5C6A, 8695B5DE7, 8675F5F65, 8656B60E3, 8637B6262, 8618B63E0, 85FA3655F, 85DBF66DF, 85BE3685F, 85A0769DF, 858336B60, 856636CE1, 854976E62, 852CF6FE4, 8510B7166, 84F4F72E8, 84D97746B, 84BE375EE, 84A337771, 8488778F5, 846E37A79, 845437BFE, 843A37D82, 8420F7F07, 8407B808D, 83EEB8212, 83D638398, 83BDF851E, 83A5F86A5, 838E3882C, 8376F89B3, 835FF8B3A, 8348F8CC2, 833278E4A, 831C78FD2, 83067915A, 82F0F92E3, 82DBB946C, 82C6B95F5, 82B1F977F, 829DB9909, 8289B9A93, 8275F9C1D, 826279DA8, 824F39F32, 823C7A0BD, 8229BA249, 82177A3D4, 8205BA560, 81F3FA6EC, 81E2BA878, 81D1BAA04, 81C0FAB91, 81B07AD1D, 81A03AEAA, 81907B037, 8180FB1C5, 8171BB352, 8162FB4E0, 81543B66E, 8145FB7FC, 8137FB98A, 812A3BB18, 811CFBCA7, 810FFBE35, 81033BFC4, 80F6BC153, 80EA7C2E3, 80DEBC472, 80D33C601, 80C7FC791, 80BCFC921, 80B23CAB1, 80A7FCC41, 809DFCDD1, 80943CF61, 808AFD0F1, 8081BD282, 8078FD412, 80707D5A3, 80687D734, 80607D8C5, 8058FDA56, 8051BDBE7, 804ABDD78, 80443DF09, 803DFE09B, 8037FE22C, 80323E3BD, 802CBE54F, 8027BE6E1, 8022FE872, 801E7EA04, 801A3EB96, 80167ED28, 8012FEEB9, 800FBF04B, 800CBF1DD, 8009FF36F, 8007BF501, 8005BF693, 8003FF825, 8002BF9B8, 8001BFB4A, 8000BFCDC, 80007FE6E;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 1kx18',
    'CSET read_width_a = 36',
    'CSET read_width_b = 36',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 36',
    'CSET write_width_b = 36',
    'CSET component_name = bmg_72_a63867243b76433f',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a82c5674eace85ca2ae1e83973fd5c2f',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_a63867243b76433f',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '6b016630bd04db1f91221db3c56a14c1',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlpassthrough.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a0723354e0f772681abdbcd42078c56e',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '706fabb9d25ac22ef7cf8733c69d0819',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((320 - 1) downto 0);
  signal in1_1_27: unsigned((320 - 1) downto 0);
  signal y_2_1_concat: unsigned((640 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((320 - 1) downto 0);
    in1 : in std_logic_vector((320 - 1) downto 0);
    y : out std_logic_vector((640 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_c5d5ff0cc4',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Adder_Subtracter virtex6 Xilinx,_Inc. 11.0',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET AINIT_Value = 0',
    'CSET A_Type = Signed',
    'CSET A_Width = 12',
    'CSET Add_Mode = Subtract',
    'CSET B_Constant = false',
    'CSET B_Type = Signed',
    'CSET B_Value = 0',
    'CSET B_Width = 12',
    'CSET Borrow_Sense = Active_Low',
    'CSET Bypass = false',
    'CSET Bypass_CE_Priority = Bypass_Overrides_CE',
    'CSET Bypass_Sense = Active_Low',
    'CSET CE = true',
    'CSET C_In = false',
    'CSET C_Out = false',
    'CSET Implementation = Fabric',
    'CSET Latency = 1',
    'CSET Out_Width = 12',
    'CSET SCLR = false',
    'CSET SINIT = false',
    'CSET SINIT_Value = 0',
    'CSET SSET = false',
    'CSET Sync_CE_Priority = Sync_Overrides_CE',
    'CSET Sync_Ctrl_Priority = Reset_Overrides_Set',
    'CSET component_name = addsb_11_0_8bea8e341a05ae56',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '744848206df88ae5faf5faf910c8a7fa',
    'sourceFile' => 'hdl/xladdsub.vhd',
    'templateKeyValues' => {
      'core_component_def' => '    a: in std_logic_vector(12 - 1 downto 0);
    clk: in std_logic:= \'0\';
    ce: in std_logic:= \'0\';
    s: out std_logic_vector(c_output_width - 1 downto 0);
    b: in std_logic_vector(12 - 1 downto 0)',
      'core_instance_text' => '         a => full_a,
         clk => clk,
         ce => internal_ce,
         s => core_s,
         b => full_b',
      'core_name0' => 'addsb_11_0_8bea8e341a05ae56',
      'entityName' => 'xladdsub_he6_cres_correlator',
      'entity_name.0' => 'xladdsub',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '881a63d71e0768154786b1cfd0f2cb0f',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((2 - 1) downto 0);
  signal in1_1_27: unsigned((10 - 1) downto 0);
  signal y_2_1_concat: unsigned((12 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((2 - 1) downto 0);
    in1 : in std_logic_vector((10 - 1) downto 0);
    y : out std_logic_vector((12 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_7ad1e33701',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '66b549abead4ab5509046254029d7863',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "10000000000";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((11 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_0604807f72',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '3c426207ec12b268d05ea7ea9f71ebf9',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlconvert_pipeline.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'fbf51d17453101c438e6c60c5d42f156',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic_vector((10 - 1) downto 0);
  signal d1_1_27: std_logic_vector((11 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (2 - 1)) of std_logic_vector((11 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    "00000000000",
    "00000000000");
  signal pipe_16_22_front_din: std_logic_vector((11 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((11 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((11 - 1) downto 0);
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(1);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (pipe_16_22_push_front_pop_back_en = \'1\')) then
        for i in 1 downto 1 loop 
          pipe_16_22(i) <= pipe_16_22(i-1);
        end loop;
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= cast(d0_1_24, 0, 11, 0, xlUnsigned);
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= \'1\';
  y <= pipe_16_22_back;
end',
      'crippled_entity' => 'is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((10 - 1) downto 0);
    d1 : in std_logic_vector((11 - 1) downto 0);
    y : out std_logic_vector((11 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'mux_046d743d02',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd8ea8cfc80978e03a0407b4ee02f990b',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'af183ea3b45d666b75f9a61fb30dd69e',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 7FFFC0000, 7FFFFFF37, 7FFFFFE6E, 7FFFFFDA5, 7FFFBFCDC, 7FFF3FC13, 7FFEBFB4A, 7FFE3FA81, 7FFDBF9B8, 7FFD3F8EF, 7FFC7F825, 7FFB7F75C, 7FFABF693, 7FF9BF5CA, 7FF8BF501, 7FF77F438, 7FF67F36F, 7FF4FF2A6, 7FF3BF1DD, 7FF23F114, 7FF0BF04B, 7FEF3EF82, 7FED7EEB9, 7FEBBEDF1, 7FE9FED28, 7FE83EC5F, 7FE63EB96, 7FE43EACD, 7FE1FEA04, 7FDFBE93B, 7FDD7E872, 7FDB3E7A9, 7FD8BE6E1, 7FD63E618, 7FD3BE54F, 7FD0FE486, 7FCE3E3BD, 7FCB7E2F5, 7FC87E22C, 7FC5BE163, 7FC27E09B, 7FBF7DFD2, 7FBC3DF09, 7FB8FDE41, 7FB5BDD78, 7FB23DCAF, 7FAEBDBE7, 7FAAFDB1E, 7FA77DA56, 7FA3BD98D, 7F9FFD8C5, 7F9BFD7FC, 7F97FD734, 7F93FD66B, 7F8FFD5A3, 7F8BBD4DB, 7F877D412, 7F82FD34A, 7F7EBD282, 7F7A3D1BA, 7F757D0F1, 7F70FD029, 7F6C3CF61, 7F673CE99, 7F627CDD1, 7F5D7CD09, 7F587CC41, 7F533CB79, 7F4E3CAB1, 7F48BC9E9, 7F437C921, 7F3DFC859, 7F387C791, 7F32FC6C9, 7F2D3C601, 7F27BC53A, 7F21BC472, 7F1BFC3AA, 7F15FC2E3, 7F0FFC21B, 7F09BC153, 7F03BC08C, 7EFD3BFC4, 7EF6FBEFD, 7EF07BE35, 7EE9FBD6E, 7EE37BCA7, 7EDCBBBDF, 7ED63BB18, 7ECF3BA51, 7EC87B98A, 7EC17B8C3, 7EBA7B7FC, 7EB33B735, 7EAC3B66E, 7EA4FB5A7, 7E9D7B4E0, 7E963B419, 7E8EBB352, 7E86FB28B, 7E7F7B1C5, 7E77BB0FE, 7E6FFB037, 7E67FAF71, 7E603AEAA, 7E57FADE4, 7E4FFAD1D, 7E47BAC57, 7E3F7AB91, 7E373AACA, 7E2EBAA04, 7E267A93E, 7E1DBA878, 7E153A7B2, 7E0C7A6EC, 7E03BA626, 7DFABA560, 7DF1FA49A, 7DE8FA3D4, 7DDFBA30E, 7DD6BA249, 7DCD7A183, 7DC3FA0BD, 7DBAB9FF8, 7DB139F32, 7DA7B9E6D, 7D9DF9DA8, 7D9479CE2, 7D8A79C1D, 7D80B9B58, 7D76B9A93, 7D6CB99CE, 7D62B9909, 7D58B9844, 7D4E7977F, 7D44396BA, 7D39B95F5, 7D2F39531, 7D24B946C, 7D1A393A8, 7D0F792E3, 7D04B921F, 7CF9F915A, 7CEEF9096, 7CE3F8FD2, 7CD8F8F0E, 7CCDF8E4A, 7CC2B8D86, 7CB778CC2, 7CABF8BFE, 7CA078B3A, 7C94F8A76, 7C89789B3, 7C7DF88EF, 7C723882C, 7C6638768, 7C5A786A5, 7C4E785E2, 7C427851E, 7C367845B, 7C2A38398, 7C1DF82D5, 7C11B8212, 7C053814F, 7BF8B808D, 7BEC37FCA, 7BDF77F07, 7BD2F7E45, 7BC637D82, 7BB937CC0, 7BAC37BFE, 7B9F37B3B, 7B9237A79, 7B85379B7, 7B77F78F5, 7B6AB7833, 7B5D37771, 7B4FB76B0, 7B42375EE, 7B34B752C, 7B26F746B, 7B19373AA, 7B0B772E8, 7AFD77227, 7AEFB7166, 7AE1770A5, 7AD376FE4, 7AC536F23, 7AB6F6E62, 7AA8B6DA1, 7A9A36CE1, 7A8BB6C20, 7A7D36B60, 7A6EB6A9F, 7A5FF69DF, 7A513691F, 7A423685F, 7A337679F, 7A24766DF, 7A153661F, 7A063655F, 79F6F64A0, 79E7B63E0, 79D836321, 79C8B6262, 79B9361A2, 79A9B60E3, 7999F6024, 798A75F65, 797A75EA6, 796AB5DE7, 795AB5D29, 794AB5C6A, 793AB5BAC, 792A75AED, 791A35A2F, 7909F5971, 78F9758B3, 78E8F57F5, 78D875737, 78C7F5679, 78B7355BC, 78A6754FE, 7895B5441, 7884B5383, 7873B52C6, 7862B5209, 7851B514C, 78407508F, 782F34FD2, 781DB4F15, 780C74E59, 77FAF4D9C, 77E974CE0, 77D7B4C23, 77C5F4B67, 77B434AAB, 77A2749EF, 779074933, 777E74877, 776C747BC, 775A74700, 774834645, 7735F458A, 7723744CE, 771134413, 76FEB4358, 76EC3429D, 76D9741E3, 76C6B4128, 76B3F406E, 76A133FB3, 768E33EF9, 767B33E3F, 766833D85, 765533CCB, 7641F3C11, 762EB3B57, 761B33A9E, 7607F39E4, 75F47392B, 75E0B3872, 75CD337B9, 75B973700, 75A5B3647, 7591F358E, 757DF34D5, 7569F341D, 7555F3364, 7541B32AC, 752DB31F4, 75197313C, 7504F3084, 74F0B2FCC, 74DC32F15, 74C7B2E5D, 74B2F2DA6, 749E32CEF, 748972C38, 7474B2B81, 745FB2ACA, 744AF2A13, 7435B295C, 7420B28A6, 740B727F0, 73F632739, 73E0F2683, 73CBB25CD, 73B632517, 73A0B2462, 738AF23AC, 7375722F7, 735FB2242, 7349B218C, 7333F20D7, 731DF2022, 7307F1F6E, 72F1F1EB9, 72DBB1E05, 72C571D50, 72AF31C9C, 7298F1BE8, 728271B34, 726BF1A80, 7255719CD, 723EB1919, 7227F1866, 7211317B2, 71FA716FF, 71E37164C, 71CC71599, 71B5714E7, 719E71434, 718731382, 716FF12D0, 7158B121D, 71413116C, 7129B10BA, 711231008, 70FAB0F56, 70E2F0EA5, 70CB30DF4, 70B370D43, 709BB0C92, 7083B0BE1, 706BB0B30, 7053B0A80, 703B709CF, 70233091F, 700AF086F, 6FF2B07BF, 6FDA3070F, 6FC1B0660, 6FA9305B0, 6F90B0501, 6F77F0452, 6F5F303A3, 6F46702F4, 6F2D70245, 6F14B0197, 6EFB700E8, 6EE27003A, 6EC96FF8C, 6EB02FEDE, 6E96EFE30, 6E7D6FD83, 6E642FCD5, 6E4AAFC28, 6E312FB7B, 6E176FACE, 6DFDAFA21, 6DE3EF974, 6DCA2F8C8, 6DB06F81B, 6D966F76F, 6D7C6F6C3, 6D626F617, 6D482F56B, 6D2DEF4C0, 6D13AF414, 6CF96F369, 6CDEEF2BE, 6CC46F213, 6CA9EF168, 6C8F6F0BE, 6C74AF013, 6C59EEF69, 6C3F2EEBF, 6C246EE15, 6C096ED6B, 6BEE6ECC1, 6BD36EC18, 6BB82EB6F, 6B9D2EAC6, 6B81EEA1D, 6B666E974, 6B4B2E8CB, 6B2FAE823, 6B142E77A, 6AF8AE6D2, 6ADCEE62A, 6AC12E583, 6AA56E4DB, 6A89AE434, 6A6DAE38C, 6A51EE2E5, 6A35AE23E, 6A19AE198, 69FDAE0F1, 69E16E04B, 69C52DFA4, 69A8ADEFE, 698C6DE58, 696FEDDB3, 69536DD0D, 6936ADC68, 691A2DBC3, 68FD6DB1E, 68E0ADA79, 68C3AD9D4, 68A6AD930, 6889ED88B, 686CAD7E7, 684FAD743, 68326D6A0, 68152D5FC, 67F7ED559, 67DAAD4B5, 67BD2D412, 679FAD36F, 67822D2CD, 6764AD22A, 6746ED188, 67292D0E6, 670B6D044, 66EDACFA2, 66CFACF01, 66B1ACE5F, 6693ACDBE, 6675ACD1D, 66576CC7C, 66392CBDB, 661AECB3B, 65FCACA9B, 65DE2C9FA, 65BFAC95B, 65A12C8BB, 6582AC81B, 6563EC77C, 65452C6DD, 65266C63E, 6507AC59F, 64E8AC500, 64C9AC462, 64AAAC3C4, 648BAC326, 646C6C288, 644D6C1EA, 642E2C14D, 640EAC0AF, 63EF6C012, 63CFEBF76, 63B06BED9, 6390EBE3C, 63712BDA0, 6351ABD04, 6331EBC68, 6311EBBCC, 62F22BB31, 62D22BA95, 62B22B9FA, 62922B95F, 62722B8C5, 6251EB82A, 6231AB790, 62116B6F6, 61F12B65C, 61D0AB5C2, 61B06B528, 618FEB48F, 616F2B3F6, 614EAB35D, 612DEB2C4, 610D2B22C, 60EC6B193, 60CB6B0FB, 60AAAB063, 6089AAFCB, 6068AAF34, 60476AE9D, 60266AE05, 60052AD6F, 5FE3EACD8, 5FC2AAC41, 5FA12ABAB, 5F7FAAB15, 5F5E2AA7F, 5F3CAA9E9, 5F1B2A954, 5EF96A8BF, 5ED7AA829, 5EB5EA795, 5E93EA700, 5E722A66B, 5E502A5D7, 5E2E2A543, 5E0C2A4AF, 5DE9EA41C, 5DC7AA388, 5DA5AA2F5, 5D832A262, 5D60EA1CF, 5D3E6A13D, 5D1BEA0AA, 5CF96A018, 5CD6E9F86, 5CB469EF5, 5C91A9E63, 5C6EE9DD2, 5C4C29D41, 5C2929CB0, 5C0669C1F, 5BE369B8F, 5BC069AFE, 5B9D29A6E, 5B7A299DF, 5B56E994F, 5B33A98C0, 5B1069831, 5AECE97A2, 5AC9A9713, 5AA629684, 5A82A95F6, 5A5F29568, 5A3B694DA, 5A17A944D, 59F3E93BF, 59D029332, 59AC692A5, 598869218, 5964A918C, 5940A90FF, 591C69073, 58F868FE7, 58D428F5C, 58AFE8ED0, 588BA8E45, 586768DBA, 5842E8D2F, 581EA8CA5, 57FA28C1B, 57D5A8B91, 57B0E8B07, 578C68A7D, 5767A89F4, 5742E896A, 571E288E2, 56F928859, 56D4687D0, 56AF68748, 568A686C0, 566568638, 5640285B1, 561AE8529, 55F5E84A2, 55D06841B, 55AB28394, 5585E830E, 556068288, 553AE8202, 55156817C, 54EFE80F6, 54CA28071, 54A467FEC, 547EE7F67, 5458E7EE3, 543327E5E, 540D67DDA, 53E767D56, 53C167CD3, 539B67C4F, 537527BCC, 534F27B49, 5328E7AC6, 5302A7A44, 52DC679C1, 52B62793F, 528FA78BE, 52692783C, 5242A77BB, 521C2773A, 51F5A76B9, 51CEE7638, 51A8675B8, 5181A7538, 515AE74B8, 5133E7438, 510D273B9, 50E627339, 50BF272BA, 50982723C, 5071271BD, 5049E713F, 5022A70C1, 4FFBA7043, 4FD466FC6, 4FACE6F48, 4F85A6ECB, 4F5E26E4F, 4F36A6DD2, 4F0F26D56, 4EE7A6CDA, 4EC026C5E, 4E9866BE2, 4E70A6B67, 4E48E6AEC, 4E2126A71, 4DF9669F6, 4DD16697C, 4DA966902, 4D81A6888, 4D596680E, 4D3166795, 4D096671C, 4CE1266A3, 4CB8E662A, 4C90A65B2, 4C686653A, 4C3FE64C2, 4C17A644A, 4BEF263D3, 4BC6A635C, 4B9E262E5, 4B75A626E, 4B4CE61F8, 4B2466182, 4AFBA610C, 4AD2E6096, 4AA9E6021, 4A8125FAC, 4A5825F37, 4A2F65EC2, 4A0665E4E, 49DD65DD9, 49B425D66, 498B25CF2, 4961E5C7E, 4938A5C0B, 490F65B98, 48E625B26, 48BCE5AB3, 489365A41, 486A259CF, 4840A595E, 4817258EC, 47ED6587B, 47C3E580A, 479A2579A, 4770A572A, 4746E56B9, 471D2564A, 46F3255DA, 46C96556B, 469F654FC, 4675A548D, 464BA541E, 4621A53B0, 45F765342, 45CD652D4, 45A325267, 4578E51F9, 454EA518C, 452465120, 44FA250B3, 44CFE5047, 44A564FDB, 447AE4F6F, 445064F04, 4425E4E99, 43FB64E2E, 43D0A4DC3, 43A624D59, 437B64CEF, 4350A4C85, 4325E4C1B, 42FB24BB2, 42D024B49, 42A564AE0, 427A64A77, 424F64A0F, 4224649A7, 41F96493F, 41CE248D8, 41A324871, 4177E480A, 414CA47A3, 41216473C, 40F6246D6, 40CAE4670, 409F6460B, 4074245A5, 4048A4540, 401D244DB, 3FF1A4477, 3FC624413, 3F9A643AE, 3F6EE434B, 3F43242E7, 3F1764284, 3EEBA4221, 3EBFE41BE, 3E942415C, 3E68240FA, 3E3C64098, 3E1064036, 3DE463FD5, 3DB863F74, 3D8C63F13, 3D6023EB2, 3D3423E52, 3D07E3DF2, 3CDBA3D92, 3CAF63D33, 3C8323CD4, 3C56E3C75, 3C2AA3C16, 3BFE23BB8, 3BD1A3B5A, 3BA523AFC, 3B78E3A9E, 3B4C23A41, 3B1FA39E4, 3AF323987, 3AC66392B, 3A99E38CF, 3A6D23873, 3A4063817, 3A13A37BC, 39E6A3761, 39B9E3706, 398CE36AB, 396023651, 3933235F7, 39062359D, 38D923544, 38AC234EB, 387EE3492, 3851E3439, 3824A33E1, 37F7A3389, 37CA63331, 379D232DA, 376FA3282, 37426322B, 3715231D5, 36E7A317E, 36BA63128, 368CE30D2, 365F6307D, 3631E3028, 360422FD3, 35D6A2F7E, 35A922F2A, 357B62ED5, 354DA2E82, 351FE2E2E, 34F222DDB, 34C462D88, 3496A2D35, 3468E2CE2, 343AE2C90, 340D22C3E, 33DF22BED, 33B122B9B, 338322B4A, 335522AFA, 332722AA9, 32F8E2A59, 32CAE2A09, 329CA29B9, 326E6296A, 32402291B, 3211E28CC, 31E3A287E, 31B56282F, 3187227E1, 3158A2794, 312A62746, 30FBE26F9, 30CD626AC, 309EE2660, 307062614, 3041E25C8, 30136257C, 2FE4A2531, 2FB6224E6, 2F876249B, 2F58E2450, 2F2A22406, 2EFB623BC, 2ECCA2373, 2E9DA2329, 2E6EE22E0, 2E4022297, 2E112224F, 2DE262207, 2DB3621BF, 2D8462177, 2D5562130, 2D26620E9, 2CF7620A2, 2CC82205B, 2C9922015, 2C69E1FCF, 2C3AE1F8A, 2C0BA1F44, 2BDC61EFF, 2BAD21EBA, 2B7DE1E76, 2B4EA1E32, 2B1F61DEE, 2AEFE1DAA, 2AC0A1D67, 2A9121D24, 2A61E1CE1, 2A3261C9F, 2A02E1C5D, 29D361C1B, 29A3E1BD9, 297461B98, 2944E1B57, 291521B16, 28E5A1AD6, 28B5E1A96, 288661A56, 2856A1A17, 2826E19D7, 27F721999, 27C76195A, 2797A191C, 2767A18DE, 2737E18A0, 270821862, 26D821825, 26A8617E8, 2678617AC, 26486176F, 261861733, 25E8616F8, 25B8616BC, 258861681, 255861646, 25282160C, 24F8215D2, 24C7E1598, 2497E155E, 2467A1525, 2437614EC, 2407214B3, 23D6E147B, 23A6A1442, 23766140B, 2346213D3, 2315A139C, 22E561365, 22B52132E, 2284A12F8, 2254212C2, 2223E128C, 21F361256, 21C2E1221, 2192611EC, 2161E11B8, 213161184, 2100A1150, 20D02111C, 209FA10E8, 206EE10B5, 203E61083, 200DA1050, 1FDCE101E, 1FAC60FEC, 1F7BA0FBA, 1F4AE0F89, 1F1A20F58, 1EE960F27, 1EB8A0EF7, 1E87A0EC7, 1E56E0E97, 1E2620E68, 1DF520E38, 1DC460E09, 1D9360DDB, 1D62A0DAD, 1D31A0D7F, 1D00A0D51, 1CCFA0D23, 1C9EA0CF6, 1C6DA0CC9, 1C3CA0C9D, 1C0BA0C71, 1BDAA0C45, 1BA9A0C19, 1B7860BEE, 1B4760BC3, 1B1620B98, 1AE520B6E, 1AB3E0B44, 1A82E0B1A, 1A51A0AF0, 1A2060AC7, 19EF20A9E, 19BDE0A76, 198CA0A4E, 195B60A26, 192A209FE, 18F8E09D7, 18C7A09AF, 189620989, 1864E0962, 1833A093C, 180220916, 17D0E08F1, 179F608CB, 176DE08A6, 173CA0882, 170B2085D, 16D9A0839, 16A820816, 1676A07F2, 1645207CF, 1613A07AC, 15E22078A, 15B0A0767, 157F20746, 154DA0724, 151BE0703, 14EA606E2, 14B8E06C1, 1487206A1, 1455A0680, 1423E0661, 13F260641, 13C0A0622, 138EE0603, 135D605E5, 132BA05C6, 12F9E05A8, 12C82058B, 12966056D, 1264A0550, 1232E0534, 120120517, 11CF604FB, 119DA04DF, 116BE04C4, 113A204A8, 11086048E, 10D660473, 10A4A0459, 1072E043F, 1040E0425, 100F2040C, FDD203F2, FAB603DA, F79603C1, F47603A9, F15A0391, EE3A037A, EB1A0362, E7FE034C, E4DE0335, E1BE031F, DE9E0309, DB7E02F3, D85E02DE, D53E02C8, D21E02B4, CEFE029F, CBDE028B, C8BE0277, C59E0264, C27E0250, BF5E023D, BC3E022B, B91A0218, B5FA0206, B2DA01F5, AFBA01E3, AC9601D2, A97601C1, A65601B1, A33201A1, A0120191, 9CEE0181, 99CE0172, 96AA0163, 938A0155, 90660146, 8D460138, 8A22012A, 86FE011D, 83DE0110, 80BA0103, 7D9600F7, 7A7600EA, 775200DF, 742E00D3, 710E00C8, 6DEA00BD, 6AC600B2, 67A200A8, 647E009E, 615E0094, 5E3A008B, 5B160082, 57F20079, 54CE0070, 51AA0068, 4E860060, 4B620059, 483E0052, 451E004B, 41FA0044, 3ED6003E, 3BB20038, 388E0032, 356A002D, 32460027, 2F220023, 2BFE001E, 28DA001A, 25B60016, 22920013, 1F6E000F, 1C46000C, 1922000A, 15FE0008, 12DA0006, FB60004, C920002, 96E0001, 64A0001, 3260000;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 1kx18',
    'CSET read_width_a = 36',
    'CSET read_width_b = 36',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 36',
    'CSET write_width_b = 36',
    'CSET component_name = bmg_72_0827fe704eed4017',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '1ab126e74a28b5f154792a70a8b3995d',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_0827fe704eed4017',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 20000, FFCDE0000, FF9BA0001, FF6960001, FF3720002, FF04E0004, FED2A0006, FEA060008, FE6E2000A, FE3BE000C, FE096000F, FDD720013, FDA4E0016, FD72A001A, FD406001E, FD0E20023, FCDBE0027, FCA9A002D, FC7760032, FC4520038, FC12E003E, FBE0A0044, FBAE6004B, FB7C60052, FB4A20059, FB17E0060, FAE5A0068, FAB360070, FA8120079, FA4EE0082, FA1CA008B, F9EA60094, F9B86009E, F986200A8, F953E00B2, F921A00BD, F8EF600C8, F8BD600D3, F88B200DF, F858E00EA, F826E00F7, F7F4A0103, F7C260110, F7906011D, F75E2012A, F72BE0138, F6F9E0146, F6C7A0155, F695A0163, F66360172, F63160181, F5FF20191, F5CD201A1, F59AE01B1, F568E01C1, F536E01D2, F504A01E3, F4D2A01F5, F4A0A0206, F46EA0218, F43C6022B, F40A6023D, F3D860250, F3A660264, F37460277, F3426028B, F3106029F, F2DE602B4, F2AC602C8, F27A602DE, F248602F3, F21660309, F1E46031F, F1B260335, F1806034C, F14EA0362, F11CA037A, F0EAA0391, F0B8E03A9, F086E03C1, F054E03DA, F023203F2, EFF12040C, EFBF60425, EF8D6043F, EF5BA0459, EF29E0473, EEF7E048E, EEC6204A8, EE94604C4, EE62A04DF, EE30E04FB, EDFF20517, EDCD60534, ED9BA0550, ED69E056D, ED382058B, ED06605A8, ECD4A05C6, ECA2E05E5, EC7160603, EC3FA0622, EC0DE0641, EBDC60661, EBAAA0680, EB79206A1, EB47606C1, EB15E06E2, EAE460703, EAB2A0724, EA8120746, EA4FA0767, EA1E2078A, E9ECA07AC, E9BB207CF, E989A07F2, E95820816, E926A0839, E8F52085D, E8C3A0882, E892608A6, E860E08CB, E82F608F1, E7FE20916, E7CCA093C, E79B60962, E76A20989, E738A09AF, E707609D7, E6D6209FE, E6A4E0A26, E673A0A4E, E64260A76, E61120A9E, E5DFE0AC7, E5AEA0AF0, E57D60B1A, E54C60B44, E51B20B6E, E4EA20B98, E4B8E0BC3, E487E0BEE, E456A0C19, E425A0C45, E3F4A0C71, E3C3A0C9D, E392A0CC9, E361A0CF6, E330A0D23, E2FFA0D51, E2CEA0D7F, E29DA0DAD, E26CE0DDB, E23BE0E09, E20B20E38, E1DA20E68, E1A960E97, E178A0EC7, E147A0EF7, E116E0F27, E0E620F58, E0B560F89, E084A0FBA, E053E0FEC, E0236101E, DFF2A1050, DFC1E1083, DF91610B5, DF60A10E8, DF302111C, DEFFA1150, DECEE1184, DE9E611B8, DE6DE11EC, DE3D61221, DE0CE1256, DDDC6128C, DDAC212C2, DD7BA12F8, DD4B2132E, DD1AE1365, DCEAA139C, DCBA213D3, DC89E140B, DC59A1442, DC296147B, DBF9214B3, DBC8E14EC, DB98A1525, DB686155E, DB3861598, DB08215D2, DAD82160C, DAA7E1646, DA77E1681, DA47E16BC, DA17E16F8, D9E7E1733, D9B7E176F, D987E17AC, D957E17E8, D92821825, D8F821862, D8C8618A0, D898A18DE, D868A191C, D838E195A, D80921999, D7D9619D7, D7A9A1A17, D779E1A56, D74A61A96, D71AA1AD6, D6EB21B16, D6BB61B57, D68BE1B98, D65C61BD9, D62CE1C1B, D5FD61C5D, D5CDE1C9F, D59E61CE1, D56F21D24, D53FA1D67, D51061DAA, D4E0E1DEE, D4B1A1E32, D48261E76, D45321EBA, D423E1EFF, D3F4A1F44, D3C561F8A, D39661FCF, D36722015, D3382205B, D308E20A2, D2D9E20E9, D2AAE2130, D27BE2177, D24CE21BF, D21DE2207, D1EF2224F, D1C022297, D191622E0, D162A2329, D133A2373, D104E23BC, D0D622406, D0A762450, D078E249B, D04A224E6, D01BA2531, CFECE257C, CFBE625C8, CF8FE2614, CF6162660, CF32E26AC, CF04626F9, CED5E2746, CEA7A2794, CE79227E1, CE4AE282F, CE1CA287E, CDEE628CC, CDC02291B, CD91E296A, CD63A29B9, CD3562A09, CD0762A59, CCD922AA9, CCAB22AFA, CC7D22B4A, CC4F22B9B, CC2122BED, CBF322C3E, CBC562C90, CB9762CE2, CB69A2D35, CB3BE2D88, CB0E22DDB, CAE062E2E, CAB2A2E82, CA84E2ED5, CA5722F2A, CA29A2F7E, C9FC22FD3, C9CE63028, C9A0E307D, C973630D2, C945E3128, C918A317E, C8EB231D5, C8BDE322B, C890A3282, C863232DA, C835E3331, C808A3389, C7DBA33E1, C7AE63439, C78163492, C754234EB, C72723544, C6FA2359D, C6CD235F7, C6A023651, C673636AB, C64663706, C619A3761, C5ECA37BC, C5BFE3817, C59323873, C566638CF, C539E392B, C50D23987, C4E0A39E4, C4B423A41, C48763A9E, C45B23AFC, C42EA3B5A, C40223BB8, C3D5A3C16, C3A963C75, C37D23CD4, C350E3D33, C324A3D92, C2F863DF2, C2CC23E52, C2A023EB2, C273E3F13, C247E3F74, C21BE3FD5, C1EFE4036, C1C3E4098, C198240FA, C16C2415C, C140641BE, C114A4221, C0E8E4284, C0BD242E7, C0916434B, C065E43AE, C03A24413, C00EA4477, BFE3244DB, BFB7A4540, BF8C245A5, BF60E460B, BF3564670, BF0A246D6, BEDEE473C, BEB3A47A3, BE886480A, BE5D24871, BE32248D8, BE06E493F, BDDBE49A7, BDB0E4A0F, BD85E4A77, BD5AE4AE0, BD3024B49, BD0524BB2, BCDA64C1B, BCAFA4C85, BC84E4CEF, BC5A24D59, BC2FA4DC3, BC04E4E2E, BBDA64E99, BBAFE4F04, BB8564F6F, BB5AE4FDB, BB3065047, BB06250B3, BADBE5120, BAB1A518C, BA87651F9, BA5D25267, BA32E52D4, BA08E5342, B9DEA53B0, B9B4A541E, B98AA548D, B960E54FC, B936E556B, B90D255DA, B8E32564A, B8B9656B9, B88FA572A, B8662579A, B83C6580A, B812E587B, B7E9258EC, B7BFA595E, B796259CF, B76CE5A41, B74365AB3, B71A25B26, B6F0E5B98, B6C7A5C0B, B69E65C7E, B67525CF2, B64C25D66, B622E5DD9, B5F9E5E4E, B5D0E5EC2, B5A825F37, B57F25FAC, B55666021, B52D66096, B504A610C, B4DBE6182, B4B3661F8, B48AA626E, B462262E5, B439A635C, B411263D3, B3E8A644A, B3C0664C2, B397E653A, B36FA65B2, B3476662A, B31F266A3, B2F6E671C, B2CEE6795, B2A6E680E, B27EA6888, B256E6902, B22EE697C, B206E69F6, B1DF26A71, B1B766AEC, B18FA6B67, B167E6BE2, B14026C5E, B118A6CDA, B0F126D56, B0C9A6DD2, B0A226E4F, B07AA6ECB, B05366F48, B02BE6FC6, B004A7043, AFDDA70C1, AFB66713F, AF8F271BD, AF682723C, AF41272BA, AF1A27339, AEF3273B9, AECC67438, AEA5674B8, AE7EA7538, AE57E75B8, AE3167638, AE0AA76B9, ADE42773A, ADBDA77BB, AD972783C, AD70A78BE, AD4A2793F, AD23E79C1, ACFDA7A44, ACD767AC6, ACB127B49, AC8B27BCC, AC64E7C4F, AC3EE7CD3, AC18E7D56, ABF2E7DDA, ABCD27E5E, ABA767EE3, AB8167F67, AB5BE7FEC, AB3628071, AB10680F6, AAEAE817C, AAC568202, AA9FE8288, AA7A6830E, AA5528394, AA2FE841B, AA0A684A2, A9E568529, A9C0285B1, A99AE8638, A975E86C0, A950E8748, A92BE87D0, A90728859, A8E2288E2, A8BD6896A, A898A89F4, A873E8A7D, A84F68B07, A82AA8B91, A80628C1B, A7E1A8CA5, A7BD68D2F, A798E8DBA, A774A8E45, A75068ED0, A72C28F5C, A707E8FE7, A6E3E9073, A6BFA90FF, A69BA918C, A677E9218, A653E92A5, A63029332, A60C693BF, A5E8A944D, A5C4E94DA, A5A129568, A57DA95F6, A55A29684, A536A9713, A513697A2, A4EFE9831, A4CCA98C0, A4A96994F, A486299DF, A46329A6E, A43FE9AFE, A41CE9B8F, A3F9E9C1F, A3D729CB0, A3B429D41, A39169DD2, A36EA9E63, A34BE9EF5, A32969F86, A306EA018, A2E46A0AA, A2C1EA13D, A29F6A1CF, A27D2A262, A25AAA2F5, A238AA388, A2166A41C, A1F42A4AF, A1D22A543, A1B02A5D7, A18E2A66B, A16C6A700, A14A6A795, A128AA829, A106EA8BF, A0E52A954, A0C3AA9E9, A0A22AA7F, A080AAB15, A05F2ABAB, A03DAAC41, A01C6ACD8, 9FFB2AD6F, 9FD9EAE05, 9FB8EAE9D, 9F97AAF34, 9F76AAFCB, 9F55AB063, 9F34EB0FB, 9F13EB193, 9EF32B22C, 9ED26B2C4, 9EB1AB35D, 9E912B3F6, 9E706B48F, 9E4FEB528, 9E2FAB5C2, 9E0F2B65C, 9DEEEB6F6, 9DCEAB790, 9DAE6B82A, 9D8E2B8C5, 9D6E2B95F, 9D4E2B9FA, 9D2E2BA95, 9D0E2BB31, 9CEE6BBCC, 9CCE6BC68, 9CAEABD04, 9C8F2BDA0, 9C6F6BE3C, 9C4FEBED9, 9C306BF76, 9C10EC012, 9BF1AC0AF, 9BD22C14D, 9BB2EC1EA, 9B93EC288, 9B74AC326, 9B55AC3C4, 9B36AC462, 9B17AC500, 9AF8AC59F, 9AD9EC63E, 9ABB2C6DD, 9A9C6C77C, 9A7DAC81B, 9A5F2C8BB, 9A40AC95B, 9A222C9FA, 9A03ACA9B, 99E56CB3B, 99C72CBDB, 99A8ECC7C, 998AACD1D, 996CACDBE, 994EACE5F, 9930ACF01, 9912ACFA2, 98F4ED044, 98D72D0E6, 98B96D188, 989BAD22A, 987E2D2CD, 9860AD36F, 98432D412, 9825AD4B5, 98086D559, 97EB2D5FC, 97CDED6A0, 97B0AD743, 9793AD7E7, 97766D88B, 9759AD930, 973CAD9D4, 971FADA79, 9702EDB1E, 96E62DBC3, 96C9ADC68, 96ACEDD0D, 96906DDB3, 9673EDE58, 9657ADEFE, 963B2DFA4, 961EEE04B, 9602AE0F1, 95E6AE198, 95CAAE23E, 95AE6E2E5, 9592AE38C, 9576AE434, 955AEE4DB, 953F2E583, 95236E62A, 9507AE6D2, 94EC2E77A, 94D0AE823, 94B52E8CB, 9499EE974, 947E6EA1D, 94632EAC6, 94482EB6F, 942CEEC18, 9411EECC1, 93F6EED6B, 93DBEEE15, 93C12EEBF, 93A66EF69, 938BAF013, 9370EF0BE, 93566F168, 933BEF213, 93216F2BE, 9306EF369, 92ECAF414, 92D26F4C0, 92B82F56B, 929DEF617, 9283EF6C3, 9269EF76F, 924FEF81B, 92362F8C8, 921C6F974, 9202AFA21, 91E8EFACE, 91CF2FB7B, 91B5AFC28, 919C2FCD5, 9182EFD83, 91696FE30, 91502FEDE, 9136EFF8C, 911DF003A, 9104F00E8, 90EBB0197, 90D2F0245, 90B9F02F4, 90A1303A3, 908870452, 906FB0501, 9057305B0, 903EB0660, 90263070F, 900DB07BF, 8FF57086F, 8FDD3091F, 8FC4F09CF, 8FACB0A80, 8F94B0B30, 8F7CB0BE1, 8F64B0C92, 8F4CF0D43, 8F3530DF4, 8F1D70EA5, 8F05B0F56, 8EEE31008, 8ED6B10BA, 8EBF3116C, 8EA7B121D, 8E90712D0, 8E7931382, 8E61F1434, 8E4AF14E7, 8E33F1599, 8E1CF164C, 8E05F16FF, 8DEF317B2, 8DD871866, 8DC1B1919, 8DAAF19CD, 8D9471A80, 8D7DF1B34, 8D6771BE8, 8D5131C9C, 8D3AF1D50, 8D24B1E05, 8D0E71EB9, 8CF871F6E, 8CE272022, 8CCC720D7, 8CB6B218C, 8CA0B2242, 8C8AF22F7, 8C75723AC, 8C5FB2462, 8C4A32517, 8C34B25CD, 8C1F72683, 8C0A32739, 8BF4F27F0, 8BDFB28A6, 8BCAB295C, 8BB572A13, 8BA0B2ACA, 8B8BB2B81, 8B76F2C38, 8B6232CEF, 8B4D72DA6, 8B38B2E5D, 8B2432F15, 8B0FB2FCC, 8AFB73084, 8AE6F313C, 8AD2B31F4, 8ABEB32AC, 8AAA73364, 8A967341D, 8A82734D5, 8A6E7358E, 8A5AB3647, 8A46F3700, 8A33337B9, 8A1FB3872, 8A0BF392B, 89F8739E4, 89E533A9E, 89D1B3B57, 89BE73C11, 89AB33CCB, 899833D85, 898533E3F, 897233EF9, 895F33FB3, 894C7406E, 8939B4128, 8926F41E3, 89143429D, 8901B4358, 88EF34413, 88DCF44CE, 88CA7458A, 88B834645, 88A5F4700, 8893F47BC, 8881F4877, 886FF4933, 885DF49EF, 884C34AAB, 883A74B67, 8828B4C23, 8816F4CE0, 880574D9C, 87F3F4E59, 87E2B4F15, 87D134FD2, 87BFF508F, 87AEB514C, 879DB5209, 878CB52C6, 877BB5383, 876AB5441, 8759F54FE, 8749355BC, 873875679, 8727F5737, 8717757F5, 8706F58B3, 86F675971, 86E635A2F, 86D5F5AED, 86C5B5BAC, 86B5B5C6A, 86A5B5D29, 8695B5DE7, 8685F5EA6, 8675F5F65, 866676024, 8656B60E3, 8647361A2, 8637B6262, 862836321, 8618B63E0, 8609764A0, 85FA3655F, 85EB3661F, 85DBF66DF, 85CCF679F, 85BE3685F, 85AF3691F, 85A0769DF, 8591B6A9F, 858336B60, 8574B6C20, 856636CE1, 8557B6DA1, 854976E62, 853B36F23, 852CF6FE4, 851EF70A5, 8510B7166, 8502F7227, 84F4F72E8, 84E7373AA, 84D97746B, 84CBB752C, 84BE375EE, 84B0B76B0, 84A337771, 8495B7833, 8488778F5, 847B379B7, 846E37A79, 846137B3B, 845437BFE, 844737CC0, 843A37D82, 842D77E45, 8420F7F07, 841437FCA, 8407B808D, 83FB3814F, 83EEB8212, 83E2782D5, 83D638398, 83C9F845B, 83BDF851E, 83B1F85E2, 83A5F86A5, 839A38768, 838E3882C, 8382788EF, 8376F89B3, 836B78A76, 835FF8B3A, 835478BFE, 8348F8CC2, 833DB8D86, 833278E4A, 832778F0E, 831C78FD2, 831179096, 83067915A, 82FBB921F, 82F0F92E3, 82E6393A8, 82DBB946C, 82D139531, 82C6B95F5, 82BC396BA, 82B1F977F, 82A7B9844, 829DB9909, 8293B99CE, 8289B9A93, 827FB9B58, 8275F9C1D, 826BF9CE2, 826279DA8, 8258B9E6D, 824F39F32, 8245B9FF8, 823C7A0BD, 8232FA183, 8229BA249, 8220BA30E, 82177A3D4, 820E7A49A, 8205BA560, 81FCBA626, 81F3FA6EC, 81EB3A7B2, 81E2BA878, 81D9FA93E, 81D1BAA04, 81C93AACA, 81C0FAB91, 81B8BAC57, 81B07AD1D, 81A87ADE4, 81A03AEAA, 81987AF71, 81907B037, 8188BB0FE, 8180FB1C5, 81797B28B, 8171BB352, 816A3B419, 8162FB4E0, 815B7B5A7, 81543B66E, 814D3B735, 8145FB7FC, 813EFB8C3, 8137FB98A, 81313BA51, 812A3BB18, 8123BBBDF, 811CFBCA7, 81167BD6E, 810FFBE35, 81097BEFD, 81033BFC4, 80FCBC08C, 80F6BC153, 80F07C21B, 80EA7C2E3, 80E47C3AA, 80DEBC472, 80D8BC53A, 80D33C601, 80CD7C6C9, 80C7FC791, 80C27C859, 80BCFC921, 80B7BC9E9, 80B23CAB1, 80AD3CB79, 80A7FCC41, 80A2FCD09, 809DFCDD1, 80993CE99, 80943CF61, 808F7D029, 808AFD0F1, 80863D1BA, 8081BD282, 807D7D34A, 8078FD412, 8074BD4DB, 80707D5A3, 806C7D66B, 80687D734, 80647D7FC, 80607D8C5, 805CBD98D, 8058FDA56, 80557DB1E, 8051BDBE7, 804E3DCAF, 804ABDD78, 80477DE41, 80443DF09, 8040FDFD2, 803DFE09B, 803ABE163, 8037FE22C, 8034FE2F5, 80323E3BD, 802F7E486, 802CBE54F, 802A3E618, 8027BE6E1, 80253E7A9, 8022FE872, 8020BE93B, 801E7EA04, 801C3EACD, 801A3EB96, 80183EC5F, 80167ED28, 8014BEDF1, 8012FEEB9, 80113EF82, 800FBF04B, 800E3F114, 800CBF1DD, 800B7F2A6, 8009FF36F, 8008FF438, 8007BF501, 8006BF5CA, 8005BF693, 8004FF75C, 8003FF825, 80033F8EF, 8002BF9B8, 80023FA81, 8001BFB4A, 80013FC13, 8000BFCDC, 80007FDA5, 80007FE6E, 80003FF37;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 1kx18',
    'CSET read_width_a = 36',
    'CSET read_width_b = 36',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 36',
    'CSET write_width_b = 36',
    'CSET component_name = bmg_72_f38341fefbc151d5',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c89247be78b8291ebde986b4f25a65a2',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_f38341fefbc151d5',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '1396d905ad4566b1d5f6541a1b40633c',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b1cf88a93536d997bf08aee0d2123927',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'af0f0dc63ca8444d55d809c662a2fca7',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '49cf9080695f7e8fff404c4ef48a9c6c',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '34813ecb65459c95191e2a7093e983e1',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((20 - 1) downto 0);
  signal in1_1_27: unsigned((20 - 1) downto 0);
  signal in2_1_31: unsigned((20 - 1) downto 0);
  signal in3_1_35: unsigned((20 - 1) downto 0);
  signal y_2_1_concat: unsigned((80 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((20 - 1) downto 0);
    in1 : in std_logic_vector((20 - 1) downto 0);
    in2 : in std_logic_vector((20 - 1) downto 0);
    in3 : in std_logic_vector((20 - 1) downto 0);
    y : out std_logic_vector((80 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_f86ebb6084',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '3af4a57b29517e0e292552d68e3dcced',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f1c3754e760a2fc0e7e2e3d41d0dce2a',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '5e3020c6c64df62d17234acfe6a0d615',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '1b11ea56016b5b51291fe4c5f89927fc',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '892b220b7e244dc2593dd4fe5613b196',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '1c40b9c445f09540ea0e2380015d6f27',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '3a091333fc713d8e128b6bb5f391854b',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'feefc475165888843a03a1a4c964ea6d',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '5c301df76ec67fd006fb4a11dc3fc7b8',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((21 - 1) downto 0);
  signal in1_1_27: unsigned((21 - 1) downto 0);
  signal in2_1_31: unsigned((21 - 1) downto 0);
  signal in3_1_35: unsigned((21 - 1) downto 0);
  signal in4_1_39: unsigned((21 - 1) downto 0);
  signal in5_1_43: unsigned((21 - 1) downto 0);
  signal in6_1_47: unsigned((21 - 1) downto 0);
  signal in7_1_51: unsigned((21 - 1) downto 0);
  signal y_2_1_concat: unsigned((168 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  in5_1_43 <= std_logic_vector_to_unsigned(in5);
  in6_1_47 <= std_logic_vector_to_unsigned(in6);
  in7_1_51 <= std_logic_vector_to_unsigned(in7);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39) & unsigned_to_std_logic_vector(in5_1_43) & unsigned_to_std_logic_vector(in6_1_47) & unsigned_to_std_logic_vector(in7_1_51));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((21 - 1) downto 0);
    in1 : in std_logic_vector((21 - 1) downto 0);
    in2 : in std_logic_vector((21 - 1) downto 0);
    in3 : in std_logic_vector((21 - 1) downto 0);
    in4 : in std_logic_vector((21 - 1) downto 0);
    in5 : in std_logic_vector((21 - 1) downto 0);
    in6 : in std_logic_vector((21 - 1) downto 0);
    in7 : in std_logic_vector((21 - 1) downto 0);
    y : out std_logic_vector((168 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_7cb1306ccc',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '246fee6e3f5b78094aff7450fdbdef43',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '3a5e6feee9ed83a957acf014f708a52f',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '2cc44ee9bbe4ca697c478c31bf8bcd64',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '158210cc1ac4e77eb9f3b54b8b6694b7',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'cb4c61c69612225cbcd0a439c0c62e96',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '3794567372b9dd8a2632ff58f20eeae0',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '72b75eb1cad3f2a7f8e2fddd69a51cfa',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd924f74090deda5ed5d2f5187969f98a',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c8420dd6ed097fef4b3631decaf7dcd7',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b88a520156a602270fcb4ab6fcd7bf46',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'caf54c5fba9a606e6f2ea5320e55ef6d',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((2 - 1) downto 0);
  signal in1_1_27: unsigned((2 - 1) downto 0);
  signal in2_1_31: unsigned((2 - 1) downto 0);
  signal in3_1_35: unsigned((2 - 1) downto 0);
  signal y_2_1_concat: unsigned((8 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((2 - 1) downto 0);
    in1 : in std_logic_vector((2 - 1) downto 0);
    in2 : in std_logic_vector((2 - 1) downto 0);
    in3 : in std_logic_vector((2 - 1) downto 0);
    y : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_201b1491e8',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '019efc7a9b6ecdd59293163571ff2ca0',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c03e869494be6a1f323d1f72356f7a8a',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '9d6f316e9984ca4e6326c8a753e0ae7e',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '7139d37beaef4aecfb4098083beecc44',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'af5d180e3950a3861ca87992ee2f65e7',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'dc36aed4720297a2fbaa7b070179223d',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f38de8648fca61fb8bccad28ddc8d430',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '2c9593b6297e47109e2a42949d0fdade',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((73 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (3 - 1)) of std_logic_vector((73 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "0000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((73 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((73 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(2);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 2 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((73 - 1) downto 0);
    q : out std_logic_vector((73 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_4e7d828d94',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '99b929b2e15297334ecebb351ef648f9',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((72 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal in2_1_31: unsigned((72 - 1) downto 0);
  signal y_2_1_concat: unsigned((145 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((72 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    in2 : in std_logic_vector((72 - 1) downto 0);
    y : out std_logic_vector((145 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_b15c89b6cc',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '99baa25d84e7ffc39d52fc031a6af48f',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((73 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((73 - 1) downto 0);
    output_port : out std_logic_vector((73 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_3a91fc640e',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '8456bc20e2b81f3755d4e83a4a3c6c7c',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd092e5c8710b48240db14ee2da7c7f9b',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '1f77786d6b4fadbd40d4a52d313aa14e',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '5849e7994b90b041fdfb1a2adbd83823',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b0615b3712ef6b3fc67308a88253eacb',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((74 - 1) downto 0);
  signal in1_1_27: unsigned((74 - 1) downto 0);
  signal y_2_1_concat: unsigned((148 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((74 - 1) downto 0);
    in1 : in std_logic_vector((74 - 1) downto 0);
    y : out std_logic_vector((148 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_1cac477702',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '5486272f5fd30824224477c2310d5c92',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xldelay.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '7b25f50737d2c80b94e80dd35719ae3f',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((73 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (6 - 1)) of std_logic_vector((73 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "0000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((73 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((73 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(5);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 5 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((73 - 1) downto 0);
    q : out std_logic_vector((73 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_ecf456c907',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '2d472bee15761126ba5166eba926247d',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((3 - 1) downto 0);
  signal in1_1_27: unsigned((10 - 1) downto 0);
  signal y_2_1_concat: unsigned((13 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((3 - 1) downto 0);
    in1 : in std_logic_vector((10 - 1) downto 0);
    y : out std_logic_vector((13 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_f2e37e721e',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'fdce9711443a468c59a4f607215cb818',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '0f0d852feee85604b6d581b6ecc35cce',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '402f440c9d4b2163815683c0e71342b3',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e573c4818c74ba9c76e057644ff9122c',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((2 - 1) downto 0);
  signal in1_1_27: unsigned((11 - 1) downto 0);
  signal y_2_1_concat: unsigned((13 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((2 - 1) downto 0);
    in1 : in std_logic_vector((11 - 1) downto 0);
    y : out std_logic_vector((13 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_8503582fb5',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'fdb49e997b66651f9c2ed20bdfec0b5a',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((145 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (6 - 1)) of std_logic_vector((145 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((145 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((145 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(5);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 5 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((145 - 1) downto 0);
    q : out std_logic_vector((145 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_1fbe6c9ff9',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 7FFFC0000, 7FFFFFF9B, 7FFFFFF37, 7FFFFFED2, 7FFFFFE6E, 7FFFFFE09, 7FFFFFDA5, 7FFFBFD40, 7FFFBFCDC, 7FFF7FC77, 7FFF3FC13, 7FFEFFBAE, 7FFEBFB4A, 7FFE7FAE5, 7FFE3FA81, 7FFDFFA1C, 7FFDBF9B8, 7FFD7F953, 7FFD3F8EF, 7FFCBF88A, 7FFC7F825, 7FFBFF7C1, 7FFB7F75C, 7FFB3F6F8, 7FFABF693, 7FFA3F62F, 7FF9BF5CA, 7FF93F566, 7FF8BF501, 7FF83F49D, 7FF77F438, 7FF6FF3D4, 7FF67F36F, 7FF5BF30B, 7FF4FF2A6, 7FF47F242, 7FF3BF1DD, 7FF2FF179, 7FF23F114, 7FF17F0B0, 7FF0BF04B, 7FEFFEFE7, 7FEF3EF82, 7FEE7EF1E, 7FED7EEB9, 7FECBEE55, 7FEBBEDF1, 7FEAFED8C, 7FE9FED28, 7FE8FECC3, 7FE83EC5F, 7FE73EBFA, 7FE63EB96, 7FE53EB31, 7FE43EACD, 7FE2FEA68, 7FE1FEA04, 7FE0FE9A0, 7FDFBE93B, 7FDEBE8D7, 7FDD7E872, 7FDC7E80E, 7FDB3E7A9, 7FD9FE745, 7FD8BE6E1, 7FD77E67C, 7FD63E618, 7FD4FE5B3, 7FD3BE54F, 7FD23E4EB, 7FD0FE486, 7FCFBE422, 7FCE3E3BD, 7FCCFE359, 7FCB7E2F5, 7FC9FE290, 7FC87E22C, 7FC6FE1C8, 7FC5BE163, 7FC3FE0FF, 7FC27E09B, 7FC0FE036, 7FBF7DFD2, 7FBDBDF6E, 7FBC3DF09, 7FBABDEA5, 7FB8FDE41, 7FB73DDDC, 7FB5BDD78, 7FB3FDD14, 7FB23DCAF, 7FB07DC4B, 7FAEBDBE7, 7FACFDB83, 7FAAFDB1E, 7FA93DABA, 7FA77DA56, 7FA57D9F1, 7FA3BD98D, 7FA1BD929, 7F9FFD8C5, 7F9DFD861, 7F9BFD7FC, 7F99FD798, 7F97FD734, 7F95FD6D0, 7F93FD66B, 7F91FD607, 7F8FFD5A3, 7F8DBD53F, 7F8BBD4DB, 7F897D477, 7F877D412, 7F853D3AE, 7F82FD34A, 7F80BD2E6, 7F7EBD282, 7F7C7D21E, 7F7A3D1BA, 7F77BD155, 7F757D0F1, 7F733D08D, 7F70FD029, 7F6E7CFC5, 7F6C3CF61, 7F69BCEFD, 7F673CE99, 7F64FCE35, 7F627CDD1, 7F5FFCD6D, 7F5D7CD09, 7F5AFCCA5, 7F587CC41, 7F55FCBDD, 7F533CB79, 7F50BCB15, 7F4E3CAB1, 7F4B7CA4D, 7F48BC9E9, 7F463C985, 7F437C921, 7F40BC8BD, 7F3DFC859, 7F3B3C7F5, 7F387C791, 7F35BC72D, 7F32FC6C9, 7F303C665, 7F2D3C601, 7F2A7C59D, 7F27BC53A, 7F24BC4D6, 7F21BC472, 7F1EFC40E, 7F1BFC3AA, 7F18FC346, 7F15FC2E3, 7F12FC27F, 7F0FFC21B, 7F0CFC1B7, 7F09BC153, 7F06BC0F0, 7F03BC08C, 7F007C028, 7EFD3BFC4, 7EFA3BF61, 7EF6FBEFD, 7EF3BBE99, 7EF07BE35, 7EED3BDD2, 7EE9FBD6E, 7EE6BBD0A, 7EE37BCA7, 7EE03BC43, 7EDCBBBDF, 7ED97BB7C, 7ED63BB18, 7ED2BBAB5, 7ECF3BA51, 7ECBFB9ED, 7EC87B98A, 7EC4FB926, 7EC17B8C3, 7EBDFB85F, 7EBA7B7FC, 7EB6FB798, 7EB33B735, 7EAFBB6D1, 7EAC3B66E, 7EA87B60A, 7EA4FB5A7, 7EA13B543, 7E9D7B4E0, 7E99FB47C, 7E963B419, 7E927B3B5, 7E8EBB352, 7E8AFB2EF, 7E86FB28B, 7E833B228, 7E7F7B1C5, 7E7B7B161, 7E77BB0FE, 7E73BB09B, 7E6FFB037, 7E6BFAFD4, 7E67FAF71, 7E643AF0D, 7E603AEAA, 7E5C3AE47, 7E57FADE4, 7E53FAD80, 7E4FFAD1D, 7E4BFACBA, 7E47BAC57, 7E43BABF4, 7E3F7AB91, 7E3B7AB2D, 7E373AACA, 7E32FAA67, 7E2EBAA04, 7E2ABA9A1, 7E267A93E, 7E21FA8DB, 7E1DBA878, 7E197A815, 7E153A7B2, 7E10BA74F, 7E0C7A6EC, 7E07FA689, 7E03BA626, 7DFF3A5C3, 7DFABA560, 7DF67A4FD, 7DF1FA49A, 7DED7A437, 7DE8FA3D4, 7DE43A371, 7DDFBA30E, 7DDB3A2AB, 7DD6BA249, 7DD1FA1E6, 7DCD7A183, 7DC8BA120, 7DC3FA0BD, 7DBF7A05B, 7DBAB9FF8, 7DB5F9F95, 7DB139F32, 7DAC79ED0, 7DA7B9E6D, 7DA2F9E0A, 7D9DF9DA8, 7D9939D45, 7D9479CE2, 7D8F79C80, 7D8A79C1D, 7D85B9BBB, 7D80B9B58, 7D7BB9AF5, 7D76B9A93, 7D71B9A30, 7D6CB99CE, 7D67B996B, 7D62B9909, 7D5DB98A6, 7D58B9844, 7D53797E1, 7D4E7977F, 7D493971D, 7D44396BA, 7D3EF9658, 7D39B95F5, 7D3479593, 7D2F39531, 7D29F94CF, 7D24B946C, 7D1F7940A, 7D1A393A8, 7D14B9345, 7D0F792E3, 7D0A39281, 7D04B921F, 7CFF391BD, 7CF9F915A, 7CF4790F8, 7CEEF9096, 7CE979034, 7CE3F8FD2, 7CDE78F70, 7CD8F8F0E, 7CD378EAC, 7CCDF8E4A, 7CC838DE8, 7CC2B8D86, 7CBCF8D24, 7CB778CC2, 7CB1B8C60, 7CABF8BFE, 7CA638B9C, 7CA078B3A, 7C9AF8AD8, 7C94F8A76, 7C8F38A15, 7C89789B3, 7C83B8951, 7C7DF88EF, 7C77F888D, 7C723882C, 7C6C387CA, 7C6638768, 7C6078707, 7C5A786A5, 7C5478643, 7C4E785E2, 7C4878580, 7C427851E, 7C3C784BD, 7C367845B, 7C30383FA, 7C2A38398, 7C23F8337, 7C1DF82D5, 7C17B8274, 7C11B8212, 7C0B781B1, 7C053814F, 7BFEF80EE, 7BF8B808D, 7BF27802B, 7BEC37FCA, 7BE5F7F69, 7BDF77F07, 7BD937EA6, 7BD2F7E45, 7BCC77DE3, 7BC637D82, 7BBFB7D21, 7BB937CC0, 7BB2B7C5F, 7BAC37BFE, 7BA5B7B9C, 7B9F37B3B, 7B98B7ADA, 7B9237A79, 7B8BB7A18, 7B85379B7, 7B7E77956, 7B77F78F5, 7B7137894, 7B6AB7833, 7B63F77D2, 7B5D37771, 7B5677711, 7B4FB76B0, 7B48F764F, 7B42375EE, 7B3B7758D, 7B34B752C, 7B2DF74CC, 7B26F746B, 7B203740A, 7B19373AA, 7B1277349, 7B0B772E8, 7B0477288, 7AFD77227, 7AF6B71C6, 7AEFB7166, 7AE8B7105, 7AE1770A5, 7ADA77044, 7AD376FE4, 7ACC76F83, 7AC536F23, 7ABE36EC3, 7AB6F6E62, 7AAFF6E02, 7AA8B6DA1, 7AA176D41, 7A9A36CE1, 7A92F6C81, 7A8BB6C20, 7A8476BC0, 7A7D36B60, 7A75F6B00, 7A6EB6A9F, 7A6736A3F, 7A5FF69DF, 7A587697F, 7A513691F, 7A49B68BF, 7A423685F, 7A3AB67FF, 7A337679F, 7A2BF673F, 7A24766DF, 7A1CB667F, 7A153661F, 7A0DB65BF, 7A063655F, 79FE76500, 79F6F64A0, 79EF36440, 79E7B63E0, 79DFF6381, 79D836321, 79D0762C1, 79C8B6262, 79C136202, 79B9361A2, 79B176143, 79A9B60E3, 79A1F6084, 7999F6024, 799235FC5, 798A75F65, 798275F06, 797A75EA6, 7972B5E47, 796AB5DE7, 7962B5D88, 795AB5D29, 7952B5CCA, 794AB5C6A, 7942B5C0B, 793AB5BAC, 793275B4D, 792A75AED, 792235A8E, 791A35A2F, 7911F59D0, 7909F5971, 7901B5912, 78F9758B3, 78F135854, 78E8F57F5, 78E0B5796, 78D875737, 78D0356D8, 78C7F5679, 78BF7561A, 78B7355BC, 78AEB555D, 78A6754FE, 789DF549F, 7895B5441, 788D353E2, 7884B5383, 787C35325, 7873B52C6, 786B35267, 7862B5209, 785A351AA, 7851B514C, 7848F50ED, 78407508F, 7837B5030, 782F34FD2, 782674F74, 781DB4F15, 781534EB7, 780C74E59, 7803B4DFA, 77FAF4D9C, 77F234D3E, 77E974CE0, 77E074C81, 77D7B4C23, 77CEF4BC5, 77C5F4B67, 77BD34B09, 77B434AAB, 77AB74A4D, 77A2749EF, 779974991, 779074933, 7787748D5, 777E74877, 77757481A, 776C747BC, 77637475E, 775A74700, 7751346A3, 774834645, 773EF45E7, 7735F458A, 772CB452C, 7723744CE, 771A74471, 771134413, 7707F43B6, 76FEB4358, 76F5742FB, 76EC3429D, 76E2B4240, 76D9741E3, 76D034185, 76C6B4128, 76BD740CB, 76B3F406E, 76AAB4010, 76A133FB3, 7697B3F56, 768E33EF9, 7684B3E9C, 767B33E3F, 7671B3DE2, 766833D85, 765EB3D28, 765533CCB, 764B73C6E, 7641F3C11, 763833BB4, 762EB3B57, 7624F3AFA, 761B33A9E, 761173A41, 7607F39E4, 75FE33987, 75F47392B, 75EAB38CE, 75E0B3872, 75D6F3815, 75CD337B9, 75C37375C, 75B973700, 75AFB36A3, 75A5B3647, 759BB35EA, 7591F358E, 7587F3532, 757DF34D5, 7573F3479, 7569F341D, 755FF33C1, 7555F3364, 754BF3308, 7541B32AC, 7537B3250, 752DB31F4, 752373198, 75197313C, 750F330E0, 7504F3084, 74FAF3028, 74F0B2FCC, 74E672F71, 74DC32F15, 74D1F2EB9, 74C7B2E5D, 74BD32E02, 74B2F2DA6, 74A8B2D4A, 749E32CEF, 7493F2C93, 748972C38, 747F32BDC, 7474B2B81, 746A32B25, 745FB2ACA, 745572A6E, 744AF2A13, 7440729B8, 7435B295C, 742B32901, 7420B28A6, 74163284B, 740B727F0, 7400F2794, 73F632739, 73EBB26DE, 73E0F2683, 73D632628, 73CBB25CD, 73C0F2572, 73B632517, 73AB724BD, 73A0B2462, 7395B2407, 738AF23AC, 738032352, 7375722F7, 736A7229C, 735FB2242, 7354B21E7, 7349B218C, 733EF2132, 7333F20D7, 7328F207D, 731DF2022, 7312F1FC8, 7307F1F6E, 72FCF1F13, 72F1F1EB9, 72E6B1E5F, 72DBB1E05, 72D0B1DAA, 72C571D50, 72BA71CF6, 72AF31C9C, 72A3F1C42, 7298F1BE8, 728DB1B8E, 728271B34, 727731ADA, 726BF1A80, 7260B1A26, 7255719CD, 7249F1973, 723EB1919, 7233718BF, 7227F1866, 721CB180C, 7211317B2, 7205F1759, 71FA716FF, 71EEF16A6, 71E37164C, 71D7F15F3, 71CC71599, 71C0F1540, 71B5714E7, 71A9F148E, 719E71434, 7192B13DB, 718731382, 717B71329, 716FF12D0, 716431277, 7158B121D, 714CF11C4, 71413116C, 713571113, 7129B10BA, 711DF1061, 711231008, 710670FAF, 70FAB0F56, 70EEF0EFE, 70E2F0EA5, 70D730E4C, 70CB30DF4, 70BF70D9B, 70B370D43, 70A770CEA, 709BB0C92, 708FB0C39, 7083B0BE1, 7077B0B89, 706BB0B30, 705FB0AD8, 7053B0A80, 704770A28, 703B709CF, 702F70977, 70233091F, 7017308C7, 700AF086F, 6FFEF0817, 6FF2B07BF, 6FE670767, 6FDA3070F, 6FCDF06B8, 6FC1B0660, 6FB570608, 6FA9305B0, 6F9CF0559, 6F90B0501, 6F84304A9, 6F77F0452, 6F6BB03FA, 6F5F303A3, 6F52B034B, 6F46702F4, 6F39F029D, 6F2D70245, 6F20F01EE, 6F14B0197, 6F083013F, 6EFB700E8, 6EEEF0091, 6EE27003A, 6ED5EFFE3, 6EC96FF8C, 6EBCAFF35, 6EB02FEDE, 6EA36FE87, 6E96EFE30, 6E8A2FDD9, 6E7D6FD83, 6E70AFD2C, 6E642FCD5, 6E576FC7E, 6E4AAFC28, 6E3DEFBD1, 6E312FB7B, 6E242FB24, 6E176FACE, 6E0AAFA77, 6DFDAFA21, 6DF0EF9CA, 6DE3EF974, 6DD72F91E, 6DCA2F8C8, 6DBD2F871, 6DB06F81B, 6DA36F7C5, 6D966F76F, 6D896F719, 6D7C6F6C3, 6D6F6F66D, 6D626F617, 6D552F5C1, 6D482F56B, 6D3B2F515, 6D2DEF4C0, 6D20EF46A, 6D13AF414, 6D06AF3BF, 6CF96F369, 6CEC2F313, 6CDEEF2BE, 6CD1AF268, 6CC46F213, 6CB72F1BE, 6CA9EF168, 6C9CAF113, 6C8F6F0BE, 6C822F068, 6C74AF013, 6C676EFBE, 6C59EEF69, 6C4CAEF14, 6C3F2EEBF, 6C31AEE6A, 6C246EE15, 6C16EEDC0, 6C096ED6B, 6BFBEED16, 6BEE6ECC1, 6BE0EEC6D, 6BD36EC18, 6BC5EEBC3, 6BB82EB6F, 6BAAAEB1A, 6B9D2EAC6, 6B8F6EA71, 6B81EEA1D, 6B742E9C8, 6B666E974, 6B58EE91F, 6B4B2E8CB, 6B3D6E877, 6B2FAE823, 6B21EE7CF, 6B142E77A, 6B066E726, 6AF8AE6D2, 6AEAAE67E, 6ADCEE62A, 6ACF2E5D6, 6AC12E583, 6AB36E52F, 6AA56E4DB, 6A97AE487, 6A89AE434, 6A7BAE3E0, 6A6DAE38C, 6A5FEE339, 6A51EE2E5, 6A43EE292, 6A35AE23E, 6A27AE1EB, 6A19AE198, 6A0BAE144, 69FDAE0F1, 69EF6E09E, 69E16E04B, 69D32DFF7, 69C52DFA4, 69B6EDF51, 69A8ADEFE, 699A6DEAB, 698C6DE58, 697E2DE06, 696FEDDB3, 6961ADD60, 69536DD0D, 6944EDCBA, 6936ADC68, 69286DC15, 691A2DBC3, 690BADB70, 68FD6DB1E, 68EEEDACB, 68E0ADA79, 68D22DA26, 68C3AD9D4, 68B52D982, 68A6AD930, 68986D8DD, 6889ED88B, 687B6D839, 686CAD7E7, 685E2D795, 684FAD743, 68412D6F1, 68326D6A0, 6823ED64E, 68152D5FC, 6806AD5AA, 67F7ED559, 67E96D507, 67DAAD4B5, 67CBED464, 67BD2D412, 67AE6D3C1, 679FAD36F, 6790ED31E, 67822D2CD, 67736D27B, 6764AD22A, 6755AD1D9, 6746ED188, 67382D137, 67292D0E6, 671A6D095, 670B6D044, 66FC6CFF3, 66EDACFA2, 66DEACF51, 66CFACF01, 66C0ACEB0, 66B1ACE5F, 66A2ACE0E, 6693ACDBE, 6684ACD6D, 6675ACD1D, 66666CCCC, 66576CC7C, 66486CC2C, 66392CBDB, 662A2CB8B, 661AECB3B, 660BACAEB, 65FCACA9B, 65ED6CA4A, 65DE2C9FA, 65CEEC9AA, 65BFAC95B, 65B06C90B, 65A12C8BB, 6591EC86B, 6582AC81B, 65732C7CC, 6563EC77C, 6554AC72C, 65452C6DD, 6535EC68D, 65266C63E, 6516EC5EE, 6507AC59F, 64F82C550, 64E8AC500, 64D92C4B1, 64C9AC462, 64BA2C413, 64AAAC3C4, 649B2C375, 648BAC326, 647C2C2D7, 646C6C288, 645CEC239, 644D6C1EA, 643DAC19B, 642E2C14D, 641E6C0FE, 640EAC0AF, 63FF2C061, 63EF6C012, 63DFABFC4, 63CFEBF76, 63C02BF27, 63B06BED9, 63A0ABE8B, 6390EBE3C, 63812BDEE, 63712BDA0, 63616BD52, 6351ABD04, 6341ABCB6, 6331EBC68, 6321EBC1A, 6311EBBCC, 63022BB7F, 62F22BB31, 62E22BAE3, 62D22BA95, 62C22BA48, 62B22B9FA, 62A22B9AD, 62922B95F, 62822B912, 62722B8C5, 62622B877, 6251EB82A, 6241EB7DD, 6231AB790, 6221AB743, 62116B6F6, 62016B6A9, 61F12B65C, 61E0EB60F, 61D0AB5C2, 61C0AB575, 61B06B528, 61A02B4DC, 618FEB48F, 617F6B442, 616F2B3F6, 615EEB3A9, 614EAB35D, 613E2B311, 612DEB2C4, 611DAB278, 610D2B22C, 60FCEB1DF, 60EC6B193, 60DBEB147, 60CB6B0FB, 60BB2B0AF, 60AAAB063, 609A2B017, 6089AAFCB, 60792AF80, 6068AAF34, 60582AEE8, 60476AE9D, 6036EAE51, 60266AE05, 6015AADBA, 60052AD6F, 5FF46AD23, 5FE3EACD8, 5FD32AC8D, 5FC2AAC41, 5FB1EABF6, 5FA12ABAB, 5F906AB60, 5F7FAAB15, 5F6EEAACA, 5F5E2AA7F, 5F4D6AA34, 5F3CAA9E9, 5F2BEA99F, 5F1B2A954, 5F0A2A909, 5EF96A8BF, 5EE86A874, 5ED7AA829, 5EC6AA7DF, 5EB5EA795, 5EA4EA74A, 5E93EA700, 5E832A6B6, 5E722A66B, 5E612A621, 5E502A5D7, 5E3F2A58D, 5E2E2A543, 5E1D2A4F9, 5E0C2A4AF, 5DFAEA465, 5DE9EA41C, 5DD8EA3D2, 5DC7AA388, 5DB6AA33F, 5DA5AA2F5, 5D946A2AC, 5D832A262, 5D722A219, 5D60EA1CF, 5D4FAA186, 5D3E6A13D, 5D2D2A0F4, 5D1BEA0AA, 5D0AAA061, 5CF96A018, 5CE829FCF, 5CD6E9F86, 5CC5A9F3D, 5CB469EF5, 5CA2E9EAC, 5C91A9E63, 5C8029E1A, 5C6EE9DD2, 5C5D69D89, 5C4C29D41, 5C3AA9CF8, 5C2929CB0, 5C17A9C67, 5C0669C1F, 5BF4E9BD7, 5BE369B8F, 5BD1E9B47, 5BC069AFE, 5BAEA9AB6, 5B9D29A6E, 5B8BA9A27, 5B7A299DF, 5B6869997, 5B56E994F, 5B4569907, 5B33A98C0, 5B21E9878, 5B1069831, 5AFEA97E9, 5AECE97A2, 5ADB6975A, 5AC9A9713, 5AB7E96CC, 5AA629684, 5A946963D;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 1kx18',
    'CSET read_width_a = 36',
    'CSET read_width_b = 36',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 36',
    'CSET write_width_b = 36',
    'CSET component_name = bmg_72_63cea93ccf129673',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'df6c3b9e96dcaa50c71997923187a91a',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_63cea93ccf129673',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '163ad7e61d3bcb5178b5ef2b6bd74c86',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((80 - 1) downto 0);
  signal in1_1_27: unsigned((80 - 1) downto 0);
  signal y_2_1_concat: unsigned((160 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((80 - 1) downto 0);
    in1 : in std_logic_vector((80 - 1) downto 0);
    y : out std_logic_vector((160 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_1ea5b7e23c',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 20000, FFE6E0000, FFCDE0000, FFB4A0000, FF9BA0001, FF8260001, FF6960001, FF5020002, FF3720002, FF1DE0003, FF04E0004, FEEBA0005, FED2A0006, FEB960007, FEA060008, FE8720009, FE6E2000A, FE54E000B, FE3BE000C, FE22A000E, FE096000F, FDF060011, FDD720013, FDBE20014, FDA4E0016, FD8BE0018, FD72A001A, FD59A001C, FD406001E, FD2760020, FD0E20023, FCF520025, FCDBE0027, FCC2E002A, FCA9A002D, FC90A002F, FC7760032, FC5E60035, FC4520038, FC2C2003B, FC12E003E, FBF9E0041, FBE0A0044, FBC7A0047, FBAE6004B, FB956004E, FB7C60052, FB6320055, FB4A20059, FB30E005D, FB17E0060, FAFEA0064, FAE5A0068, FACC6006C, FAB360070, FA9A20075, FA8120079, FA682007D, FA4EE0082, FA35E0086, FA1CA008B, FA03A008F, F9EA60094, F9D160099, F9B86009E, F99F200A3, F986200A8, F96CE00AD, F953E00B2, F93AE00B8, F921A00BD, F908A00C2, F8EF600C8, F8D6600CD, F8BD600D3, F8A4200D9, F88B200DF, F872200E5, F858E00EA, F83FE00F1, F826E00F7, F80DA00FD, F7F4A0103, F7DBA010A, F7C260110, F7A960116, F7906011D, F77720124, F75E2012A, F74520131, F72BE0138, F712E013F, F6F9E0146, F6E0E014D, F6C7A0155, F6AEA015C, F695A0163, F67C6016B, F66360172, F64A6017A, F63160181, F61860189, F5FF20191, F5E620199, F5CD201A1, F5B4201A9, F59AE01B1, F581E01B9, F568E01C1, F54FE01CA, F536E01D2, F51DE01DB, F504A01E3, F4EBA01EC, F4D2A01F5, F4B9A01FE, F4A0A0206, F487A020F, F46EA0218, F45560222, F43C6022B, F42360234, F40A6023D, F3F160247, F3D860250, F3BF6025A, F3A660264, F38D6026D, F37460277, F35B60281, F3426028B, F32960295, F3106029F, F2F7602A9, F2DE602B4, F2C5602BE, F2AC602C8, F293602D3, F27A602DE, F261602E8, F248602F3, F22F602FE, F21660309, F1FD60314, F1E46031F, F1CB6032A, F1B260335, F19960340, F1806034C, F16760357, F14EA0362, F135A036E, F11CA037A, F103A0385, F0EAA0391, F0D1A039D, F0B8E03A9, F09FE03B5, F086E03C1, F06DE03CD, F054E03DA, F03C203E6, F023203F2, F00A203FF, EFF12040C, EFD860418, EFBF60425, EFA660432, EF8D6043F, EF74A044C, EF5BA0459, EF42A0466, EF29E0473, EF10E0480, EEF7E048E, EEDF2049B, EEC6204A8, EEAD604B6, EE94604C4, EE7B604D1, EE62A04DF, EE49A04ED, EE30E04FB, EE17E0509, EDFF20517, EDE620525, EDCD60534, EDB460542, ED9BA0550, ED82A055F, ED69E056D, ED50E057C, ED382058B, ED1F20599, ED06605A8, ECED605B7, ECD4A05C6, ECBBE05D5, ECA2E05E5, EC8A205F4, EC7160603, EC5860613, EC3FA0622, EC26E0632, EC0DE0641, EBF520651, EBDC60661, EBC360670, EBAAA0680, EB91E0690, EB79206A1, EB60206B1, EB47606C1, EB2EA06D1, EB15E06E2, EAFD206F2, EAE460703, EACB60713, EAB2A0724, EA99E0735, EA8120746, EA6860756, EA4FA0767, EA36E0779, EA1E2078A, EA056079B, E9ECA07AC, E9D3E07BE, E9BB207CF, E9A2607E1, E989A07F2, E970E0804, E95820816, E93F60827, E926A0839, E90DE084B, E8F52085D, E8DC60870, E8C3A0882, E8AAE0894, E892608A6, E879A08B9, E860E08CB, E848208DE, E82F608F1, E816E0903, E7FE20916, E7E560929, E7CCA093C, E7B42094F, E79B60962, E782A0975, E76A20989, E7516099C, E738A09AF, E720209C3, E707609D7, E6EEE09EA, E6D6209FE, E6BD60A12, E6A4E0A26, E68C20A3A, E673A0A4E, E65AE0A62, E64260A76, E629A0A8A, E61120A9E, E5F860AB3, E5DFE0AC7, E5C760ADC, E5AEA0AF0, E59620B05, E57D60B1A, E564E0B2F, E54C60B44, E533E0B59, E51B20B6E, E502A0B83, E4EA20B98, E4D160BAE, E4B8E0BC3, E4A060BD8, E487E0BEE, E46F60C04, E456A0C19, E43E20C2F, E425A0C45, E40D20C5B, E3F4A0C71, E3DC20C87, E3C3A0C9D, E3AB20CB3, E392A0CC9, E37A20CE0, E361A0CF6, E34920D0D, E330A0D23, E31820D3A, E2FFA0D51, E2E720D68, E2CEA0D7F, E2B620D95, E29DA0DAD, E28560DC4, E26CE0DDB, E25460DF2, E23BE0E09, E22360E21, E20B20E38, E1F2A0E50, E1DA20E68, E1C1E0E7F, E1A960E97, E190E0EAF, E178A0EC7, E16020EDF, E147A0EF7, E12F60F0F, E116E0F27, E0FEA0F40, E0E620F58, E0CDE0F71, E0B560F89, E09D20FA2, E084A0FBA, E06C60FD3, E053E0FEC, E03BA1005, E0236101E, E00AE1037, DFF2A1050, DFDA61069, DFC1E1083, DFA9A109C, DF91610B5, DF78E10CF, DF60A10E8, DF4861102, DF302111C, DF17E1136, DEFFA1150, DEE72116A, DECEE1184, DEB6A119E, DE9E611B8, DE86211D2, DE6DE11EC, DE55A1207, DE3D61221, DE252123C, DE0CE1256, DDF4A1271, DDDC6128C, DDC4612A7, DDAC212C2, DD93E12DD, DD7BA12F8, DD6361313, DD4B2132E, DD3321349, DD1AE1365, DD02A1380, DCEAA139C, DCD2613B7, DCBA213D3, DCA2213EF, DC89E140B, DC71A1426, DC59A1442, DC416145E, DC296147B, DC1121497, DBF9214B3, DBE0E14CF, DBC8E14EC, DBB0E1508, DB98A1525, DB80A1541, DB686155E, DB506157B, DB3861598, DB20615B5, DB08215D2, DAF0215EF, DAD82160C, DAC021629, DAA7E1646, DA8FE1664, DA77E1681, DA5FE169F, DA47E16BC, DA2FE16DA, DA17E16F8, D9FFE1716, D9E7E1733, D9CFE1751, D9B7E176F, D99FE178E, D987E17AC, D96FE17CA, D957E17E8, D94021807, D92821825, D91021844, D8F821862, D8E061881, D8C8618A0, D8B0618BF, D898A18DE, D880A18FC, D868A191C, D850E193B, D838E195A, D82121979, D80921999, D7F1619B8, D7D9619D7, D7C1A19F7, D7A9A1A17, D791E1A36, D779E1A56, D76221A76, D74A61A96, D732A1AB6, D71AA1AD6, D702E1AF6, D6EB21B16, D6D361B37, D6BB61B57, D6A3A1B78, D68BE1B98, D67421BB9, D65C61BD9, D644A1BFA, D62CE1C1B, D61521C3C, D5FD61C5D, D5E5A1C7E, D5CDE1C9F, D5B621CC0, D59E61CE1, D586A1D03, D56F21D24, D55761D46, D53FA1D67, D527E1D89, D51061DAA, D4F8A1DCC, D4E0E1DEE, D4C961E10, D4B1A1E32, D499E1E54, D48261E76, D46AA1E98, D45321EBA, D43B61EDD, D423E1EFF, D40C21F22, D3F4A1F44, D3DD21F67, D3C561F8A, D3ADE1FAC, D39661FCF, D37EA1FF2, D36722015, D34FA2038, D3382205B, D3206207F, D308E20A2, D2F1620C5, D2D9E20E9, D2C26210C, D2AAE2130, D29362153, D27BE2177, D2646219B, D24CE21BF, D235621E3, D21DE2207, D206A222B, D1EF2224F, D1D7A2273, D1C022297, D1A8E22BC, D191622E0, D179E2305, D162A2329, D14B2234E, D133A2373, D11C62397, D104E23BC, D0EDA23E1, D0D622406, D0BEE242B, D0A762450, D09022476, D078E249B, D061624C0, D04A224E6, D032E250B, D01BA2531, D00422556, CFECE257C, CFD5A25A2, CFBE625C8, CFA7225EE, CF8FE2614, CF78A263A, CF6162660, CF4A22686, CF32E26AC, CF1BA26D3, CF04626F9, CEED22720, CED5E2746, CEBEA276D, CEA7A2794, CE90627BB, CE79227E1, CE61E2808, CE4AE282F, CE33A2856, CE1CA287E, CE05628A5, CDEE628CC, CDD7228F3, CDC02291B, CDA8E2942, CD91E296A, CD7AA2992, CD63A29B9, CD4CA29E1, CD3562A09, CD1E62A31, CD0762A59, CCF062A81, CCD922AA9, CCC222AD1, CCAB22AFA, CC9422B22, CC7D22B4A, CC6622B73, CC4F22B9B, CC3822BC4, CC2122BED, CC0A22C15, CBF322C3E, CBDC62C67, CBC562C90, CBAE62CB9, CB9762CE2, CB80A2D0C, CB69A2D35, CB52A2D5E, CB3BE2D88, CB24E2DB1, CB0E22DDB, CAF722E04, CAE062E2E, CAC962E58, CAB2A2E82, CA9BA2EAB, CA84E2ED5, CA6E22EFF, CA5722F2A, CA4062F54, CA29A2F7E, CA12E2FA8, C9FC22FD3, C9E522FFD, C9CE63028, C9B7A3052, C9A0E307D, C98A230A8, C973630D2, C95CA30FD, C945E3128, C92F63153, C918A317E, C901E31AA, C8EB231D5, C8D4A3200, C8BDE322B, C8A723257, C890A3282, C879E32AE, C863232DA, C84CA3305, C835E3331, C81F6335D, C808A3389, C7F2233B5, C7DBA33E1, C7C4E340D, C7AE63439, C797E3466, C78163492, C76AA34BE, C754234EB, C73DA3517, C72723544, C710A3571, C6FA2359D, C6E3A35CA, C6CD235F7, C6B6A3624, C6A023651, C689A367E, C673636AB, C65CE36D9, C64663706, C62FE3733, C619A3761, C6032378E, C5ECA37BC, C5D6637E9, C5BFE3817, C5A9A3845, C59323873, C57CE38A1, C566638CF, C550238FD, C539E392B, C523A3959, C50D23987, C4F6E39B6, C4E0A39E4, C4CA63A13, C4B423A41, C49DE3A70, C48763A9E, C47123ACD, C45B23AFC, C444E3B2B, C42EA3B5A, C41863B89, C40223BB8, C3EBE3BE7, C3D5A3C16, C3BFA3C45, C3A963C75, C39323CA4, C37D23CD4, C366E3D03, C350E3D33, C33AA3D63, C324A3D92, C30E63DC2, C2F863DF2, C2E263E22, C2CC23E52, C2B623E82, C2A023EB2, C28A23EE3, C273E3F13, C25DE3F43, C247E3F74, C231E3FA4, C21BE3FD5, C205E4005, C1EFE4036, C1D9E4067, C1C3E4098, C1AE240C9, C198240FA, C1822412B, C16C2415C, C1566418D, C140641BE, C12A641F0, C114A4221, C0FEA4252, C0E8E4284, C0D2E42B6, C0BD242E7, C0A764319, C0916434B, C07BA437D, C065E43AE, C04FE43E0, C03A24413, C02464445, C00EA4477, BFF8E44A9, BFE3244DB, BFCD6450E, BFB7A4540, BFA1E4573, BF8C245A5, BF76645D8, BF60E460B, BF4B2463E, BF3564670, BF1FA46A3, BF0A246D6, BEF464709, BEDEE473C, BEC924770, BEB3A47A3, BE9DE47D6, BE886480A, BE72A483D, BE5D24871, BE47A48A4, BE32248D8, BE1C6490C, BE06E493F, BDF164973, BDDBE49A7, BDC6649DB, BDB0E4A0F, BD9B64A43, BD85E4A77, BD7064AAC, BD5AE4AE0, BD4564B14, BD3024B49, BD1AA4B7D, BD0524BB2, BCEFE4BE6, BCDA64C1B, BCC4E4C50, BCAFA4C85, BC9A24CBA, BC84E4CEF, BC6FA4D24, BC5A24D59, BC44E4D8E, BC2FA4DC3, BC1A24DF8, BC04E4E2E, BBEFA4E63, BBDA64E99, BBC524ECE, BBAFE4F04, BB9AA4F3A, BB8564F6F, BB7024FA5, BB5AE4FDB, BB45A5011, BB3065047, BB1B6507D, BB06250B3, BAF0E50E9, BADBE5120, BAC6A5156, BAB1A518C, BA9C651C3, BA87651F9, BA7225230, BA5D25267, BA47E529D, BA32E52D4, BA1DE530B, BA08E5342, B9F3E5379, B9DEA53B0, B9C9A53E7, B9B4A541E, B99FA5456, B98AA548D, B975A54C4, B960E54FC, B94BE5533, B936E556B, B921E55A2, B90D255DA, B8F825612, B8E32564A, B8CE65681, B8B9656B9, B8A4A56F1, B88FA572A, B87AE5762, B8662579A, B851257D2, B83C6580A, B827A5843, B812E587B, B7FDE58B4, B7E9258EC, B7D465925, B7BFA595E, B7AAE5997, B796259CF, B781A5A08, B76CE5A41, B75825A7A, B74365AB3, B72EA5AED, B71A25B26, B70565B5F, B6F0E5B98, B6DC25BD2, B6C7A5C0B, B6B2E5C45, B69E65C7E, B689A5CB8, B67525CF2, B660A5D2C, B64C25D66, B63765D9F, B622E5DD9, B60E65E13, B5F9E5E4E, B5E565E88, B5D0E5EC2, B5BC65EFC, B5A825F37, B593A5F71, B57F25FAC, B56AA5FE6, B55666021, B541E605B, B52D66096, B519260D1, B504A610C, B4F066147, B4DBE6182, B4C7A61BD, B4B3661F8, B49EE6233, B48AA626E, B476662AA, B462262E5, B44DE6320, B439A635C, B42566397, B411263D3, B3FCE640F, B3E8A644A, B3D466486, B3C0664C2, B3AC264FE, B397E653A, B383A6576, B36FA65B2, B35B665EE, B3476662A, B33326667, B31F266A3, B30B266DF, B2F6E671C, B2E2E6758, B2CEE6795, B2BAE67D2, B2A6E680E, B292A684B, B27EA6888, B26AA68C5, B256E6902, B242E693F, B22EE697C, B21AE69B9, B206E69F6, B1F326A34, B1DF26A71, B1CB26AAE, B1B766AEC, B1A366B29, B18FA6B67, B17BA6BA5, B167E6BE2, B15426C20, B14026C5E, B12C66C9C, B118A6CDA, B104E6D18, B0F126D56, B0DD66D94, B0C9A6DD2, B0B5E6E10, B0A226E4F, B08E66E8D, B07AA6ECB, B066E6F0A, B05366F48, B03FA6F87, B02BE6FC6, B01867004, B004A7043, AFF127082, AFDDA70C1, AFC9E7100, AFB66713F, AFA2E717E, AF8F271BD, AF7BA71FC, AF682723C, AF54A727B, AF41272BA, AF2DA72FA, AF1A27339, AF06A7379, AEF3273B9, AEDFE73F8, AECC67438, AEB8E7478, AEA5674B8, AE92274F8, AE7EA7538, AE6B67578, AE57E75B8, AE44A75F8, AE3167638, AE1DE7678, AE0AA76B9, ADF7676F9, ADE42773A, ADD0E777A, ADBDA77BB, ADAA677FB, AD972783C, AD83E787D, AD70A78BE, AD5D678FE, AD4A2793F, AD3727980, AD23E79C1, AD10A7A03, ACFDA7A44, ACEA67A85, ACD767AC6, ACC467B08, ACB127B49, AC9E27B8A, AC8B27BCC, AC77E7C0D, AC64E7C4F, AC51E7C91, AC3EE7CD3, AC2BE7D14, AC18E7D56, AC05E7D98, ABF2E7DDA, ABE027E1C, ABCD27E5E, ABBA27EA0, ABA767EE3, AB9467F25, AB8167F67, AB6EA7FAA, AB5BE7FEC, AB48E802F, AB3628071, AB23680B4, AB10680F6, AAFDA8139, AAEAE817C, AAD8281BF, AAC568202, AAB2A8245, AA9FE8288, AA8D282CB, AA7A6830E, AA67E8351, AA5528394, AA42683D8, AA2FE841B, AA1D2845F, AA0A684A2, A9F7E84E6, A9E568529, A9D2A856D, A9C0285B1, A9ADA85F4, A99AE8638, A9886867C, A975E86C0, A96368704, A950E8748, A93E6878C, A92BE87D0, A91968815, A90728859, A8F4A889D, A8E2288E2, A8CFE8926, A8BD6896A, A8AB289AF, A898A89F4, A88668A38, A873E8A7D, A861A8AC2, A84F68B07, A83D28B4C, A82AA8B91, A81868BD6, A80628C1B, A7F3E8C60, A7E1A8CA5, A7CF68CEA, A7BD68D2F, A7AB28D75, A798E8DBA, A786A8E00, A774A8E45, A76268E8B, A75068ED0, A73E28F16, A72C28F5C, A719E8FA2, A707E8FE7, A6F5E902D, A6E3E9073, A6D1E90B9, A6BFA90FF, A6ADA9146, A69BA918C, A689E91D2, A677E9218, A665E925F, A653E92A5, A641E92EB, A63029332, A61E29379, A60C693BF, A5FA69406, A5E8A944D, A5D6A9493, A5C4E94DA, A5B329521, A5A129568, A58F695AF;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 1kx18',
    'CSET read_width_a = 36',
    'CSET read_width_b = 36',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 36',
    'CSET write_width_b = 36',
    'CSET component_name = bmg_72_efe230359262404f',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '2adaede5c396545673f2ab54a5f5bfa0',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_efe230359262404f',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 5A82A95F6, 5A70E95AF, 5A5F29568, 5A4D29521, 5A3B694DA, 5A29A9493, 5A17A944D, 5A05E9406, 59F3E93BF, 59E229379, 59D029332, 59BE692EB, 59AC692A5, 599A6925F, 598869218, 5976691D2, 5964A918C, 5952A9146, 5940A90FF, 592E690B9, 591C69073, 590A6902D, 58F868FE7, 58E668FA2, 58D428F5C, 58C228F16, 58AFE8ED0, 589DE8E8B, 588BA8E45, 5879A8E00, 586768DBA, 585528D75, 5842E8D2F, 5830E8CEA, 581EA8CA5, 580C68C60, 57FA28C1B, 57E7E8BD6, 57D5A8B91, 57C328B4C, 57B0E8B07, 579EA8AC2, 578C68A7D, 5779E8A38, 5767A89F4, 5755289AF, 5742E896A, 573068926, 571E288E2, 570BA889D, 56F928859, 56E6E8815, 56D4687D0, 56C1E878C, 56AF68748, 569CE8704, 568A686C0, 5677E867C, 566568638, 5652A85F4, 5640285B1, 562DA856D, 561AE8529, 5608684E6, 55F5E84A2, 55E32845F, 55D06841B, 55BDE83D8, 55AB28394, 559868351, 5585E830E, 5573282CB, 556068288, 554DA8245, 553AE8202, 5528281BF, 55156817C, 5502A8139, 54EFE80F6, 54DCE80B4, 54CA28071, 54B76802F, 54A467FEC, 5491A7FAA, 547EE7F67, 546BE7F25, 5458E7EE3, 544627EA0, 543327E5E, 542027E1C, 540D67DDA, 53FA67D98, 53E767D56, 53D467D14, 53C167CD3, 53AE67C91, 539B67C4F, 538867C0D, 537527BCC, 536227B8A, 534F27B49, 533BE7B08, 5328E7AC6, 5315E7A85, 5302A7A44, 52EFA7A03, 52DC679C1, 52C927980, 52B62793F, 52A2E78FE, 528FA78BE, 527C6787D, 52692783C, 5255E77FB, 5242A77BB, 522F6777A, 521C2773A, 5208E76F9, 51F5A76B9, 51E267678, 51CEE7638, 51BBA75F8, 51A8675B8, 5194E7578, 5181A7538, 516E274F8, 515AE74B8, 514767478, 5133E7438, 5120673F8, 510D273B9, 50F9A7379, 50E627339, 50D2A72FA, 50BF272BA, 50ABA727B, 50982723C, 5084A71FC, 5071271BD, 505D6717E, 5049E713F, 503667100, 5022A70C1, 500F27082, 4FFBA7043, 4FE7E7004, 4FD466FC6, 4FC0A6F87, 4FACE6F48, 4F9966F0A, 4F85A6ECB, 4F71E6E8D, 4F5E26E4F, 4F4A66E10, 4F36A6DD2, 4F22E6D94, 4F0F26D56, 4EFB66D18, 4EE7A6CDA, 4ED3E6C9C, 4EC026C5E, 4EAC26C20, 4E9866BE2, 4E84A6BA5, 4E70A6B67, 4E5CE6B29, 4E48E6AEC, 4E3526AAE, 4E2126A71, 4E0D26A34, 4DF9669F6, 4DE5669B9, 4DD16697C, 4DBD6693F, 4DA966902, 4D95A68C5, 4D81A6888, 4D6DA684B, 4D596680E, 4D45667D2, 4D3166795, 4D1D66758, 4D096671C, 4CF5266DF, 4CE1266A3, 4CCD26667, 4CB8E662A, 4CA4E65EE, 4C90A65B2, 4C7CA6576, 4C686653A, 4C54264FE, 4C3FE64C2, 4C2BE6486, 4C17A644A, 4C036640F, 4BEF263D3, 4BDAE6397, 4BC6A635C, 4BB266320, 4B9E262E5, 4B89E62AA, 4B75A626E, 4B6166233, 4B4CE61F8, 4B38A61BD, 4B2466182, 4B0FE6147, 4AFBA610C, 4AE7260D1, 4AD2E6096, 4ABE6605B, 4AA9E6021, 4A95A5FE6, 4A8125FAC, 4A6CA5F71, 4A5825F37, 4A43E5EFC, 4A2F65EC2, 4A1AE5E88, 4A0665E4E, 49F1E5E13, 49DD65DD9, 49C8E5D9F, 49B425D66, 499FA5D2C, 498B25CF2, 4976A5CB8, 4961E5C7E, 494D65C45, 4938A5C0B, 492425BD2, 490F65B98, 48FAE5B5F, 48E625B26, 48D1A5AED, 48BCE5AB3, 48A825A7A, 489365A41, 487EA5A08, 486A259CF, 485565997, 4840A595E, 482BE5925, 4817258EC, 4802658B4, 47ED6587B, 47D8A5843, 47C3E580A, 47AF257D2, 479A2579A, 478565762, 4770A572A, 475BA56F1, 4746E56B9, 4731E5681, 471D2564A, 470825612, 46F3255DA, 46DE655A2, 46C96556B, 46B465533, 469F654FC, 468AA54C4, 4675A548D, 4660A5456, 464BA541E, 4636A53E7, 4621A53B0, 460C65379, 45F765342, 45E26530B, 45CD652D4, 45B86529D, 45A325267, 458E25230, 4578E51F9, 4563E51C3, 454EA518C, 4539A5156, 452465120, 450F650E9, 44FA250B3, 44E4E507D, 44CFE5047, 44BAA5011, 44A564FDB, 449024FA5, 447AE4F6F, 4465A4F3A, 445064F04, 443B24ECE, 4425E4E99, 4410A4E63, 43FB64E2E, 43E624DF8, 43D0A4DC3, 43BB64D8E, 43A624D59, 4390A4D24, 437B64CEF, 436624CBA, 4350A4C85, 433B64C50, 4325E4C1B, 431064BE6, 42FB24BB2, 42E5A4B7D, 42D024B49, 42BAE4B14, 42A564AE0, 428FE4AAC, 427A64A77, 4264E4A43, 424F64A0F, 4239E49DB, 4224649A7, 420EE4973, 41F96493F, 41E3E490C, 41CE248D8, 41B8A48A4, 41A324871, 418DA483D, 4177E480A, 4162647D6, 414CA47A3, 413724770, 41216473C, 410BE4709, 40F6246D6, 40E0A46A3, 40CAE4670, 40B52463E, 409F6460B, 4089E45D8, 4074245A5, 405E64573, 4048A4540, 4032E450E, 401D244DB, 4007644A9, 3FF1A4477, 3FDBE4445, 3FC624413, 3FB0643E0, 3F9A643AE, 3F84A437D, 3F6EE434B, 3F58E4319, 3F43242E7, 3F2D642B6, 3F1764284, 3F01A4252, 3EEBA4221, 3ED5E41F0, 3EBFE41BE, 3EA9E418D, 3E942415C, 3E7E2412B, 3E68240FA, 3E52240C9, 3E3C64098, 3E2664067, 3E1064036, 3DFA64005, 3DE463FD5, 3DCE63FA4, 3DB863F74, 3DA263F43, 3D8C63F13, 3D7623EE3, 3D6023EB2, 3D4A23E82, 3D3423E52, 3D1DE3E22, 3D07E3DF2, 3CF1E3DC2, 3CDBA3D92, 3CC5A3D63, 3CAF63D33, 3C9963D03, 3C8323CD4, 3C6D23CA4, 3C56E3C75, 3C40A3C45, 3C2AA3C16, 3C1463BE7, 3BFE23BB8, 3BE7E3B89, 3BD1A3B5A, 3BBB63B2B, 3BA523AFC, 3B8F23ACD, 3B78E3A9E, 3B6263A70, 3B4C23A41, 3B35E3A13, 3B1FA39E4, 3B09639B6, 3AF323987, 3ADCA3959, 3AC66392B, 3AB0238FD, 3A99E38CF, 3A83638A1, 3A6D23873, 3A56A3845, 3A4063817, 3A29E37E9, 3A13A37BC, 39FD2378E, 39E6A3761, 39D063733, 39B9E3706, 39A3636D9, 398CE36AB, 3976A367E, 396023651, 3949A3624, 3933235F7, 391CA35CA, 39062359D, 38EFA3571, 38D923544, 38C2A3517, 38AC234EB, 3895A34BE, 387EE3492, 386863466, 3851E3439, 383B6340D, 3824A33E1, 380E233B5, 37F7A3389, 37E0E335D, 37CA63331, 37B3A3305, 379D232DA, 3786632AE, 376FA3282, 375923257, 37426322B, 372BA3200, 3715231D5, 36FE631AA, 36E7A317E, 36D0E3153, 36BA63128, 36A3A30FD, 368CE30D2, 3676230A8, 365F6307D, 3648A3052, 3631E3028, 361B22FFD, 360422FD3, 35ED62FA8, 35D6A2F7E, 35BFE2F54, 35A922F2A, 359222EFF, 357B62ED5, 3564A2EAB, 354DA2E82, 3536E2E58, 351FE2E2E, 350922E04, 34F222DDB, 34DB62DB1, 34C462D88, 34ADA2D5E, 3496A2D35, 347FA2D0C, 3468E2CE2, 3451E2CB9, 343AE2C90, 3423E2C67, 340D22C3E, 33F622C15, 33DF22BED, 33C822BC4, 33B122B9B, 339A22B73, 338322B4A, 336C22B22, 335522AFA, 333E22AD1, 332722AA9, 330FE2A81, 32F8E2A59, 32E1E2A31, 32CAE2A09, 32B3A29E1, 329CA29B9, 3285A2992, 326E6296A, 325762942, 32402291B, 3229228F3, 3211E28CC, 31FAE28A5, 31E3A287E, 31CCA2856, 31B56282F, 319E62808, 3187227E1, 316FE27BB, 3158A2794, 3141A276D, 312A62746, 311322720, 30FBE26F9, 30E4A26D3, 30CD626AC, 30B622686, 309EE2660, 3087A263A, 307062614, 3059225EE, 3041E25C8, 302AA25A2, 30136257C, 2FFC22556, 2FE4A2531, 2FCD6250B, 2FB6224E6, 2F9EE24C0, 2F876249B, 2F7022476, 2F58E2450, 2F416242B, 2F2A22406, 2F12A23E1, 2EFB623BC, 2EE3E2397, 2ECCA2373, 2EB52234E, 2E9DA2329, 2E8662305, 2E6EE22E0, 2E57622BC, 2E4022297, 2E28A2273, 2E112224F, 2DF9A222B, 2DE262207, 2DCAE21E3, 2DB3621BF, 2D9BE219B, 2D8462177, 2D6CE2153, 2D5562130, 2D3DE210C, 2D26620E9, 2D0EE20C5, 2CF7620A2, 2CDFE207F, 2CC82205B, 2CB0A2038, 2C9922015, 2C81A1FF2, 2C69E1FCF, 2C5261FAC, 2C3AE1F8A, 2C2321F67, 2C0BA1F44, 2BF421F22, 2BDC61EFF, 2BC4E1EDD, 2BAD21EBA, 2B95A1E98, 2B7DE1E76, 2B6661E54, 2B4EA1E32, 2B36E1E10, 2B1F61DEE, 2B07A1DCC, 2AEFE1DAA, 2AD861D89, 2AC0A1D67, 2AA8E1D46, 2A9121D24, 2A79A1D03, 2A61E1CE1, 2A4A21CC0, 2A3261C9F, 2A1AA1C7E, 2A02E1C5D, 29EB21C3C, 29D361C1B, 29BBA1BFA, 29A3E1BD9, 298C21BB9, 297461B98, 295CA1B78, 2944E1B57, 292CE1B37, 291521B16, 28FD61AF6, 28E5A1AD6, 28CDA1AB6, 28B5E1A96, 289E21A76, 288661A56, 286E61A36, 2856A1A17, 283EA19F7, 2826E19D7, 280EE19B8, 27F721999, 27DF21979, 27C76195A, 27AF6193B, 2797A191C, 277FA18FC, 2767A18DE, 274FE18BF, 2737E18A0, 271FE1881, 270821862, 26F021844, 26D821825, 26C021807, 26A8617E8, 2690617CA, 2678617AC, 26606178E, 26486176F, 263061751, 261861733, 260061716, 25E8616F8, 25D0616DA, 25B8616BC, 25A06169F, 258861681, 257061664, 255861646, 254021629, 25282160C, 2510215EF, 24F8215D2, 24DFE15B5, 24C7E1598, 24AFE157B, 2497E155E, 247FA1541, 2467A1525, 244F61508, 2437614EC, 241F614CF, 2407214B3, 23EF21497, 23D6E147B, 23BEE145E, 23A6A1442, 238EA1426, 23766140B, 235E213EF, 2346213D3, 232DE13B7, 2315A139C, 22FDA1380, 22E561365, 22CD21349, 22B52132E, 229CE1313, 2284A12F8, 226C612DD, 2254212C2, 223BE12A7, 2223E128C, 220BA1271, 21F361256, 21DB2123C, 21C2E1221, 21AAA1207, 2192611EC, 217A211D2, 2161E11B8, 2149A119E, 213161184, 21192116A, 2100A1150, 20E861136, 20D02111C, 20B7E1102, 209FA10E8, 2087610CF, 206EE10B5, 2056A109C, 203E61083, 2025E1069, 200DA1050, 1FF561037, 1FDCE101E, 1FC4A1005, 1FAC60FEC, 1F93E0FD3, 1F7BA0FBA, 1F6320FA2, 1F4AE0F89, 1F3260F71, 1F1A20F58, 1F01A0F40, 1EE960F27, 1ED0E0F0F, 1EB8A0EF7, 1EA020EDF, 1E87A0EC7, 1E6F60EAF, 1E56E0E97, 1E3E60E7F, 1E2620E68, 1E0DA0E50, 1DF520E38, 1DDCE0E21, 1DC460E09, 1DABE0DF2, 1D9360DDB, 1D7AE0DC4, 1D62A0DAD, 1D4A20D95, 1D31A0D7F, 1D1920D68, 1D00A0D51, 1CE820D3A, 1CCFA0D23, 1CB720D0D, 1C9EA0CF6, 1C8620CE0, 1C6DA0CC9, 1C5520CB3, 1C3CA0C9D, 1C2420C87, 1C0BA0C71, 1BF320C5B, 1BDAA0C45, 1BC220C2F, 1BA9A0C19, 1B90E0C04, 1B7860BEE, 1B5FE0BD8, 1B4760BC3, 1B2EE0BAE, 1B1620B98, 1AFDA0B83, 1AE520B6E, 1ACC60B59, 1AB3E0B44, 1A9B60B2F, 1A82E0B1A, 1A6A20B05, 1A51A0AF0, 1A38E0ADC, 1A2060AC7, 1A07E0AB3, 19EF20A9E, 19D6A0A8A, 19BDE0A76, 19A560A62, 198CA0A4E, 197420A3A, 195B60A26, 1942E0A12, 192A209FE, 1911609EA, 18F8E09D7, 18E0209C3, 18C7A09AF, 18AEE099C, 189620989, 187DA0975, 1864E0962, 184C2094F, 1833A093C, 181AE0929, 180220916, 17E960903, 17D0E08F1, 17B8208DE, 179F608CB, 1786A08B9, 176DE08A6, 175560894, 173CA0882, 1723E0870, 170B2085D, 16F26084B, 16D9A0839, 16C0E0827, 16A820816, 168F60804, 1676A07F2, 165DE07E1, 1645207CF, 162C607BE, 1613A07AC, 15FAE079B, 15E22078A, 15C960779, 15B0A0767, 1597E0756, 157F20746, 156660735, 154DA0724, 1534E0713, 151BE0703, 1503206F2, 14EA606E2, 14D1A06D1, 14B8E06C1, 14A0206B1, 1487206A1, 146E60690, 1455A0680, 143CE0670, 1423E0661, 140B20651, 13F260641, 13D960632, 13C0A0622, 13A7E0613, 138EE0603, 1376205F4, 135D605E5, 1344605D5, 132BA05C6, 1312E05B7, 12F9E05A8, 12E120599, 12C82058B, 12AF6057C, 12966056D, 127DA055F, 1264A0550, 124BE0542, 1232E0534, 121A20525, 120120517, 11E860509, 11CF604FB, 11B6A04ED, 119DA04DF, 1184E04D1, 116BE04C4, 1152E04B6, 113A204A8, 11212049B, 11086048E, 10EF60480, 10D660473, 10BDA0466, 10A4A0459, 108BA044C, 1072E043F, 1059E0432, 1040E0425, 1027E0418, 100F2040C, FF6203FF, FDD203F2, FC4203E6, FAB603DA, F92603CD, F79603C1, F60603B5, F47603A9, F2EA039D, F15A0391, EFCA0385, EE3A037A, ECAA036E, EB1A0362, E98E0357, E7FE034C, E66E0340, E4DE0335, E34E032A, E1BE031F, E02E0314, DE9E0309, DD0E02FE, DB7E02F3, D9EE02E8, D85E02DE, D6CE02D3, D53E02C8, D3AE02BE, D21E02B4, D08E02A9, CEFE029F, CD6E0295, CBDE028B, CA4E0281, C8BE0277, C72E026D, C59E0264, C40E025A, C27E0250, C0EE0247, BF5E023D, BDCE0234, BC3E022B, BAAE0222, B91A0218, B78A020F, B5FA0206, B46A01FE, B2DA01F5, B14A01EC, AFBA01E3, AE2601DB, AC9601D2, AB0601CA, A97601C1, A7E601B9, A65601B1, A4C201A9, A33201A1, A1A20199, A0120191, 9E7E0189, 9CEE0181, 9B5E017A, 99CE0172, 983E016B, 96AA0163, 951A015C, 938A0155, 91F6014D, 90660146, 8ED6013F, 8D460138, 8BB20131, 8A22012A, 88920124, 86FE011D, 856E0116, 83DE0110, 824A010A, 80BA0103, 7F2A00FD, 7D9600F7, 7C0600F1, 7A7600EA, 78E200E5, 775200DF, 75C200D9, 742E00D3, 729E00CD, 710E00C8, 6F7A00C2, 6DEA00BD, 6C5600B8, 6AC600B2, 693600AD, 67A200A8, 661200A3, 647E009E, 62EE0099, 615E0094, 5FCA008F, 5E3A008B, 5CA60086, 5B160082, 5982007D, 57F20079, 56620075, 54CE0070, 533E006C, 51AA0068, 501A0064, 4E860060, 4CF6005D, 4B620059, 49D20055, 483E0052, 46AE004E, 451E004B, 438A0047, 41FA0044, 40660041, 3ED6003E, 3D42003B, 3BB20038, 3A1E0035, 388E0032, 36FA002F, 356A002D, 33D6002A, 32460027, 30B20025, 2F220023, 2D8E0020, 2BFE001E, 2A6A001C, 28DA001A, 27460018, 25B60016, 24220014, 22920013, 20FE0011, 1F6E000F, 1DDA000E, 1C46000C, 1AB6000B, 1922000A, 17920009, 15FE0008, 146E0007, 12DA0006, 114A0005, FB60004, E260003, C920002, B020002, 96E0001, 7DE0001, 64A0001, 4BA0000, 3260000, 1960000;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 1kx18',
    'CSET read_width_a = 36',
    'CSET read_width_b = 36',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 36',
    'CSET write_width_b = 36',
    'CSET component_name = bmg_72_397194a7fc06b72c',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '853e27e26784ab13420b3b210a706680',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_397194a7fc06b72c',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = A57DA95F6, A56BE963D, A55A29684, A548696CC, A536A9713, A524E975A, A513697A2, A501A97E9, A4EFE9831, A4DE69878, A4CCA98C0, A4BAE9907, A4A96994F, A497E9997, A486299DF, A474A9A27, A46329A6E, A451A9AB6, A43FE9AFE, A42E69B47, A41CE9B8F, A40B69BD7, A3F9E9C1F, A3E8A9C67, A3D729CB0, A3C5A9CF8, A3B429D41, A3A2E9D89, A39169DD2, A38029E1A, A36EA9E63, A35D69EAC, A34BE9EF5, A33AA9F3D, A32969F86, A31829FCF, A306EA018, A2F5AA061, A2E46A0AA, A2D32A0F4, A2C1EA13D, A2B0AA186, A29F6A1CF, A28E2A219, A27D2A262, A26BEA2AC, A25AAA2F5, A249AA33F, A238AA388, A2276A3D2, A2166A41C, A2056A465, A1F42A4AF, A1E32A4F9, A1D22A543, A1C12A58D, A1B02A5D7, A19F2A621, A18E2A66B, A17D2A6B6, A16C6A700, A15B6A74A, A14A6A795, A139AA7DF, A128AA829, A117EA874, A106EA8BF, A0F62A909, A0E52A954, A0D46A99F, A0C3AA9E9, A0B2EAA34, A0A22AA7F, A0916AACA, A080AAB15, A06FEAB60, A05F2ABAB, A04E6ABF6, A03DAAC41, A02D2AC8D, A01C6ACD8, A00BEAD23, 9FFB2AD6F, 9FEAAADBA, 9FD9EAE05, 9FC96AE51, 9FB8EAE9D, 9FA82AEE8, 9F97AAF34, 9F872AF80, 9F76AAFCB, 9F662B017, 9F55AB063, 9F452B0AF, 9F34EB0FB, 9F246B147, 9F13EB193, 9F036B1DF, 9EF32B22C, 9EE2AB278, 9ED26B2C4, 9EC22B311, 9EB1AB35D, 9EA16B3A9, 9E912B3F6, 9E80EB442, 9E706B48F, 9E602B4DC, 9E4FEB528, 9E3FAB575, 9E2FAB5C2, 9E1F6B60F, 9E0F2B65C, 9DFEEB6A9, 9DEEEB6F6, 9DDEAB743, 9DCEAB790, 9DBE6B7DD, 9DAE6B82A, 9D9E2B877, 9D8E2B8C5, 9D7E2B912, 9D6E2B95F, 9D5E2B9AD, 9D4E2B9FA, 9D3E2BA48, 9D2E2BA95, 9D1E2BAE3, 9D0E2BB31, 9CFE2BB7F, 9CEE6BBCC, 9CDE6BC1A, 9CCE6BC68, 9CBEABCB6, 9CAEABD04, 9C9EEBD52, 9C8F2BDA0, 9C7F2BDEE, 9C6F6BE3C, 9C5FABE8B, 9C4FEBED9, 9C402BF27, 9C306BF76, 9C20ABFC4, 9C10EC012, 9C012C061, 9BF1AC0AF, 9BE1EC0FE, 9BD22C14D, 9BC2AC19B, 9BB2EC1EA, 9BA36C239, 9B93EC288, 9B842C2D7, 9B74AC326, 9B652C375, 9B55AC3C4, 9B462C413, 9B36AC462, 9B272C4B1, 9B17AC500, 9B082C550, 9AF8AC59F, 9AE96C5EE, 9AD9EC63E, 9ACA6C68D, 9ABB2C6DD, 9AABAC72C, 9A9C6C77C, 9A8D2C7CC, 9A7DAC81B, 9A6E6C86B, 9A5F2C8BB, 9A4FEC90B, 9A40AC95B, 9A316C9AA, 9A222C9FA, 9A12ECA4A, 9A03ACA9B, 99F4ACAEB, 99E56CB3B, 99D62CB8B, 99C72CBDB, 99B7ECC2C, 99A8ECC7C, 9999ECCCC, 998AACD1D, 997BACD6D, 996CACDBE, 995DACE0E, 994EACE5F, 993FACEB0, 9930ACF01, 9921ACF51, 9912ACFA2, 9903ECFF3, 98F4ED044, 98E5ED095, 98D72D0E6, 98C82D137, 98B96D188, 98AAAD1D9, 989BAD22A, 988CED27B, 987E2D2CD, 986F6D31E, 9860AD36F, 9851ED3C1, 98432D412, 98346D464, 9825AD4B5, 9816ED507, 98086D559, 97F9AD5AA, 97EB2D5FC, 97DC6D64E, 97CDED6A0, 97BF2D6F1, 97B0AD743, 97A22D795, 9793AD7E7, 9784ED839, 97766D88B, 9767ED8DD, 9759AD930, 974B2D982, 973CAD9D4, 972E2DA26, 971FADA79, 97116DACB, 9702EDB1E, 96F4ADB70, 96E62DBC3, 96D7EDC15, 96C9ADC68, 96BB6DCBA, 96ACEDD0D, 969EADD60, 96906DDB3, 96822DE06, 9673EDE58, 9665EDEAB, 9657ADEFE, 96496DF51, 963B2DFA4, 962D2DFF7, 961EEE04B, 9610EE09E, 9602AE0F1, 95F4AE144, 95E6AE198, 95D8AE1EB, 95CAAE23E, 95BC6E292, 95AE6E2E5, 95A06E339, 9592AE38C, 9584AE3E0, 9576AE434, 9568AE487, 955AEE4DB, 954CEE52F, 953F2E583, 95312E5D6, 95236E62A, 9515AE67E, 9507AE6D2, 94F9EE726, 94EC2E77A, 94DE6E7CF, 94D0AE823, 94C2EE877, 94B52E8CB, 94A76E91F, 9499EE974, 948C2E9C8, 947E6EA1D, 9470EEA71, 94632EAC6, 9455AEB1A, 94482EB6F, 943A6EBC3, 942CEEC18, 941F6EC6D, 9411EECC1, 94046ED16, 93F6EED6B, 93E96EDC0, 93DBEEE15, 93CEAEE6A, 93C12EEBF, 93B3AEF14, 93A66EF69, 9398EEFBE, 938BAF013, 937E2F068, 9370EF0BE, 9363AF113, 93566F168, 93492F1BE, 933BEF213, 932EAF268, 93216F2BE, 93142F313, 9306EF369, 92F9AF3BF, 92ECAF414, 92DF6F46A, 92D26F4C0, 92C52F515, 92B82F56B, 92AB2F5C1, 929DEF617, 9290EF66D, 9283EF6C3, 9276EF719, 9269EF76F, 925CEF7C5, 924FEF81B, 92432F871, 92362F8C8, 92292F91E, 921C6F974, 920F6F9CA, 9202AFA21, 91F5AFA77, 91E8EFACE, 91DC2FB24, 91CF2FB7B, 91C26FBD1, 91B5AFC28, 91A8EFC7E, 919C2FCD5, 918FAFD2C, 9182EFD83, 91762FDD9, 91696FE30, 915CEFE87, 91502FEDE, 9143AFF35, 9136EFF8C, 912A6FFE3, 911DF003A, 911170091, 9104F00E8, 90F83013F, 90EBB0197, 90DF701EE, 90D2F0245, 90C67029D, 90B9F02F4, 90ADB034B, 90A1303A3, 9094B03FA, 908870452, 907C304A9, 906FB0501, 906370559, 9057305B0, 904AF0608, 903EB0660, 9032706B8, 90263070F, 9019F0767, 900DB07BF, 900170817, 8FF57086F, 8FE9308C7, 8FDD3091F, 8FD0F0977, 8FC4F09CF, 8FB8F0A28, 8FACB0A80, 8FA0B0AD8, 8F94B0B30, 8F88B0B89, 8F7CB0BE1, 8F70B0C39, 8F64B0C92, 8F58F0CEA, 8F4CF0D43, 8F40F0D9B, 8F3530DF4, 8F2930E4C, 8F1D70EA5, 8F1170EFE, 8F05B0F56, 8EF9F0FAF, 8EEE31008, 8EE271061, 8ED6B10BA, 8ECAF1113, 8EBF3116C, 8EB3711C4, 8EA7B121D, 8E9C31277, 8E90712D0, 8E84F1329, 8E7931382, 8E6DB13DB, 8E61F1434, 8E567148E, 8E4AF14E7, 8E3F71540, 8E33F1599, 8E28715F3, 8E1CF164C, 8E11716A6, 8E05F16FF, 8DFA71759, 8DEF317B2, 8DE3B180C, 8DD871866, 8DCCF18BF, 8DC1B1919, 8DB671973, 8DAAF19CD, 8D9FB1A26, 8D9471A80, 8D8931ADA, 8D7DF1B34, 8D72B1B8E, 8D6771BE8, 8D5C71C42, 8D5131C9C, 8D45F1CF6, 8D3AF1D50, 8D2FB1DAA, 8D24B1E05, 8D19B1E5F, 8D0E71EB9, 8D0371F13, 8CF871F6E, 8CED71FC8, 8CE272022, 8CD77207D, 8CCC720D7, 8CC172132, 8CB6B218C, 8CABB21E7, 8CA0B2242, 8C95F229C, 8C8AF22F7, 8C8032352, 8C75723AC, 8C6AB2407, 8C5FB2462, 8C54F24BD, 8C4A32517, 8C3F72572, 8C34B25CD, 8C2A32628, 8C1F72683, 8C14B26DE, 8C0A32739, 8BFF72794, 8BF4F27F0, 8BEA3284B, 8BDFB28A6, 8BD532901, 8BCAB295C, 8BBFF29B8, 8BB572A13, 8BAAF2A6E, 8BA0B2ACA, 8B9632B25, 8B8BB2B81, 8B8132BDC, 8B76F2C38, 8B6C72C93, 8B6232CEF, 8B57B2D4A, 8B4D72DA6, 8B4332E02, 8B38B2E5D, 8B2E72EB9, 8B2432F15, 8B19F2F71, 8B0FB2FCC, 8B0573028, 8AFB73084, 8AF1330E0, 8AE6F313C, 8ADCF3198, 8AD2B31F4, 8AC8B3250, 8ABEB32AC, 8AB473308, 8AAA73364, 8AA0733C1, 8A967341D, 8A8C73479, 8A82734D5, 8A7873532, 8A6E7358E, 8A64B35EA, 8A5AB3647, 8A50B36A3, 8A46F3700, 8A3CF375C, 8A33337B9, 8A2973815, 8A1FB3872, 8A15B38CE, 8A0BF392B, 8A0233987, 89F8739E4, 89EEF3A41, 89E533A9E, 89DB73AFA, 89D1B3B57, 89C833BB4, 89BE73C11, 89B4F3C6E, 89AB33CCB, 89A1B3D28, 899833D85, 898EB3DE2, 898533E3F, 897BB3E9C, 897233EF9, 8968B3F56, 895F33FB3, 8955B4010, 894C7406E, 8942F40CB, 8939B4128, 893034185, 8926F41E3, 891DB4240, 89143429D, 890AF42FB, 8901B4358, 88F8743B6, 88EF34413, 88E5F4471, 88DCF44CE, 88D3B452C, 88CA7458A, 88C1745E7, 88B834645, 88AF346A3, 88A5F4700, 889CF475E, 8893F47BC, 888AF481A, 8881F4877, 8878F48D5, 886FF4933, 8866F4991, 885DF49EF, 8854F4A4D, 884C34AAB, 884334B09, 883A74B67, 883174BC5, 8828B4C23, 881FF4C81, 8816F4CE0, 880E34D3E, 880574D9C, 87FCB4DFA, 87F3F4E59, 87EB34EB7, 87E2B4F15, 87D9F4F74, 87D134FD2, 87C8B5030, 87BFF508F, 87B7750ED, 87AEB514C, 87A6351AA, 879DB5209, 879535267, 878CB52C6, 878435325, 877BB5383, 8773353E2, 876AB5441, 87627549F, 8759F54FE, 8751B555D, 8749355BC, 8740F561A, 873875679, 8730356D8, 8727F5737, 871FB5796, 8717757F5, 870F35854, 8706F58B3, 86FEB5912, 86F675971, 86EE759D0, 86E635A2F, 86DE35A8E, 86D5F5AED, 86CDF5B4D, 86C5B5BAC, 86BDB5C0B, 86B5B5C6A, 86ADB5CCA, 86A5B5D29, 869DB5D88, 8695B5DE7, 868DB5E47, 8685F5EA6, 867DF5F06, 8675F5F65, 866E35FC5, 866676024, 865E76084, 8656B60E3, 864EF6143, 8647361A2, 863F36202, 8637B6262, 862FF62C1, 862836321, 862076381, 8618B63E0, 861136440, 8609764A0, 8601F6500, 85FA3655F, 85F2B65BF, 85EB3661F, 85E3B667F, 85DBF66DF, 85D47673F, 85CCF679F, 85C5B67FF, 85BE3685F, 85B6B68BF, 85AF3691F, 85A7F697F, 85A0769DF, 859936A3F, 8591B6A9F, 858A76B00, 858336B60, 857BF6BC0, 8574B6C20, 856D76C81, 856636CE1, 855EF6D41, 8557B6DA1, 855076E02, 854976E62, 854236EC3, 853B36F23, 8533F6F83, 852CF6FE4, 8525F7044, 851EF70A5, 8517B7105, 8510B7166, 8509B71C6, 8502F7227, 84FBF7288, 84F4F72E8, 84EDF7349, 84E7373AA, 84E03740A, 84D97746B, 84D2774CC, 84CBB752C, 84C4F758D, 84BE375EE, 84B77764F, 84B0B76B0, 84A9F7711, 84A337771, 849C777D2, 8495B7833, 848F37894, 8488778F5, 8481F7956, 847B379B7, 8474B7A18, 846E37A79, 8467B7ADA, 846137B3B, 845AB7B9C, 845437BFE, 844DB7C5F, 844737CC0, 8440B7D21, 843A37D82, 8433F7DE3, 842D77E45, 842737EA6, 8420F7F07, 841A77F69, 841437FCA, 840DF802B, 8407B808D, 8401780EE, 83FB3814F, 83F4F81B1, 83EEB8212, 83E8B8274, 83E2782D5, 83DC78337, 83D638398, 83D0383FA, 83C9F845B, 83C3F84BD, 83BDF851E, 83B7F8580, 83B1F85E2, 83ABF8643, 83A5F86A5, 839FF8707, 839A38768, 8394387CA, 838E3882C, 83887888D, 8382788EF, 837CB8951, 8376F89B3, 837138A15, 836B78A76, 836578AD8, 835FF8B3A, 835A38B9C, 835478BFE, 834EB8C60, 8348F8CC2, 834378D24, 833DB8D86, 833838DE8, 833278E4A, 832CF8EAC, 832778F0E, 8321F8F70, 831C78FD2, 8316F9034, 831179096, 830BF90F8, 83067915A, 8301391BD, 82FBB921F, 82F639281, 82F0F92E3, 82EBB9345, 82E6393A8, 82E0F940A, 82DBB946C, 82D6794CF, 82D139531, 82CBF9593, 82C6B95F5, 82C179658, 82BC396BA, 82B73971D, 82B1F977F, 82ACF97E1, 82A7B9844, 82A2B98A6, 829DB9909, 8298B996B, 8293B99CE, 828EB9A30, 8289B9A93, 8284B9AF5, 827FB9B58, 827AB9BBB, 8275F9C1D, 8270F9C80, 826BF9CE2, 826739D45, 826279DA8, 825D79E0A, 8258B9E6D, 8253F9ED0, 824F39F32, 824A79F95, 8245B9FF8, 8240FA05B, 823C7A0BD, 8237BA120, 8232FA183, 822E7A1E6, 8229BA249, 82253A2AB, 8220BA30E, 821C3A371, 82177A3D4, 8212FA437, 820E7A49A, 8209FA4FD, 8205BA560, 82013A5C3, 81FCBA626, 81F87A689, 81F3FA6EC, 81EFBA74F, 81EB3A7B2, 81E6FA815, 81E2BA878, 81DE7A8DB, 81D9FA93E, 81D5BA9A1, 81D1BAA04, 81CD7AA67, 81C93AACA, 81C4FAB2D, 81C0FAB91, 81BCBABF4, 81B8BAC57, 81B47ACBA, 81B07AD1D, 81AC7AD80, 81A87ADE4, 81A43AE47, 81A03AEAA, 819C3AF0D, 81987AF71, 81947AFD4, 81907B037, 818CBB09B, 8188BB0FE, 8184FB161, 8180FB1C5, 817D3B228, 81797B28B, 81757B2EF, 8171BB352, 816DFB3B5, 816A3B419, 81667B47C, 8162FB4E0, 815F3B543, 815B7B5A7, 8157FB60A, 81543B66E, 8150BB6D1, 814D3B735, 81497B798, 8145FB7FC, 81427B85F, 813EFB8C3, 813B7B926, 8137FB98A, 81347B9ED, 81313BA51, 812DBBAB5, 812A3BB18, 8126FBB7C, 8123BBBDF, 81203BC43, 811CFBCA7, 8119BBD0A, 81167BD6E, 81133BDD2, 810FFBE35, 810CBBE99, 81097BEFD, 81063BF61, 81033BFC4, 80FFFC028, 80FCBC08C, 80F9BC0F0, 80F6BC153, 80F37C1B7, 80F07C21B, 80ED7C27F, 80EA7C2E3, 80E77C346, 80E47C3AA, 80E17C40E, 80DEBC472, 80DBBC4D6, 80D8BC53A, 80D5FC59D, 80D33C601, 80D03C665, 80CD7C6C9, 80CABC72D, 80C7FC791, 80C53C7F5, 80C27C859, 80BFBC8BD, 80BCFC921, 80BA3C985, 80B7BC9E9, 80B4FCA4D, 80B23CAB1, 80AFBCB15, 80AD3CB79, 80AA7CBDD, 80A7FCC41, 80A57CCA5, 80A2FCD09, 80A07CD6D, 809DFCDD1, 809B7CE35, 80993CE99, 8096BCEFD, 80943CF61, 8091FCFC5, 808F7D029, 808D3D08D, 808AFD0F1, 8088BD155, 80863D1BA, 8083FD21E, 8081BD282, 807FBD2E6, 807D7D34A, 807B3D3AE, 8078FD412, 8076FD477, 8074BD4DB, 8072BD53F, 80707D5A3, 806E7D607, 806C7D66B, 806A7D6D0, 80687D734, 80667D798, 80647D7FC, 80627D861, 80607D8C5, 805EBD929, 805CBD98D, 805AFD9F1, 8058FDA56, 80573DABA, 80557DB1E, 80537DB83, 8051BDBE7, 804FFDC4B, 804E3DCAF, 804C7DD14, 804ABDD78, 80493DDDC, 80477DE41, 8045BDEA5, 80443DF09, 8042BDF6E, 8040FDFD2, 803F7E036, 803DFE09B, 803C7E0FF, 803ABE163, 80397E1C8, 8037FE22C, 80367E290, 8034FE2F5, 80337E359, 80323E3BD, 8030BE422, 802F7E486, 802E3E4EB, 802CBE54F, 802B7E5B3, 802A3E618, 8028FE67C, 8027BE6E1, 80267E745, 80253E7A9, 8023FE80E, 8022FE872, 8021BE8D7, 8020BE93B, 801F7E9A0, 801E7EA04, 801D7EA68, 801C3EACD, 801B3EB31, 801A3EB96, 80193EBFA, 80183EC5F, 80177ECC3, 80167ED28, 80157ED8C, 8014BEDF1, 8013BEE55, 8012FEEB9, 8011FEF1E, 80113EF82, 80107EFE7, 800FBF04B, 800EFF0B0, 800E3F114, 800D7F179, 800CBF1DD, 800BFF242, 800B7F2A6, 800ABF30B, 8009FF36F, 80097F3D4, 8008FF438, 80083F49D, 8007BF501, 80073F566, 8006BF5CA, 80063F62F, 8005BF693, 80053F6F8, 8004FF75C, 80047F7C1, 8003FF825, 8003BF88A, 80033F8EF, 8002FF953, 8002BF9B8, 80027FA1C, 80023FA81, 8001FFAE5, 8001BFB4A, 80017FBAE, 80013FC13, 8000FFC77, 8000BFCDC, 8000BFD40, 80007FDA5, 80007FE09, 80007FE6E, 80003FED2, 80003FF37, 80003FF9B;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 1kx18',
    'CSET read_width_a = 36',
    'CSET read_width_b = 36',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 36',
    'CSET write_width_b = 36',
    'CSET component_name = bmg_72_8e74499683501928',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '195b430a6ecc422fe5c64da155407407',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_8e74499683501928',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '37b5b1f9d046b871b3c7e521c7b35390',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f4fb22e201f1e46c1e02ccd34a635bed',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd6f48846b2b6b30e6929ed36689cf611',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((20 - 1) downto 0);
  signal in1_1_27: unsigned((20 - 1) downto 0);
  signal y_2_1_concat: unsigned((40 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((20 - 1) downto 0);
    in1 : in std_logic_vector((20 - 1) downto 0);
    y : out std_logic_vector((40 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_9e724c4b50',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd882d6e9740bf3fda117107a2b5325c1',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '28a510bd6a5dd265ed87a9196b9b32c4',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '397f0990528943868baaa36be3444c6d',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '435a6d8b7549807e06f37158f87310b8',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '25d5dbe53911003b08f3ea6da39f6bd8',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((21 - 1) downto 0);
  signal in1_1_27: unsigned((21 - 1) downto 0);
  signal in2_1_31: unsigned((21 - 1) downto 0);
  signal in3_1_35: unsigned((21 - 1) downto 0);
  signal y_2_1_concat: unsigned((84 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((21 - 1) downto 0);
    in1 : in std_logic_vector((21 - 1) downto 0);
    in2 : in std_logic_vector((21 - 1) downto 0);
    in3 : in std_logic_vector((21 - 1) downto 0);
    y : out std_logic_vector((84 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_356a264444',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c072fdd1f385e647912169f5d789092f',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '717d3ded64aa621088d44b500446c6bf',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '044672a006b5fce06945917aa842a736',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '0da650d5644dc7180e7dfbd9617b30fa',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b9a13b3376d3c3a4058e92e1d218c762',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((19 - 1) downto 0);
  signal in1_1_27: unsigned((19 - 1) downto 0);
  signal y_2_1_concat: unsigned((38 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((19 - 1) downto 0);
    in1 : in std_logic_vector((19 - 1) downto 0);
    y : out std_logic_vector((38 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_5a12f8f9be',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '955dfd6e04fdc445f245b08437de10ac',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '7f00151c5fbc9f31cf114b308b02374a',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd2e72830f73568d408579cfb8177212d',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((37 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (3 - 1)) of std_logic_vector((37 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "0000000000000000000000000000000000000",
    "0000000000000000000000000000000000000",
    "0000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((37 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((37 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(2);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 2 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((37 - 1) downto 0);
    q : out std_logic_vector((37 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_64530ed2c8',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '7f7113f7a2793ab3b21b6488d4992270',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((36 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal in2_1_31: unsigned((36 - 1) downto 0);
  signal y_2_1_concat: unsigned((73 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((36 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    in2 : in std_logic_vector((36 - 1) downto 0);
    y : out std_logic_vector((73 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_b28df1ab2e',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b2e45567233ecae3e891824080b97570',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((37 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((37 - 1) downto 0);
    output_port : out std_logic_vector((37 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_892b735f0d',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ac2b022fd527bb4f5e875adb04aeb8cd',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '4c5d531677a5b938a786a66b0b19a273',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '77a090494b88c15326f6a61992314561',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'eada09097091e044fea10197cb8fbf73',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '8fa414ef25ff16380b05def4200d3303',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((37 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (5 - 1)) of std_logic_vector((37 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "0000000000000000000000000000000000000",
    "0000000000000000000000000000000000000",
    "0000000000000000000000000000000000000",
    "0000000000000000000000000000000000000",
    "0000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((37 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((37 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(4);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 4 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((37 - 1) downto 0);
    q : out std_logic_vector((37 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_2d0f74b2c1',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '310d399add109a78102c17dd0af75b6d',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((4 - 1) downto 0);
  signal in1_1_27: unsigned((10 - 1) downto 0);
  signal y_2_1_concat: unsigned((14 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((4 - 1) downto 0);
    in1 : in std_logic_vector((10 - 1) downto 0);
    y : out std_logic_vector((14 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_df2ac77737',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd5ae757d56525c21f463784e7390b3e7',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '5a9d2cdafa1a6791bf282f102c7259d6',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b16e3c11e13adee34c7a812d5b362890',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '3a8e580957e573ce0014b20af4ce3563',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((2 - 1) downto 0);
  signal in1_1_27: unsigned((12 - 1) downto 0);
  signal y_2_1_concat: unsigned((14 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((2 - 1) downto 0);
    in1 : in std_logic_vector((12 - 1) downto 0);
    y : out std_logic_vector((14 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_06ee58da9a',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 7FFFC0000, 7FFFFFFCE, 7FFFFFF9B, 7FFFFFF69, 7FFFFFF37, 7FFFFFF05, 7FFFFFED2, 7FFFFFEA0, 7FFFFFE6E, 7FFFFFE3C, 7FFFFFE09, 7FFFFFDD7, 7FFFFFDA5, 7FFFBFD73, 7FFFBFD40, 7FFFBFD0E, 7FFFBFCDC, 7FFF7FCA9, 7FFF7FC77, 7FFF7FC45, 7FFF3FC13, 7FFF3FBE0, 7FFEFFBAE, 7FFEFFB7C, 7FFEBFB4A, 7FFEBFB17, 7FFE7FAE5, 7FFE7FAB3, 7FFE3FA81, 7FFE3FA4E, 7FFDFFA1C, 7FFDFF9EA, 7FFDBF9B8, 7FFDBF985, 7FFD7F953, 7FFD3F921, 7FFD3F8EF, 7FFCFF8BC, 7FFCBF88A, 7FFC7F858, 7FFC7F825, 7FFC3F7F3, 7FFBFF7C1, 7FFBBF78F, 7FFB7F75C, 7FFB3F72A, 7FFB3F6F8, 7FFAFF6C6, 7FFABF693, 7FFA7F661, 7FFA3F62F, 7FF9FF5FD, 7FF9BF5CA, 7FF97F598, 7FF93F566, 7FF8FF534, 7FF8BF501, 7FF87F4CF, 7FF83F49D, 7FF7BF46B, 7FF77F438, 7FF73F406, 7FF6FF3D4, 7FF6BF3A2, 7FF67F36F, 7FF5FF33D, 7FF5BF30B, 7FF57F2D9, 7FF4FF2A6, 7FF4BF274, 7FF47F242, 7FF3FF210, 7FF3BF1DD, 7FF37F1AB, 7FF2FF179, 7FF2BF147, 7FF23F114, 7FF1FF0E2, 7FF17F0B0, 7FF13F07E, 7FF0BF04B, 7FF07F019, 7FEFFEFE7, 7FEFBEFB5, 7FEF3EF82, 7FEEBEF50, 7FEE7EF1E, 7FEDFEEEC, 7FED7EEB9, 7FED3EE87, 7FECBEE55, 7FEC3EE23, 7FEBBEDF1, 7FEB7EDBE, 7FEAFED8C, 7FEA7ED5A, 7FE9FED28, 7FE97ECF5, 7FE8FECC3, 7FE8BEC91, 7FE83EC5F, 7FE7BEC2C, 7FE73EBFA, 7FE6BEBC8, 7FE63EB96, 7FE5BEB64, 7FE53EB31, 7FE4BEAFF, 7FE43EACD, 7FE3BEA9B, 7FE2FEA68, 7FE27EA36, 7FE1FEA04, 7FE17E9D2, 7FE0FE9A0, 7FE07E96D, 7FDFBE93B, 7FDF3E909, 7FDEBE8D7, 7FDE3E8A4, 7FDD7E872, 7FDCFE840, 7FDC7E80E, 7FDBBE7DC, 7FDB3E7A9, 7FDA7E777, 7FD9FE745, 7FD97E713, 7FD8BE6E1, 7FD83E6AE, 7FD77E67C, 7FD6FE64A, 7FD63E618, 7FD5BE5E6, 7FD4FE5B3, 7FD43E581, 7FD3BE54F, 7FD2FE51D, 7FD23E4EB, 7FD1BE4B8, 7FD0FE486, 7FD03E454, 7FCFBE422, 7FCEFE3F0, 7FCE3E3BD, 7FCD7E38B, 7FCCFE359, 7FCC3E327, 7FCB7E2F5, 7FCABE2C3, 7FC9FE290, 7FC93E25E, 7FC87E22C, 7FC7BE1FA, 7FC6FE1C8, 7FC67E195, 7FC5BE163, 7FC4BE131, 7FC3FE0FF, 7FC33E0CD, 7FC27E09B, 7FC1BE068, 7FC0FE036, 7FC03E004, 7FBF7DFD2, 7FBEBDFA0, 7FBDBDF6E, 7FBCFDF3B, 7FBC3DF09, 7FBB7DED7, 7FBABDEA5, 7FB9BDE73, 7FB8FDE41, 7FB83DE0E, 7FB73DDDC, 7FB67DDAA, 7FB5BDD78, 7FB4BDD46, 7FB3FDD14, 7FB2FDCE2, 7FB23DCAF, 7FB13DC7D, 7FB07DC4B, 7FAF7DC19, 7FAEBDBE7, 7FADBDBB5, 7FACFDB83, 7FABFDB50, 7FAAFDB1E, 7FAA3DAEC, 7FA93DABA, 7FA87DA88, 7FA77DA56, 7FA67DA24, 7FA57D9F1, 7FA4BD9BF, 7FA3BD98D, 7FA2BD95B, 7FA1BD929, 7FA0BD8F7, 7F9FFD8C5, 7F9EFD893, 7F9DFD861, 7F9CFD82E, 7F9BFD7FC, 7F9AFD7CA, 7F99FD798, 7F98FD766, 7F97FD734, 7F96FD702, 7F95FD6D0, 7F94FD69E, 7F93FD66B, 7F92FD639, 7F91FD607, 7F90FD5D5, 7F8FFD5A3, 7F8EBD571, 7F8DBD53F, 7F8CBD50D, 7F8BBD4DB, 7F8ABD4A9, 7F897D477, 7F887D444, 7F877D412, 7F863D3E0, 7F853D3AE, 7F843D37C, 7F82FD34A, 7F81FD318, 7F80BD2E6, 7F7FBD2B4, 7F7EBD282, 7F7D7D250, 7F7C7D21E, 7F7B3D1EC, 7F7A3D1BA, 7F78FD187, 7F77BD155, 7F76BD123, 7F757D0F1, 7F747D0BF, 7F733D08D, 7F71FD05B, 7F70FD029, 7F6FBCFF7, 7F6E7CFC5, 7F6D3CF93, 7F6C3CF61, 7F6AFCF2F, 7F69BCEFD, 7F687CECB, 7F673CE99, 7F663CE67, 7F64FCE35, 7F63BCE03, 7F627CDD1, 7F613CD9F, 7F5FFCD6D, 7F5EBCD3B, 7F5D7CD09, 7F5C3CCD7, 7F5AFCCA5, 7F59BCC73, 7F587CC41, 7F573CC0F, 7F55FCBDD, 7F547CBAB, 7F533CB79, 7F51FCB47, 7F50BCB15, 7F4F7CAE3, 7F4E3CAB1, 7F4CBCA7F, 7F4B7CA4D, 7F4A3CA1B, 7F48BC9E9, 7F477C9B7, 7F463C985, 7F44BC953, 7F437C921, 7F423C8EF, 7F40BC8BD, 7F3F7C88B, 7F3DFC859, 7F3CBC827, 7F3B3C7F5, 7F39FC7C3, 7F387C791, 7F373C75F, 7F35BC72D, 7F347C6FB, 7F32FC6C9, 7F317C697, 7F303C665, 7F2EBC633, 7F2D3C601, 7F2BFC5CF, 7F2A7C59D, 7F28FC56C, 7F27BC53A, 7F263C508, 7F24BC4D6, 7F233C4A4, 7F21BC472, 7F203C440, 7F1EFC40E, 7F1D7C3DC, 7F1BFC3AA, 7F1A7C378, 7F18FC346, 7F177C314, 7F15FC2E3, 7F147C2B1, 7F12FC27F, 7F117C24D, 7F0FFC21B, 7F0E7C1E9, 7F0CFC1B7, 7F0B3C185, 7F09BC153, 7F083C122, 7F06BC0F0, 7F053C0BE, 7F03BC08C, 7F01FC05A, 7F007C028, 7EFEFBFF6, 7EFD3BFC4, 7EFBBBF92, 7EFA3BF61, 7EF87BF2F, 7EF6FBEFD, 7EF57BECB, 7EF3BBE99, 7EF23BE67, 7EF07BE35, 7EEEFBE04, 7EED3BDD2, 7EEBBBDA0, 7EE9FBD6E, 7EE87BD3C, 7EE6BBD0A, 7EE53BCD9, 7EE37BCA7, 7EE1BBC75, 7EE03BC43, 7EDE7BC11, 7EDCBBBDF, 7EDB3BBAE, 7ED97BB7C, 7ED7BBB4A, 7ED63BB18, 7ED47BAE6, 7ED2BBAB5, 7ED0FBA83, 7ECF3BA51, 7ECDBBA1F, 7ECBFB9ED, 7ECA3B9BC, 7EC87B98A, 7EC6BB958, 7EC4FB926, 7EC33B8F5, 7EC17B8C3, 7EBFBB891, 7EBDFB85F, 7EBC3B82D, 7EBA7B7FC, 7EB8BB7CA, 7EB6FB798, 7EB53B766, 7EB33B735, 7EB17B703, 7EAFBB6D1, 7EADFB69F, 7EAC3B66E, 7EAA7B63C, 7EA87B60A, 7EA6BB5D8, 7EA4FB5A7, 7EA2FB575, 7EA13B543, 7E9F7B511, 7E9D7B4E0, 7E9BBB4AE, 7E99FB47C, 7E97FB44B, 7E963B419, 7E943B3E7, 7E927B3B5, 7E907B384, 7E8EBB352, 7E8CBB320, 7E8AFB2EF, 7E88FB2BD, 7E86FB28B, 7E853B25A, 7E833B228, 7E817B1F6, 7E7F7B1C5, 7E7D7B193, 7E7B7B161, 7E79BB130, 7E77BB0FE, 7E75BB0CC, 7E73BB09B, 7E71FB069, 7E6FFB037, 7E6DFB006, 7E6BFAFD4, 7E69FAFA2, 7E67FAF71, 7E65FAF3F, 7E643AF0D, 7E623AEDC, 7E603AEAA, 7E5E3AE79, 7E5C3AE47, 7E5A3AE15, 7E57FADE4, 7E55FADB2, 7E53FAD80, 7E51FAD4F, 7E4FFAD1D, 7E4DFACEC, 7E4BFACBA, 7E49FAC88, 7E47BAC57, 7E45BAC25, 7E43BABF4, 7E41BABC2, 7E3F7AB91, 7E3D7AB5F, 7E3B7AB2D, 7E393AAFC, 7E373AACA, 7E353AA99, 7E32FAA67, 7E30FAA36, 7E2EBAA04, 7E2CBA9D2, 7E2ABA9A1, 7E287A96F, 7E267A93E, 7E243A90C, 7E21FA8DB, 7E1FFA8A9, 7E1DBA878, 7E1BBA846, 7E197A815, 7E173A7E3, 7E153A7B2, 7E12FA780, 7E10BA74F, 7E0EBA71D, 7E0C7A6EC, 7E0A3A6BA, 7E07FA689, 7E05FA657, 7E03BA626, 7E017A5F4, 7DFF3A5C3, 7DFCFA591, 7DFABA560, 7DF87A52E, 7DF67A4FD, 7DF43A4CB, 7DF1FA49A, 7DEFBA468, 7DED7A437, 7DEB3A405, 7DE8FA3D4, 7DE6BA3A3, 7DE43A371, 7DE1FA340, 7DDFBA30E, 7DDD7A2DD, 7DDB3A2AB, 7DD8FA27A, 7DD6BA249, 7DD43A217, 7DD1FA1E6, 7DCFBA1B4, 7DCD7A183, 7DCAFA152, 7DC8BA120, 7DC67A0EF, 7DC3FA0BD, 7DC1BA08C, 7DBF7A05B, 7DBCFA029, 7DBAB9FF8, 7DB839FC6, 7DB5F9F95, 7DB379F64, 7DB139F32, 7DAEB9F01, 7DAC79ED0, 7DA9F9E9E, 7DA7B9E6D, 7DA539E3C, 7DA2F9E0A, 7DA079DD9, 7D9DF9DA8, 7D9BB9D76, 7D9939D45, 7D96B9D14, 7D9479CE2, 7D91F9CB1, 7D8F79C80, 7D8CF9C4E, 7D8A79C1D, 7D8839BEC, 7D85B9BBB, 7D8339B89, 7D80B9B58, 7D7E39B27, 7D7BB9AF5, 7D7939AC4, 7D76B9A93, 7D7439A62, 7D71B9A30, 7D6F399FF, 7D6CB99CE, 7D6A3999D, 7D67B996B, 7D653993A, 7D62B9909, 7D60398D8, 7D5DB98A6, 7D5B39875, 7D58B9844, 7D55F9813, 7D53797E1, 7D50F97B0, 7D4E7977F, 7D4BB974E, 7D493971D, 7D46B96EB, 7D44396BA, 7D4179689, 7D3EF9658, 7D3C39627, 7D39B95F5, 7D37395C4, 7D3479593, 7D31F9562, 7D2F39531, 7D2CB9500, 7D29F94CF, 7D277949D, 7D24B946C, 7D223943B, 7D1F7940A, 7D1CB93D9, 7D1A393A8, 7D1779377, 7D14B9345, 7D1239314, 7D0F792E3, 7D0CB92B2, 7D0A39281, 7D0779250, 7D04B921F, 7D01F91EE, 7CFF391BD, 7CFCB918C, 7CF9F915A, 7CF739129, 7CF4790F8, 7CF1B90C7, 7CEEF9096, 7CEC39065, 7CE979034, 7CE6B9003, 7CE3F8FD2, 7CE138FA1, 7CDE78F70, 7CDBB8F3F, 7CD8F8F0E, 7CD638EDD, 7CD378EAC, 7CD0B8E7B, 7CCDF8E4A, 7CCAF8E19, 7CC838DE8, 7CC578DB7, 7CC2B8D86, 7CBFB8D55, 7CBCF8D24, 7CBA38CF3, 7CB778CC2, 7CB478C91, 7CB1B8C60, 7CAEF8C2F, 7CABF8BFE, 7CA938BCD, 7CA638B9C, 7CA378B6B, 7CA078B3A, 7C9DB8B09, 7C9AF8AD8, 7C97F8AA7, 7C94F8A76, 7C9238A45, 7C8F38A15, 7C8C789E4, 7C89789B3, 7C86B8982, 7C83B8951, 7C80B8920, 7C7DF88EF, 7C7AF88BE, 7C77F888D, 7C74F885D, 7C723882C, 7C6F387FB, 7C6C387CA, 7C6938799, 7C6638768, 7C6378737, 7C6078707, 7C5D786D6, 7C5A786A5, 7C5778674, 7C5478643, 7C5178612, 7C4E785E2, 7C4B785B1, 7C4878580, 7C457854F, 7C427851E, 7C3F784EE, 7C3C784BD, 7C397848C, 7C367845B, 7C333842A, 7C30383FA, 7C2D383C9, 7C2A38398, 7C2738367, 7C23F8337, 7C20F8306, 7C1DF82D5, 7C1AF82A4, 7C17B8274, 7C14B8243, 7C11B8212, 7C0E781E1, 7C0B781B1, 7C0838180, 7C053814F, 7C023811F, 7BFEF80EE, 7BFBF80BD, 7BF8B808D, 7BF5B805C, 7BF27802B, 7BEF77FFB, 7BEC37FCA, 7BE8F7F99, 7BE5F7F69, 7BE2B7F38, 7BDF77F07, 7BDC77ED7, 7BD937EA6, 7BD5F7E75, 7BD2F7E45, 7BCFB7E14, 7BCC77DE3, 7BC937DB3, 7BC637D82, 7BC2F7D52, 7BBFB7D21, 7BBC77CF0, 7BB937CC0, 7BB5F7C8F, 7BB2B7C5F, 7BAF77C2E, 7BAC37BFE, 7BA8F7BCD, 7BA5B7B9C, 7BA277B6C, 7B9F37B3B, 7B9BF7B0B, 7B98B7ADA, 7B9577AAA, 7B9237A79, 7B8EF7A49, 7B8BB7A18, 7B88779E8, 7B85379B7, 7B81B7987, 7B7E77956, 7B7B37926, 7B77F78F5, 7B74778C5, 7B7137894, 7B6DF7864, 7B6AB7833, 7B6737803, 7B63F77D2, 7B60777A2, 7B5D37771, 7B59F7741, 7B5677711, 7B53376E0, 7B4FB76B0, 7B4C7767F, 7B48F764F, 7B45B761E, 7B42375EE, 7B3EF75BE, 7B3B7758D, 7B37F755D, 7B34B752C, 7B31374FC, 7B2DF74CC, 7B2A7749B, 7B26F746B, 7B237743B, 7B203740A, 7B1CB73DA, 7B19373AA, 7B15B7379, 7B1277349, 7B0EF7319, 7B0B772E8, 7B07F72B8, 7B0477288, 7B00F7257, 7AFD77227, 7AF9F71F7, 7AF6B71C6, 7AF337196, 7AEFB7166, 7AEC37136, 7AE8B7105, 7AE4F70D5, 7AE1770A5, 7ADDF7075, 7ADA77044, 7AD6F7014, 7AD376FE4, 7ACFF6FB4, 7ACC76F83, 7AC8B6F53, 7AC536F23, 7AC1B6EF3, 7ABE36EC3, 7ABA76E92, 7AB6F6E62, 7AB376E32, 7AAFF6E02, 7AAC36DD2, 7AA8B6DA1, 7AA4F6D71, 7AA176D41, 7A9DF6D11, 7A9A36CE1, 7A96B6CB1, 7A92F6C81, 7A8F76C50, 7A8BB6C20, 7A8836BF0, 7A8476BC0, 7A80F6B90, 7A7D36B60, 7A7976B30, 7A75F6B00, 7A7236AD0, 7A6EB6A9F, 7A6AF6A6F, 7A6736A3F, 7A6376A0F, 7A5FF69DF, 7A5C369AF, 7A587697F, 7A54B694F, 7A513691F, 7A4D768EF, 7A49B68BF, 7A45F688F, 7A423685F, 7A3E7682F, 7A3AB67FF, 7A37367CF, 7A337679F, 7A2FB676F, 7A2BF673F, 7A283670F, 7A24766DF, 7A20B66AF, 7A1CB667F, 7A18F664F, 7A153661F, 7A11765EF, 7A0DB65BF, 7A09F658F, 7A063655F, 7A0276530, 79FE76500, 79FAB64D0, 79F6F64A0, 79F336470, 79EF36440, 79EB76410, 79E7B63E0, 79E3B63B0, 79DFF6381, 79DC36351, 79D836321, 79D4762F1, 79D0762C1, 79CCB6291, 79C8B6262, 79C4F6232, 79C136202, 79BD361D2, 79B9361A2, 79B576172, 79B176143, 79ADB6113, 79A9B60E3, 79A5B60B3, 79A1F6084, 799DF6054, 7999F6024, 799635FF4, 799235FC5, 798E35F95, 798A75F65, 798675F35, 798275F06, 797E75ED6, 797A75EA6, 797675E77, 7972B5E47, 796EB5E17, 796AB5DE7, 7966B5DB8, 7962B5D88, 795EB5D58, 795AB5D29, 7956B5CF9, 7952B5CCA, 794EB5C9A, 794AB5C6A, 7946B5C3B, 7942B5C0B, 793EB5BDB, 793AB5BAC, 793675B7C, 793275B4D, 792E75B1D, 792A75AED, 792675ABE, 792235A8E, 791E35A5F, 791A35A2F, 791635A00, 7911F59D0, 790DF59A0, 7909F5971, 7905B5941, 7901B5912, 78FDB58E2, 78F9758B3, 78F575883, 78F135854, 78ED35824, 78E8F57F5, 78E4F57C5, 78E0B5796, 78DCB5766, 78D875737, 78D475708, 78D0356D8, 78CBF56A9, 78C7F5679, 78C3B564A, 78BF7561A, 78BB755EB, 78B7355BC, 78B2F558C, 78AEB555D, 78AAB552D, 78A6754FE, 78A2354CF, 789DF549F, 7899F5470, 7895B5441, 789175411, 788D353E2, 7888F53B3, 7884B5383, 788075354, 787C35325, 7877F52F5, 7873B52C6, 786F75297, 786B35267, 7866F5238, 7862B5209, 785E751D9, 785A351AA, 7855F517B, 7851B514C, 784D3511C, 7848F50ED, 7844B50BE, 78407508F, 783C35060, 7837B5030, 783375001, 782F34FD2, 782AB4FA3, 782674F74, 782234F44, 781DB4F15, 781974EE6, 781534EB7, 7810B4E88, 780C74E59, 7807F4E29, 7803B4DFA, 77FF34DCB, 77FAF4D9C, 77F674D6D, 77F234D3E, 77EDB4D0F, 77E974CE0, 77E4F4CB1, 77E074C81, 77DC34C52, 77D7B4C23, 77D374BF4, 77CEF4BC5, 77CA74B96, 77C5F4B67, 77C1B4B38, 77BD34B09, 77B8B4ADA, 77B434AAB, 77AFF4A7C, 77AB74A4D, 77A6F4A1E, 77A2749EF, 779DF49C0, 779974991, 7794F4962, 779074933, 778BF4904, 7787748D5, 7782F48A6, 777E74877, 7779F4849, 77757481A, 7770F47EB, 776C747BC, 7767F478D, 77637475E, 775EF472F, 775A74700, 7755F46D1, 7751346A3, 774CB4674, 774834645, 7743B4616, 773EF45E7, 773A745B8, 7735F458A, 77317455B, 772CB452C, 7728344FD, 7723744CE, 771EF44A0, 771A74471, 7715B4442, 771134413, 770C743E5, 7707F43B6, 770334387, 76FEB4358, 76F9F432A, 76F5742FB, 76F0B42CC, 76EC3429D, 76E77426F, 76E2B4240, 76DE34211, 76D9741E3, 76D4B41B4, 76D034185, 76CB74157, 76C6B4128, 76C2340F9, 76BD740CB, 76B8B409C, 76B3F406E, 76AF3403F, 76AAB4010, 76A5F3FE2, 76A133FB3, 769C73F85, 7697B3F56, 7692F3F27, 768E33EF9, 768973ECA, 7684B3E9C, 767FF3E6D, 767B33E3F, 767673E10, 7671B3DE2, 766CF3DB3, 766833D85, 766373D56, 765EB3D28, 7659F3CF9, 765533CCB, 765033C9C, 764B73C6E, 7646B3C3F;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 1kx18',
    'CSET read_width_a = 36',
    'CSET read_width_b = 36',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 36',
    'CSET write_width_b = 36',
    'CSET component_name = bmg_72_96ab944b43e5c4d3',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '4dc1499f9f42829523f211ecad7f015f',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_96ab944b43e5c4d3',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '7ae108aae9ca0f79924ec87fd5d5a415',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((40 - 1) downto 0);
  signal in1_1_27: unsigned((40 - 1) downto 0);
  signal y_2_1_concat: unsigned((80 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((40 - 1) downto 0);
    in1 : in std_logic_vector((40 - 1) downto 0);
    y : out std_logic_vector((80 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_cfdc93535e',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 20000, FFF3A0000, FFE6E0000, FFDA60000, FFCDE0000, FFC160000, FFB4A0000, FFA820000, FF9BA0001, FF8F20001, FF8260001, FF75E0001, FF6960001, FF5CE0002, FF5020002, FF43A0002, FF3720002, FF2A60003, FF1DE0003, FF1160003, FF04E0004, FEF820004, FEEBA0005, FEDF20005, FED2A0006, FEC5E0006, FEB960007, FEACE0007, FEA060008, FE93A0008, FE8720009, FE7AA0009, FE6E2000A, FE616000A, FE54E000B, FE486000C, FE3BE000C, FE2F2000D, FE22A000E, FE162000F, FE096000F, FDFCE0010, FDF060011, FDE3E0012, FDD720013, FDCAA0014, FDBE20014, FDB1A0015, FDA4E0016, FD9860017, FD8BE0018, FD7F60019, FD72A001A, FD662001B, FD59A001C, FD4D2001D, FD406001E, FD33E001F, FD2760020, FD1AE0022, FD0E20023, FD01A0024, FCF520025, FCE8A0026, FCDBE0027, FCCF60029, FCC2E002A, FCB66002B, FCA9A002D, FC9D2002E, FC90A002F, FC8420031, FC7760032, FC6AE0033, FC5E60035, FC51E0036, FC4520038, FC38A0039, FC2C2003B, FC1FA003C, FC12E003E, FC066003F, FBF9E0041, FBED60042, FBE0A0044, FBD420046, FBC7A0047, FBBB20049, FBAE6004B, FBA1E004C, FB956004E, FB88E0050, FB7C60052, FB6FA0053, FB6320055, FB56A0057, FB4A20059, FB3D6005B, FB30E005D, FB246005E, FB17E0060, FB0B20062, FAFEA0064, FAF220066, FAE5A0068, FAD92006A, FACC6006C, FABFE006E, FAB360070, FAA6E0072, FA9A20075, FA8DA0077, FA8120079, FA74A007B, FA682007D, FA5B6007F, FA4EE0082, FA4260084, FA35E0086, FA2920088, FA1CA008B, FA102008D, FA03A008F, F9F720092, F9EA60094, F9DDE0097, F9D160099, F9C4E009B, F9B86009E, F9ABA00A0, F99F200A3, F992A00A5, F986200A8, F979A00AA, F96CE00AD, F960600B0, F953E00B2, F947600B5, F93AE00B8, F92E200BA, F921A00BD, F915200C0, F908A00C2, F8FC200C5, F8EF600C8, F8E2E00CB, F8D6600CD, F8C9E00D0, F8BD600D3, F8B0E00D6, F8A4200D9, F897A00DC, F88B200DF, F87EA00E2, F872200E5, F865600E7, F858E00EA, F84C600EE, F83FE00F1, F833600F4, F826E00F7, F81A200FA, F80DA00FD, F80120100, F7F4A0103, F7E820106, F7DBA010A, F7CEE010D, F7C260110, F7B5E0113, F7A960116, F79CE011A, F7906011D, F783A0120, F77720124, F76AA0127, F75E2012A, F751A012E, F74520131, F738A0135, F72BE0138, F71F6013C, F712E013F, F70660143, F6F9E0146, F6ED6014A, F6E0E014D, F6D420151, F6C7A0155, F6BB20158, F6AEA015C, F6A22015F, F695A0163, F68920167, F67C6016B, F66FE016E, F66360172, F656E0176, F64A6017A, F63DE017E, F63160181, F624E0185, F61860189, F60BA018D, F5FF20191, F5F2A0195, F5E620199, F5D9A019D, F5CD201A1, F5C0A01A5, F5B4201A9, F5A7A01AD, F59AE01B1, F58E601B5, F581E01B9, F575601BD, F568E01C1, F55C601C6, F54FE01CA, F543601CE, F536E01D2, F52A601D6, F51DE01DB, F511201DF, F504A01E3, F4F8201E8, F4EBA01EC, F4DF201F0, F4D2A01F5, F4C6201F9, F4B9A01FE, F4AD20202, F4A0A0206, F4942020B, F487A020F, F47B20214, F46EA0218, F461E021D, F45560222, F448E0226, F43C6022B, F42FE022F, F42360234, F416E0239, F40A6023D, F3FDE0242, F3F160247, F3E4E024C, F3D860250, F3CBE0255, F3BF6025A, F3B2E025F, F3A660264, F399E0268, F38D6026D, F380E0272, F37460277, F367E027C, F35B60281, F34EE0286, F3426028B, F335E0290, F32960295, F31CE029A, F3106029F, F303E02A4, F2F7602A9, F2EAE02AF, F2DE602B4, F2D1E02B9, F2C5602BE, F2B8E02C3, F2AC602C8, F29FE02CE, F293602D3, F286E02D8, F27A602DE, F26DE02E3, F261602E8, F254E02EE, F248602F3, F23BE02F8, F22F602FE, F222E0303, F21660309, F209E030E, F1FD60314, F1F0E0319, F1E46031F, F1D7E0324, F1CB6032A, F1BEE032F, F1B260335, F1A5E033B, F19960340, F18CE0346, F1806034C, F173E0351, F16760357, F15B2035D, F14EA0362, F14220368, F135A036E, F12920374, F11CA037A, F11020380, F103A0385, F0F72038B, F0EAA0391, F0DE20397, F0D1A039D, F0C5203A3, F0B8E03A9, F0AC603AF, F09FE03B5, F093603BB, F086E03C1, F07A603C7, F06DE03CD, F061603D4, F054E03DA, F048A03E0, F03C203E6, F02FA03EC, F023203F2, F016A03F9, F00A203FF, EFFDA0405, EFF12040C, EFE4A0412, EFD860418, EFCBE041F, EFBF60425, EFB2E042B, EFA660432, EF99E0438, EF8D6043F, EF8120445, EF74A044C, EF6820452, EF5BA0459, EF4F2045F, EF42A0466, EF366046C, EF29E0473, EF1D6047A, EF10E0480, EF0460487, EEF7E048E, EEEBA0494, EEDF2049B, EED2A04A2, EEC6204A8, EEB9A04AF, EEAD604B6, EEA0E04BD, EE94604C4, EE87E04CA, EE7B604D1, EE6F204D8, EE62A04DF, EE56204E6, EE49A04ED, EE3D604F4, EE30E04FB, EE2460502, EE17E0509, EE0B60510, EDFF20517, EDF2A051E, EDE620525, EDD9A052C, EDCD60534, EDC0E053B, EDB460542, EDA7E0549, ED9BA0550, ED8F20557, ED82A055F, ED7620566, ED69E056D, ED5D60575, ED50E057C, ED4460583, ED382058B, ED2BA0592, ED1F20599, ED12E05A1, ED06605A8, ECF9E05B0, ECED605B7, ECE1205BF, ECD4A05C6, ECC8205CE, ECBBE05D5, ECAF605DD, ECA2E05E5, EC96A05EC, EC8A205F4, EC7DA05FB, EC7160603, EC64E060B, EC5860613, EC4C2061A, EC3FA0622, EC332062A, EC26E0632, EC1A60639, EC0DE0641, EC01A0649, EBF520651, EBE8A0659, EBDC60661, EBCFE0669, EBC360670, EBB720678, EBAAA0680, EB9E60688, EB91E0690, EB8560698, EB79206A1, EB6CA06A9, EB60206B1, EB53E06B9, EB47606C1, EB3B206C9, EB2EA06D1, EB22206D9, EB15E06E2, EB09606EA, EAFD206F2, EAF0A06FA, EAE460703, EAD7E070B, EACB60713, EABF2071C, EAB2A0724, EAA66072C, EA99E0735, EA8DA073D, EA8120746, EA74A074E, EA6860756, EA5BE075F, EA4FA0767, EA4320770, EA36E0779, EA2A60781, EA1E2078A, EA11A0792, EA056079B, E9F8E07A4, E9ECA07AC, E9E0207B5, E9D3E07BE, E9C7607C6, E9BB207CF, E9AEA07D8, E9A2607E1, E995E07E9, E989A07F2, E97D207FB, E970E0804, E9646080D, E95820816, E94BA081F, E93F60827, E932E0830, E926A0839, E91A20842, E90DE084B, E90160854, E8F52085D, E8E8E0866, E8DC60870, E8D020879, E8C3A0882, E8B76088B, E8AAE0894, E89EA089D, E892608A6, E885E08B0, E879A08B9, E86D208C2, E860E08CB, E854A08D5, E848208DE, E83BE08E7, E82F608F1, E823208FA, E816E0903, E80A6090D, E7FE20916, E7F1A0920, E7E560929, E7D920933, E7CCA093C, E7C060946, E7B42094F, E7A7A0959, E79B60962, E78F2096C, E782A0975, E7766097F, E76A20989, E75DA0992, E7516099C, E745209A6, E738A09AF, E72C609B9, E720209C3, E713A09CD, E707609D7, E6FB209E0, E6EEE09EA, E6E2609F4, E6D6209FE, E6C9E0A08, E6BD60A12, E6B120A1C, E6A4E0A26, E698A0A30, E68C20A3A, E67FE0A44, E673A0A4E, E66760A58, E65AE0A62, E64EA0A6C, E64260A76, E63620A80, E629A0A8A, E61D60A94, E61120A9E, E604E0AA9, E5F860AB3, E5EC20ABD, E5DFE0AC7, E5D3A0AD2, E5C760ADC, E5BAE0AE6, E5AEA0AF0, E5A260AFB, E59620B05, E589E0B10, E57D60B1A, E57120B24, E564E0B2F, E558A0B39, E54C60B44, E54020B4E, E533E0B59, E52760B63, E51B20B6E, E50EE0B78, E502A0B83, E4F660B8E, E4EA20B98, E4DDE0BA3, E4D160BAE, E4C520BB8, E4B8E0BC3, E4ACA0BCE, E4A060BD8, E49420BE3, E487E0BEE, E47BA0BF9, E46F60C04, E46320C0E, E456A0C19, E44A60C24, E43E20C2F, E431E0C3A, E425A0C45, E41960C50, E40D20C5B, E400E0C66, E3F4A0C71, E3E860C7C, E3DC20C87, E3CFE0C92, E3C3A0C9D, E3B760CA8, E3AB20CB3, E39EE0CBE, E392A0CC9, E38660CD5, E37A20CE0, E36DE0CEB, E361A0CF6, E35560D02, E34920D0D, E33CE0D18, E330A0D23, E32460D2F, E31820D3A, E30BE0D45, E2FFA0D51, E2F360D5C, E2E720D68, E2DAE0D73, E2CEA0D7F, E2C260D8A, E2B620D95, E2A9E0DA1, E29DA0DAD, E29160DB8, E28560DC4, E27920DCF, E26CE0DDB, E260A0DE6, E25460DF2, E24820DFE, E23BE0E09, E22FA0E15, E22360E21, E21760E2D, E20B20E38, E1FEE0E44, E1F2A0E50, E1E660E5C, E1DA20E68, E1CDE0E73, E1C1E0E7F, E1B5A0E8B, E1A960E97, E19D20EA3, E190E0EAF, E184A0EBB, E178A0EC7, E16C60ED3, E16020EDF, E153E0EEB, E147A0EF7, E13BA0F03, E12F60F0F, E12320F1B, E116E0F27, E10AA0F34, E0FEA0F40, E0F260F4C, E0E620F58, E0D9E0F64, E0CDE0F71, E0C1A0F7D, E0B560F89, E0A920F95, E09D20FA2, E090E0FAE, E084A0FBA, E07860FC7, E06C60FD3, E06020FE0, E053E0FEC, E047E0FF8, E03BA1005, E02F61011, E0236101E, E0172102A, E00AE1037, DFFEE1043, DFF2A1050, DFE66105D, DFDA61069, DFCE21076, DFC1E1083, DFB5E108F, DFA9A109C, DF9D610A9, DF91610B5, DF85210C2, DF78E10CF, DF6CE10DC, DF60A10E8, DF54A10F5, DF4861102, DF3C2110F, DF302111C, DF23E1129, DF17E1136, DF0BA1143, DEFFA1150, DEF36115D, DEE72116A, DEDB21177, DECEE1184, DEC2E1191, DEB6A119E, DEAAA11AB, DE9E611B8, DE92611C5, DE86211D2, DE7A211DF, DE6DE11EC, DE61E11FA, DE55A1207, DE49A1214, DE3D61221, DE316122F, DE252123C, DE1921249, DE0CE1256, DE00E1264, DDF4A1271, DDE8A127F, DDDC6128C, DDD061299, DDC4612A7, DDB8212B4, DDAC212C2, DD9FE12CF, DD93E12DD, DD87A12EA, DD7BA12F8, DD6FA1305, DD6361313, DD5761321, DD4B2132E, DD3F2133C, DD3321349, DD26E1357, DD1AE1365, DD0EE1373, DD02A1380, DCF6A138E, DCEAA139C, DCDE613AA, DCD2613B7, DCC6613C5, DCBA213D3, DCAE213E1, DCA2213EF, DC95E13FD, DC89E140B, DC7DE1419, DC71A1426, DC65A1434, DC59A1442, DC4DA1450, DC416145E, DC356146D, DC296147B, DC1D61489, DC1121497, DC05214A5, DBF9214B3, DBED214C1, DBE0E14CF, DBD4E14DE, DBC8E14EC, DBBCE14FA, DBB0E1508, DBA4A1517, DB98A1525, DB8CA1533, DB80A1541, DB74A1550, DB686155E, DB5C6156D, DB506157B, DB4461589, DB3861598, DB2C615A6, DB20615B5, DB14215C3, DB08215D2, DAFC215E0, DAF0215EF, DAE4215FD, DAD82160C, DACC2161B, DAC021629, DAB421638, DAA7E1646, DA9BE1655, DA8FE1664, DA83E1673, DA77E1681, DA6BE1690, DA5FE169F, DA53E16AE, DA47E16BC, DA3BE16CB, DA2FE16DA, DA23E16E9, DA17E16F8, DA0BE1707, D9FFE1716, D9F3E1724, D9E7E1733, D9DBE1742, D9CFE1751, D9C3E1760, D9B7E176F, D9ABE177E, D99FE178E, D993E179D, D987E17AC, D97BE17BB, D96FE17CA, D963E17D9, D957E17E8, D94C217F7, D94021807, D93421816, D92821825, D91C21834, D91021844, D90421853, D8F821862, D8EC21872, D8E061881, D8D461890, D8C8618A0, D8BC618AF, D8B0618BF, D8A4618CE, D898A18DE, D88CA18ED, D880A18FC, D874A190C, D868A191C, D85CA192B, D850E193B, D844E194A, D838E195A, D82CE196A, D82121979, D81521989, D80921999, D7FD219A8, D7F1619B8, D7E5619C8, D7D9619D7, D7CD619E7, D7C1A19F7, D7B5A1A07, D7A9A1A17, D79DE1A27, D791E1A36, D785E1A46, D779E1A56, D76E21A66, D76221A76, D75621A86, D74A61A96, D73E61AA6, D732A1AB6, D726A1AC6, D71AA1AD6, D70EE1AE6, D702E1AF6, D6F6E1B06, D6EB21B16, D6DF21B27, D6D361B37, D6C761B47, D6BB61B57, D6AFA1B67, D6A3A1B78, D697E1B88, D68BE1B98, D68021BA8, D67421BB9, D66821BC9, D65C61BD9, D65061BEA, D644A1BFA, D638A1C0A, D62CE1C1B, D620E1C2B, D61521C3C, D60921C4C, D5FD61C5D, D5F161C6D, D5E5A1C7E, D5D9A1C8E, D5CDE1C9F, D5C221CAF, D5B621CC0, D5AA61CD1, D59E61CE1, D592A1CF2, D586A1D03, D57AE1D13, D56F21D24, D56321D35, D55761D46, D54B61D56, D53FA1D67, D533E1D78, D527E1D89, D51C21D99, D51061DAA, D50461DBB, D4F8A1DCC, D4ECE1DDD, D4E0E1DEE, D4D521DFF, D4C961E10, D4BD61E21, D4B1A1E32, D4A5E1E43, D499E1E54, D48E21E65, D48261E76, D47661E87, D46AA1E98, D45EE1EA9, D45321EBA, D44721ECC, D43B61EDD, D42FA1EEE, D423E1EFF, D41821F10, D40C21F22, D40061F33, D3F4A1F44, D3E8E1F56, D3DD21F67, D3D121F78, D3C561F8A, D3B9A1F9B, D3ADE1FAC, D3A221FBE, D39661FCF, D38A61FE1, D37EA1FF2, D372E2004, D36722015, D35B62027, D34FA2038, D343E204A, D3382205B, D32C6206D, D3206207F, D314A2090, D308E20A2, D2FD220B3, D2F1620C5, D2E5A20D7, D2D9E20E9, D2CE220FA, D2C26210C, D2B6A211E, D2AAE2130, D29F22141, D29362153, D287A2165, D27BE2177, D27022189, D2646219B, D258A21AD, D24CE21BF, D241221D1, D235621E3, D229A21F5, D21DE2207, D21262219, D206A222B, D1FAE223D, D1EF2224F, D1E362261, D1D7A2273, D1CBE2285, D1C022297, D1B4622A9, D1A8E22BC, D19D222CE, D191622E0, D185A22F2, D179E2305, D16E22317, D162A2329, D156E233B, D14B2234E, D13F62360, D133A2373, D12822385, D11C62397, D110A23AA, D104E23BC, D0F9623CF, D0EDA23E1, D0E1E23F4, D0D622406, D0CAA2419, D0BEE242B, D0B32243E, D0A762450, D09BE2463, D09022476, D08462488, D078E249B, D06D224AE, D061624C0, D055E24D3, D04A224E6, D03E624F8, D032E250B, D0272251E, D01BA2531, D00FE2544, D00422556, CFF8A2569, CFECE257C, CFE16258F, CFD5A25A2, CFC9E25B5, CFBE625C8, CFB2A25DB, CFA7225EE, CF9B62601, CF8FE2614, CF8422627, CF78A263A, CF6CE264D, CF6162660, CF55A2673, CF4A22686, CF3E62699, CF32E26AC, CF27226C0, CF1BA26D3, CF0FE26E6;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 1kx18',
    'CSET read_width_a = 36',
    'CSET read_width_b = 36',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 36',
    'CSET write_width_b = 36',
    'CSET component_name = bmg_72_d9e8b569ea27a9e5',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '82f3dbff5ea322a79e6a204c8f60df33',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_d9e8b569ea27a9e5',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 5A82A95F6, 5A79A95D3, 5A70E95AF, 5A67E958C, 5A5F29568, 5A5629545, 5A4D29521, 5A44694FE, 5A3B694DA, 5A32694B7, 5A29A9493, 5A20A9470, 5A17A944D, 5A0EE9429, 5A05E9406, 59FCE93E2, 59F3E93BF, 59EB2939C, 59E229379, 59D929355, 59D029332, 59C72930F, 59BE692EB, 59B5692C8, 59AC692A5, 59A369282, 599A6925F, 59916923B, 598869218, 597F691F5, 5976691D2, 596DA91AF, 5964A918C, 595BA9169, 5952A9146, 5949A9122, 5940A90FF, 5937A90DC, 592E690B9, 592569096, 591C69073, 591369050, 590A6902D, 59016900A, 58F868FE7, 58EF68FC5, 58E668FA2, 58DD28F7F, 58D428F5C, 58CB28F39, 58C228F16, 58B928EF3, 58AFE8ED0, 58A6E8EAE, 589DE8E8B, 5894E8E68, 588BA8E45, 5882A8E22, 5879A8E00, 587068DDD, 586768DBA, 585E68D98, 585528D75, 584C28D52, 5842E8D2F, 5839E8D0D, 5830E8CEA, 5827A8CC8, 581EA8CA5, 581568C82, 580C68C60, 580328C3D, 57FA28C1B, 57F0E8BF8, 57E7E8BD6, 57DEA8BB3, 57D5A8B91, 57CC68B6E, 57C328B4C, 57BA28B29, 57B0E8B07, 57A7E8AE4, 579EA8AC2, 579568A9F, 578C68A7D, 578328A5B, 5779E8A38, 5770E8A16, 5767A89F4, 575E689D1, 5755289AF, 574C2898D, 5742E896A, 5739A8948, 573068926, 572768904, 571E288E2, 5714E88BF, 570BA889D, 57026887B, 56F928859, 56EFE8837, 56E6E8815, 56DDA87F2, 56D4687D0, 56CB287AE, 56C1E878C, 56B8A876A, 56AF68748, 56A628726, 569CE8704, 5693A86E2, 568A686C0, 56812869E, 5677E867C, 566EA865A, 566568638, 565BE8616, 5652A85F4, 5649685D2, 5640285B1, 5636E858F, 562DA856D, 56246854B, 561AE8529, 5611A8507, 5608684E6, 55FF284C4, 55F5E84A2, 55EC68480, 55E32845F, 55D9E843D, 55D06841B, 55C7283F9, 55BDE83D8, 55B4A83B6, 55AB28394, 55A1E8373, 559868351, 558F28330, 5585E830E, 557C682EC, 5573282CB, 5569A82A9, 556068288, 555728266, 554DA8245, 554468223, 553AE8202, 5531A81E0, 5528281BF, 551EE819D, 55156817C, 550BE815B, 5502A8139, 54F928118, 54EFE80F6, 54E6680D5, 54DCE80B4, 54D3A8092, 54CA28071, 54C0A8050, 54B76802F, 54ADE800D, 54A467FEC, 549B27FCB, 5491A7FAA, 548827F88, 547EE7F67, 547567F46, 546BE7F25, 546267F04, 5458E7EE3, 544FA7EC2, 544627EA0, 543CA7E7F, 543327E5E, 5429A7E3D, 542027E1C, 5416A7DFB, 540D67DDA, 5403E7DB9, 53FA67D98, 53F0E7D77, 53E767D56, 53DDE7D35, 53D467D14, 53CAE7CF3, 53C167CD3, 53B7E7CB2, 53AE67C91, 53A4E7C70, 539B67C4F, 5391E7C2E, 538867C0D, 537EA7BED, 537527BCC, 536BA7BAB, 536227B8A, 5358A7B6A, 534F27B49, 5345A7B28, 533BE7B08, 533267AE7, 5328E7AC6, 531F67AA6, 5315E7A85, 530C27A64, 5302A7A44, 52F927A23, 52EFA7A03, 52E5E79E2, 52DC679C1, 52D2E79A1, 52C927980, 52BFA7960, 52B62793F, 52AC6791F, 52A2E78FE, 5299278DE, 528FA78BE, 52862789D, 527C6787D, 5272E785C, 52692783C, 525FA781C, 5255E77FB, 524C677DB, 5242A77BB, 52392779A, 522F6777A, 5225E775A, 521C2773A, 5212A7719, 5208E76F9, 51FF276D9, 51F5A76B9, 51EBE7699, 51E267678, 51D8A7658, 51CEE7638, 51C567618, 51BBA75F8, 51B1E75D8, 51A8675B8, 519EA7598, 5194E7578, 518B27558, 5181A7538, 5177E7518, 516E274F8, 5164674D8, 515AE74B8, 515127498, 514767478, 513DA7458, 5133E7438, 512A27418, 5120673F8, 5116E73D8, 510D273B9, 510367399, 50F9A7379, 50EFE7359, 50E627339, 50DC6731A, 50D2A72FA, 50C8E72DA, 50BF272BA, 50B56729B, 50ABA727B, 50A1E725B, 50982723C, 508E6721C, 5084A71FC, 507AE71DD, 5071271BD, 50676719E, 505D6717E, 5053A715E, 5049E713F, 50402711F, 503667100, 502CA70E0, 5022A70C1, 5018E70A2, 500F27082, 500567063, 4FFBA7043, 4FF1A7024, 4FE7E7004, 4FDE26FE5, 4FD466FC6, 4FCA66FA6, 4FC0A6F87, 4FB6E6F68, 4FACE6F48, 4FA326F29, 4F9966F0A, 4F8F66EEB, 4F85A6ECB, 4F7BA6EAC, 4F71E6E8D, 4F6826E6E, 4F5E26E4F, 4F5466E2F, 4F4A66E10, 4F40A6DF1, 4F36A6DD2, 4F2CE6DB3, 4F22E6D94, 4F1926D75, 4F0F26D56, 4F0566D37, 4EFB66D18, 4EF1A6CF9, 4EE7A6CDA, 4EDDA6CBB, 4ED3E6C9C, 4EC9E6C7D, 4EC026C5E, 4EB626C3F, 4EAC26C20, 4EA266C01, 4E9866BE2, 4E8E66BC3, 4E84A6BA5, 4E7AA6B86, 4E70A6B67, 4E66E6B48, 4E5CE6B29, 4E52E6B0B, 4E48E6AEC, 4E3EE6ACD, 4E3526AAE, 4E2B26A90, 4E2126A71, 4E1726A52, 4E0D26A34, 4E0366A15, 4DF9669F6, 4DEF669D8, 4DE5669B9, 4DDB6699B, 4DD16697C, 4DC76695D, 4DBD6693F, 4DB366920, 4DA966902, 4D9FA68E3, 4D95A68C5, 4D8BA68A7, 4D81A6888, 4D77A686A, 4D6DA684B, 4D636682D, 4D596680E, 4D4F667F0, 4D45667D2, 4D3B667B3, 4D3166795, 4D2766777, 4D1D66758, 4D136673A, 4D096671C, 4CFF666FE, 4CF5266DF, 4CEB266C1, 4CE1266A3, 4CD726685, 4CCD26667, 4CC2E6649, 4CB8E662A, 4CAEE660C, 4CA4E65EE, 4C9AA65D0, 4C90A65B2, 4C86A6594, 4C7CA6576, 4C7266558, 4C686653A, 4C5E6651C, 4C54264FE, 4C4A264E0, 4C3FE64C2, 4C35E64A4, 4C2BE6486, 4C21A6468, 4C17A644A, 4C0D6642C, 4C036640F, 4BF9663F1, 4BEF263D3, 4BE5263B5, 4BDAE6397, 4BD0E637A, 4BC6A635C, 4BBCA633E, 4BB266320, 4BA866303, 4B9E262E5, 4B93E62C7, 4B89E62AA, 4B7FA628C, 4B75A626E, 4B6B66251, 4B6166233, 4B5726215, 4B4CE61F8, 4B42E61DA, 4B38A61BD, 4B2E6619F, 4B2466182, 4B1A26164, 4B0FE6147, 4B05A6129, 4AFBA610C, 4AF1660EE, 4AE7260D1, 4ADCE60B3, 4AD2E6096, 4AC8A6079, 4ABE6605B, 4AB42603E, 4AA9E6021, 4A9FE6003, 4A95A5FE6, 4A8B65FC9, 4A8125FAC, 4A76E5F8E, 4A6CA5F71, 4A6265F54, 4A5825F37, 4A4E25F19, 4A43E5EFC, 4A39A5EDF, 4A2F65EC2, 4A2525EA5, 4A1AE5E88, 4A10A5E6B, 4A0665E4E, 49FC25E31, 49F1E5E13, 49E7A5DF6, 49DD65DD9, 49D325DBC, 49C8E5D9F, 49BE65D82, 49B425D66, 49A9E5D49, 499FA5D2C, 499565D0F, 498B25CF2, 4980E5CD5, 4976A5CB8, 496C25C9B, 4961E5C7E, 4957A5C62, 494D65C45, 494325C28, 4938A5C0B, 492E65BEF, 492425BD2, 4919E5BB5, 490F65B98, 490525B7C, 48FAE5B5F, 48F0A5B42, 48E625B26, 48DBE5B09, 48D1A5AED, 48C725AD0, 48BCE5AB3, 48B265A97, 48A825A7A, 489DE5A5E, 489365A41, 488925A25, 487EA5A08, 4874659EC, 486A259CF, 485FA59B3, 485565997, 484AE597A, 4840A595E, 483625941, 482BE5925, 482165909, 4817258EC, 480CA58D0, 4802658B4, 47F7E5898, 47ED6587B, 47E32585F, 47D8A5843, 47CE65827, 47C3E580A, 47B9657EE, 47AF257D2, 47A4A57B6, 479A2579A, 478FE577E, 478565762, 477AE5746, 4770A572A, 47662570D, 475BA56F1, 4751656D5, 4746E56B9, 473C6569D, 4731E5681, 472765666, 471D2564A, 4712A562E, 470825612, 46FDA55F6, 46F3255DA, 46E8E55BE, 46DE655A2, 46D3E5587, 46C96556B, 46BEE554F, 46B465533, 46A9E5517, 469F654FC, 4694E54E0, 468AA54C4, 4680254A9, 4675A548D, 466B25471, 4660A5456, 46562543A, 464BA541E, 464125403, 4636A53E7, 462C253CC, 4621A53B0, 461725394, 460C65379, 4601E535D, 45F765342, 45ECE5327, 45E26530B, 45D7E52F0, 45CD652D4, 45C2E52B9, 45B86529D, 45ADA5282, 45A325267, 4598A524B, 458E25230, 4583A5215, 4578E51F9, 456E651DE, 4563E51C3, 4559651A8, 454EA518C, 454425171, 4539A5156, 452F2513B, 452465120, 4519E5105, 450F650E9, 4504A50CE, 44FA250B3, 44EFA5098, 44E4E507D, 44DA65062, 44CFE5047, 44C52502C, 44BAA5011, 44AFE4FF6, 44A564FDB, 449AE4FC0, 449024FA5, 4485A4F8A, 447AE4F6F, 447064F54, 4465A4F3A, 445B24F1F, 445064F04, 4445E4EE9, 443B24ECE, 4430A4EB4, 4425E4E99, 441B64E7E, 4410A4E63, 4405E4E49, 43FB64E2E, 43F0A4E13, 43E624DF8, 43DB64DDE, 43D0A4DC3, 43C624DA9, 43BB64D8E, 43B0A4D73, 43A624D59, 439B64D3E, 4390A4D24, 438624D09, 437B64CEF, 4370A4CD4, 436624CBA, 435B64C9F, 4350A4C85, 4345E4C6A, 433B64C50, 4330A4C36, 4325E4C1B, 431B24C01, 431064BE6, 4305E4BCC, 42FB24BB2, 42F064B98, 42E5A4B7D, 42DAE4B63, 42D024B49, 42C564B2F, 42BAE4B14, 42B024AFA, 42A564AE0, 429AA4AC6, 428FE4AAC, 428524A91, 427A64A77, 426FA4A5D, 4264E4A43, 425A24A29, 424F64A0F, 4244A49F5, 4239E49DB, 422F249C1, 4224649A7, 4219A498D, 420EE4973, 420424959, 41F96493F, 41EEA4925, 41E3E490C, 41D9248F2, 41CE248D8, 41C3648BE, 41B8A48A4, 41ADE488A, 41A324871, 419864857, 418DA483D, 4182A4823, 4177E480A, 416D247F0, 4162647D6, 4157A47BD, 414CA47A3, 4141E4789, 413724770, 412C64756, 41216473C, 4116A4723, 410BE4709, 4101246F0, 40F6246D6, 40EB646BD, 40E0A46A3, 40D5A468A, 40CAE4670, 40C024657, 40B52463E, 40AA64624, 409F6460B, 4094A45F1, 4089E45D8, 407EE45BF, 4074245A5, 40692458C, 405E64573, 405364559, 4048A4540, 403DE4527, 4032E450E, 4028244F5, 401D244DB, 4012644C2, 4007644A9, 3FFC64490, 3FF1A4477, 3FE6A445E, 3FDBE4445, 3FD0E442C, 3FC624413, 3FBB243F9, 3FB0643E0, 3FA5643C7, 3F9A643AE, 3F8FA4396, 3F84A437D, 3F79A4364, 3F6EE434B, 3F63E4332, 3F58E4319, 3F4E24300, 3F43242E7, 3F38242CE, 3F2D642B6, 3F226429D, 3F1764284, 3F0C6426B, 3F01A4252, 3EF6A423A, 3EEBA4221, 3EE0A4208, 3ED5E41F0, 3ECAE41D7, 3EBFE41BE, 3EB4E41A6, 3EA9E418D, 3E9EE4174, 3E942415C, 3E8924143, 3E7E2412B, 3E7324112, 3E68240FA, 3E5D240E1, 3E52240C9, 3E47240B0, 3E3C64098, 3E316407F, 3E2664067, 3E1B6404F, 3E1064036, 3E056401E, 3DFA64005, 3DEF63FED, 3DE463FD5, 3DD963FBD, 3DCE63FA4, 3DC363F8C, 3DB863F74, 3DAD63F5C, 3DA263F43, 3D9763F2B, 3D8C63F13, 3D8123EFB, 3D7623EE3, 3D6B23ECA, 3D6023EB2, 3D5523E9A, 3D4A23E82, 3D3F23E6A, 3D3423E52, 3D2923E3A, 3D1DE3E22, 3D12E3E0A, 3D07E3DF2, 3CFCE3DDA, 3CF1E3DC2, 3CE6A3DAA, 3CDBA3D92, 3CD0A3D7A, 3CC5A3D63, 3CBAA3D4B, 3CAF63D33, 3CA463D1B, 3C9963D03, 3C8E23CEC, 3C8323CD4, 3C7823CBC, 3C6D23CA4, 3C61E3C8D, 3C56E3C75, 3C4BE3C5D, 3C40A3C45, 3C35A3C2E, 3C2AA3C16, 3C1F63BFF, 3C1463BE7, 3C0923BCF, 3BFE23BB8, 3BF323BA0, 3BE7E3B89, 3BDCE3B71, 3BD1A3B5A, 3BC6A3B42, 3BBB63B2B, 3BB063B13, 3BA523AFC, 3B9A23AE4, 3B8F23ACD, 3B83E3AB6, 3B78E3A9E, 3B6DA3A87, 3B6263A70, 3B5763A58, 3B4C23A41, 3B4123A2A, 3B35E3A13, 3B2AE39FB, 3B1FA39E4, 3B14A39CD, 3B09639B6, 3AFE2399E, 3AF323987, 3AE7E3970, 3ADCA3959, 3AD1A3942, 3AC66392B, 3ABB63914, 3AB0238FD, 3AA4E38E6, 3A99E38CF, 3A8EA38B8, 3A83638A1, 3A782388A, 3A6D23873, 3A61E385C, 3A56A3845, 3A4B6382E, 3A4063817, 3A3523800, 3A29E37E9, 3A1EA37D3, 3A13A37BC, 3A08637A5, 39FD2378E, 39F1E3777, 39E6A3761, 39DBA374A, 39D063733, 39C52371D, 39B9E3706, 39AEA36EF, 39A3636D9, 3998236C2, 398CE36AB, 3981E3695, 3976A367E, 396B63668, 396023651, 3954E363B, 3949A3624, 393E6360E, 3933235F7, 3927E35E1, 391CA35CA, 3911635B4, 39062359D, 38FAE3587, 38EFA3571, 38E46355A, 38D923544, 38CDE352E, 38C2A3517, 38B763501, 38AC234EB, 38A0E34D5, 3895A34BE, 388A634A8, 387EE3492, 3873A347C, 386863466, 385D2344F, 3851E3439, 3846A3423, 383B6340D, 382FE33F7, 3824A33E1, 3819633CB, 380E233B5, 3802E339F, 37F7A3389, 37EC23373, 37E0E335D, 37D5A3347, 37CA63331, 37BEE331B, 37B3A3305, 37A8632EF, 379D232DA, 3791A32C4, 3786632AE, 377B23298, 376FA3282, 37646326D, 375923257, 374DE3241, 37426322B, 373723216, 372BA3200, 3720631EA, 3715231D5, 3709A31BF, 36FE631AA, 36F323194, 36E7A317E, 36DC63169, 36D0E3153, 36C5A313E, 36BA63128, 36AEE3113, 36A3A30FD, 3698230E8, 368CE30D2, 3681630BD, 3676230A8, 366AA3092, 365F6307D, 3653E3068, 3648A3052, 363D2303D, 3631E3028, 362663012, 361B22FFD, 360FA2FE8, 360422FD3, 35F8E2FBD, 35ED62FA8, 35E222F93, 35D6A2F7E, 35CB22F69, 35BFE2F54, 35B462F3F, 35A922F2A, 359DA2F14, 359222EFF, 3586E2EEA, 357B62ED5, 356FE2EC0, 3564A2EAB, 355922E96, 354DA2E82, 354262E6D, 3536E2E58, 352B62E43, 351FE2E2E, 3514A2E19, 350922E04, 34FDA2DEF, 34F222DDB, 34E6E2DC6, 34DB62DB1, 34CFE2D9C, 34C462D88, 34B8E2D73, 34ADA2D5E, 34A222D4A, 3496A2D35, 348B22D20, 347FA2D0C, 347462CF7, 3468E2CE2, 345D62CCE, 3451E2CB9, 344662CA5, 343AE2C90, 342F62C7C, 3423E2C67, 341862C53, 340D22C3E, 3401A2C2A, 33F622C15, 33EAA2C01, 33DF22BED, 33D3A2BD8, 33C822BC4, 33BCA2BB0, 33B122B9B, 33A5A2B87, 339A22B73, 338EA2B5F, 338322B4A, 3377A2B36, 336C22B22, 3360A2B0E, 335522AFA, 3349A2AE5, 333E22AD1, 3332A2ABD, 332722AA9, 331B62A95, 330FE2A81, 330462A6D, 32F8E2A59, 32ED62A45, 32E1E2A31, 32D662A1D, 32CAE2A09, 32BF629F5, 32B3A29E1, 32A8229CD, 329CA29B9, 3291229A5, 3285A2992, 327A2297E, 326E6296A, 3262E2956, 325762942, 324BE292F, 32402291B, 3234A2907, 3229228F3, 321DA28E0, 3211E28CC, 3206628B8, 31FAE28A5, 31EF62891, 31E3A287E, 31D82286A, 31CCA2856, 31C0E2843, 31B56282F, 31A9E281C, 319E62808, 3192A27F5, 3187227E1, 317B627CE, 316FE27BB, 3164627A7, 3158A2794, 314D22780, 3141A276D, 3135E275A, 312A62746, 311EA2733, 311322720, 3107A270D;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 1kx18',
    'CSET read_width_a = 36',
    'CSET read_width_b = 36',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 36',
    'CSET write_width_b = 36',
    'CSET component_name = bmg_72_02a980c9aa9b0535',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'eb3a955c2b69471932dd583159098148',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_02a980c9aa9b0535',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = A57DA95F6, A574E961A, A56BE963D, A56329661, A55A29684, A551696A8, A548696CC, A53FA96EF, A536A9713, A52DE9737, A524E975A, A51C2977E, A513697A2, A50A697C5, A501A97E9, A4F8A980D, A4EFE9831, A4E729854, A4DE69878, A4D56989C, A4CCA98C0, A4C3E98E4, A4BAE9907, A4B22992B, A4A96994F, A4A0A9973, A497E9997, A48EE99BB, A486299DF, A47D69A03, A474A9A27, A46BE9A4A, A46329A6E, A45A69A92, A451A9AB6, A448A9ADA, A43FE9AFE, A43729B22, A42E69B47, A425A9B6B, A41CE9B8F, A41429BB3, A40B69BD7, A402A9BFB, A3F9E9C1F, A3F169C43, A3E8A9C67, A3DFE9C8C, A3D729CB0, A3CE69CD4, A3C5A9CF8, A3BCE9D1C, A3B429D41, A3ABA9D65, A3A2E9D89, A39A29DAD, A39169DD2, A388A9DF6, A38029E1A, A37769E3F, A36EA9E63, A36629E87, A35D69EAC, A354A9ED0, A34BE9EF5, A34369F19, A33AA9F3D, A33229F62, A32969F86, A320A9FAB, A31829FCF, A30F69FF4, A306EA018, A2FE2A03D, A2F5AA061, A2ECEA086, A2E46A0AA, A2DBAA0CF, A2D32A0F4, A2CA6A118, A2C1EA13D, A2B92A161, A2B0AA186, A2A7EA1AB, A29F6A1CF, A296EA1F4, A28E2A219, A285AA23D, A27D2A262, A2746A287, A26BEA2AC, A2636A2D0, A25AAA2F5, A2522A31A, A249AA33F, A2412A363, A238AA388, A22FEA3AD, A2276A3D2, A21EEA3F7, A2166A41C, A20DEA441, A2056A465, A1FCAA48A, A1F42A4AF, A1EBAA4D4, A1E32A4F9, A1DAAA51E, A1D22A543, A1C9AA568, A1C12A58D, A1B8AA5B2, A1B02A5D7, A1A7AA5FC, A19F2A621, A196AA646, A18E2A66B, A185AA691, A17D2A6B6, A174AA6DB, A16C6A700, A163EA725, A15B6A74A, A152EA76F, A14A6A795, A141EA7BA, A139AA7DF, A1312A804, A128AA829, A1202A84F, A117EA874, A10F6A899, A106EA8BF, A0FE6A8E4, A0F62A909, A0EDAA92E, A0E52A954, A0DCEA979, A0D46A99F, A0CC2A9C4, A0C3AA9E9, A0BB2AA0F, A0B2EAA34, A0AA6AA5A, A0A22AA7F, A099AAAA4, A0916AACA, A088EAAEF, A080AAB15, A0782AB3A, A06FEAB60, A0676AB85, A05F2ABAB, A056EABD1, A04E6ABF6, A0462AC1C, A03DAAC41, A0356AC67, A02D2AC8D, A024AACB2, A01C6ACD8, A0142ACFE, A00BEAD23, A0036AD49, 9FFB2AD6F, 9FF2EAD94, 9FEAAADBA, 9FE22ADE0, 9FD9EAE05, 9FD1AAE2B, 9FC96AE51, 9FC12AE77, 9FB8EAE9D, 9FB0AAEC2, 9FA82AEE8, 9F9FEAF0E, 9F97AAF34, 9F8F6AF5A, 9F872AF80, 9F7EEAFA6, 9F76AAFCB, 9F6E6AFF1, 9F662B017, 9F5DEB03D, 9F55AB063, 9F4D6B089, 9F452B0AF, 9F3CEB0D5, 9F34EB0FB, 9F2CAB121, 9F246B147, 9F1C2B16D, 9F13EB193, 9F0BAB1B9, 9F036B1DF, 9EFB6B206, 9EF32B22C, 9EEAEB252, 9EE2AB278, 9EDAAB29E, 9ED26B2C4, 9ECA2B2EA, 9EC22B311, 9EB9EB337, 9EB1AB35D, 9EA9AB383, 9EA16B3A9, 9E992B3D0, 9E912B3F6, 9E88EB41C, 9E80EB442, 9E78AB469, 9E706B48F, 9E686B4B5, 9E602B4DC, 9E582B502, 9E4FEB528, 9E47EB54F, 9E3FAB575, 9E37AB59C, 9E2FAB5C2, 9E276B5E8, 9E1F6B60F, 9E172B635, 9E0F2B65C, 9E072B682, 9DFEEB6A9, 9DF6EB6CF, 9DEEEB6F6, 9DE6AB71C, 9DDEAB743, 9DD6AB769, 9DCEAB790, 9DC66B7B6, 9DBE6B7DD, 9DB66B804, 9DAE6B82A, 9DA66B851, 9D9E2B877, 9D962B89E, 9D8E2B8C5, 9D862B8EB, 9D7E2B912, 9D762B939, 9D6E2B95F, 9D662B986, 9D5E2B9AD, 9D562B9D4, 9D4E2B9FA, 9D462BA21, 9D3E2BA48, 9D362BA6F, 9D2E2BA95, 9D262BABC, 9D1E2BAE3, 9D162BB0A, 9D0E2BB31, 9D062BB58, 9CFE2BB7F, 9CF62BBA5, 9CEE6BBCC, 9CE66BBF3, 9CDE6BC1A, 9CD66BC41, 9CCE6BC68, 9CC6ABC8F, 9CBEABCB6, 9CB6ABCDD, 9CAEABD04, 9CA6EBD2B, 9C9EEBD52, 9C96EBD79, 9C8F2BDA0, 9C872BDC7, 9C7F2BDEE, 9C776BE15, 9C6F6BE3C, 9C67ABE63, 9C5FABE8B, 9C57ABEB2, 9C4FEBED9, 9C47EBF00, 9C402BF27, 9C382BF4E, 9C306BF76, 9C28ABF9D, 9C20ABFC4, 9C18EBFEB, 9C10EC012, 9C092C03A, 9C012C061, 9BF96C088, 9BF1AC0AF, 9BE9AC0D7, 9BE1EC0FE, 9BDA2C125, 9BD22C14D, 9BCA6C174, 9BC2AC19B, 9BBAEC1C3, 9BB2EC1EA, 9BAB2C212, 9BA36C239, 9B9BAC260, 9B93EC288, 9B8BEC2AF, 9B842C2D7, 9B7C6C2FE, 9B74AC326, 9B6CEC34D, 9B652C375, 9B5D6C39C, 9B55AC3C4, 9B4DEC3EB, 9B462C413, 9B3E6C43A, 9B36AC462, 9B2EEC48A, 9B272C4B1, 9B1F6C4D9, 9B17AC500, 9B0FEC528, 9B082C550, 9B006C577, 9AF8AC59F, 9AF0EC5C7, 9AE96C5EE, 9AE1AC616, 9AD9EC63E, 9AD22C665, 9ACA6C68D, 9AC2EC6B5, 9ABB2C6DD, 9AB36C705, 9AABAC72C, 9AA42C754, 9A9C6C77C, 9A94AC7A4, 9A8D2C7CC, 9A856C7F3, 9A7DAC81B, 9A762C843, 9A6E6C86B, 9A66EC893, 9A5F2C8BB, 9A576C8E3, 9A4FEC90B, 9A482C933, 9A40AC95B, 9A38EC982, 9A316C9AA, 9A29EC9D2, 9A222C9FA, 9A1AACA22, 9A12ECA4A, 9A0B6CA73, 9A03ACA9B, 99FC2CAC3, 99F4ACAEB, 99ECECB13, 99E56CB3B, 99DDECB63, 99D62CB8B, 99CEACBB3, 99C72CBDB, 99BFACC03, 99B7ECC2C, 99B06CC54, 99A8ECC7C, 99A16CCA4, 9999ECCCC, 99926CCF5, 998AACD1D, 99832CD45, 997BACD6D, 99742CD96, 996CACDBE, 99652CDE6, 995DACE0E, 99562CE37, 994EACE5F, 99472CE87, 993FACEB0, 99382CED8, 9930ACF01, 99292CF29, 9921ACF51, 991A2CF7A, 9912ACFA2, 990B2CFCB, 9903ECFF3, 98FC6D01B, 98F4ED044, 98ED6D06C, 98E5ED095, 98DEAD0BD, 98D72D0E6, 98CFAD10E, 98C82D137, 98C0ED15F, 98B96D188, 98B1ED1B1, 98AAAD1D9, 98A32D202, 989BAD22A, 98946D253, 988CED27B, 98856D2A4, 987E2D2CD, 9876AD2F5, 986F6D31E, 9867ED347, 9860AD36F, 98592D398, 9851ED3C1, 984A6D3EA, 98432D412, 983BAD43B, 98346D464, 982CED48D, 9825AD4B5, 981E6D4DE, 9816ED507, 980FAD530, 98086D559, 9800ED581, 97F9AD5AA, 97F26D5D3, 97EB2D5FC, 97E3AD625, 97DC6D64E, 97D52D677, 97CDED6A0, 97C66D6C8, 97BF2D6F1, 97B7ED71A, 97B0AD743, 97A96D76C, 97A22D795, 979AED7BE, 9793AD7E7, 978C6D810, 9784ED839, 977DAD862, 97766D88B, 976F2D8B4, 9767ED8DD, 9760AD907, 9759AD930, 97526D959, 974B2D982, 9743ED9AB, 973CAD9D4, 97356D9FD, 972E2DA26, 9726EDA50, 971FADA79, 9718ADAA2, 97116DACB, 970A2DAF4, 9702EDB1E, 96FBEDB47, 96F4ADB70, 96ED6DB99, 96E62DBC3, 96DF2DBEC, 96D7EDC15, 96D0ADC3E, 96C9ADC68, 96C26DC91, 96BB6DCBA, 96B42DCE4, 96ACEDD0D, 96A5EDD37, 969EADD60, 9697ADD89, 96906DDB3, 96896DDDC, 96822DE06, 967B2DE2F, 9673EDE58, 966CEDE82, 9665EDEAB, 965EADED5, 9657ADEFE, 96506DF28, 96496DF51, 96426DF7B, 963B2DFA4, 96342DFCE, 962D2DFF7, 96262E021, 961EEE04B, 9617EE074, 9610EE09E, 9609EE0C7, 9602AE0F1, 95FBAE11B, 95F4AE144, 95EDAE16E, 95E6AE198, 95DFAE1C1, 95D8AE1EB, 95D1AE215, 95CAAE23E, 95C36E268, 95BC6E292, 95B56E2BB, 95AE6E2E5, 95A76E30F, 95A06E339, 9599AE363, 9592AE38C, 958BAE3B6, 9584AE3E0, 957DAE40A, 9576AE434, 956FAE45D, 9568AE487, 9561EE4B1, 955AEE4DB, 9553EE505, 954CEE52F, 9545EE559, 953F2E583, 95382E5AD, 95312E5D6, 952A6E600, 95236E62A, 951C6E654, 9515AE67E, 950EAE6A8, 9507AE6D2, 9500EE6FC, 94F9EE726, 94F32E750, 94EC2E77A, 94E52E7A4, 94DE6E7CF, 94D76E7F9, 94D0AE823, 94C9EE84D, 94C2EE877, 94BC2E8A1, 94B52E8CB, 94AE6E8F5, 94A76E91F, 94A0AE94A, 9499EE974, 9492EE99E, 948C2E9C8, 94856E9F2, 947E6EA1D, 9477AEA47, 9470EEA71, 946A2EA9B, 94632EAC6, 945C6EAF0, 9455AEB1A, 944EEEB44, 94482EB6F, 94416EB99, 943A6EBC3, 9433AEBEE, 942CEEC18, 94262EC42, 941F6EC6D, 9418AEC97, 9411EECC1, 940B2ECEC, 94046ED16, 93FDAED41, 93F6EED6B, 93F02ED95, 93E96EDC0, 93E2AEDEA, 93DBEEE15, 93D52EE3F, 93CEAEE6A, 93C7EEE94, 93C12EEBF, 93BA6EEE9, 93B3AEF14, 93AD2EF3E, 93A66EF69, 939FAEF93, 9398EEFBE, 93926EFE9, 938BAF013, 9384EF03E, 937E2F068, 9377AF093, 9370EF0BE, 936A6F0E8, 9363AF113, 935CEF13E, 93566F168, 934FAF193, 93492F1BE, 93426F1E8, 933BEF213, 93352F23E, 932EAF268, 9327EF293, 93216F2BE, 931AAF2E9, 93142F313, 930DAF33E, 9306EF369, 93006F394, 92F9AF3BF, 92F32F3E9, 92ECAF414, 92E62F43F, 92DF6F46A, 92D8EF495, 92D26F4C0, 92CBEF4EB, 92C52F515, 92BEAF540, 92B82F56B, 92B1AF596, 92AB2F5C1, 92A46F5EC, 929DEF617, 92976F642, 9290EF66D, 928A6F698, 9283EF6C3, 927D6F6EE, 9276EF719, 92706F744, 9269EF76F, 92636F79A, 925CEF7C5, 92566F7F0, 924FEF81B, 92496F846, 92432F871, 923CAF89C, 92362F8C8, 922FAF8F3, 92292F91E, 9222AF949, 921C6F974, 9215EF99F, 920F6F9CA, 9208EF9F6, 9202AFA21, 91FC2FA4C, 91F5AFA77, 91EF6FAA2, 91E8EFACE, 91E26FAF9, 91DC2FB24, 91D5AFB4F, 91CF2FB7B, 91C8EFBA6, 91C26FBD1, 91BC2FBFC, 91B5AFC28, 91AF6FC53, 91A8EFC7E, 91A2AFCAA, 919C2FCD5, 9195EFD00, 918FAFD2C, 91892FD57, 9182EFD83, 917C6FDAE, 91762FDD9, 916FEFE05, 91696FE30, 91632FE5C, 915CEFE87, 91566FEB3, 91502FEDE, 9149EFF09, 9143AFF35, 913D6FF60, 9136EFF8C, 9130AFFB7, 912A6FFE3, 91243000F, 911DF003A, 9117B0066, 911170091, 910B300BD, 9104F00E8, 90FE70114, 90F83013F, 90F1F016B, 90EBB0197, 90E5B01C2, 90DF701EE, 90D93021A, 90D2F0245, 90CCB0271, 90C67029D, 90C0302C8, 90B9F02F4, 90B3B0320, 90ADB034B, 90A770377, 90A1303A3, 909AF03CF, 9094B03FA, 908EB0426, 908870452, 90823047E, 907C304A9, 9075F04D5, 906FB0501, 9069B052D, 906370559, 905D30585, 9057305B0, 9050F05DC, 904AF0608, 9044B0634, 903EB0660, 90387068C, 9032706B8, 902C306E4, 90263070F, 901FF073B, 9019F0767, 9013F0793, 900DB07BF, 9007B07EB, 900170817, 8FFB70843, 8FF57086F, 8FEF7089B, 8FE9308C7, 8FE3308F3, 8FDD3091F, 8FD73094B, 8FD0F0977, 8FCAF09A3, 8FC4F09CF, 8FBEF09FC, 8FB8F0A28, 8FB2B0A54, 8FACB0A80, 8FA6B0AAC, 8FA0B0AD8, 8F9AB0B04, 8F94B0B30, 8F8EB0B5C, 8F88B0B89, 8F82B0BB5, 8F7CB0BE1, 8F76B0C0D, 8F70B0C39, 8F6AB0C66, 8F64B0C92, 8F5EB0CBE, 8F58F0CEA, 8F52F0D16, 8F4CF0D43, 8F46F0D6F, 8F40F0D9B, 8F3B30DC8, 8F3530DF4, 8F2F30E20, 8F2930E4C, 8F2370E79, 8F1D70EA5, 8F1770ED1, 8F1170EFE, 8F0BB0F2A, 8F05B0F56, 8EFFF0F83, 8EF9F0FAF, 8EF3F0FDC, 8EEE31008, 8EE831034, 8EE271061, 8EDC7108D, 8ED6B10BA, 8ED0B10E6, 8ECAF1113, 8EC4F113F, 8EBF3116C, 8EB931198, 8EB3711C4, 8EADB11F1, 8EA7B121D, 8EA1F124A, 8E9C31277, 8E96312A3, 8E90712D0, 8E8AB12FC, 8E84F1329, 8E7EF1355, 8E7931382, 8E73713AE, 8E6DB13DB, 8E67B1408, 8E61F1434, 8E5C31461, 8E567148E, 8E50B14BA, 8E4AF14E7, 8E4531513, 8E3F71540, 8E39B156D, 8E33F1599, 8E2E315C6, 8E28715F3, 8E22B1620, 8E1CF164C, 8E1731679, 8E11716A6, 8E0BB16D3, 8E05F16FF, 8E003172C, 8DFA71759, 8DF4F1786, 8DEF317B2, 8DE9717DF, 8DE3B180C, 8DDDF1839, 8DD871866, 8DD2B1892, 8DCCF18BF, 8DC7718EC, 8DC1B1919, 8DBBF1946, 8DB671973, 8DB0B19A0, 8DAAF19CD, 8DA5719F9, 8D9FB1A26, 8D9A31A53, 8D9471A80, 8D8EF1AAD, 8D8931ADA, 8D83B1B07, 8D7DF1B34, 8D7871B61, 8D72B1B8E, 8D6D31BBB, 8D6771BE8, 8D61F1C15, 8D5C71C42, 8D56B1C6F, 8D5131C9C, 8D4BB1CC9, 8D45F1CF6, 8D4071D23, 8D3AF1D50, 8D3571D7D, 8D2FB1DAA, 8D2A31DD7, 8D24B1E05, 8D1F31E32, 8D19B1E5F, 8D13F1E8C, 8D0E71EB9, 8D08F1EE6, 8D0371F13, 8CFDF1F41, 8CF871F6E, 8CF2F1F9B, 8CED71FC8, 8CE7F1FF5, 8CE272022, 8CDCF2050, 8CD77207D, 8CD1F20AA, 8CCC720D7, 8CC6F2105, 8CC172132, 8CBBF215F, 8CB6B218C, 8CB1321BA, 8CABB21E7, 8CA632214, 8CA0B2242, 8C9B7226F, 8C95F229C, 8C90722C9, 8C8AF22F7, 8C85B2324, 8C8032352, 8C7AB237F, 8C75723AC, 8C6FF23DA, 8C6AB2407, 8C6532434, 8C5FB2462, 8C5A7248F, 8C54F24BD, 8C4FB24EA, 8C4A32517, 8C44F2545, 8C3F72572, 8C3A325A0, 8C34B25CD, 8C2F725FB, 8C2A32628, 8C24B2656, 8C1F72683, 8C1A326B1, 8C14B26DE, 8C0F7270C, 8C0A32739, 8C04B2767, 8BFF72794, 8BFA327C2, 8BF4F27F0, 8BEF7281D, 8BEA3284B, 8BE4F2878, 8BDFB28A6, 8BDA728D4, 8BD532901, 8BCFF292F, 8BCAB295C, 8BC53298A, 8BBFF29B8, 8BBAB29E5, 8BB572A13, 8BB032A41, 8BAAF2A6E, 8BA5B2A9C, 8BA0B2ACA, 8B9B72AF7, 8B9632B25, 8B90F2B53, 8B8BB2B81, 8B8672BAE, 8B8132BDC, 8B7BF2C0A, 8B76F2C38, 8B71B2C65, 8B6C72C93, 8B6732CC1, 8B6232CEF, 8B5CF2D1D, 8B57B2D4A, 8B52B2D78, 8B4D72DA6, 8B4832DD4, 8B4332E02, 8B3DF2E2F, 8B38B2E5D, 8B33B2E8B, 8B2E72EB9, 8B2972EE7, 8B2432F15, 8B1F32F43, 8B19F2F71, 8B14F2F9F, 8B0FB2FCC, 8B0AB2FFA, 8B0573028, 8B0073056, 8AFB73084, 8AF6330B2, 8AF1330E0, 8AEC3310E, 8AE6F313C, 8AE1F316A, 8ADCF3198, 8AD7F31C6, 8AD2B31F4, 8ACDB3222, 8AC8B3250, 8AC3B327E, 8ABEB32AC, 8AB9732DA, 8AB473308, 8AAF73336, 8AAA73364, 8AA573393, 8AA0733C1, 8A9B733EF, 8A967341D, 8A917344B, 8A8C73479, 8A87734A7, 8A82734D5, 8A7D73503, 8A7873532, 8A7373560, 8A6E7358E, 8A69735BC, 8A64B35EA, 8A5FB3618, 8A5AB3647, 8A55B3675, 8A50B36A3, 8A4BF36D1, 8A46F3700, 8A41F372E, 8A3CF375C, 8A383378A, 8A33337B9, 8A2E337E7, 8A2973815, 8A2473843, 8A1FB3872, 8A1AB38A0, 8A15B38CE, 8A10F38FD, 8A0BF392B, 8A0733959, 8A0233987, 89FD739B6, 89F8739E4, 89F3B3A13, 89EEF3A41, 89E9F3A6F, 89E533A9E, 89E033ACC, 89DB73AFA, 89D6B3B29, 89D1B3B57, 89CCF3B86, 89C833BB4, 89C373BE2;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 1kx18',
    'CSET read_width_a = 36',
    'CSET read_width_b = 36',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 36',
    'CSET write_width_b = 36',
    'CSET component_name = bmg_72_3cc72ca7547c281d',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '7355ee357874fe1c9c447bdaa3eda615',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_3cc72ca7547c281d',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 7641F3C11, 763CF3BE2, 763833BB4, 763373B86, 762EB3B57, 7629B3B29, 7624F3AFA, 762033ACC, 761B33A9E, 761673A6F, 761173A41, 760CB3A13, 7607F39E4, 7602F39B6, 75FE33987, 75F933959, 75F47392B, 75EF738FD, 75EAB38CE, 75E5B38A0, 75E0B3872, 75DBF3843, 75D6F3815, 75D2337E7, 75CD337B9, 75C83378A, 75C37375C, 75BE7372E, 75B973700, 75B4736D1, 75AFB36A3, 75AAB3675, 75A5B3647, 75A0B3618, 759BB35EA, 7596F35BC, 7591F358E, 758CF3560, 7587F3532, 7582F3503, 757DF34D5, 7578F34A7, 7573F3479, 756EF344B, 7569F341D, 7564F33EF, 755FF33C1, 755AF3393, 7555F3364, 7550F3336, 754BF3308, 7546F32DA, 7541B32AC, 753CB327E, 7537B3250, 7532B3222, 752DB31F4, 7528731C6, 752373198, 751E7316A, 75197313C, 75143310E, 750F330E0, 750A330B2, 7504F3084, 74FFF3056, 74FAF3028, 74F5B2FFA, 74F0B2FCC, 74EB72F9F, 74E672F71, 74E132F43, 74DC32F15, 74D6F2EE7, 74D1F2EB9, 74CCB2E8B, 74C7B2E5D, 74C272E2F, 74BD32E02, 74B832DD4, 74B2F2DA6, 74ADB2D78, 74A8B2D4A, 74A372D1D, 749E32CEF, 749932CC1, 7493F2C93, 748EB2C65, 748972C38, 748472C0A, 747F32BDC, 7479F2BAE, 7474B2B81, 746F72B53, 746A32B25, 7464F2AF7, 745FB2ACA, 745AB2A9C, 745572A6E, 745032A41, 744AF2A13, 7445B29E5, 7440729B8, 743B3298A, 7435B295C, 74307292F, 742B32901, 7425F28D4, 7420B28A6, 741B72878, 74163284B, 7410F281D, 740B727F0, 7406327C2, 7400F2794, 73FBB2767, 73F632739, 73F0F270C, 73EBB26DE, 73E6326B1, 73E0F2683, 73DBB2656, 73D632628, 73D0F25FB, 73CBB25CD, 73C6325A0, 73C0F2572, 73BB72545, 73B632517, 73B0B24EA, 73AB724BD, 73A5F248F, 73A0B2462, 739B32434, 7395B2407, 7390723DA, 738AF23AC, 7385B237F, 738032352, 737AB2324, 7375722F7, 736FF22C9, 736A7229C, 7364F226F, 735FB2242, 735A32214, 7354B21E7, 734F321BA, 7349B218C, 73447215F, 733EF2132, 733972105, 7333F20D7, 732E720AA, 7328F207D, 732372050, 731DF2022, 731871FF5, 7312F1FC8, 730D71F9B, 7307F1F6E, 730271F41, 72FCF1F13, 72F771EE6, 72F1F1EB9, 72EC71E8C, 72E6B1E5F, 72E131E32, 72DBB1E05, 72D631DD7, 72D0B1DAA, 72CAF1D7D, 72C571D50, 72BFF1D23, 72BA71CF6, 72B4B1CC9, 72AF31C9C, 72A9B1C6F, 72A3F1C42, 729E71C15, 7298F1BE8, 729331BBB, 728DB1B8E, 7287F1B61, 728271B34, 727CB1B07, 727731ADA, 727171AAD, 726BF1A80, 726631A53, 7260B1A26, 725AF19F9, 7255719CD, 724FB19A0, 7249F1973, 724471946, 723EB1919, 7238F18EC, 7233718BF, 722DB1892, 7227F1866, 722271839, 721CB180C, 7216F17DF, 7211317B2, 720B71786, 7205F1759, 72003172C, 71FA716FF, 71F4B16D3, 71EEF16A6, 71E931679, 71E37164C, 71DDB1620, 71D7F15F3, 71D2315C6, 71CC71599, 71C6B156D, 71C0F1540, 71BB31513, 71B5714E7, 71AFB14BA, 71A9F148E, 71A431461, 719E71434, 7198B1408, 7192B13DB, 718CF13AE, 718731382, 718171355, 717B71329, 7175B12FC, 716FF12D0, 716A312A3, 716431277, 715E7124A, 7158B121D, 7152B11F1, 714CF11C4, 714731198, 71413116C, 713B7113F, 713571113, 712FB10E6, 7129B10BA, 7123F108D, 711DF1061, 711831034, 711231008, 710C70FDC, 710670FAF, 710070F83, 70FAB0F56, 70F4B0F2A, 70EEF0EFE, 70E8F0ED1, 70E2F0EA5, 70DCF0E79, 70D730E4C, 70D130E20, 70CB30DF4, 70C530DC8, 70BF70D9B, 70B970D6F, 70B370D43, 70AD70D16, 70A770CEA, 70A1B0CBE, 709BB0C92, 7095B0C66, 708FB0C39, 7089B0C0D, 7083B0BE1, 707DB0BB5, 7077B0B89, 7071B0B5C, 706BB0B30, 7065B0B04, 705FB0AD8, 7059B0AAC, 7053B0A80, 704DB0A54, 704770A28, 7041709FC, 703B709CF, 7035709A3, 702F70977, 70293094B, 70233091F, 701D308F3, 7017308C7, 7010F089B, 700AF086F, 7004F0843, 6FFEF0817, 6FF8B07EB, 6FF2B07BF, 6FEC70793, 6FE670767, 6FE07073B, 6FDA3070F, 6FD4306E4, 6FCDF06B8, 6FC7F068C, 6FC1B0660, 6FBBB0634, 6FB570608, 6FAF705DC, 6FA9305B0, 6FA330585, 6F9CF0559, 6F96B052D, 6F90B0501, 6F8A704D5, 6F84304A9, 6F7E3047E, 6F77F0452, 6F71B0426, 6F6BB03FA, 6F65703CF, 6F5F303A3, 6F58F0377, 6F52B034B, 6F4CB0320, 6F46702F4, 6F40302C8, 6F39F029D, 6F33B0271, 6F2D70245, 6F273021A, 6F20F01EE, 6F1AB01C2, 6F14B0197, 6F0E7016B, 6F083013F, 6F01F0114, 6EFB700E8, 6EF5300BD, 6EEEF0091, 6EE8B0066, 6EE27003A, 6EDC3000F, 6ED5EFFE3, 6ECFAFFB7, 6EC96FF8C, 6EC2EFF60, 6EBCAFF35, 6EB66FF09, 6EB02FEDE, 6EA9EFEB3, 6EA36FE87, 6E9D2FE5C, 6E96EFE30, 6E906FE05, 6E8A2FDD9, 6E83EFDAE, 6E7D6FD83, 6E772FD57, 6E70AFD2C, 6E6A6FD00, 6E642FCD5, 6E5DAFCAA, 6E576FC7E, 6E50EFC53, 6E4AAFC28, 6E442FBFC, 6E3DEFBD1, 6E376FBA6, 6E312FB7B, 6E2AAFB4F, 6E242FB24, 6E1DEFAF9, 6E176FACE, 6E10EFAA2, 6E0AAFA77, 6E042FA4C, 6DFDAFA21, 6DF76F9F6, 6DF0EF9CA, 6DEA6F99F, 6DE3EF974, 6DDDAF949, 6DD72F91E, 6DD0AF8F3, 6DCA2F8C8, 6DC3AF89C, 6DBD2F871, 6DB6EF846, 6DB06F81B, 6DA9EF7F0, 6DA36F7C5, 6D9CEF79A, 6D966F76F, 6D8FEF744, 6D896F719, 6D82EF6EE, 6D7C6F6C3, 6D75EF698, 6D6F6F66D, 6D68EF642, 6D626F617, 6D5BEF5EC, 6D552F5C1, 6D4EAF596, 6D482F56B, 6D41AF540, 6D3B2F515, 6D346F4EB, 6D2DEF4C0, 6D276F495, 6D20EF46A, 6D1A2F43F, 6D13AF414, 6D0D2F3E9, 6D06AF3BF, 6CFFEF394, 6CF96F369, 6CF2AF33E, 6CEC2F313, 6CE5AF2E9, 6CDEEF2BE, 6CD86F293, 6CD1AF268, 6CCB2F23E, 6CC46F213, 6CBDEF1E8, 6CB72F1BE, 6CB0AF193, 6CA9EF168, 6CA36F13E, 6C9CAF113, 6C95EF0E8, 6C8F6F0BE, 6C88AF093, 6C822F068, 6C7B6F03E, 6C74AF013, 6C6DEEFE9, 6C676EFBE, 6C60AEF93, 6C59EEF69, 6C532EF3E, 6C4CAEF14, 6C45EEEE9, 6C3F2EEBF, 6C386EE94, 6C31AEE6A, 6C2B2EE3F, 6C246EE15, 6C1DAEDEA, 6C16EEDC0, 6C102ED95, 6C096ED6B, 6C02AED41, 6BFBEED16, 6BF52ECEC, 6BEE6ECC1, 6BE7AEC97, 6BE0EEC6D, 6BDA2EC42, 6BD36EC18, 6BCCAEBEE, 6BC5EEBC3, 6BBEEEB99, 6BB82EB6F, 6BB16EB44, 6BAAAEB1A, 6BA3EEAF0, 6B9D2EAC6, 6B962EA9B, 6B8F6EA71, 6B88AEA47, 6B81EEA1D, 6B7AEE9F2, 6B742E9C8, 6B6D6E99E, 6B666E974, 6B5FAE94A, 6B58EE91F, 6B51EE8F5, 6B4B2E8CB, 6B442E8A1, 6B3D6E877, 6B366E84D, 6B2FAE823, 6B28EE7F9, 6B21EE7CF, 6B1B2E7A4, 6B142E77A, 6B0D2E750, 6B066E726, 6AFF6E6FC, 6AF8AE6D2, 6AF1AE6A8, 6AEAAE67E, 6AE3EE654, 6ADCEE62A, 6AD5EE600, 6ACF2E5D6, 6AC82E5AD, 6AC12E583, 6ABA6E559, 6AB36E52F, 6AAC6E505, 6AA56E4DB, 6A9E6E4B1, 6A97AE487, 6A90AE45D, 6A89AE434, 6A82AE40A, 6A7BAE3E0, 6A74AE3B6, 6A6DAE38C, 6A66AE363, 6A5FEE339, 6A58EE30F, 6A51EE2E5, 6A4AEE2BB, 6A43EE292, 6A3CEE268, 6A35AE23E, 6A2EAE215, 6A27AE1EB, 6A20AE1C1, 6A19AE198, 6A12AE16E, 6A0BAE144, 6A04AE11B, 69FDAE0F1, 69F66E0C7, 69EF6E09E, 69E86E074, 69E16E04B, 69DA2E021, 69D32DFF7, 69CC2DFCE, 69C52DFA4, 69BDEDF7B, 69B6EDF51, 69AFEDF28, 69A8ADEFE, 69A1ADED5, 699A6DEAB, 69936DE82, 698C6DE58, 69852DE2F, 697E2DE06, 6976EDDDC, 696FEDDB3, 6968ADD89, 6961ADD60, 695A6DD37, 69536DD0D, 694C2DCE4, 6944EDCBA, 693DEDC91, 6936ADC68, 692FADC3E, 69286DC15, 69212DBEC, 691A2DBC3, 6912EDB99, 690BADB70, 69046DB47, 68FD6DB1E, 68F62DAF4, 68EEEDACB, 68E7ADAA2, 68E0ADA79, 68D96DA50, 68D22DA26, 68CAED9FD, 68C3AD9D4, 68BC6D9AB, 68B52D982, 68ADED959, 68A6AD930, 689FAD907, 68986D8DD, 68912D8B4, 6889ED88B, 6882AD862, 687B6D839, 6873ED810, 686CAD7E7, 68656D7BE, 685E2D795, 6856ED76C, 684FAD743, 68486D71A, 68412D6F1, 6839ED6C8, 68326D6A0, 682B2D677, 6823ED64E, 681CAD625, 68152D5FC, 680DED5D3, 6806AD5AA, 67FF6D581, 67F7ED559, 67F0AD530, 67E96D507, 67E1ED4DE, 67DAAD4B5, 67D36D48D, 67CBED464, 67C4AD43B, 67BD2D412, 67B5ED3EA, 67AE6D3C1, 67A72D398, 679FAD36F, 67986D347, 6790ED31E, 6789AD2F5, 67822D2CD, 677AED2A4, 67736D27B, 676BED253, 6764AD22A, 675D2D202, 6755AD1D9, 674E6D1B1, 6746ED188, 673F6D15F, 67382D137, 6730AD10E, 67292D0E6, 6721AD0BD, 671A6D095, 6712ED06C, 670B6D044, 6703ED01B, 66FC6CFF3, 66F52CFCB, 66EDACFA2, 66E62CF7A, 66DEACF51, 66D72CF29, 66CFACF01, 66C82CED8, 66C0ACEB0, 66B92CE87, 66B1ACE5F, 66AA2CE37, 66A2ACE0E, 669B2CDE6, 6693ACDBE, 668C2CD96, 6684ACD6D, 667D2CD45, 6675ACD1D, 666DECCF5, 66666CCCC, 665EECCA4, 66576CC7C, 664FECC54, 66486CC2C, 6640ACC03, 66392CBDB, 6631ACBB3, 662A2CB8B, 66226CB63, 661AECB3B, 66136CB13, 660BACAEB, 66042CAC3, 65FCACA9B, 65F4ECA73, 65ED6CA4A, 65E5ACA22, 65DE2C9FA, 65D66C9D2, 65CEEC9AA, 65C76C982, 65BFAC95B, 65B82C933, 65B06C90B, 65A8EC8E3, 65A12C8BB, 65996C893, 6591EC86B, 658A2C843, 6582AC81B, 657AEC7F3, 65732C7CC, 656BAC7A4, 6563EC77C, 655C2C754, 6554AC72C, 654CEC705, 65452C6DD, 653D6C6B5, 6535EC68D, 652E2C665, 65266C63E, 651EAC616, 6516EC5EE, 650F6C5C7, 6507AC59F, 64FFEC577, 64F82C550, 64F06C528, 64E8AC500, 64E0EC4D9, 64D92C4B1, 64D16C48A, 64C9AC462, 64C1EC43A, 64BA2C413, 64B26C3EB, 64AAAC3C4, 64A2EC39C, 649B2C375, 64936C34D, 648BAC326, 6483EC2FE, 647C2C2D7, 64746C2AF, 646C6C288, 6464AC260, 645CEC239, 64552C212, 644D6C1EA, 64456C1C3, 643DAC19B, 6435EC174, 642E2C14D, 64262C125, 641E6C0FE, 6416AC0D7, 640EAC0AF, 6406EC088, 63FF2C061, 63F72C03A, 63EF6C012, 63E76BFEB, 63DFABFC4, 63D7ABF9D, 63CFEBF76, 63C82BF4E, 63C02BF27, 63B86BF00, 63B06BED9, 63A8ABEB2, 63A0ABE8B, 6398ABE63, 6390EBE3C, 6388EBE15, 63812BDEE, 63792BDC7, 63712BDA0, 63696BD79, 63616BD52, 63596BD2B, 6351ABD04, 6349ABCDD, 6341ABCB6, 6339ABC8F, 6331EBC68, 6329EBC41, 6321EBC1A, 6319EBBF3, 6311EBBCC, 630A2BBA5, 63022BB7F, 62FA2BB58, 62F22BB31, 62EA2BB0A, 62E22BAE3, 62DA2BABC, 62D22BA95, 62CA2BA6F, 62C22BA48, 62BA2BA21, 62B22B9FA, 62AA2B9D4, 62A22B9AD, 629A2B986, 62922B95F, 628A2B939, 62822B912, 627A2B8EB, 62722B8C5, 626A2B89E, 62622B877, 6259EB851, 6251EB82A, 6249EB804, 6241EB7DD, 6239EB7B6, 6231AB790, 6229AB769, 6221AB743, 6219AB71C, 62116B6F6, 62096B6CF, 62016B6A9, 61F92B682, 61F12B65C, 61E92B635, 61E0EB60F, 61D8EB5E8, 61D0AB5C2, 61C8AB59C, 61C0AB575, 61B86B54F, 61B06B528, 61A82B502, 61A02B4DC, 6197EB4B5, 618FEB48F, 6187AB469, 617F6B442, 61776B41C, 616F2B3F6, 61672B3D0, 615EEB3A9, 6156AB383, 614EAB35D, 61466B337, 613E2B311, 61362B2EA, 612DEB2C4, 6125AB29E, 611DAB278, 61156B252, 610D2B22C, 6104EB206, 60FCEB1DF, 60F4AB1B9, 60EC6B193, 60E42B16D, 60DBEB147, 60D3AB121, 60CB6B0FB, 60C36B0D5, 60BB2B0AF, 60B2EB089, 60AAAB063, 60A26B03D, 609A2B017, 6091EAFF1, 6089AAFCB, 60816AFA6, 60792AF80, 6070EAF5A, 6068AAF34, 60606AF0E, 60582AEE8, 604FAAEC2, 60476AE9D, 603F2AE77, 6036EAE51, 602EAAE2B, 60266AE05, 601E2ADE0, 6015AADBA, 600D6AD94, 60052AD6F, 5FFCEAD49, 5FF46AD23, 5FEC2ACFE, 5FE3EACD8, 5FDBAACB2, 5FD32AC8D, 5FCAEAC67, 5FC2AAC41, 5FBA2AC1C, 5FB1EABF6, 5FA96ABD1, 5FA12ABAB, 5F98EAB85, 5F906AB60, 5F882AB3A, 5F7FAAB15, 5F776AAEF, 5F6EEAACA, 5F66AAAA4, 5F5E2AA7F, 5F55EAA5A, 5F4D6AA34, 5F452AA0F, 5F3CAA9E9, 5F342A9C4, 5F2BEA99F, 5F236A979, 5F1B2A954, 5F12AA92E, 5F0A2A909, 5F01EA8E4, 5EF96A8BF, 5EF0EA899, 5EE86A874, 5EE02A84F, 5ED7AA829, 5ECF2A804, 5EC6AA7DF, 5EBE6A7BA, 5EB5EA795, 5EAD6A76F, 5EA4EA74A, 5E9C6A725, 5E93EA700, 5E8BAA6DB, 5E832A6B6, 5E7AAA691, 5E722A66B, 5E69AA646, 5E612A621, 5E58AA5FC, 5E502A5D7, 5E47AA5B2, 5E3F2A58D, 5E36AA568, 5E2E2A543, 5E25AA51E, 5E1D2A4F9, 5E14AA4D4, 5E0C2A4AF, 5E03AA48A, 5DFAEA465, 5DF26A441, 5DE9EA41C, 5DE16A3F7, 5DD8EA3D2, 5DD06A3AD, 5DC7AA388, 5DBF2A363, 5DB6AA33F, 5DAE2A31A, 5DA5AA2F5, 5D9CEA2D0, 5D946A2AC, 5D8BEA287, 5D832A262, 5D7AAA23D, 5D722A219, 5D696A1F4, 5D60EA1CF, 5D586A1AB, 5D4FAA186, 5D472A161, 5D3E6A13D, 5D35EA118, 5D2D2A0F4, 5D24AA0CF, 5D1BEA0AA, 5D136A086, 5D0AAA061, 5D022A03D, 5CF96A018, 5CF0E9FF4, 5CE829FCF, 5CDFA9FAB, 5CD6E9F86, 5CCE29F62, 5CC5A9F3D, 5CBCE9F19, 5CB469EF5, 5CABA9ED0, 5CA2E9EAC, 5C9A29E87, 5C91A9E63, 5C88E9E3F, 5C8029E1A, 5C77A9DF6, 5C6EE9DD2, 5C6629DAD, 5C5D69D89, 5C54A9D65, 5C4C29D41, 5C4369D1C, 5C3AA9CF8, 5C31E9CD4, 5C2929CB0, 5C2069C8C, 5C17A9C67, 5C0EE9C43, 5C0669C1F, 5BFDA9BFB, 5BF4E9BD7, 5BEC29BB3, 5BE369B8F, 5BDAA9B6B, 5BD1E9B47, 5BC929B22, 5BC069AFE, 5BB7A9ADA, 5BAEA9AB6, 5BA5E9A92, 5B9D29A6E, 5B9469A4A, 5B8BA9A27, 5B82E9A03, 5B7A299DF, 5B71699BB, 5B6869997, 5B5FA9973, 5B56E994F, 5B4E2992B, 5B4569907, 5B3C698E4, 5B33A98C0, 5B2AE989C, 5B21E9878, 5B1929854, 5B1069831, 5B07A980D, 5AFEA97E9, 5AF5E97C5, 5AECE97A2, 5AE42977E, 5ADB6975A, 5AD269737, 5AC9A9713, 5AC0A96EF, 5AB7E96CC, 5AAEE96A8, 5AA629684, 5A9D29661, 5A946963D, 5A8B6961A;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 1kx18',
    'CSET read_width_a = 36',
    'CSET read_width_b = 36',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 36',
    'CSET write_width_b = 36',
    'CSET component_name = bmg_72_7ff662aa85879f72',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '1cd54afbb6b2d8927bb4808e7a4646a6',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_7ff662aa85879f72',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = CF04626F9, CEF8A270D, CEED22720, CEE1A2733, CED5E2746, CECA6275A, CEBEA276D, CEB322780, CEA7A2794, CE9BE27A7, CE90627BB, CE84E27CE, CE79227E1, CE6DA27F5, CE61E2808, CE566281C, CE4AE282F, CE3F62843, CE33A2856, CE282286A, CE1CA287E, CE10E2891, CE05628A5, CDF9E28B8, CDEE628CC, CDE2A28E0, CDD7228F3, CDCBA2907, CDC02291B, CDB46292F, CDA8E2942, CD9D62956, CD91E296A, CD862297E, CD7AA2992, CD6F229A5, CD63A29B9, CD58229CD, CD4CA29E1, CD40E29F5, CD3562A09, CD29E2A1D, CD1E62A31, CD12E2A45, CD0762A59, CCFBE2A6D, CCF062A81, CCE4E2A95, CCD922AA9, CCCDA2ABD, CCC222AD1, CCB6A2AE5, CCAB22AFA, CC9FA2B0E, CC9422B22, CC88A2B36, CC7D22B4A, CC71A2B5F, CC6622B73, CC5AA2B87, CC4F22B9B, CC43A2BB0, CC3822BC4, CC2CA2BD8, CC2122BED, CC15A2C01, CC0A22C15, CBFEA2C2A, CBF322C3E, CBE7E2C53, CBDC62C67, CBD0E2C7C, CBC562C90, CBB9E2CA5, CBAE62CB9, CBA2E2CCE, CB9762CE2, CB8BE2CF7, CB80A2D0C, CB7522D20, CB69A2D35, CB5E22D4A, CB52A2D5E, CB4762D73, CB3BE2D88, CB3062D9C, CB24E2DB1, CB1962DC6, CB0E22DDB, CB02A2DEF, CAF722E04, CAEBA2E19, CAE062E2E, CAD4E2E43, CAC962E58, CABDE2E6D, CAB2A2E82, CAA722E96, CA9BA2EAB, CA9062EC0, CA84E2ED5, CA7962EEA, CA6E22EFF, CA62A2F14, CA5722F2A, CA4BE2F3F, CA4062F54, CA3522F69, CA29A2F7E, CA1E22F93, CA12E2FA8, CA0762FBD, C9FC22FD3, C9F0A2FE8, C9E522FFD, C9D9E3012, C9CE63028, C9C32303D, C9B7A3052, C9AC63068, C9A0E307D, C995A3092, C98A230A8, C97EE30BD, C973630D2, C968230E8, C95CA30FD, C95163113, C945E3128, C93AA313E, C92F63153, C923E3169, C918A317E, C90D23194, C901E31AA, C8F6A31BF, C8EB231D5, C8DFE31EA, C8D4A3200, C8C923216, C8BDE322B, C8B263241, C8A723257, C89BE326D, C890A3282, C88523298, C879E32AE, C86EA32C4, C863232DA, C857E32EF, C84CA3305, C8416331B, C835E3331, C82AA3347, C81F6335D, C81423373, C808A3389, C7FD6339F, C7F2233B5, C7E6E33CB, C7DBA33E1, C7D0633F7, C7C4E340D, C7B9A3423, C7AE63439, C7A32344F, C797E3466, C78CA347C, C78163492, C775E34A8, C76AA34BE, C75F634D5, C754234EB, C748E3501, C73DA3517, C7326352E, C72723544, C71BE355A, C710A3571, C70563587, C6FA2359D, C6EEE35B4, C6E3A35CA, C6D8635E1, C6CD235F7, C6C1E360E, C6B6A3624, C6AB6363B, C6A023651, C694E3668, C689A367E, C67E63695, C673636AB, C668236C2, C65CE36D9, C651A36EF, C64663706, C63B2371D, C62FE3733, C624A374A, C619A3761, C60E63777, C6032378E, C5F7E37A5, C5ECA37BC, C5E1A37D3, C5D6637E9, C5CB23800, C5BFE3817, C5B4E382E, C5A9A3845, C59E6385C, C59323873, C5882388A, C57CE38A1, C571A38B8, C566638CF, C55B638E6, C550238FD, C544E3914, C539E392B, C52EA3942, C523A3959, C51863970, C50D23987, C5022399E, C4F6E39B6, C4EBA39CD, C4E0A39E4, C4D5639FB, C4CA63A13, C4BF23A2A, C4B423A41, C4A8E3A58, C49DE3A70, C492A3A87, C48763A9E, C47C63AB6, C47123ACD, C46623AE4, C45B23AFC, C44FE3B13, C444E3B2B, C439A3B42, C42EA3B5A, C42363B71, C41863B89, C40D23BA0, C40223BB8, C3F723BCF, C3EBE3BE7, C3E0E3BFF, C3D5A3C16, C3CAA3C2E, C3BFA3C45, C3B463C5D, C3A963C75, C39E63C8D, C39323CA4, C38823CBC, C37D23CD4, C37223CEC, C366E3D03, C35BE3D1B, C350E3D33, C345A3D4B, C33AA3D63, C32FA3D7A, C324A3D92, C319A3DAA, C30E63DC2, C30363DDA, C2F863DF2, C2ED63E0A, C2E263E22, C2D723E3A, C2CC23E52, C2C123E6A, C2B623E82, C2AB23E9A, C2A023EB2, C29523ECA, C28A23EE3, C27F23EFB, C273E3F13, C268E3F2B, C25DE3F43, C252E3F5C, C247E3F74, C23CE3F8C, C231E3FA4, C226E3FBD, C21BE3FD5, C210E3FED, C205E4005, C1FAE401E, C1EFE4036, C1E4E404F, C1D9E4067, C1CEE407F, C1C3E4098, C1B9240B0, C1AE240C9, C1A3240E1, C198240FA, C18D24112, C1822412B, C17724143, C16C2415C, C16164174, C1566418D, C14B641A6, C140641BE, C135641D7, C12A641F0, C11FA4208, C114A4221, C109A423A, C0FEA4252, C0F3E426B, C0E8E4284, C0DDE429D, C0D2E42B6, C0C8242CE, C0BD242E7, C0B224300, C0A764319, C09C64332, C0916434B, C086A4364, C07BA437D, C070A4396, C065E43AE, C05AE43C7, C04FE43E0, C045243F9, C03A24413, C02F6442C, C02464445, C019A445E, C00EA4477, C003E4490, BFF8E44A9, BFEDE44C2, BFE3244DB, BFD8244F5, BFCD6450E, BFC264527, BFB7A4540, BFACE4559, BFA1E4573, BF972458C, BF8C245A5, BF81645BF, BF76645D8, BF6BA45F1, BF60E460B, BF55E4624, BF4B2463E, BF4024657, BF3564670, BF2AA468A, BF1FA46A3, BF14E46BD, BF0A246D6, BEFF246F0, BEF464709, BEE9A4723, BEDEE473C, BED3E4756, BEC924770, BEBE64789, BEB3A47A3, BEA8A47BD, BE9DE47D6, BE93247F0, BE886480A, BE7DA4823, BE72A483D, BE67E4857, BE5D24871, BE526488A, BE47A48A4, BE3CE48BE, BE32248D8, BE27248F2, BE1C6490C, BE11A4925, BE06E493F, BDFC24959, BDF164973, BDE6A498D, BDDBE49A7, BDD1249C1, BDC6649DB, BDBBA49F5, BDB0E4A0F, BDA624A29, BD9B64A43, BD90A4A5D, BD85E4A77, BD7B24A91, BD7064AAC, BD65A4AC6, BD5AE4AE0, BD5024AFA, BD4564B14, BD3AE4B2F, BD3024B49, BD2564B63, BD1AA4B7D, BD0FE4B98, BD0524BB2, BCFA64BCC, BCEFE4BE6, BCE524C01, BCDA64C1B, BCCFA4C36, BCC4E4C50, BCBA64C6A, BCAFA4C85, BCA4E4C9F, BC9A24CBA, BC8FA4CD4, BC84E4CEF, BC7A24D09, BC6FA4D24, BC64E4D3E, BC5A24D59, BC4FA4D73, BC44E4D8E, BC3A24DA9, BC2FA4DC3, BC24E4DDE, BC1A24DF8, BC0FA4E13, BC04E4E2E, BBFA64E49, BBEFA4E63, BBE4E4E7E, BBDA64E99, BBCFA4EB4, BBC524ECE, BBBA64EE9, BBAFE4F04, BBA524F1F, BB9AA4F3A, BB8FE4F54, BB8564F6F, BB7AA4F8A, BB7024FA5, BB6564FC0, BB5AE4FDB, BB5064FF6, BB45A5011, BB3B2502C, BB3065047, BB25E5062, BB1B6507D, BB10A5098, BB06250B3, BAFBA50CE, BAF0E50E9, BAE665105, BADBE5120, BAD12513B, BAC6A5156, BABC25171, BAB1A518C, BAA6E51A8, BA9C651C3, BA91E51DE, BA87651F9, BA7CA5215, BA7225230, BA67A524B, BA5D25267, BA52A5282, BA47E529D, BA3D652B9, BA32E52D4, BA28652F0, BA1DE530B, BA1365327, BA08E5342, B9FE6535D, B9F3E5379, B9E925394, B9DEA53B0, B9D4253CC, B9C9A53E7, B9BF25403, B9B4A541E, B9AA2543A, B99FA5456, B99525471, B98AA548D, B980254A9, B975A54C4, B96B654E0, B960E54FC, B95665517, B94BE5533, B9416554F, B936E556B, B92C65587, B921E55A2, B917655BE, B90D255DA, B902A55F6, B8F825612, B8EDA562E, B8E32564A, B8D8E5666, B8CE65681, B8C3E569D, B8B9656B9, B8AEE56D5, B8A4A56F1, B89A2570D, B88FA572A, B88565746, B87AE5762, B8706577E, B8662579A, B85BA57B6, B851257D2, B846E57EE, B83C6580A, B831E5827, B827A5843, B81D2585F, B812E587B, B80865898, B7FDE58B4, B7F3A58D0, B7E9258EC, B7DEE5909, B7D465925, B7CA25941, B7BFA595E, B7B56597A, B7AAE5997, B7A0A59B3, B796259CF, B78BE59EC, B781A5A08, B77725A25, B76CE5A41, B76265A5E, B75825A7A, B74DE5A97, B74365AB3, B73925AD0, B72EA5AED, B72465B09, B71A25B26, B70FA5B42, B70565B5F, B6FB25B7C, B6F0E5B98, B6E665BB5, B6DC25BD2, B6D1E5BEF, B6C7A5C0B, B6BD25C28, B6B2E5C45, B6A8A5C62, B69E65C7E, B69425C9B, B689A5CB8, B67F65CD5, B67525CF2, B66AE5D0F, B660A5D2C, B65665D49, B64C25D66, B641E5D82, B63765D9F, B62D25DBC, B622E5DD9, B618A5DF6, B60E65E13, B60425E31, B5F9E5E4E, B5EFA5E6B, B5E565E88, B5DB25EA5, B5D0E5EC2, B5C6A5EDF, B5BC65EFC, B5B225F19, B5A825F37, B59DE5F54, B593A5F71, B58965F8E, B57F25FAC, B574E5FC9, B56AA5FE6, B56066003, B55666021, B54C2603E, B541E605B, B537A6079, B52D66096, B523660B3, B519260D1, B50EE60EE, B504A610C, B4FAA6129, B4F066147, B4E626164, B4DBE6182, B4D1E619F, B4C7A61BD, B4BD661DA, B4B3661F8, B4A926215, B49EE6233, B494E6251, B48AA626E, B480A628C, B476662AA, B46C662C7, B462262E5, B457E6303, B44DE6320, B443A633E, B439A635C, B42F6637A, B42566397, B41B263B5, B411263D3, B406E63F1, B3FCE640F, B3F2E642C, B3E8A644A, B3DEA6468, B3D466486, B3CA664A4, B3C0664C2, B3B6264E0, B3AC264FE, B3A1E651C, B397E653A, B38DE6558, B383A6576, B379A6594, B36FA65B2, B365A65D0, B35B665EE, B3516660C, B3476662A, B33D66649, B33326667, B32926685, B31F266A3, B315266C1, B30B266DF, B300E66FE, B2F6E671C, B2ECE673A, B2E2E6758, B2D8E6777, B2CEE6795, B2C4E67B3, B2BAE67D2, B2B0E67F0, B2A6E680E, B29CE682D, B292A684B, B288A686A, B27EA6888, B274A68A7, B26AA68C5, B260A68E3, B256E6902, B24CE6920, B242E693F, B238E695D, B22EE697C, B224E699B, B21AE69B9, B210E69D8, B206E69F6, B1FCE6A15, B1F326A34, B1E926A52, B1DF26A71, B1D526A90, B1CB26AAE, B1C166ACD, B1B766AEC, B1AD66B0B, B1A366B29, B19966B48, B18FA6B67, B185A6B86, B17BA6BA5, B171E6BC3, B167E6BE2, B15DE6C01, B15426C20, B14A26C3F, B14026C5E, B13666C7D, B12C66C9C, B122A6CBB, B118A6CDA, B10EA6CF9, B104E6D18, B0FAE6D37, B0F126D56, B0E726D75, B0DD66D94, B0D366DB3, B0C9A6DD2, B0BFA6DF1, B0B5E6E10, B0ABE6E2F, B0A226E4F, B09826E6E, B08E66E8D, B084A6EAC, B07AA6ECB, B070E6EEB, B066E6F0A, B05D26F29, B05366F48, B04966F68, B03FA6F87, B035E6FA6, B02BE6FC6, B02226FE5, B01867004, B00EA7024, B004A7043, AFFAE7063, AFF127082, AFE7670A2, AFDDA70C1, AFD3A70E0, AFC9E7100, AFC02711F, AFB66713F, AFACA715E, AFA2E717E, AF98E719E, AF8F271BD, AF85671DD, AF7BA71FC, AF71E721C, AF682723C, AF5E6725B, AF54A727B, AF4AE729B, AF41272BA, AF37672DA, AF2DA72FA, AF23E731A, AF1A27339, AF1067359, AF06A7379, AEFCE7399, AEF3273B9, AEE9673D8, AEDFE73F8, AED627418, AECC67438, AEC2A7458, AEB8E7478, AEAF27498, AEA5674B8, AE9BE74D8, AE92274F8, AE8867518, AE7EA7538, AE7527558, AE6B67578, AE61A7598, AE57E75B8, AE4E675D8, AE44A75F8, AE3AE7618, AE3167638, AE27A7658, AE1DE7678, AE1467699, AE0AA76B9, AE01276D9, ADF7676F9, ADEDA7719, ADE42773A, ADDA6775A, ADD0E777A, ADC72779A, ADBDA77BB, ADB3E77DB, ADAA677FB, ADA0A781C, AD972783C, AD8D6785C, AD83E787D, AD7A2789D, AD70A78BE, AD67278DE, AD5D678FE, AD53E791F, AD4A2793F, AD40A7960, AD3727980, AD2D679A1, AD23E79C1, AD1A679E2, AD10A7A03, AD0727A23, ACFDA7A44, ACF427A64, ACEA67A85, ACE0E7AA6, ACD767AC6, ACCDE7AE7, ACC467B08, ACBAA7B28, ACB127B49, ACA7A7B6A, AC9E27B8A, AC94A7BAB, AC8B27BCC, AC81A7BED, AC77E7C0D, AC6E67C2E, AC64E7C4F, AC5B67C70, AC51E7C91, AC4867CB2, AC3EE7CD3, AC3567CF3, AC2BE7D14, AC2267D35, AC18E7D56, AC0F67D77, AC05E7D98, ABFC67DB9, ABF2E7DDA, ABE9A7DFB, ABE027E1C, ABD6A7E3D, ABCD27E5E, ABC3A7E7F, ABBA27EA0, ABB0A7EC2, ABA767EE3, AB9DE7F04, AB9467F25, AB8AE7F46, AB8167F67, AB7827F88, AB6EA7FAA, AB6527FCB, AB5BE7FEC, AB526800D, AB48E802F, AB3FA8050, AB3628071, AB2CA8092, AB23680B4, AB19E80D5, AB10680F6, AB0728118, AAFDA8139, AAF46815B, AAEAE817C, AAE16819D, AAD8281BF, AACEA81E0, AAC568202, AABBE8223, AAB2A8245, AAA928266, AA9FE8288, AA96A82A9, AA8D282CB, AA83E82EC, AA7A6830E, AA7128330, AA67E8351, AA5E68373, AA5528394, AA4BA83B6, AA42683D8, AA39283F9, AA2FE841B, AA266843D, AA1D2845F, AA13E8480, AA0A684A2, AA01284C4, A9F7E84E6, A9EEA8507, A9E568529, A9DBE854B, A9D2A856D, A9C96858F, A9C0285B1, A9B6E85D2, A9ADA85F4, A9A468616, A99AE8638, A991A865A, A9886867C, A97F2869E, A975E86C0, A96CA86E2, A96368704, A95A28726, A950E8748, A947A876A, A93E6878C, A935287AE, A92BE87D0, A922A87F2, A91968815, A91068837, A90728859, A8FDE887B, A8F4A889D, A8EB688BF, A8E2288E2, A8D8E8904, A8CFE8926, A8C6A8948, A8BD6896A, A8B42898D, A8AB289AF, A8A1E89D1, A898A89F4, A88F68A16, A88668A38, A87D28A5B, A873E8A7D, A86AE8A9F, A861A8AC2, A85868AE4, A84F68B07, A84628B29, A83D28B4C, A833E8B6E, A82AA8B91, A821A8BB3, A81868BD6, A80F68BF8, A80628C1B, A7FD28C3D, A7F3E8C60, A7EAE8C82, A7E1A8CA5, A7D8A8CC8, A7CF68CEA, A7C668D0D, A7BD68D2F, A7B428D52, A7AB28D75, A7A1E8D98, A798E8DBA, A78FE8DDD, A786A8E00, A77DA8E22, A774A8E45, A76B68E68, A76268E8B, A75968EAE, A75068ED0, A74728EF3, A73E28F16, A73528F39, A72C28F5C, A72328F7F, A719E8FA2, A710E8FC5, A707E8FE7, A6FEE900A, A6F5E902D, A6ECE9050, A6E3E9073, A6DAE9096, A6D1E90B9, A6C8A90DC, A6BFA90FF, A6B6A9122, A6ADA9146, A6A4A9169, A69BA918C, A692A91AF, A689E91D2, A680E91F5, A677E9218, A66EE923B, A665E925F, A65CE9282, A653E92A5, A64AE92C8, A641E92EB, A6392930F, A63029332, A62729355, A61E29379, A6152939C, A60C693BF, A603693E2, A5FA69406, A5F169429, A5E8A944D, A5DFA9470, A5D6A9493, A5CDE94B7, A5C4E94DA, A5BBE94FE, A5B329521, A5AA29545, A5A129568, A5986958C, A58F695AF, A586A95D3;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 1kx18',
    'CSET read_width_a = 36',
    'CSET read_width_b = 36',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 36',
    'CSET write_width_b = 36',
    'CSET component_name = bmg_72_284f56a19a87aaea',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '2d68f042a5dbefdb140ad561f9d9da39',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_284f56a19a87aaea',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 30FBE26F9, 30F0626E6, 30E4A26D3, 30D9226C0, 30CD626AC, 30C1E2699, 30B622686, 30AAA2673, 309EE2660, 30936264D, 3087A263A, 307C22627, 307062614, 3064E2601, 3059225EE, 304DA25DB, 3041E25C8, 3036625B5, 302AA25A2, 301EE258F, 30136257C, 3007A2569, 2FFC22556, 2FF062544, 2FE4A2531, 2FD92251E, 2FCD6250B, 2FC1E24F8, 2FB6224E6, 2FAA624D3, 2F9EE24C0, 2F93224AE, 2F876249B, 2F7BE2488, 2F7022476, 2F6462463, 2F58E2450, 2F4D2243E, 2F416242B, 2F35A2419, 2F2A22406, 2F1E623F4, 2F12A23E1, 2F06E23CF, 2EFB623BC, 2EEFA23AA, 2EE3E2397, 2ED822385, 2ECCA2373, 2EC0E2360, 2EB52234E, 2EA96233B, 2E9DA2329, 2E9222317, 2E8662305, 2E7AA22F2, 2E6EE22E0, 2E63222CE, 2E57622BC, 2E4BE22A9, 2E4022297, 2E3462285, 2E28A2273, 2E1CE2261, 2E112224F, 2E056223D, 2DF9A222B, 2DEDE2219, 2DE262207, 2DD6A21F5, 2DCAE21E3, 2DBF221D1, 2DB3621BF, 2DA7A21AD, 2D9BE219B, 2D9022189, 2D8462177, 2D78A2165, 2D6CE2153, 2D6122141, 2D5562130, 2D49A211E, 2D3DE210C, 2D32220FA, 2D26620E9, 2D1AA20D7, 2D0EE20C5, 2D03220B3, 2CF7620A2, 2CEBA2090, 2CDFE207F, 2CD3E206D, 2CC82205B, 2CBC6204A, 2CB0A2038, 2CA4E2027, 2C9922015, 2C8D62004, 2C81A1FF2, 2C75E1FE1, 2C69E1FCF, 2C5E21FBE, 2C5261FAC, 2C46A1F9B, 2C3AE1F8A, 2C2F21F78, 2C2321F67, 2C1761F56, 2C0BA1F44, 2BFFE1F33, 2BF421F22, 2BE821F10, 2BDC61EFF, 2BD0A1EEE, 2BC4E1EDD, 2BB921ECC, 2BAD21EBA, 2BA161EA9, 2B95A1E98, 2B89E1E87, 2B7DE1E76, 2B7221E65, 2B6661E54, 2B5A61E43, 2B4EA1E32, 2B42E1E21, 2B36E1E10, 2B2B21DFF, 2B1F61DEE, 2B1361DDD, 2B07A1DCC, 2AFBE1DBB, 2AEFE1DAA, 2AE421D99, 2AD861D89, 2ACC61D78, 2AC0A1D67, 2AB4E1D56, 2AA8E1D46, 2A9D21D35, 2A9121D24, 2A8561D13, 2A79A1D03, 2A6DA1CF2, 2A61E1CE1, 2A55E1CD1, 2A4A21CC0, 2A3E21CAF, 2A3261C9F, 2A26A1C8E, 2A1AA1C7E, 2A0EE1C6D, 2A02E1C5D, 29F721C4C, 29EB21C3C, 29DF61C2B, 29D361C1B, 29C7A1C0A, 29BBA1BFA, 29AFE1BEA, 29A3E1BD9, 299821BC9, 298C21BB9, 298021BA8, 297461B98, 296861B88, 295CA1B78, 2950A1B67, 2944E1B57, 2938E1B47, 292CE1B37, 292121B27, 291521B16, 290961B06, 28FD61AF6, 28F161AE6, 28E5A1AD6, 28D9A1AC6, 28CDA1AB6, 28C1E1AA6, 28B5E1A96, 28AA21A86, 289E21A76, 289221A66, 288661A56, 287A61A46, 286E61A36, 286261A27, 2856A1A17, 284AA1A07, 283EA19F7, 2832E19E7, 2826E19D7, 281AE19C8, 280EE19B8, 2803219A8, 27F721999, 27EB21989, 27DF21979, 27D36196A, 27C76195A, 27BB6194A, 27AF6193B, 27A3A192B, 2797A191C, 278BA190C, 277FA18FC, 2773A18ED, 2767A18DE, 275BE18CE, 274FE18BF, 2743E18AF, 2737E18A0, 272BE1890, 271FE1881, 271421872, 270821862, 26FC21853, 26F021844, 26E421834, 26D821825, 26CC21816, 26C021807, 26B4217F7, 26A8617E8, 269C617D9, 2690617CA, 2684617BB, 2678617AC, 266C6179D, 26606178E, 26546177E, 26486176F, 263C61760, 263061751, 262461742, 261861733, 260C61724, 260061716, 25F461707, 25E8616F8, 25DC616E9, 25D0616DA, 25C4616CB, 25B8616BC, 25AC616AE, 25A06169F, 259461690, 258861681, 257C61673, 257061664, 256461655, 255861646, 254C21638, 254021629, 25342161B, 25282160C, 251C215FD, 2510215EF, 2504215E0, 24F8215D2, 24EC215C3, 24DFE15B5, 24D3E15A6, 24C7E1598, 24BBE1589, 24AFE157B, 24A3E156D, 2497E155E, 248BA1550, 247FA1541, 2473A1533, 2467A1525, 245BA1517, 244F61508, 2443614FA, 2437614EC, 242B614DE, 241F614CF, 2413214C1, 2407214B3, 23FB214A5, 23EF21497, 23E2E1489, 23D6E147B, 23CAE146D, 23BEE145E, 23B2A1450, 23A6A1442, 239AA1434, 238EA1426, 238261419, 23766140B, 236A613FD, 235E213EF, 2352213E1, 2346213D3, 2339E13C5, 232DE13B7, 2321E13AA, 2315A139C, 2309A138E, 22FDA1380, 22F161373, 22E561365, 22D961357, 22CD21349, 22C12133C, 22B52132E, 22A8E1321, 229CE1313, 2290A1305, 2284A12F8, 2278A12EA, 226C612DD, 2260612CF, 2254212C2, 2248212B4, 223BE12A7, 222FE1299, 2223E128C, 2217A127F, 220BA1271, 21FF61264, 21F361256, 21E721249, 21DB2123C, 21CEE122F, 21C2E1221, 21B6A1214, 21AAA1207, 219E611FA, 2192611EC, 2186211DF, 217A211D2, 216DE11C5, 2161E11B8, 2155A11AB, 2149A119E, 213D61191, 213161184, 212521177, 21192116A, 210CE115D, 2100A1150, 20F4A1143, 20E861136, 20DC61129, 20D02111C, 20C42110F, 20B7E1102, 20ABA10F5, 209FA10E8, 2093610DC, 2087610CF, 207B210C2, 206EE10B5, 2062E10A9, 2056A109C, 204A6108F, 203E61083, 203221076, 2025E1069, 2019E105D, 200DA1050, 200161043, 1FF561037, 1FE92102A, 1FDCE101E, 1FD0E1011, 1FC4A1005, 1FB860FF8, 1FAC60FEC, 1FA020FE0, 1F93E0FD3, 1F87E0FC7, 1F7BA0FBA, 1F6F60FAE, 1F6320FA2, 1F5720F95, 1F4AE0F89, 1F3EA0F7D, 1F3260F71, 1F2660F64, 1F1A20F58, 1F0DE0F4C, 1F01A0F40, 1EF5A0F34, 1EE960F27, 1EDD20F1B, 1ED0E0F0F, 1EC4A0F03, 1EB8A0EF7, 1EAC60EEB, 1EA020EDF, 1E93E0ED3, 1E87A0EC7, 1E7BA0EBB, 1E6F60EAF, 1E6320EA3, 1E56E0E97, 1E4AA0E8B, 1E3E60E7F, 1E3260E73, 1E2620E68, 1E19E0E5C, 1E0DA0E50, 1E0160E44, 1DF520E38, 1DE8E0E2D, 1DDCE0E21, 1DD0A0E15, 1DC460E09, 1DB820DFE, 1DABE0DF2, 1D9FA0DE6, 1D9360DDB, 1D8720DCF, 1D7AE0DC4, 1D6EE0DB8, 1D62A0DAD, 1D5660DA1, 1D4A20D95, 1D3DE0D8A, 1D31A0D7F, 1D2560D73, 1D1920D68, 1D0CE0D5C, 1D00A0D51, 1CF460D45, 1CE820D3A, 1CDBE0D2F, 1CCFA0D23, 1CC360D18, 1CB720D0D, 1CAAE0D02, 1C9EA0CF6, 1C9260CEB, 1C8620CE0, 1C79E0CD5, 1C6DA0CC9, 1C6160CBE, 1C5520CB3, 1C48E0CA8, 1C3CA0C9D, 1C3060C92, 1C2420C87, 1C17E0C7C, 1C0BA0C71, 1BFF60C66, 1BF320C5B, 1BE6E0C50, 1BDAA0C45, 1BCE60C3A, 1BC220C2F, 1BB5E0C24, 1BA9A0C19, 1B9D20C0E, 1B90E0C04, 1B84A0BF9, 1B7860BEE, 1B6C20BE3, 1B5FE0BD8, 1B53A0BCE, 1B4760BC3, 1B3B20BB8, 1B2EE0BAE, 1B2260BA3, 1B1620B98, 1B09E0B8E, 1AFDA0B83, 1AF160B78, 1AE520B6E, 1AD8E0B63, 1ACC60B59, 1AC020B4E, 1AB3E0B44, 1AA7A0B39, 1A9B60B2F, 1A8F20B24, 1A82E0B1A, 1A7660B10, 1A6A20B05, 1A5DE0AFB, 1A51A0AF0, 1A4560AE6, 1A38E0ADC, 1A2CA0AD2, 1A2060AC7, 1A1420ABD, 1A07E0AB3, 19FB60AA9, 19EF20A9E, 19E2E0A94, 19D6A0A8A, 19CA20A80, 19BDE0A76, 19B1A0A6C, 19A560A62, 1998E0A58, 198CA0A4E, 198060A44, 197420A3A, 1967A0A30, 195B60A26, 194F20A1C, 1942E0A12, 193660A08, 192A209FE, 191DE09F4, 1911609EA, 1905209E0, 18F8E09D7, 18ECA09CD, 18E0209C3, 18D3E09B9, 18C7A09AF, 18BB209A6, 18AEE099C, 18A2A0992, 189620989, 1889E097F, 187DA0975, 18712096C, 1864E0962, 1858A0959, 184C2094F, 183FE0946, 1833A093C, 182720933, 181AE0929, 180EA0920, 180220916, 17F5E090D, 17E960903, 17DD208FA, 17D0E08F1, 17C4608E7, 17B8208DE, 17ABA08D5, 179F608CB, 1793208C2, 1786A08B9, 177A608B0, 176DE08A6, 1761A089D, 175560894, 1748E088B, 173CA0882, 173020879, 1723E0870, 171760866, 170B2085D, 16FEE0854, 16F26084B, 16E620842, 16D9A0839, 16CD60830, 16C0E0827, 16B4A081F, 16A820816, 169BE080D, 168F60804, 1683207FB, 1676A07F2, 166A607E9, 165DE07E1, 1651A07D8, 1645207CF, 1638E07C6, 162C607BE, 1620207B5, 1613A07AC, 1607607A4, 15FAE079B, 15EEA0792, 15E22078A, 15D5E0781, 15C960779, 15BD20770, 15B0A0767, 15A46075F, 1597E0756, 158BA074E, 157F20746, 1572A073D, 156660735, 1559E072C, 154DA0724, 15412071C, 1534E0713, 15286070B, 151BE0703, 150FA06FA, 1503206F2, 14F6E06EA, 14EA606E2, 14DE206D9, 14D1A06D1, 14C5206C9, 14B8E06C1, 14AC606B9, 14A0206B1, 1493A06A9, 1487206A1, 147AE0698, 146E60690, 1461E0688, 1455A0680, 144920678, 143CE0670, 143060669, 1423E0661, 1417A0659, 140B20651, 13FEA0649, 13F260641, 13E5E0639, 13D960632, 13CD2062A, 13C0A0622, 13B42061A, 13A7E0613, 139B6060B, 138EE0603, 1382A05FB, 1376205F4, 1369A05EC, 135D605E5, 1350E05DD, 1344605D5, 1338205CE, 132BA05C6, 131F205BF, 1312E05B7, 1306605B0, 12F9E05A8, 12ED605A1, 12E120599, 12D4A0592, 12C82058B, 12BBE0583, 12AF6057C, 12A2E0575, 12966056D, 128A20566, 127DA055F, 127120557, 1264A0550, 125860549, 124BE0542, 123F6053B, 1232E0534, 1226A052C, 121A20525, 120DA051E, 120120517, 11F4E0510, 11E860509, 11DBE0502, 11CF604FB, 11C2E04F4, 11B6A04ED, 11AA204E6, 119DA04DF, 1191204D8, 1184E04D1, 1178604CA, 116BE04C4, 115F604BD, 1152E04B6, 1146A04AF, 113A204A8, 112DA04A2, 11212049B, 1114A0494, 11086048E, 10FBE0487, 10EF60480, 10E2E047A, 10D660473, 10C9E046C, 10BDA0466, 10B12045F, 10A4A0459, 109820452, 108BA044C, 107F20445, 1072E043F, 106660438, 1059E0432, 104D6042B, 1040E0425, 10346041F, 1027E0418, 101BA0412, 100F2040C, 1002A0405, FF6203FF, FE9A03F9, FDD203F2, FD0A03EC, FC4203E6, FB7A03E0, FAB603DA, F9EE03D4, F92603CD, F85E03C7, F79603C1, F6CE03BB, F60603B5, F53E03AF, F47603A9, F3B203A3, F2EA039D, F2220397, F15A0391, F092038B, EFCA0385, EF020380, EE3A037A, ED720374, ECAA036E, EBE20368, EB1A0362, EA52035D, E98E0357, E8C60351, E7FE034C, E7360346, E66E0340, E5A6033B, E4DE0335, E416032F, E34E032A, E2860324, E1BE031F, E0F60319, E02E0314, DF66030E, DE9E0309, DDD60303, DD0E02FE, DC4602F8, DB7E02F3, DAB602EE, D9EE02E8, D92602E3, D85E02DE, D79602D8, D6CE02D3, D60602CE, D53E02C8, D47602C3, D3AE02BE, D2E602B9, D21E02B4, D15602AF, D08E02A9, CFC602A4, CEFE029F, CE36029A, CD6E0295, CCA60290, CBDE028B, CB160286, CA4E0281, C986027C, C8BE0277, C7F60272, C72E026D, C6660268, C59E0264, C4D6025F, C40E025A, C3460255, C27E0250, C1B6024C, C0EE0247, C0260242, BF5E023D, BE960239, BDCE0234, BD06022F, BC3E022B, BB760226, BAAE0222, B9E6021D, B91A0218, B8520214, B78A020F, B6C2020B, B5FA0206, B5320202, B46A01FE, B3A201F9, B2DA01F5, B21201F0, B14A01EC, B08201E8, AFBA01E3, AEF201DF, AE2601DB, AD5E01D6, AC9601D2, ABCE01CE, AB0601CA, AA3E01C6, A97601C1, A8AE01BD, A7E601B9, A71E01B5, A65601B1, A58A01AD, A4C201A9, A3FA01A5, A33201A1, A26A019D, A1A20199, A0DA0195, A0120191, 9F4A018D, 9E7E0189, 9DB60185, 9CEE0181, 9C26017E, 9B5E017A, 9A960176, 99CE0172, 9906016E, 983E016B, 97720167, 96AA0163, 95E2015F, 951A015C, 94520158, 938A0155, 92C20151, 91F6014D, 912E014A, 90660146, 8F9E0143, 8ED6013F, 8E0E013C, 8D460138, 8C7A0135, 8BB20131, 8AEA012E, 8A22012A, 895A0127, 88920124, 87CA0120, 86FE011D, 8636011A, 856E0116, 84A60113, 83DE0110, 8316010D, 824A010A, 81820106, 80BA0103, 7FF20100, 7F2A00FD, 7E6200FA, 7D9600F7, 7CCE00F4, 7C0600F1, 7B3E00EE, 7A7600EA, 79AE00E7, 78E200E5, 781A00E2, 775200DF, 768A00DC, 75C200D9, 74F600D6, 742E00D3, 736600D0, 729E00CD, 71D600CB, 710E00C8, 704200C5, 6F7A00C2, 6EB200C0, 6DEA00BD, 6D2200BA, 6C5600B8, 6B8E00B5, 6AC600B2, 69FE00B0, 693600AD, 686A00AA, 67A200A8, 66DA00A5, 661200A3, 654A00A0, 647E009E, 63B6009B, 62EE0099, 62260097, 615E0094, 60920092, 5FCA008F, 5F02008D, 5E3A008B, 5D720088, 5CA60086, 5BDE0084, 5B160082, 5A4E007F, 5982007D, 58BA007B, 57F20079, 572A0077, 56620075, 55960072, 54CE0070, 5406006E, 533E006C, 5272006A, 51AA0068, 50E20066, 501A0064, 4F520062, 4E860060, 4DBE005E, 4CF6005D, 4C2E005B, 4B620059, 4A9A0057, 49D20055, 490A0053, 483E0052, 47760050, 46AE004E, 45E6004C, 451E004B, 44520049, 438A0047, 42C20046, 41FA0044, 412E0042, 40660041, 3F9E003F, 3ED6003E, 3E0A003C, 3D42003B, 3C7A0039, 3BB20038, 3AE60036, 3A1E0035, 39560033, 388E0032, 37C20031, 36FA002F, 3632002E, 356A002D, 349E002B, 33D6002A, 330E0029, 32460027, 317A0026, 30B20025, 2FEA0024, 2F220023, 2E560022, 2D8E0020, 2CC6001F, 2BFE001E, 2B32001D, 2A6A001C, 29A2001B, 28DA001A, 280E0019, 27460018, 267E0017, 25B60016, 24EA0015, 24220014, 235A0014, 22920013, 21C60012, 20FE0011, 20360010, 1F6E000F, 1EA2000F, 1DDA000E, 1D12000D, 1C46000C, 1B7E000C, 1AB6000B, 19EE000A, 1922000A, 185A0009, 17920009, 16CA0008, 15FE0008, 15360007, 146E0007, 13A60006, 12DA0006, 12120005, 114A0005, 10820004, FB60004, EEE0003, E260003, D5E0003, C920002, BCA0002, B020002, A360002, 96E0001, 8A60001, 7DE0001, 7120001, 64A0001, 5820000, 4BA0000, 3EE0000, 3260000, 25E0000, 1960000, CA0000;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 1kx18',
    'CSET read_width_a = 36',
    'CSET read_width_b = 36',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 36',
    'CSET write_width_b = 36',
    'CSET component_name = bmg_72_2894f866823b7de9',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ff426762f692fa17b6894c79e7eaf2be',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_2894f866823b7de9',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 89BE73C11, 89B9B3C3F, 89B4F3C6E, 89B033C9C, 89AB33CCB, 89A673CF9, 89A1B3D28, 899CF3D56, 899833D85, 899373DB3, 898EB3DE2, 8989F3E10, 898533E3F, 898073E6D, 897BB3E9C, 8976F3ECA, 897233EF9, 896D73F27, 8968B3F56, 8963F3F85, 895F33FB3, 895A73FE2, 8955B4010, 89513403F, 894C7406E, 8947B409C, 8942F40CB, 893E340F9, 8939B4128, 8934F4157, 893034185, 892BB41B4, 8926F41E3, 892234211, 891DB4240, 8918F426F, 89143429D, 890FB42CC, 890AF42FB, 89067432A, 8901B4358, 88FD34387, 88F8743B6, 88F3F43E5, 88EF34413, 88EAB4442, 88E5F4471, 88E1744A0, 88DCF44CE, 88D8344FD, 88D3B452C, 88CEF455B, 88CA7458A, 88C5F45B8, 88C1745E7, 88BCB4616, 88B834645, 88B3B4674, 88AF346A3, 88AA746D1, 88A5F4700, 88A17472F, 889CF475E, 88987478D, 8893F47BC, 888F747EB, 888AF481A, 888674849, 8881F4877, 887D748A6, 8878F48D5, 887474904, 886FF4933, 886B74962, 8866F4991, 8862749C0, 885DF49EF, 885974A1E, 8854F4A4D, 885074A7C, 884C34AAB, 8847B4ADA, 884334B09, 883EB4B38, 883A74B67, 8835F4B96, 883174BC5, 882CF4BF4, 8828B4C23, 882434C52, 881FF4C81, 881B74CB1, 8816F4CE0, 8812B4D0F, 880E34D3E, 8809F4D6D, 880574D9C, 880134DCB, 87FCB4DFA, 87F874E29, 87F3F4E59, 87EFB4E88, 87EB34EB7, 87E6F4EE6, 87E2B4F15, 87DE34F44, 87D9F4F74, 87D5B4FA3, 87D134FD2, 87CCF5001, 87C8B5030, 87C435060, 87BFF508F, 87BBB50BE, 87B7750ED, 87B33511C, 87AEB514C, 87AA7517B, 87A6351AA, 87A1F51D9, 879DB5209, 879975238, 879535267, 8790F5297, 878CB52C6, 8788752F5, 878435325, 877FF5354, 877BB5383, 8777753B3, 8773353E2, 876EF5411, 876AB5441, 876675470, 87627549F, 875E354CF, 8759F54FE, 8755B552D, 8751B555D, 874D7558C, 8749355BC, 8744F55EB, 8740F561A, 873CB564A, 873875679, 8734756A9, 8730356D8, 872BF5708, 8727F5737, 8723B5766, 871FB5796, 871B757C5, 8717757F5, 871335824, 870F35854, 870AF5883, 8706F58B3, 8702B58E2, 86FEB5912, 86FAB5941, 86F675971, 86F2759A0, 86EE759D0, 86EA35A00, 86E635A2F, 86E235A5F, 86DE35A8E, 86D9F5ABE, 86D5F5AED, 86D1F5B1D, 86CDF5B4D, 86C9F5B7C, 86C5B5BAC, 86C1B5BDB, 86BDB5C0B, 86B9B5C3B, 86B5B5C6A, 86B1B5C9A, 86ADB5CCA, 86A9B5CF9, 86A5B5D29, 86A1B5D58, 869DB5D88, 8699B5DB8, 8695B5DE7, 8691B5E17, 868DB5E47, 8689F5E77, 8685F5EA6, 8681F5ED6, 867DF5F06, 8679F5F35, 8675F5F65, 867235F95, 866E35FC5, 866A35FF4, 866676024, 866276054, 865E76084, 865AB60B3, 8656B60E3, 8652B6113, 864EF6143, 864AF6172, 8647361A2, 8643361D2, 863F36202, 863B76232, 8637B6262, 8633B6291, 862FF62C1, 862BF62F1, 862836321, 862436351, 862076381, 861CB63B0, 8618B63E0, 8614F6410, 861136440, 860D36470, 8609764A0, 8605B64D0, 8601F6500, 85FDF6530, 85FA3655F, 85F67658F, 85F2B65BF, 85EEF65EF, 85EB3661F, 85E77664F, 85E3B667F, 85DFB66AF, 85DBF66DF, 85D83670F, 85D47673F, 85D0B676F, 85CCF679F, 85C9367CF, 85C5B67FF, 85C1F682F, 85BE3685F, 85BA7688F, 85B6B68BF, 85B2F68EF, 85AF3691F, 85ABB694F, 85A7F697F, 85A4369AF, 85A0769DF, 859CF6A0F, 859936A3F, 859576A6F, 8591B6A9F, 858E36AD0, 858A76B00, 8586F6B30, 858336B60, 857F76B90, 857BF6BC0, 857836BF0, 8574B6C20, 8570F6C50, 856D76C81, 8569B6CB1, 856636CE1, 856276D11, 855EF6D41, 855B76D71, 8557B6DA1, 855436DD2, 855076E02, 854CF6E32, 854976E62, 8545F6E92, 854236EC3, 853EB6EF3, 853B36F23, 8537B6F53, 8533F6F83, 853076FB4, 852CF6FE4, 852977014, 8525F7044, 852277075, 851EF70A5, 851B770D5, 8517B7105, 851437136, 8510B7166, 850D37196, 8509B71C6, 8506771F7, 8502F7227, 84FF77257, 84FBF7288, 84F8772B8, 84F4F72E8, 84F177319, 84EDF7349, 84EAB7379, 84E7373AA, 84E3B73DA, 84E03740A, 84DCF743B, 84D97746B, 84D5F749B, 84D2774CC, 84CF374FC, 84CBB752C, 84C87755D, 84C4F758D, 84C1775BE, 84BE375EE, 84BAB761E, 84B77764F, 84B3F767F, 84B0B76B0, 84AD376E0, 84A9F7711, 84A677741, 84A337771, 849FF77A2, 849C777D2, 849937803, 8495B7833, 849277864, 848F37894, 848BF78C5, 8488778F5, 848537926, 8481F7956, 847EB7987, 847B379B7, 8477F79E8, 8474B7A18, 847177A49, 846E37A79, 846AF7AAA, 8467B7ADA, 846477B0B, 846137B3B, 845DF7B6C, 845AB7B9C, 845777BCD, 845437BFE, 8450F7C2E, 844DB7C5F, 844A77C8F, 844737CC0, 8443F7CF0, 8440B7D21, 843D77D52, 843A37D82, 843737DB3, 8433F7DE3, 8430B7E14, 842D77E45, 842A77E75, 842737EA6, 8423F7ED7, 8420F7F07, 841DB7F38, 841A77F69, 841777F99, 841437FCA, 8410F7FFB, 840DF802B, 840AB805C, 8407B808D, 8404780BD, 8401780EE, 83FE3811F, 83FB3814F, 83F838180, 83F4F81B1, 83F1F81E1, 83EEB8212, 83EBB8243, 83E8B8274, 83E5782A4, 83E2782D5, 83DF78306, 83DC78337, 83D938367, 83D638398, 83D3383C9, 83D0383FA, 83CD3842A, 83C9F845B, 83C6F848C, 83C3F84BD, 83C0F84EE, 83BDF851E, 83BAF854F, 83B7F8580, 83B4F85B1, 83B1F85E2, 83AEF8612, 83ABF8643, 83A8F8674, 83A5F86A5, 83A2F86D6, 839FF8707, 839CF8737, 839A38768, 839738799, 8394387CA, 8391387FB, 838E3882C, 838B7885D, 83887888D, 8385788BE, 8382788EF, 837FB8920, 837CB8951, 8379B8982, 8376F89B3, 8373F89E4, 837138A15, 836E38A45, 836B78A76, 836878AA7, 836578AD8, 8362B8B09, 835FF8B3A, 835CF8B6B, 835A38B9C, 835738BCD, 835478BFE, 835178C2F, 834EB8C60, 834BF8C91, 8348F8CC2, 834638CF3, 834378D24, 8340B8D55, 833DB8D86, 833AF8DB7, 833838DE8, 833578E19, 833278E4A, 832FB8E7B, 832CF8EAC, 832A38EDD, 832778F0E, 8324B8F3F, 8321F8F70, 831F38FA1, 831C78FD2, 8319B9003, 8316F9034, 831439065, 831179096, 830EB90C7, 830BF90F8, 830939129, 83067915A, 8303B918C, 8301391BD, 82FE791EE, 82FBB921F, 82F8F9250, 82F639281, 82F3B92B2, 82F0F92E3, 82EE39314, 82EBB9345, 82E8F9377, 82E6393A8, 82E3B93D9, 82E0F940A, 82DE3943B, 82DBB946C, 82D8F949D, 82D6794CF, 82D3B9500, 82D139531, 82CE79562, 82CBF9593, 82C9395C4, 82C6B95F5, 82C439627, 82C179658, 82BEF9689, 82BC396BA, 82B9B96EB, 82B73971D, 82B4B974E, 82B1F977F, 82AF797B0, 82ACF97E1, 82AA79813, 82A7B9844, 82A539875, 82A2B98A6, 82A0398D8, 829DB9909, 829B3993A, 8298B996B, 82963999D, 8293B99CE, 8291399FF, 828EB9A30, 828C39A62, 8289B9A93, 828739AC4, 8284B9AF5, 828239B27, 827FB9B58, 827D39B89, 827AB9BBB, 827839BEC, 8275F9C1D, 827379C4E, 8270F9C80, 826E79CB1, 826BF9CE2, 8269B9D14, 826739D45, 8264B9D76, 826279DA8, 825FF9DD9, 825D79E0A, 825B39E3C, 8258B9E6D, 825679E9E, 8253F9ED0, 8251B9F01, 824F39F32, 824CF9F64, 824A79F95, 824839FC6, 8245B9FF8, 82437A029, 8240FA05B, 823EBA08C, 823C7A0BD, 8239FA0EF, 8237BA120, 82357A152, 8232FA183, 8230BA1B4, 822E7A1E6, 822C3A217, 8229BA249, 82277A27A, 82253A2AB, 8222FA2DD, 8220BA30E, 821E7A340, 821C3A371, 8219BA3A3, 82177A3D4, 82153A405, 8212FA437, 8210BA468, 820E7A49A, 820C3A4CB, 8209FA4FD, 8207FA52E, 8205BA560, 82037A591, 82013A5C3, 81FEFA5F4, 81FCBA626, 81FA7A657, 81F87A689, 81F63A6BA, 81F3FA6EC, 81F1BA71D, 81EFBA74F, 81ED7A780, 81EB3A7B2, 81E93A7E3, 81E6FA815, 81E4BA846, 81E2BA878, 81E07A8A9, 81DE7A8DB, 81DC3A90C, 81D9FA93E, 81D7FA96F, 81D5BA9A1, 81D3BA9D2, 81D1BAA04, 81CF7AA36, 81CD7AA67, 81CB3AA99, 81C93AACA, 81C73AAFC, 81C4FAB2D, 81C2FAB5F, 81C0FAB91, 81BEBABC2, 81BCBABF4, 81BABAC25, 81B8BAC57, 81B67AC88, 81B47ACBA, 81B27ACEC, 81B07AD1D, 81AE7AD4F, 81AC7AD80, 81AA7ADB2, 81A87ADE4, 81A63AE15, 81A43AE47, 81A23AE79, 81A03AEAA, 819E3AEDC, 819C3AF0D, 819A7AF3F, 81987AF71, 81967AFA2, 81947AFD4, 81927B006, 81907B037, 818E7B069, 818CBB09B, 818ABB0CC, 8188BB0FE, 8186BB130, 8184FB161, 8182FB193, 8180FB1C5, 817EFB1F6, 817D3B228, 817B3B25A, 81797B28B, 81777B2BD, 81757B2EF, 8173BB320, 8171BB352, 816FFB384, 816DFB3B5, 816C3B3E7, 816A3B419, 81687B44B, 81667B47C, 8164BB4AE, 8162FB4E0, 8160FB511, 815F3B543, 815D7B575, 815B7B5A7, 8159BB5D8, 8157FB60A, 8155FB63C, 81543B66E, 81527B69F, 8150BB6D1, 814EFB703, 814D3B735, 814B3B766, 81497B798, 8147BB7CA, 8145FB7FC, 81443B82D, 81427B85F, 8140BB891, 813EFB8C3, 813D3B8F5, 813B7B926, 8139BB958, 8137FB98A, 81363B9BC, 81347B9ED, 8132BBA1F, 81313BA51, 812F7BA83, 812DBBAB5, 812BFBAE6, 812A3BB18, 8128BBB4A, 8126FBB7C, 81253BBAE, 8123BBBDF, 8121FBC11, 81203BC43, 811EBBC75, 811CFBCA7, 811B3BCD9, 8119BBD0A, 8117FBD3C, 81167BD6E, 8114BBDA0, 81133BDD2, 81117BE04, 810FFBE35, 810E3BE67, 810CBBE99, 810AFBECB, 81097BEFD, 8107FBF2F, 81063BF61, 8104BBF92, 81033BFC4, 81017BFF6, 80FFFC028, 80FE7C05A, 80FCBC08C, 80FB3C0BE, 80F9BC0F0, 80F83C122, 80F6BC153, 80F53C185, 80F37C1B7, 80F1FC1E9, 80F07C21B, 80EEFC24D, 80ED7C27F, 80EBFC2B1, 80EA7C2E3, 80E8FC314, 80E77C346, 80E5FC378, 80E47C3AA, 80E2FC3DC, 80E17C40E, 80E03C440, 80DEBC472, 80DD3C4A4, 80DBBC4D6, 80DA3C508, 80D8BC53A, 80D77C56C, 80D5FC59D, 80D47C5CF, 80D33C601, 80D1BC633, 80D03C665, 80CEFC697, 80CD7C6C9, 80CBFC6FB, 80CABC72D, 80C93C75F, 80C7FC791, 80C67C7C3, 80C53C7F5, 80C3BC827, 80C27C859, 80C0FC88B, 80BFBC8BD, 80BE3C8EF, 80BCFC921, 80BBBC953, 80BA3C985, 80B8FC9B7, 80B7BC9E9, 80B63CA1B, 80B4FCA4D, 80B3BCA7F, 80B23CAB1, 80B0FCAE3, 80AFBCB15, 80AE7CB47, 80AD3CB79, 80ABFCBAB, 80AA7CBDD, 80A93CC0F, 80A7FCC41, 80A6BCC73, 80A57CCA5, 80A43CCD7, 80A2FCD09, 80A1BCD3B, 80A07CD6D, 809F3CD9F, 809DFCDD1, 809CBCE03, 809B7CE35, 809A3CE67, 80993CE99, 8097FCECB, 8096BCEFD, 80957CF2F, 80943CF61, 80933CF93, 8091FCFC5, 8090BCFF7, 808F7D029, 808E7D05B, 808D3D08D, 808BFD0BF, 808AFD0F1, 8089BD123, 8088BD155, 80877D187, 80863D1BA, 80853D1EC, 8083FD21E, 8082FD250, 8081BD282, 8080BD2B4, 807FBD2E6, 807E7D318, 807D7D34A, 807C3D37C, 807B3D3AE, 807A3D3E0, 8078FD412, 8077FD444, 8076FD477, 8075BD4A9, 8074BD4DB, 8073BD50D, 8072BD53F, 8071BD571, 80707D5A3, 806F7D5D5, 806E7D607, 806D7D639, 806C7D66B, 806B7D69E, 806A7D6D0, 80697D702, 80687D734, 80677D766, 80667D798, 80657D7CA, 80647D7FC, 80637D82E, 80627D861, 80617D893, 80607D8C5, 805FBD8F7, 805EBD929, 805DBD95B, 805CBD98D, 805BBD9BF, 805AFD9F1, 8059FDA24, 8058FDA56, 8057FDA88, 80573DABA, 80563DAEC, 80557DB1E, 80547DB50, 80537DB83, 8052BDBB5, 8051BDBE7, 8050FDC19, 804FFDC4B, 804F3DC7D, 804E3DCAF, 804D7DCE2, 804C7DD14, 804BBDD46, 804ABDD78, 8049FDDAA, 80493DDDC, 80483DE0E, 80477DE41, 8046BDE73, 8045BDEA5, 8044FDED7, 80443DF09, 80437DF3B, 8042BDF6E, 8041BDFA0, 8040FDFD2, 80403E004, 803F7E036, 803EBE068, 803DFE09B, 803D3E0CD, 803C7E0FF, 803BBE131, 803ABE163, 8039FE195, 80397E1C8, 8038BE1FA, 8037FE22C, 80373E25E, 80367E290, 8035BE2C3, 8034FE2F5, 80343E327, 80337E359, 8032FE38B, 80323E3BD, 80317E3F0, 8030BE422, 80303E454, 802F7E486, 802EBE4B8, 802E3E4EB, 802D7E51D, 802CBE54F, 802C3E581, 802B7E5B3, 802ABE5E6, 802A3E618, 80297E64A, 8028FE67C, 80283E6AE, 8027BE6E1, 8026FE713, 80267E745, 8025FE777, 80253E7A9, 8024BE7DC, 8023FE80E, 80237E840, 8022FE872, 80223E8A4, 8021BE8D7, 80213E909, 8020BE93B, 801FFE96D, 801F7E9A0, 801EFE9D2, 801E7EA04, 801DFEA36, 801D7EA68, 801CBEA9B, 801C3EACD, 801BBEAFF, 801B3EB31, 801ABEB64, 801A3EB96, 8019BEBC8, 80193EBFA, 8018BEC2C, 80183EC5F, 8017BEC91, 80177ECC3, 8016FECF5, 80167ED28, 8015FED5A, 80157ED8C, 8014FEDBE, 8014BEDF1, 80143EE23, 8013BEE55, 80133EE87, 8012FEEB9, 80127EEEC, 8011FEF1E, 8011BEF50, 80113EF82, 8010BEFB5, 80107EFE7, 800FFF019, 800FBF04B, 800F3F07E, 800EFF0B0, 800E7F0E2, 800E3F114, 800DBF147, 800D7F179, 800CFF1AB, 800CBF1DD, 800C7F210, 800BFF242, 800BBF274, 800B7F2A6, 800AFF2D9, 800ABF30B, 800A7F33D, 8009FF36F, 8009BF3A2, 80097F3D4, 80093F406, 8008FF438, 8008BF46B, 80083F49D, 8007FF4CF, 8007BF501, 80077F534, 80073F566, 8006FF598, 8006BF5CA, 80067F5FD, 80063F62F, 8005FF661, 8005BF693, 80057F6C6, 80053F6F8, 80053F72A, 8004FF75C, 8004BF78F, 80047F7C1, 80043F7F3, 8003FF825, 8003FF858, 8003BF88A, 80037F8BC, 80033F8EF, 80033F921, 8002FF953, 8002BF985, 8002BF9B8, 80027F9EA, 80027FA1C, 80023FA4E, 80023FA81, 8001FFAB3, 8001FFAE5, 8001BFB17, 8001BFB4A, 80017FB7C, 80017FBAE, 80013FBE0, 80013FC13, 8000FFC45, 8000FFC77, 8000FFCA9, 8000BFCDC, 8000BFD0E, 8000BFD40, 8000BFD73, 80007FDA5, 80007FDD7, 80007FE09, 80007FE3C, 80007FE6E, 80003FEA0, 80003FED2, 80003FF05, 80003FF37, 80003FF69, 80003FF9B, 80003FFCE;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 1kx18',
    'CSET read_width_a = 36',
    'CSET read_width_b = 36',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 36',
    'CSET write_width_b = 36',
    'CSET component_name = bmg_72_a7c85af04669be3e',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '7ffa27b65f3d179d6482c87336215e07',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_a7c85af04669be3e',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '9ec230402fad4935a760a3658b517223',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d0_1_24: std_logic_vector((1 - 1) downto 0);
  signal d1_1_27: std_logic_vector((1 - 1) downto 0);
  signal d2_1_30: std_logic_vector((1 - 1) downto 0);
  signal d3_1_33: std_logic_vector((1 - 1) downto 0);
  signal d4_1_36: std_logic_vector((1 - 1) downto 0);
  signal d5_1_39: std_logic_vector((1 - 1) downto 0);
  signal d6_1_42: std_logic_vector((1 - 1) downto 0);
  signal d7_1_45: std_logic_vector((1 - 1) downto 0);
  type array_type_latency_pipe_5_26 is array (0 to (2 - 1)) of std_logic_vector((1 - 1) downto 0);
  signal latency_pipe_5_26: array_type_latency_pipe_5_26 := (
    "0",
    "0");
  signal latency_pipe_5_26_front_din: std_logic_vector((1 - 1) downto 0);
  signal latency_pipe_5_26_back: std_logic_vector((1 - 1) downto 0);
  signal latency_pipe_5_26_push_front_pop_back_en: std_logic;
  signal fully_2_1_bit: std_logic_vector((1 - 1) downto 0);
begin
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  d2_1_30 <= d2;
  d3_1_33 <= d3;
  d4_1_36 <= d4;
  d5_1_39 <= d5;
  d6_1_42 <= d6;
  d7_1_45 <= d7;
  latency_pipe_5_26_back <= latency_pipe_5_26(1);
  proc_latency_pipe_5_26: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (latency_pipe_5_26_push_front_pop_back_en = \'1\')) then
        for i in 1 downto 1 loop 
          latency_pipe_5_26(i) <= latency_pipe_5_26(i-1);
        end loop;
        latency_pipe_5_26(0) <= latency_pipe_5_26_front_din;
      end if;
    end if;
  end process proc_latency_pipe_5_26;
  fully_2_1_bit <= d0_1_24 or d1_1_27 or d2_1_30 or d3_1_33 or d4_1_36 or d5_1_39 or d6_1_42 or d7_1_45;
  latency_pipe_5_26_front_din <= fully_2_1_bit;
  latency_pipe_5_26_push_front_pop_back_en <= \'1\';
  y <= latency_pipe_5_26_back;
end',
      'crippled_entity' => 'is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    d2 : in std_logic_vector((1 - 1) downto 0);
    d3 : in std_logic_vector((1 - 1) downto 0);
    d4 : in std_logic_vector((1 - 1) downto 0);
    d5 : in std_logic_vector((1 - 1) downto 0);
    d6 : in std_logic_vector((1 - 1) downto 0);
    d7 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'logical_89a6aa91bc',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '294f919e1dc4c0c36bb7f521e11e5975',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((8 - 1) downto 0);
begin
  d_1_22 <= d;
  q <= d_1_22;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((8 - 1) downto 0);
    q : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_423c6c1400',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'dbe0d6ba6ebc3411b591546c133f2f7f',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((4 - 1) downto 0);
  signal in1_1_27: unsigned((4 - 1) downto 0);
  signal y_2_1_concat: unsigned((8 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((4 - 1) downto 0);
    in1 : in std_logic_vector((4 - 1) downto 0);
    y : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_1a070f1f35',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '3d977ed97448b67ab1a059c2dc661091',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d0_1_24: std_logic_vector((8 - 1) downto 0);
  signal d1_1_27: std_logic_vector((8 - 1) downto 0);
  signal d2_1_30: std_logic_vector((8 - 1) downto 0);
  signal d3_1_33: std_logic_vector((8 - 1) downto 0);
  type array_type_latency_pipe_5_26 is array (0 to (2 - 1)) of std_logic_vector((8 - 1) downto 0);
  signal latency_pipe_5_26: array_type_latency_pipe_5_26 := (
    "00000000",
    "00000000");
  signal latency_pipe_5_26_front_din: std_logic_vector((8 - 1) downto 0);
  signal latency_pipe_5_26_back: std_logic_vector((8 - 1) downto 0);
  signal latency_pipe_5_26_push_front_pop_back_en: std_logic;
  signal fully_2_1_bit: std_logic_vector((8 - 1) downto 0);
begin
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  d2_1_30 <= d2;
  d3_1_33 <= d3;
  latency_pipe_5_26_back <= latency_pipe_5_26(1);
  proc_latency_pipe_5_26: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (latency_pipe_5_26_push_front_pop_back_en = \'1\')) then
        for i in 1 downto 1 loop 
          latency_pipe_5_26(i) <= latency_pipe_5_26(i-1);
        end loop;
        latency_pipe_5_26(0) <= latency_pipe_5_26_front_din;
      end if;
    end if;
  end process proc_latency_pipe_5_26;
  fully_2_1_bit <= d0_1_24 or d1_1_27 or d2_1_30 or d3_1_33;
  latency_pipe_5_26_front_din <= fully_2_1_bit;
  latency_pipe_5_26_push_front_pop_back_en <= \'1\';
  y <= latency_pipe_5_26_back;
end',
      'crippled_entity' => 'is
  port (
    d0 : in std_logic_vector((8 - 1) downto 0);
    d1 : in std_logic_vector((8 - 1) downto 0);
    d2 : in std_logic_vector((8 - 1) downto 0);
    d3 : in std_logic_vector((8 - 1) downto 0);
    y : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'logical_a2aa3b9c70',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e7761817e5b81647aff796a25d1f1163',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((10 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((10 - 1) downto 0);
    output_port : out std_logic_vector((10 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_7093fd32f4',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '1b63f47cf5abe5518481239117289edb',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f06ab47474bea88413d7a45f9cec5b93',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '40ca9e56c9318559efabbc4e032f8289',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '2360172bee5aac34121ed18a06a35f89',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c6295ac4a3cfef3fcbcb1e23f647462b',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b97194ada8d72e3f3dab85e7f7ec50a1',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a884997350edb8a7069c6d81245ee8ae',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '6a4fa9883952ed5dc8dd95cdfb0388bc',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e9cdd3b27569006d653cc7d0bd83f994',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((10 - 1) downto 0);
  signal in1_1_27: unsigned((10 - 1) downto 0);
  signal in2_1_31: unsigned((10 - 1) downto 0);
  signal in3_1_35: unsigned((10 - 1) downto 0);
  signal in4_1_39: unsigned((10 - 1) downto 0);
  signal in5_1_43: unsigned((10 - 1) downto 0);
  signal in6_1_47: unsigned((10 - 1) downto 0);
  signal in7_1_51: unsigned((10 - 1) downto 0);
  signal y_2_1_concat: unsigned((80 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  in5_1_43 <= std_logic_vector_to_unsigned(in5);
  in6_1_47 <= std_logic_vector_to_unsigned(in6);
  in7_1_51 <= std_logic_vector_to_unsigned(in7);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39) & unsigned_to_std_logic_vector(in5_1_43) & unsigned_to_std_logic_vector(in6_1_47) & unsigned_to_std_logic_vector(in7_1_51));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((10 - 1) downto 0);
    in1 : in std_logic_vector((10 - 1) downto 0);
    in2 : in std_logic_vector((10 - 1) downto 0);
    in3 : in std_logic_vector((10 - 1) downto 0);
    in4 : in std_logic_vector((10 - 1) downto 0);
    in5 : in std_logic_vector((10 - 1) downto 0);
    in6 : in std_logic_vector((10 - 1) downto 0);
    in7 : in std_logic_vector((10 - 1) downto 0);
    y : out std_logic_vector((80 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_afa8ffa0c9',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '3dd01fca9989ccb5f7f883c43bb47cb4',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '86f5a7beb23841205b79bdc099a73008',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '798de277022ff038420c935e0e6f49c1',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((10 - 1) downto 0);
  signal in1_1_27: unsigned((10 - 1) downto 0);
  signal y_2_1_concat: unsigned((20 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((10 - 1) downto 0);
    in1 : in std_logic_vector((10 - 1) downto 0);
    y : out std_logic_vector((20 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_9d608cd669',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '34cc51e5f3f81df7eb608ecf2efbdf01',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((10 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (1 - 1)) of std_logic_vector((10 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    0 => "0000000000");
  signal op_mem_20_24_front_din: std_logic_vector((10 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((10 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(0);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((10 - 1) downto 0);
    q : out std_logic_vector((10 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_cf4f99539f',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_RAM',
    'CSET operating_mode_a = READ_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 1kx18',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_1640ba8a478928b3',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '09736f16965e023d8f439cd755a0d0c4',
    'sourceFile' => 'hdl/xlspram.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      dina: in std_logic_vector(c_width - 1 downto 0);
      wea: in std_logic_vector(0 downto 0);
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => addr,
        clka => clk,
        dina => data_in,
        wea(0) => core_we,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_1640ba8a478928b3',
      'entityName' => 'xlspram_he6_cres_correlator',
      'entity_name.0' => 'xlspram',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = true',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1A, 1B, 1C, 1D, 1E, 1F, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 2A, 2B, 2C, 2D, 2E, 2F, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 3A, 3B, 3C, 3D, 3E, 3F, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 4A, 4B, 4C, 4D, 4E, 4F, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 5A, 5B, 5C, 5D, 5E, 5F, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 6A, 6B, 6C, 6D, 6E, 6F, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 7A, 7B, 7C, 7D, 7E, 7F, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 8A, 8B, 8C, 8D, 8E, 8F, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 9A, 9B, 9C, 9D, 9E, 9F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, AA, AB, AC, AD, AE, AF, B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, BA, BB, BC, BD, BE, BF, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, CA, CB, CC, CD, CE, CF, D0, D1, D2, D3, D4, D5, D6, D7, D8, D9, DA, DB, DC, DD, DE, DF, E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, EA, EB, EC, ED, EE, EF, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, FA, FB, FC, FD, FE, FF, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 10A, 10B, 10C, 10D, 10E, 10F, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 11A, 11B, 11C, 11D, 11E, 11F, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 12A, 12B, 12C, 12D, 12E, 12F, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 13A, 13B, 13C, 13D, 13E, 13F, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 14A, 14B, 14C, 14D, 14E, 14F, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 15A, 15B, 15C, 15D, 15E, 15F, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 16A, 16B, 16C, 16D, 16E, 16F, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 17A, 17B, 17C, 17D, 17E, 17F, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 18A, 18B, 18C, 18D, 18E, 18F, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 19A, 19B, 19C, 19D, 19E, 19F, 1A0, 1A1, 1A2, 1A3, 1A4, 1A5, 1A6, 1A7, 1A8, 1A9, 1AA, 1AB, 1AC, 1AD, 1AE, 1AF, 1B0, 1B1, 1B2, 1B3, 1B4, 1B5, 1B6, 1B7, 1B8, 1B9, 1BA, 1BB, 1BC, 1BD, 1BE, 1BF, 1C0, 1C1, 1C2, 1C3, 1C4, 1C5, 1C6, 1C7, 1C8, 1C9, 1CA, 1CB, 1CC, 1CD, 1CE, 1CF, 1D0, 1D1, 1D2, 1D3, 1D4, 1D5, 1D6, 1D7, 1D8, 1D9, 1DA, 1DB, 1DC, 1DD, 1DE, 1DF, 1E0, 1E1, 1E2, 1E3, 1E4, 1E5, 1E6, 1E7, 1E8, 1E9, 1EA, 1EB, 1EC, 1ED, 1EE, 1EF, 1F0, 1F1, 1F2, 1F3, 1F4, 1F5, 1F6, 1F7, 1F8, 1F9, 1FA, 1FB, 1FC, 1FD, 1FE, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF, 1FF;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Use_ENB_Pin',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = True_Dual_Port_RAM',
    'CSET operating_mode_a = READ_FIRST',
    'CSET operating_mode_b = READ_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 1kx18',
    'CSET read_width_a = 10',
    'CSET read_width_b = 10',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = true',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 10',
    'CSET write_width_b = 10',
    'CSET component_name = bmg_72_3471d49fd6e899d2',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '96b54e53b201a6698d3a0366ea0b6463',
    'sourceFile' => 'hdl/xldpram.vhd',
    'templateKeyValues' => {
      'core_component_def' => 'addra: in std_logic_vector(c_address_width_a - 1 downto 0);
      addrb: in std_logic_vector(c_address_width_b - 1 downto 0);
      dina: in std_logic_vector(c_width_a - 1 downto 0);
      dinb: in std_logic_vector(c_width_b - 1 downto 0);
      clka: in std_logic;
      clkb: in std_logic;
      wea: in std_logic_vector(0 downto 0);
      web: in std_logic_vector(0 downto 0);
      ena: in std_logic;
      enb: in std_logic;
      douta: out std_logic_vector(c_width_a - 1 downto 0);
      doutb: out std_logic_vector(c_width_b - 1 downto 0)',
      'core_instance_text' => 'addra => core_addra,
        clka => a_clk,
        addrb => core_addrb,
        clkb => b_clk,
        dina => core_dina,
        wea(0) => core_wea,
        dinb => core_dinb,
        web(0) => core_web,
        ena => core_a_ce,
        enb => core_b_ce,
        douta => core_douta,
        doutb => core_doutb',
      'core_name0' => 'bmg_72_3471d49fd6e899d2',
      'entityName' => 'xldpram_he6_cres_correlator',
      'entity_name.0' => 'xldpram',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '78f1cf42611d4cad3e2d8eb3993eb745',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((10 - 1) downto 0);
begin
  d_1_22 <= d;
  q <= d_1_22;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((10 - 1) downto 0);
    q : out std_logic_vector((10 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_0f6b6badfe',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '1b450bcdb005adf8b7f864caef9a0cc1',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "00000000001";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((11 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_118598964d',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e771fae83e3ce153cf1c2720e5709fbb',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "00000000000";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((11 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_a3923dd146',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '7b732e74dab08cc97d3c13825706148b',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal load_1_29: boolean;
  signal din_1_35: unsigned((11 - 1) downto 0);
  signal en_1_45: boolean;
  signal count_reg_20_23_next: unsigned((11 - 1) downto 0);
  signal count_reg_20_23: unsigned((11 - 1) downto 0) := "00000000000";
  signal count_reg_20_23_en: std_logic;
  signal cast_54_19: signed((13 - 1) downto 0);
  signal count_reg_54_7_addsub: signed((13 - 1) downto 0);
  signal count_reg_join_48_3: signed((13 - 1) downto 0);
  signal count_reg_join_44_1: signed((13 - 1) downto 0);
  signal count_reg_join_44_1_en: std_logic;
  signal cast_count_reg_20_23_next: unsigned((11 - 1) downto 0);
begin
  load_1_29 <= ((load) = "1");
  din_1_35 <= std_logic_vector_to_unsigned(din);
  en_1_45 <= ((en) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (count_reg_20_23_en = \'1\')) then
        count_reg_20_23 <= count_reg_20_23_next;
      end if;
    end if;
  end process proc_count_reg_20_23;
  cast_54_19 <= u2s_cast(count_reg_20_23, 0, 13, 0);
  count_reg_54_7_addsub <= cast_54_19 - std_logic_vector_to_signed("0000000000001");
  proc_if_48_3: process (count_reg_54_7_addsub, din_1_35, load_1_29)
  is
  begin
    if load_1_29 then
      count_reg_join_48_3 <= u2s_cast(din_1_35, 0, 13, 0);
    else 
      count_reg_join_48_3 <= count_reg_54_7_addsub;
    end if;
  end process proc_if_48_3;
  proc_if_44_1: process (count_reg_join_48_3, en_1_45)
  is
  begin
    if en_1_45 then
      count_reg_join_44_1_en <= \'1\';
    else 
      count_reg_join_44_1_en <= \'0\';
    end if;
    count_reg_join_44_1 <= count_reg_join_48_3;
  end process proc_if_44_1;
  cast_count_reg_20_23_next <= s2u_cast(count_reg_join_44_1, 0, 11, 0);
  count_reg_20_23_next <= cast_count_reg_20_23_next;
  count_reg_20_23_en <= count_reg_join_44_1_en;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end',
      'crippled_entity' => 'is
  port (
    load : in std_logic_vector((1 - 1) downto 0);
    din : in std_logic_vector((11 - 1) downto 0);
    en : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((11 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'counter_b5e433c475',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'dca08c57a49d58b068e6447a87a53acc',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_31: unsigned((11 - 1) downto 0);
  signal b_1_34: unsigned((11 - 1) downto 0);
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_12_3_rel <= a_1_31 = b_1_34;
  op <= boolean_to_vector(result_12_3_rel);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((11 - 1) downto 0);
    b : in std_logic_vector((11 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'relational_2147430058',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '77179eb8d1d1c5009f0e60643c384b37',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_31: unsigned((11 - 1) downto 0);
  signal b_1_34: unsigned((11 - 1) downto 0);
  signal result_14_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_14_3_rel <= a_1_31 /= b_1_34;
  op <= boolean_to_vector(result_14_3_rel);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((11 - 1) downto 0);
    b : in std_logic_vector((11 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'relational_b4b277ae0f',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'bf251c5cbf322e00b3feaca232849e50',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((10 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (3 - 1)) of std_logic_vector((10 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "0000000000",
    "0000000000",
    "0000000000");
  signal op_mem_20_24_front_din: std_logic_vector((10 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((10 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(2);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 2 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((10 - 1) downto 0);
    q : out std_logic_vector((10 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_ef95dcaf33',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f764699045eeb4c334e5472bcc194b86',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic;
  type array_type_op_mem_20_24 is array (0 to (8 - 1)) of std_logic;
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    \'0\',
    \'0\',
    \'0\',
    \'0\',
    \'0\',
    \'0\',
    \'0\',
    \'0\');
  signal op_mem_20_24_front_din: std_logic;
  signal op_mem_20_24_back: std_logic;
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d(0);
  op_mem_20_24_back <= op_mem_20_24(7);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 7 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= std_logic_to_vector(op_mem_20_24_back);
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((1 - 1) downto 0);
    q : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_14a6a51cbc',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Fixed_Primitives',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 0, 8, 10, 18, 20, 28, 30, 38, 40, 48, 50, 58, 60, 68, 70, 78, 80, 88, 90, 98, A0, A8, B0, B8, C0, C8, D0, D8, E0, E8, F0, F8, 100, 108, 110, 118, 120, 128, 130, 138, 140, 148, 150, 158, 160, 168, 170, 178, 180, 188, 190, 198, 1A0, 1A8, 1B0, 1B8, 1C0, 1C8, 1D0, 1D8, 1E0, 1E8, 1F0, 1F8, 200, 208, 210, 218, 220, 228, 230, 238, 240, 248, 250, 258, 260, 268, 270, 278, 280, 288, 290, 298, 2A0, 2A8, 2B0, 2B8, 2C0, 2C8, 2D0, 2D8, 2E0, 2E8, 2F0, 2F8, 300, 308, 310, 318, 320, 328, 330, 338, 340, 348, 350, 358, 360, 368, 370, 378, 380, 388, 390, 398, 3A0, 3A8, 3B0, 3B8, 3C0, 3C8, 3D0, 3D8, 3E0, 3E8, 3F0, 3F8, 1, 9, 11, 19, 21, 29, 31, 39, 41, 49, 51, 59, 61, 69, 71, 79, 81, 89, 91, 99, A1, A9, B1, B9, C1, C9, D1, D9, E1, E9, F1, F9, 101, 109, 111, 119, 121, 129, 131, 139, 141, 149, 151, 159, 161, 169, 171, 179, 181, 189, 191, 199, 1A1, 1A9, 1B1, 1B9, 1C1, 1C9, 1D1, 1D9, 1E1, 1E9, 1F1, 1F9, 201, 209, 211, 219, 221, 229, 231, 239, 241, 249, 251, 259, 261, 269, 271, 279, 281, 289, 291, 299, 2A1, 2A9, 2B1, 2B9, 2C1, 2C9, 2D1, 2D9, 2E1, 2E9, 2F1, 2F9, 301, 309, 311, 319, 321, 329, 331, 339, 341, 349, 351, 359, 361, 369, 371, 379, 381, 389, 391, 399, 3A1, 3A9, 3B1, 3B9, 3C1, 3C9, 3D1, 3D9, 3E1, 3E9, 3F1, 3F9, 2, A, 12, 1A, 22, 2A, 32, 3A, 42, 4A, 52, 5A, 62, 6A, 72, 7A, 82, 8A, 92, 9A, A2, AA, B2, BA, C2, CA, D2, DA, E2, EA, F2, FA, 102, 10A, 112, 11A, 122, 12A, 132, 13A, 142, 14A, 152, 15A, 162, 16A, 172, 17A, 182, 18A, 192, 19A, 1A2, 1AA, 1B2, 1BA, 1C2, 1CA, 1D2, 1DA, 1E2, 1EA, 1F2, 1FA, 202, 20A, 212, 21A, 222, 22A, 232, 23A, 242, 24A, 252, 25A, 262, 26A, 272, 27A, 282, 28A, 292, 29A, 2A2, 2AA, 2B2, 2BA, 2C2, 2CA, 2D2, 2DA, 2E2, 2EA, 2F2, 2FA, 302, 30A, 312, 31A, 322, 32A, 332, 33A, 342, 34A, 352, 35A, 362, 36A, 372, 37A, 382, 38A, 392, 39A, 3A2, 3AA, 3B2, 3BA, 3C2, 3CA, 3D2, 3DA, 3E2, 3EA, 3F2, 3FA, 3, B, 13, 1B, 23, 2B, 33, 3B, 43, 4B, 53, 5B, 63, 6B, 73, 7B, 83, 8B, 93, 9B, A3, AB, B3, BB, C3, CB, D3, DB, E3, EB, F3, FB, 103, 10B, 113, 11B, 123, 12B, 133, 13B, 143, 14B, 153, 15B, 163, 16B, 173, 17B, 183, 18B, 193, 19B, 1A3, 1AB, 1B3, 1BB, 1C3, 1CB, 1D3, 1DB, 1E3, 1EB, 1F3, 1FB, 203, 20B, 213, 21B, 223, 22B, 233, 23B, 243, 24B, 253, 25B, 263, 26B, 273, 27B, 283, 28B, 293, 29B, 2A3, 2AB, 2B3, 2BB, 2C3, 2CB, 2D3, 2DB, 2E3, 2EB, 2F3, 2FB, 303, 30B, 313, 31B, 323, 32B, 333, 33B, 343, 34B, 353, 35B, 363, 36B, 373, 37B, 383, 38B, 393, 39B, 3A3, 3AB, 3B3, 3BB, 3C3, 3CB, 3D3, 3DB, 3E3, 3EB, 3F3, 3FB, 4, C, 14, 1C, 24, 2C, 34, 3C, 44, 4C, 54, 5C, 64, 6C, 74, 7C, 84, 8C, 94, 9C, A4, AC, B4, BC, C4, CC, D4, DC, E4, EC, F4, FC, 104, 10C, 114, 11C, 124, 12C, 134, 13C, 144, 14C, 154, 15C, 164, 16C, 174, 17C, 184, 18C, 194, 19C, 1A4, 1AC, 1B4, 1BC, 1C4, 1CC, 1D4, 1DC, 1E4, 1EC, 1F4, 1FC, 204, 20C, 214, 21C, 224, 22C, 234, 23C, 244, 24C, 254, 25C, 264, 26C, 274, 27C, 284, 28C, 294, 29C, 2A4, 2AC, 2B4, 2BC, 2C4, 2CC, 2D4, 2DC, 2E4, 2EC, 2F4, 2FC, 304, 30C, 314, 31C, 324, 32C, 334, 33C, 344, 34C, 354, 35C, 364, 36C, 374, 37C, 384, 38C, 394, 39C, 3A4, 3AC, 3B4, 3BC, 3C4, 3CC, 3D4, 3DC, 3E4, 3EC, 3F4, 3FC, 5, D, 15, 1D, 25, 2D, 35, 3D, 45, 4D, 55, 5D, 65, 6D, 75, 7D, 85, 8D, 95, 9D, A5, AD, B5, BD, C5, CD, D5, DD, E5, ED, F5, FD, 105, 10D, 115, 11D, 125, 12D, 135, 13D, 145, 14D, 155, 15D, 165, 16D, 175, 17D, 185, 18D, 195, 19D, 1A5, 1AD, 1B5, 1BD, 1C5, 1CD, 1D5, 1DD, 1E5, 1ED, 1F5, 1FD, 205, 20D, 215, 21D, 225, 22D, 235, 23D, 245, 24D, 255, 25D, 265, 26D, 275, 27D, 285, 28D, 295, 29D, 2A5, 2AD, 2B5, 2BD, 2C5, 2CD, 2D5, 2DD, 2E5, 2ED, 2F5, 2FD, 305, 30D, 315, 31D, 325, 32D, 335, 33D, 345, 34D, 355, 35D, 365, 36D, 375, 37D, 385, 38D, 395, 39D, 3A5, 3AD, 3B5, 3BD, 3C5, 3CD, 3D5, 3DD, 3E5, 3ED, 3F5, 3FD, 6, E, 16, 1E, 26, 2E, 36, 3E, 46, 4E, 56, 5E, 66, 6E, 76, 7E, 86, 8E, 96, 9E, A6, AE, B6, BE, C6, CE, D6, DE, E6, EE, F6, FE, 106, 10E, 116, 11E, 126, 12E, 136, 13E, 146, 14E, 156, 15E, 166, 16E, 176, 17E, 186, 18E, 196, 19E, 1A6, 1AE, 1B6, 1BE, 1C6, 1CE, 1D6, 1DE, 1E6, 1EE, 1F6, 1FE, 206, 20E, 216, 21E, 226, 22E, 236, 23E, 246, 24E, 256, 25E, 266, 26E, 276, 27E, 286, 28E, 296, 29E, 2A6, 2AE, 2B6, 2BE, 2C6, 2CE, 2D6, 2DE, 2E6, 2EE, 2F6, 2FE, 306, 30E, 316, 31E, 326, 32E, 336, 33E, 346, 34E, 356, 35E, 366, 36E, 376, 37E, 386, 38E, 396, 39E, 3A6, 3AE, 3B6, 3BE, 3C6, 3CE, 3D6, 3DE, 3E6, 3EE, 3F6, 3FE, 7, F, 17, 1F, 27, 2F, 37, 3F, 47, 4F, 57, 5F, 67, 6F, 77, 7F, 87, 8F, 97, 9F, A7, AF, B7, BF, C7, CF, D7, DF, E7, EF, F7, FF, 107, 10F, 117, 11F, 127, 12F, 137, 13F, 147, 14F, 157, 15F, 167, 16F, 177, 17F, 187, 18F, 197, 19F, 1A7, 1AF, 1B7, 1BF, 1C7, 1CF, 1D7, 1DF, 1E7, 1EF, 1F7, 1FF, 207, 20F, 217, 21F, 227, 22F, 237, 23F, 247, 24F, 257, 25F, 267, 26F, 277, 27F, 287, 28F, 297, 29F, 2A7, 2AF, 2B7, 2BF, 2C7, 2CF, 2D7, 2DF, 2E7, 2EF, 2F7, 2FF, 307, 30F, 317, 31F, 327, 32F, 337, 33F, 347, 34F, 357, 35F, 367, 36F, 377, 37F, 387, 38F, 397, 39F, 3A7, 3AF, 3B7, 3BF, 3C7, 3CF, 3D7, 3DF, 3E7, 3EF, 3F7, 3FF;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 1kx18',
    'CSET read_width_a = 10',
    'CSET read_width_b = 10',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 10',
    'CSET write_width_b = 10',
    'CSET component_name = bmg_72_b5c4cba6fbbd091f',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '80f2ea685b42cea1981a10121781e6c1',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_b5c4cba6fbbd091f',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'fb5410cf3b28ac2f6456d948d62cd448',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic_vector((10 - 1) downto 0);
  signal d1_1_27: std_logic_vector((10 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic_vector((10 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => "0000000000");
  signal pipe_16_22_front_din: std_logic_vector((10 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((10 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((10 - 1) downto 0);
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (pipe_16_22_push_front_pop_back_en = \'1\')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= \'1\';
  y <= pipe_16_22_back;
end',
      'crippled_entity' => 'is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((10 - 1) downto 0);
    d1 : in std_logic_vector((10 - 1) downto 0);
    y : out std_logic_vector((10 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'mux_6ec07dbeb8',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ff21f86a874caf4a8b3f9e31ddcc1879',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((3 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (1 - 1)) of std_logic_vector((3 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    0 => "000");
  signal op_mem_20_24_front_din: std_logic_vector((3 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((3 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(0);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((3 - 1) downto 0);
    q : out std_logic_vector((3 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_54d5af2115',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '4909f067a1ea06236147ad9cc9c60274',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((36 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (7 - 1)) of std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(6);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 6 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((36 - 1) downto 0);
    q : out std_logic_vector((36 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_1b04a69dde',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f0c527c99331a3494d782d957c3a08ef',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((36 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (6 - 1)) of std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(5);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 5 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((36 - 1) downto 0);
    q : out std_logic_vector((36 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_28d2c9d50c',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ff4bc43fb4bd4ab02fe6b33b07328ce3',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((36 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (5 - 1)) of std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(4);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 4 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((36 - 1) downto 0);
    q : out std_logic_vector((36 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_7439478232',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'dd67bf0e579e39ed204bf75c8aeb2ac9',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((36 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (3 - 1)) of std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(2);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 2 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((36 - 1) downto 0);
    q : out std_logic_vector((36 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_4b00a70dea',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Binary_Counter virtex6 Xilinx,_Inc. 11.0',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET ainit_value = 0',
    'CSET ce = true',
    'CSET count_mode = DOWN',
    'CSET fb_latency = 0',
    'CSET final_count_value = 1',
    'CSET implementation = Fabric',
    'CSET increment_value = 1',
    'CSET latency = 1',
    'CSET load = false',
    'CSET output_width = 3',
    'CSET restrict_count = false',
    'CSET sclr = false',
    'CSET sinit = true',
    'CSET sinit_value = 0',
    'CSET sset = false',
    'CSET sync_ce_priority = Sync_Overrides_CE',
    'CSET sync_threshold_output = false',
    'CSET syncctrlpriority = Reset_Overrides_Set',
    'CSET component_name = cntr_11_0_dc3ffb020cfd5b26',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '466d911da6324966e6729b14871ddfba',
    'sourceFile' => 'hdl/xlcounter_free.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)',
      'core_instance_text' => '        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net',
      'core_name0' => 'cntr_11_0_dc3ffb020cfd5b26',
      'entityName' => 'xlcounter_free_he6_cres_correlator',
      'entity_name.0' => 'xlcounter_free',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'fa28f82dd44506bdaea46e7723bf34a4',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlregister.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f39b2cfe0dc5d17c29160c4a6d3cd8c7',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d0_1_24: std_logic_vector((1 - 1) downto 0);
  signal d1_1_27: std_logic_vector((4 - 1) downto 0);
  type array_type_latency_pipe_5_26 is array (0 to (1 - 1)) of std_logic_vector((4 - 1) downto 0);
  signal latency_pipe_5_26: array_type_latency_pipe_5_26 := (
    0 => "0000");
  signal latency_pipe_5_26_front_din: std_logic_vector((4 - 1) downto 0);
  signal latency_pipe_5_26_back: std_logic_vector((4 - 1) downto 0);
  signal latency_pipe_5_26_push_front_pop_back_en: std_logic;
  signal cast_convert_2_19: std_logic_vector((4 - 1) downto 0);
  signal fully_2_1_bit: std_logic_vector((4 - 1) downto 0);
begin
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  latency_pipe_5_26_back <= latency_pipe_5_26(0);
  proc_latency_pipe_5_26: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (latency_pipe_5_26_push_front_pop_back_en = \'1\')) then
        latency_pipe_5_26(0) <= latency_pipe_5_26_front_din;
      end if;
    end if;
  end process proc_latency_pipe_5_26;
  cast_convert_2_19 <= cast(d0_1_24, 0, 4, 0, xlUnsigned);
  fully_2_1_bit <= cast_convert_2_19 or d1_1_27;
  latency_pipe_5_26_front_din <= fully_2_1_bit;
  latency_pipe_5_26_push_front_pop_back_en <= \'1\';
  y <= latency_pipe_5_26_back;
end',
      'crippled_entity' => 'is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((4 - 1) downto 0);
    y : out std_logic_vector((4 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'logical_9fc717bf07',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '9cc9fce6aefc0a258f89e6b314624a39',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '4ffbf552fd82521aaf9a5ecc3e72e972',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((32 - 1) downto 0);
begin
  d_1_22 <= d;
  q <= d_1_22;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((32 - 1) downto 0);
    q : out std_logic_vector((32 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_2b0feb00fb',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ab6c17b6fd955c74715cb8968f9a80a2',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'cf006b3c4584b6f03d673075aa987343',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlconvert.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '29143c7c80d5e782588b32f66e0f04d4',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlpassthrough.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '6df5eda3a0acd74013e2cfbf3e2eac05',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_17_32: signed((33 - 1) downto 0);
  signal b_17_35: signed((33 - 1) downto 0);
  type array_type_op_mem_91_20 is array (0 to (1 - 1)) of signed((33 - 1) downto 0);
  signal op_mem_91_20: array_type_op_mem_91_20 := (
    0 => "000000000000000000000000000000000");
  signal op_mem_91_20_front_din: signed((33 - 1) downto 0);
  signal op_mem_91_20_back: signed((33 - 1) downto 0);
  signal op_mem_91_20_push_front_pop_back_en: std_logic;
  type array_type_cout_mem_92_22 is array (0 to (1 - 1)) of unsigned((1 - 1) downto 0);
  signal cout_mem_92_22: array_type_cout_mem_92_22 := (
    0 => "0");
  signal cout_mem_92_22_front_din: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_back: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_push_front_pop_back_en: std_logic;
  signal prev_mode_93_22_next: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22_reg_i: std_logic_vector((3 - 1) downto 0);
  signal prev_mode_93_22_reg_o: std_logic_vector((3 - 1) downto 0);
  signal cast_69_18: signed((34 - 1) downto 0);
  signal cast_69_22: signed((34 - 1) downto 0);
  signal internal_s_69_5_addsub: signed((34 - 1) downto 0);
  signal cast_internal_s_83_3_convert: signed((33 - 1) downto 0);
begin
  a_17_32 <= std_logic_vector_to_signed(a);
  b_17_35 <= std_logic_vector_to_signed(b);
  op_mem_91_20_back <= op_mem_91_20(0);
  proc_op_mem_91_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_91_20_push_front_pop_back_en = \'1\')) then
        op_mem_91_20(0) <= op_mem_91_20_front_din;
      end if;
    end if;
  end process proc_op_mem_91_20;
  cout_mem_92_22_back <= cout_mem_92_22(0);
  proc_cout_mem_92_22: process (clk)
  is
    variable i_x_000000: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (cout_mem_92_22_push_front_pop_back_en = \'1\')) then
        cout_mem_92_22(0) <= cout_mem_92_22_front_din;
      end if;
    end if;
  end process proc_cout_mem_92_22;
  prev_mode_93_22_reg_i <= unsigned_to_std_logic_vector(prev_mode_93_22_next);
  prev_mode_93_22 <= std_logic_vector_to_unsigned(prev_mode_93_22_reg_o);
  prev_mode_93_22_reg_inst: entity work.synth_reg_w_init
    generic map (
      init_index => 2, 
      init_value => b"010", 
      latency => 1, 
      width => 3)
    port map (
      ce => ce, 
      clk => clk, 
      clr => clr, 
      i => prev_mode_93_22_reg_i, 
      o => prev_mode_93_22_reg_o);
  cast_69_18 <= s2s_cast(a_17_32, 31, 34, 31);
  cast_69_22 <= s2s_cast(b_17_35, 31, 34, 31);
  internal_s_69_5_addsub <= cast_69_18 + cast_69_22;
  cast_internal_s_83_3_convert <= s2s_cast(internal_s_69_5_addsub, 31, 33, 31);
  op_mem_91_20_front_din <= cast_internal_s_83_3_convert;
  op_mem_91_20_push_front_pop_back_en <= \'1\';
  cout_mem_92_22_front_din <= std_logic_vector_to_unsigned("0");
  cout_mem_92_22_push_front_pop_back_en <= \'1\';
  prev_mode_93_22_next <= std_logic_vector_to_unsigned("000");
  s <= signed_to_std_logic_vector(op_mem_91_20_back);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((33 - 1) downto 0);
    b : in std_logic_vector((33 - 1) downto 0);
    s : out std_logic_vector((33 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'addsub_b18178f59b',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Adder_Subtracter virtex6 Xilinx,_Inc. 11.0',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET AINIT_Value = 0',
    'CSET A_Type = Signed',
    'CSET A_Width = 34',
    'CSET Add_Mode = Add',
    'CSET B_Constant = false',
    'CSET B_Type = Signed',
    'CSET B_Value = 0',
    'CSET B_Width = 34',
    'CSET Borrow_Sense = Active_Low',
    'CSET Bypass = false',
    'CSET Bypass_CE_Priority = Bypass_Overrides_CE',
    'CSET Bypass_Sense = Active_Low',
    'CSET CE = true',
    'CSET C_In = false',
    'CSET C_Out = false',
    'CSET Implementation = Fabric',
    'CSET Latency = 1',
    'CSET Out_Width = 34',
    'CSET SCLR = false',
    'CSET SINIT = false',
    'CSET SINIT_Value = 0',
    'CSET SSET = false',
    'CSET Sync_CE_Priority = Sync_Overrides_CE',
    'CSET Sync_Ctrl_Priority = Reset_Overrides_Set',
    'CSET component_name = addsb_11_0_af3b43ce34891be6',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '855e05470cda7cb4185dfa43facb6467',
    'sourceFile' => 'hdl/xladdsub.vhd',
    'templateKeyValues' => {
      'core_component_def' => '    a: in std_logic_vector(34 - 1 downto 0);
    clk: in std_logic:= \'0\';
    ce: in std_logic:= \'0\';
    s: out std_logic_vector(c_output_width - 1 downto 0);
    b: in std_logic_vector(34 - 1 downto 0)',
      'core_instance_text' => '         a => full_a,
         clk => clk,
         ce => internal_ce,
         s => core_s,
         b => full_b',
      'core_name0' => 'addsb_11_0_af3b43ce34891be6',
      'entityName' => 'xladdsub_he6_cres_correlator',
      'entity_name.0' => 'xladdsub',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '277323ca277ff8ef0ec6b8521b7cf66b',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((15 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (4 - 1)) of std_logic_vector((15 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000",
    "000000000000000",
    "000000000000000",
    "000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((15 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((15 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(3);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        for i in 3 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((15 - 1) downto 0);
    q : out std_logic_vector((15 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_d662813220',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFFD, 3FFF8, 3FFF3, 3FFEE, 3FFE9, 3FFE3, 3FFDE, 3FFD9, 3FFD4, 3FFCF, 3FFCA, 3FFC4, 3FFBF, 3FFBA, 3FFB5, 3FFB0, 3FFAA, 3FFA5, 3FFA0, 3FF9B, 3FF95, 3FF90, 3FF8B, 3FF86, 3FF80, 3FF7B, 3FF76, 3FF70, 3FF6B, 3FF66, 3FF60, 3FF5B, 3FF56, 3FF50, 3FF4B, 3FF45, 3FF40, 3FF3B, 3FF35, 3FF30, 3FF2A, 3FF25, 3FF1F, 3FF1A, 3FF14, 3FF0F, 3FF09, 3FF04, 3FEFE, 3FEF9, 3FEF3, 3FEED, 3FEE8, 3FEE2, 3FEDD, 3FED7, 3FED1, 3FECC, 3FEC6, 3FEC0, 3FEBA, 3FEB5, 3FEAF, 3FEA9, 3FEA3, 3FE9E, 3FE98, 3FE92, 3FE8C, 3FE86, 3FE80, 3FE7A, 3FE74, 3FE6E, 3FE69, 3FE63, 3FE5D, 3FE57, 3FE50, 3FE4A, 3FE44, 3FE3E, 3FE38, 3FE32, 3FE2C, 3FE26, 3FE20, 3FE19, 3FE13, 3FE0D, 3FE07, 3FE00, 3FDFA, 3FDF4, 3FDED, 3FDE7, 3FDE0, 3FDDA, 3FDD4, 3FDCD, 3FDC7, 3FDC0, 3FDBA, 3FDB3, 3FDAD, 3FDA6, 3FD9F, 3FD99, 3FD92, 3FD8B, 3FD85, 3FD7E, 3FD77, 3FD70, 3FD69, 3FD63, 3FD5C, 3FD55, 3FD4E, 3FD47, 3FD40, 3FD39, 3FD32, 3FD2B, 3FD24, 3FD1D, 3FD16, 3FD0F, 3FD07, 3FD00, 3FCF9, 3FCF2, 3FCEB, 3FCE3, 3FCDC, 3FCD5, 3FCCD, 3FCC6, 3FCBE, 3FCB7, 3FCAF, 3FCA8, 3FCA0, 3FC99, 3FC91, 3FC89, 3FC82, 3FC7A, 3FC72, 3FC6A, 3FC63, 3FC5B, 3FC53, 3FC4B, 3FC43, 3FC3B, 3FC33, 3FC2B, 3FC23, 3FC1B, 3FC13, 3FC0B, 3FC03, 3FBFB, 3FBF2, 3FBEA, 3FBE2, 3FBD9, 3FBD1, 3FBC9, 3FBC0, 3FBB8, 3FBAF, 3FBA7, 3FB9E, 3FB96, 3FB8D, 3FB84, 3FB7C, 3FB73, 3FB6A, 3FB61, 3FB59, 3FB50, 3FB47, 3FB3E, 3FB35, 3FB2C, 3FB23, 3FB1A, 3FB11, 3FB08, 3FAFE, 3FAF5, 3FAEC, 3FAE3, 3FAD9, 3FAD0, 3FAC7, 3FABD, 3FAB4, 3FAAA, 3FAA1, 3FA97, 3FA8E, 3FA84, 3FA7A, 3FA71, 3FA67, 3FA5D, 3FA53, 3FA49, 3FA40, 3FA36, 3FA2C, 3FA22, 3FA18, 3FA0D, 3FA03, 3F9F9, 3F9EF, 3F9E5, 3F9DB, 3F9D0, 3F9C6, 3F9BB, 3F9B1, 3F9A7, 3F99C, 3F992, 3F987, 3F97C, 3F972, 3F967, 3F95C, 3F952, 3F947, 3F93C, 3F931, 3F926, 3F91B, 3F910, 3F905, 3F8FA, 3F8EF, 3F8E4, 3F8D9, 3F8CD, 3F8C2, 3F8B7, 3F8AB, 3F8A0, 3F895, 3F889, 3F87E, 3F872, 3F867, 3F85B, 3F84F, 3F844, 3F838, 3F82C, 3F820, 3F814, 3F808, 3F7FC, 3F7F0, 3F7E4, 3F7D8, 3F7CC, 3F7C0, 3F7B4, 3F7A8, 3F79C, 3F78F, 3F783, 3F777, 3F76A, 3F75E, 3F751, 3F745, 3F738, 3F72B, 3F71F, 3F712, 3F705, 3F6F9, 3F6EC, 3F6DF, 3F6D2, 3F6C5, 3F6B8, 3F6AB, 3F69E, 3F691, 3F684, 3F677, 3F669, 3F65C, 3F64F, 3F642, 3F634, 3F627, 3F619, 3F60C, 3F5FE, 3F5F1, 3F5E3, 3F5D6, 3F5C8, 3F5BA, 3F5AC, 3F59F, 3F591, 3F583, 3F575, 3F567, 3F559, 3F54B, 3F53D, 3F52F, 3F521, 3F513, 3F504, 3F4F6, 3F4E8, 3F4D9, 3F4CB, 3F4BD, 3F4AE, 3F4A0, 3F491, 3F483, 3F474, 3F466, 3F457, 3F448, 3F439, 3F42B, 3F41C, 3F40D, 3F3FE, 3F3EF, 3F3E0, 3F3D1, 3F3C2, 3F3B3, 3F3A4, 3F395, 3F386, 3F377, 3F367, 3F358, 3F349, 3F33A, 3F32A, 3F31B, 3F30B, 3F2FC, 3F2EC, 3F2DD, 3F2CD, 3F2BE, 3F2AE, 3F29E, 3F28F, 3F27F, 3F26F, 3F25F, 3F24F, 3F240, 3F230, 3F220, 3F210, 3F200, 3F1F0, 3F1E0, 3F1D0, 3F1C0, 3F1AF, 3F19F, 3F18F, 3F17F, 3F16F, 3F15E, 3F14E, 3F13E, 3F12D, 3F11D, 3F10C, 3F0FC, 3F0EB, 3F0DB, 3F0CA, 3F0BA, 3F0A9, 3F098, 3F088, 3F077, 3F066, 3F056, 3F045, 3F034, 3F023, 3F012, 3F002, 3EFF1, 3EFE0, 3EFCF, 3EFBE, 3EFAD, 3EF9C, 3EF8B, 3EF7A, 3EF69, 3EF58, 3EF46, 3EF35, 3EF24, 3EF13, 3EF02, 3EEF1, 3EEDF, 3EECE, 3EEBD, 3EEAB, 3EE9A, 3EE89, 3EE77, 3EE66, 3EE55, 3EE43, 3EE32, 3EE20, 3EE0F, 3EDFD, 3EDEC, 3EDDA, 3EDC9, 3EDB7, 3EDA6, 3ED94, 3ED82, 3ED71, 3ED5F, 3ED4D, 3ED3C, 3ED2A, 3ED18, 3ED07, 3ECF5, 3ECE3, 3ECD1, 3ECC0, 3ECAE, 3EC9C, 3EC8A, 3EC79, 3EC67, 3EC55, 3EC43, 3EC31, 3EC20, 3EC0E, 3EBFC, 3EBEA, 3EBD8, 3EBC6, 3EBB4, 3EBA2, 3EB91, 3EB7F, 3EB6D, 3EB5B, 3EB49, 3EB37, 3EB25, 3EB13, 3EB01, 3EAEF, 3EADD, 3EACC, 3EABA, 3EAA8, 3EA96, 3EA84, 3EA72, 3EA60, 3EA4E, 3EA3C, 3EA2A, 3EA18, 3EA06, 3E9F4, 3E9E3, 3E9D1, 3E9BF, 3E9AD, 3E99B, 3E989, 3E977, 3E965, 3E953, 3E942, 3E930, 3E91E, 3E90C, 3E8FA, 3E8E8, 3E8D7, 3E8C5, 3E8B3, 3E8A1, 3E890, 3E87E, 3E86C, 3E85A, 3E849, 3E837, 3E825, 3E814, 3E802, 3E7F0, 3E7DF, 3E7CD, 3E7BC, 3E7AA, 3E799, 3E787, 3E775, 3E764, 3E753, 3E741, 3E730, 3E71E, 3E70D, 3E6FC, 3E6EA, 3E6D9, 3E6C8, 3E6B6, 3E6A5, 3E694, 3E683, 3E672, 3E661, 3E64F, 3E63E, 3E62D, 3E61C, 3E60B, 3E5FA, 3E5EA, 3E5D9, 3E5C8, 3E5B7, 3E5A6, 3E595, 3E585, 3E574, 3E563, 3E553, 3E542, 3E532, 3E521, 3E511, 3E500, 3E4F0, 3E4E0, 3E4CF, 3E4BF, 3E4AF, 3E49F, 3E48E, 3E47E, 3E46E, 3E45E, 3E44E, 3E43E, 3E42E, 3E41F, 3E40F, 3E3FF, 3E3EF, 3E3E0, 3E3D0, 3E3C1, 3E3B1, 3E3A2, 3E392, 3E383, 3E374, 3E364, 3E355, 3E346, 3E337, 3E328, 3E319, 3E30A, 3E2FB, 3E2ED, 3E2DE, 3E2CF, 3E2C1, 3E2B2, 3E2A3, 3E295, 3E287, 3E278, 3E26A, 3E25C, 3E24E, 3E240, 3E232, 3E224, 3E216, 3E208, 3E1FB, 3E1ED, 3E1DF, 3E1D2, 3E1C4, 3E1B7, 3E1AA, 3E19D, 3E18F, 3E182, 3E175, 3E168, 3E15C, 3E14F, 3E142, 3E135, 3E129, 3E11C, 3E110, 3E104, 3E0F8, 3E0EB, 3E0DF, 3E0D3, 3E0C8, 3E0BC, 3E0B0, 3E0A4, 3E099, 3E08D, 3E082, 3E077, 3E06B, 3E060, 3E055, 3E04A, 3E040, 3E035, 3E02A, 3E020, 3E015, 3E00B, 3E001, 3DFF6, 3DFEC, 3DFE2, 3DFD8, 3DFCF, 3DFC5, 3DFBB, 3DFB2, 3DFA8, 3DF9F, 3DF96, 3DF8D, 3DF84, 3DF7B, 3DF72, 3DF6A, 3DF61, 3DF59, 3DF50, 3DF48, 3DF40, 3DF38, 3DF30, 3DF28, 3DF21, 3DF19, 3DF12, 3DF0A, 3DF03, 3DEFC, 3DEF5, 3DEEE, 3DEE7, 3DEE1, 3DEDA, 3DED4, 3DECD, 3DEC7, 3DEC1, 3DEBB, 3DEB6, 3DEB0, 3DEAA, 3DEA5, 3DEA0, 3DE9A, 3DE95, 3DE91, 3DE8C, 3DE87, 3DE83, 3DE7E, 3DE7A, 3DE76, 3DE72, 3DE6E, 3DE6A, 3DE67, 3DE63, 3DE60, 3DE5D, 3DE5A, 3DE57, 3DE54, 3DE51, 3DE4F, 3DE4D, 3DE4A, 3DE48, 3DE47, 3DE45, 3DE43, 3DE42, 3DE40, 3DE3F, 3DE3E, 3DE3D, 3DE3D, 3DE3C, 3DE3C, 3DE3B, 3DE3B, 3DE3B, 3DE3B, 3DE3C, 3DE3C, 3DE3D, 3DE3E, 3DE3F, 3DE40, 3DE41, 3DE43, 3DE44, 3DE46, 3DE48, 3DE4A, 3DE4C, 3DE4F, 3DE51, 3DE54, 3DE57, 3DE5A, 3DE5D, 3DE61, 3DE64, 3DE68, 3DE6C, 3DE70, 3DE74, 3DE79, 3DE7D, 3DE82, 3DE87, 3DE8C, 3DE91, 3DE97, 3DE9D, 3DEA2, 3DEA8, 3DEAF, 3DEB5, 3DEBC, 3DEC2, 3DEC9, 3DED0, 3DED8, 3DEDF, 3DEE7, 3DEEF, 3DEF7, 3DEFF, 3DF07, 3DF10, 3DF19, 3DF22, 3DF2B, 3DF34, 3DF3E, 3DF48, 3DF52, 3DF5C, 3DF66, 3DF71, 3DF7B, 3DF86, 3DF91, 3DF9D, 3DFA8, 3DFB4, 3DFC0, 3DFCC, 3DFD8, 3DFE5, 3DFF2, 3DFFF, 3E00C, 3E019, 3E027, 3E034, 3E042, 3E051, 3E05F, 3E06E, 3E07C, 3E08B, 3E09B, 3E0AA, 3E0BA, 3E0CA, 3E0DA, 3E0EA, 3E0FB, 3E10B, 3E11C, 3E12D, 3E13F, 3E150, 3E162, 3E174, 3E187, 3E199, 3E1AC, 3E1BF, 3E1D2, 3E1E5, 3E1F9, 3E20D, 3E221, 3E235, 3E24A, 3E25E, 3E273, 3E289, 3E29E, 3E2B4, 3E2CA, 3E2E0, 3E2F6, 3E30D, 3E324, 3E33B, 3E352, 3E36A, 3E381, 3E399, 3E3B2, 3E3CA, 3E3E3, 3E3FC, 3E415, 3E42F, 3E448, 3E462, 3E47C, 3E497, 3E4B2, 3E4CD, 3E4E8, 3E503, 3E51F, 3E53B, 3E557, 3E573, 3E590, 3E5AD, 3E5CA, 3E5E8, 3E605, 3E623, 3E641, 3E660, 3E67E, 3E69D, 3E6BD, 3E6DC, 3E6FC, 3E71C, 3E73C, 3E75C, 3E77D, 3E79E, 3E7C0, 3E7E1, 3E803, 3E825, 3E847, 3E86A, 3E88D, 3E8B0, 3E8D3, 3E8F7, 3E91B, 3E93F, 3E963, 3E988, 3E9AD, 3E9D2, 3E9F8, 3EA1E, 3EA44, 3EA6A, 3EA91, 3EAB8, 3EADF, 3EB06, 3EB2E, 3EB56, 3EB7E, 3EBA7, 3EBCF, 3EBF9, 3EC22, 3EC4C, 3EC76, 3ECA0, 3ECCA, 3ECF5, 3ED20, 3ED4B, 3ED77, 3EDA3, 3EDCF, 3EDFB, 3EE28, 3EE55, 3EE82, 3EEB0, 3EEDE, 3EF0C, 3EF3B, 3EF69, 3EF98, 3EFC8, 3EFF7, 3F027, 3F057, 3F088, 3F0B8, 3F0EA, 3F11B, 3F14D, 3F17E, 3F1B1, 3F1E3, 3F216, 3F249, 3F27C, 3F2B0, 3F2E4, 3F318, 3F34D, 3F382, 3F3B7, 3F3EC, 3F422, 3F458, 3F48F, 3F4C5, 3F4FC, 3F534, 3F56B, 3F5A3, 3F5DB, 3F614, 3F64C, 3F685, 3F6BF, 3F6F8, 3F732, 3F76D, 3F7A7, 3F7E2, 3F81D, 3F859, 3F895, 3F8D1, 3F90D, 3F94A, 3F987, 3F9C4, 3FA02, 3FA40, 3FA7E, 3FABD, 3FAFC, 3FB3B, 3FB7A, 3FBBA, 3FBFA, 3FC3B, 3FC7C, 3FCBD, 3FCFE, 3FD40, 3FD82, 3FDC4, 3FE07, 3FE4A, 3FE8D, 3FED0, 3FF14, 3FF58, 3FF9D, 3FFE2;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_b5e58834d96b3cb1',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '4d0de11109aaf9b9d3dc578568632911',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_b5e58834d96b3cb1',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 27, 6C, B2, F8, 13F, 185, 1CC, 214, 25B, 2A3, 2EC, 334, 37D, 3C7, 410, 45A, 4A4, 4EF, 53A, 585, 5D0, 61C, 668, 6B5, 702, 74F, 79C, 7EA, 838, 886, 8D5, 924, 974, 9C3, A13, A64, AB4, B05, B57, BA8, BFA, C4C, C9F, CF2, D45, D99, DED, E41, E95, EEA, F3F, F95, FEB, 1041, 1097, 10EE, 1145, 119D, 11F5, 124D, 12A5, 12FE, 1357, 13B1, 140A, 1465, 14BF, 151A, 1575, 15D0, 162C, 1688, 16E4, 1741, 179E, 17FB, 1859, 18B7, 1915, 1974, 19D3, 1A32, 1A92, 1AF2, 1B52, 1BB3, 1C14, 1C75, 1CD7, 1D39, 1D9B, 1DFD, 1E60, 1EC3, 1F27, 1F8B, 1FEF, 2054, 20B9, 211E, 2183, 21E9, 224F, 22B6, 231D, 2384, 23EB, 2453, 24BB, 2523, 258C, 25F5, 265F, 26C8, 2733, 279D, 2808, 2873, 28DE, 294A, 29B6, 2A22, 2A8F, 2AFC, 2B69, 2BD7, 2C45, 2CB3, 2D21, 2D90, 2DFF, 2E6F, 2EDF, 2F4F, 2FC0, 3030, 30A2, 3113, 3185, 31F7, 3269, 32DC, 334F, 33C3, 3436, 34AA, 351F, 3593, 3608, 367E, 36F3, 3769, 37DF, 3856, 38CD, 3944, 39BC, 3A33, 3AAB, 3B24, 3B9D, 3C16, 3C8F, 3D09, 3D83, 3DFD, 3E78, 3EF3, 3F6E, 3FEA, 4065, 40E2, 415E, 41DB, 4258, 42D6, 4353, 43D1, 4450, 44CE, 454D, 45CD, 464C, 46CC, 474C, 47CD, 484D, 48CF, 4950, 49D2, 4A54, 4AD6, 4B59, 4BDB, 4C5F, 4CE2, 4D66, 4DEA, 4E6E, 4EF3, 4F78, 4FFD, 5083, 5109, 518F, 5216, 529C, 5323, 53AB, 5432, 54BA, 5543, 55CB, 5654, 56DD, 5766, 57F0, 587A, 5904, 598F, 5A1A, 5AA5, 5B30, 5BBC, 5C48, 5CD4, 5D61, 5DEE, 5E7B, 5F08, 5F96, 6024, 60B2, 6140, 61CF, 625E, 62EE, 637D, 640D, 649D, 652E, 65BF, 6650, 66E1, 6772, 6804, 6896, 6929, 69BB, 6A4E, 6AE1, 6B75, 6C08, 6C9C, 6D30, 6DC5, 6E5A, 6EEF, 6F84, 701A, 70AF, 7145, 71DC, 7272, 7309, 73A0, 7438, 74CF, 7567, 75FF, 7697, 7730, 77C9, 7862, 78FB, 7995, 7A2F, 7AC9, 7B63, 7BFE, 7C99, 7D34, 7DCF, 7E6B, 7F07, 7FA3, 803F, 80DC, 8178, 8215, 82B3, 8350, 83EE, 848C, 852A, 85C8, 8667, 8706, 87A5, 8844, 88E4, 8984, 8A24, 8AC4, 8B65, 8C05, 8CA6, 8D47, 8DE9, 8E8A, 8F2C, 8FCE, 9070, 9113, 91B5, 9258, 92FB, 939F, 9442, 94E6, 958A, 962E, 96D2, 9777, 981C, 98C1, 9966, 9A0B, 9AB1, 9B57, 9BFD, 9CA3, 9D49, 9DF0, 9E97, 9F3E, 9FE5, A08C, A134, A1DC, A283, A32C, A3D4, A47C, A525, A5CE, A677, A720, A7CA, A873, A91D, A9C7, AA71, AB1B, ABC6, AC71, AD1B, ADC6, AE72, AF1D, AFC8, B074, B120, B1CC, B278, B324, B3D1, B47E, B52A, B5D7, B684, B732, B7DF, B88D, B93A, B9E8, BA96, BB45, BBF3, BCA1, BD50, BDFF, BEAE, BF5D, C00C, C0BB, C16B, C21B, C2CA, C37A, C42A, C4DA, C58B, C63B, C6EC, C79C, C84D, C8FE, C9AF, CA60, CB12, CBC3, CC75, CD26, CDD8, CE8A, CF3C, CFEE, D0A0, D153, D205, D2B8, D36A, D41D, D4D0, D583, D636, D6E9, D79D, D850, D903, D9B7, DA6B, DB1E, DBD2, DC86, DD3A, DDEE, DEA3, DF57, E00B, E0C0, E174, E229, E2DE, E392, E447, E4FC, E5B1, E666, E71B, E7D1, E886, E93B, E9F1, EAA6, EB5C, EC11, ECC7, ED7D, EE33, EEE8, EF9E, F054, F10A, F1C0, F276, F32D, F3E3, F499, F54F, F606, F6BC, F772, F829, F8DF, F996, FA4C, FB03, FBBA, FC70, FD27, FDDE, FE94, FF4B, 10002, 100B9, 10170, 10226, 102DD, 10394, 1044B, 10502, 105B9, 10670, 10727, 107DE, 10895, 1094C, 10A03, 10ABA, 10B70, 10C27, 10CDE, 10D95, 10E4C, 10F03, 10FBA, 11071, 11128, 111DF, 11296, 1134D, 11404, 114BA, 11571, 11628, 116DF, 11796, 1184C, 11903, 119BA, 11A70, 11B27, 11BDE, 11C94, 11D4B, 11E01, 11EB8, 11F6E, 12024, 120DB, 12191, 12247, 122FD, 123B4, 1246A, 12520, 125D6, 1268C, 12741, 127F7, 128AD, 12963, 12A18, 12ACE, 12B83, 12C39, 12CEE, 12DA4, 12E59, 12F0E, 12FC3, 13078, 1312D, 131E2, 13297, 1334B, 13400, 134B4, 13569, 1361D, 136D2, 13786, 1383A, 138EE, 139A2, 13A56, 13B09, 13BBD, 13C70, 13D24, 13DD7, 13E8A, 13F3E, 13FF1, 140A3, 14156, 14209, 142BB, 1436E, 14420, 144D2, 14584, 14636, 146E8, 1479A, 1484C, 148FD, 149AE, 14A60, 14B11, 14BC2, 14C72, 14D23, 14DD4, 14E84, 14F34, 14FE4, 15094, 15144, 151F4, 152A3, 15353, 15402, 154B1, 15560, 1560F, 156BD, 1576C, 1581A, 158C8, 15976, 15A24, 15AD2, 15B7F, 15C2D, 15CDA, 15D87, 15E34, 15EE0, 15F8D, 16039, 160E5, 16191, 1623D, 162E8, 16394, 1643F, 164EA, 16595, 1663F, 166EA, 16794, 1683E, 168E8, 16991, 16A3B, 16AE4, 16B8D, 16C36, 16CDE, 16D87, 16E2F, 16ED7, 16F7F, 17026, 170CE, 17175, 1721C, 172C3, 17369, 1740F, 174B5, 1755B, 17601, 176A6, 1774B, 177F0, 17895, 17939, 179DE, 17A82, 17B25, 17BC9, 17C6C, 17D0F, 17DB2, 17E54, 17EF7, 17F99, 1803B, 180DC, 1817D, 1821E, 182BF, 18360, 18400, 184A0, 18540, 185DF, 1867E, 1871D, 187BC, 1885B, 188F9, 18997, 18A34, 18AD2, 18B6F, 18C0B, 18CA8, 18D44, 18DE0, 18E7C, 18F17, 18FB2, 1904D, 190E8, 19182, 1921C, 192B6, 1934F, 193E8, 19481, 19519, 195B1, 19649, 196E1, 19778, 1980F, 198A6, 1993C, 199D2, 19A68, 19AFE, 19B93, 19C28, 19CBC, 19D50, 19DE4, 19E78, 19F0B, 19F9E, 1A031, 1A0C3, 1A155, 1A1E6, 1A278, 1A309, 1A399, 1A42A, 1A4BA, 1A549, 1A5D9, 1A667, 1A6F6, 1A784, 1A812, 1A8A0, 1A92D, 1A9BA, 1AA47, 1AAD3, 1AB5F, 1ABEA, 1AC76, 1AD00, 1AD8B, 1AE15, 1AE9F, 1AF28, 1AFB1, 1B03A, 1B0C2, 1B14A, 1B1D2, 1B259, 1B2E0, 1B366, 1B3ED, 1B472, 1B4F8, 1B57D, 1B601, 1B686, 1B70A, 1B78D, 1B810, 1B893, 1B915, 1B997, 1BA19, 1BA9A, 1BB1B, 1BB9C, 1BC1C, 1BC9B, 1BD1B, 1BD9A, 1BE18, 1BE96, 1BF14, 1BF91, 1C00E, 1C08B, 1C107, 1C183, 1C1FE, 1C279, 1C2F3, 1C36D, 1C3E7, 1C461, 1C4D9, 1C552, 1C5CA, 1C642, 1C6B9, 1C730, 1C7A6, 1C81C, 1C892, 1C907, 1C97C, 1C9F0, 1CA64, 1CAD7, 1CB4A, 1CBBD, 1CC2F, 1CCA1, 1CD12, 1CD83, 1CDF4, 1CE64, 1CED4, 1CF43, 1CFB2, 1D020, 1D08E, 1D0FB, 1D168, 1D1D5, 1D241, 1D2AD, 1D318, 1D383, 1D3ED, 1D457, 1D4C0, 1D529, 1D592, 1D5FA, 1D662, 1D6C9, 1D730, 1D796, 1D7FC, 1D861, 1D8C6, 1D92B, 1D98F, 1D9F2, 1DA56, 1DAB8, 1DB1A, 1DB7C, 1DBDD, 1DC3E, 1DC9E, 1DCFE, 1DD5E, 1DDBD, 1DE1B, 1DE79, 1DED7, 1DF34, 1DF90, 1DFEC, 1E048, 1E0A3, 1E0FE, 1E158, 1E1B2, 1E20B, 1E264, 1E2BC, 1E314, 1E36B, 1E3C2, 1E418, 1E46E, 1E4C3, 1E518, 1E56D, 1E5C1, 1E614, 1E667, 1E6B9, 1E70B, 1E75D, 1E7AE, 1E7FE, 1E84E, 1E89E, 1E8ED, 1E93B, 1E989, 1E9D7, 1EA24, 1EA70, 1EABC, 1EB08, 1EB53, 1EB9D, 1EBE7, 1EC31, 1EC7A, 1ECC2, 1ED0A, 1ED52, 1ED99, 1EDDF, 1EE25, 1EE6A, 1EEAF, 1EEF4, 1EF38, 1EF7B, 1EFBE, 1F000, 1F042, 1F083, 1F0C4, 1F105, 1F144, 1F184, 1F1C2, 1F201, 1F23E, 1F27B, 1F2B8, 1F2F4, 1F330, 1F36B, 1F3A6, 1F3E0, 1F419, 1F452, 1F48B, 1F4C3, 1F4FA, 1F531, 1F567, 1F59D, 1F5D3, 1F608, 1F63C, 1F670, 1F6A3, 1F6D5, 1F708, 1F739, 1F76A, 1F79B, 1F7CB, 1F7FA, 1F829, 1F858, 1F886, 1F8B3, 1F8E0, 1F90C, 1F938, 1F963, 1F98E, 1F9B8, 1F9E2, 1FA0B, 1FA33, 1FA5B, 1FA83, 1FAAA, 1FAD0, 1FAF6, 1FB1B, 1FB40, 1FB64, 1FB88, 1FBAB, 1FBCE, 1FBF0, 1FC11, 1FC32, 1FC52, 1FC72, 1FC92, 1FCB0, 1FCCF, 1FCEC, 1FD09, 1FD26, 1FD42, 1FD5E, 1FD79, 1FD93, 1FDAD, 1FDC6, 1FDDF, 1FDF7, 1FE0F, 1FE26, 1FE3D, 1FE53, 1FE68, 1FE7D, 1FE91, 1FEA5, 1FEB8, 1FECB, 1FEDD, 1FEEF, 1FF00, 1FF11, 1FF21, 1FF30, 1FF3F, 1FF4D, 1FF5B, 1FF68, 1FF75, 1FF81, 1FF8D, 1FF98, 1FFA2, 1FFAC, 1FFB5, 1FFBE, 1FFC6, 1FFCE, 1FFD5, 1FFDC, 1FFE2, 1FFE7, 1FFEC, 1FFF1, 1FFF5, 1FFF8, 1FFFB, 1FFFD, 1FFFE, 1FFFF, 1FFFF;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_c3bb7ebe3cb79e87',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'cf2e8e02c393af264eee6bfb417a4d8b',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_c3bb7ebe3cb79e87',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 1FFFF, 1FFFF, 1FFFE, 1FFFC, 1FFFA, 1FFF7, 1FFF4, 1FFF0, 1FFEC, 1FFE7, 1FFE1, 1FFDB, 1FFD4, 1FFCD, 1FFC5, 1FFBD, 1FFB4, 1FFAB, 1FFA1, 1FF96, 1FF8B, 1FF7F, 1FF73, 1FF66, 1FF59, 1FF4B, 1FF3D, 1FF2E, 1FF1E, 1FF0E, 1FEFE, 1FEED, 1FEDB, 1FEC9, 1FEB6, 1FEA2, 1FE8F, 1FE7A, 1FE65, 1FE50, 1FE39, 1FE23, 1FE0C, 1FDF4, 1FDDB, 1FDC3, 1FDA9, 1FD8F, 1FD75, 1FD5A, 1FD3E, 1FD22, 1FD05, 1FCE8, 1FCCA, 1FCAC, 1FC8D, 1FC6E, 1FC4E, 1FC2D, 1FC0C, 1FBEB, 1FBC9, 1FBA6, 1FB83, 1FB5F, 1FB3B, 1FB16, 1FAF1, 1FACB, 1FAA4, 1FA7D, 1FA56, 1FA2E, 1FA05, 1F9DC, 1F9B2, 1F988, 1F95D, 1F932, 1F906, 1F8DA, 1F8AD, 1F87F, 1F851, 1F823, 1F7F4, 1F7C4, 1F794, 1F763, 1F732, 1F701, 1F6CE, 1F69C, 1F668, 1F634, 1F600, 1F5CB, 1F596, 1F560, 1F529, 1F4F2, 1F4BB, 1F483, 1F44A, 1F411, 1F3D8, 1F39D, 1F363, 1F328, 1F2EC, 1F2B0, 1F273, 1F236, 1F1F8, 1F1BA, 1F17B, 1F13B, 1F0FC, 1F0BB, 1F07A, 1F039, 1EFF7, 1EFB4, 1EF72, 1EF2E, 1EEEA, 1EEA6, 1EE61, 1EE1B, 1EDD5, 1ED8F, 1ED48, 1ED00, 1ECB8, 1EC6F, 1EC26, 1EBDD, 1EB93, 1EB48, 1EAFD, 1EAB2, 1EA66, 1EA19, 1E9CC, 1E97E, 1E930, 1E8E2, 1E893, 1E843, 1E7F3, 1E7A2, 1E751, 1E700, 1E6AE, 1E65B, 1E608, 1E5B5, 1E561, 1E50C, 1E4B7, 1E462, 1E40C, 1E3B6, 1E35F, 1E307, 1E2B0, 1E257, 1E1FE, 1E1A5, 1E14B, 1E0F1, 1E096, 1E03B, 1DFDF, 1DF83, 1DF27, 1DEC9, 1DE6C, 1DE0E, 1DDAF, 1DD50, 1DCF1, 1DC91, 1DC31, 1DBD0, 1DB6E, 1DB0D, 1DAAA, 1DA48, 1D9E4, 1D981, 1D91D, 1D8B8, 1D853, 1D7EE, 1D788, 1D721, 1D6BB, 1D653, 1D5EC, 1D583, 1D51B, 1D4B2, 1D448, 1D3DE, 1D374, 1D309, 1D29D, 1D232, 1D1C6, 1D159, 1D0EC, 1D07E, 1D010, 1CFA2, 1CF33, 1CEC4, 1CE54, 1CDE4, 1CD74, 1CD03, 1CC91, 1CC1F, 1CBAD, 1CB3A, 1CAC7, 1CA54, 1C9E0, 1C96B, 1C8F6, 1C881, 1C80C, 1C796, 1C71F, 1C6A8, 1C631, 1C5B9, 1C541, 1C4C8, 1C44F, 1C3D6, 1C35C, 1C2E2, 1C268, 1C1ED, 1C171, 1C0F5, 1C079, 1BFFD, 1BF80, 1BF02, 1BE84, 1BE06, 1BD88, 1BD09, 1BC89, 1BC0A, 1BB8A, 1BB09, 1BA88, 1BA07, 1B985, 1B903, 1B881, 1B7FE, 1B77B, 1B6F7, 1B673, 1B5EF, 1B56A, 1B4E5, 1B460, 1B3DA, 1B354, 1B2CD, 1B246, 1B1BF, 1B137, 1B0AF, 1B027, 1AF9E, 1AF15, 1AE8B, 1AE02, 1AD77, 1ACED, 1AC62, 1ABD7, 1AB4B, 1AABF, 1AA33, 1A9A6, 1A919, 1A88C, 1A7FE, 1A770, 1A6E2, 1A653, 1A5C4, 1A535, 1A4A5, 1A415, 1A385, 1A2F4, 1A263, 1A1D2, 1A140, 1A0AE, 1A01C, 19F89, 19EF6, 19E63, 19DCF, 19D3B, 19CA7, 19C13, 19B7E, 19AE9, 19A53, 199BD, 19927, 19891, 197FA, 19763, 196CC, 19634, 1959C, 19504, 1946B, 193D3, 19339, 192A0, 19206, 1916C, 190D2, 19037, 18F9D, 18F01, 18E66, 18DCA, 18D2E, 18C92, 18BF5, 18B59, 18ABB, 18A1E, 18980, 188E3, 18844, 187A6, 18707, 18668, 185C9, 18529, 1848A, 183EA, 18349, 182A9, 18208, 18167, 180C5, 18024, 17F82, 17EE0, 17E3E, 17D9B, 17CF8, 17C55, 17BB2, 17B0E, 17A6B, 179C7, 17922, 1787E, 177D9, 17734, 1768F, 175EA, 17544, 1749E, 173F8, 17352, 172AB, 17205, 1715E, 170B6, 1700F, 16F67, 16EC0, 16E18, 16D6F, 16CC7, 16C1E, 16B75, 16ACC, 16A23, 1697A, 168D0, 16826, 1677C, 166D2, 16627, 1657D, 164D2, 16427, 1637C, 162D0, 16225, 16179, 160CD, 16021, 15F75, 15EC8, 15E1B, 15D6F, 15CC2, 15C14, 15B67, 15ABA, 15A0C, 1595E, 158B0, 15802, 15754, 156A5, 155F6, 15548, 15499, 153EA, 1533A, 1528B, 151DB, 1512C, 1507C, 14FCC, 14F1C, 14E6B, 14DBB, 14D0A, 14C5A, 14BA9, 14AF8, 14A47, 14996, 148E4, 14833, 14781, 146CF, 1461E, 1456C, 144B9, 14407, 14355, 142A2, 141F0, 1413D, 1408A, 13FD8, 13F25, 13E71, 13DBE, 13D0B, 13C57, 13BA4, 13AF0, 13A3D, 13989, 138D5, 13821, 1376D, 136B8, 13604, 13550, 1349B, 133E7, 13332, 1327D, 131C9, 13114, 1305F, 12FAA, 12EF5, 12E40, 12D8A, 12CD5, 12C20, 12B6A, 12AB5, 129FF, 12949, 12894, 127DE, 12728, 12672, 125BC, 12506, 12450, 1239A, 122E4, 1222E, 12178, 120C1, 1200B, 11F55, 11E9E, 11DE8, 11D31, 11C7B, 11BC4, 11B0E, 11A57, 119A0, 118EA, 11833, 1177C, 116C5, 1160F, 11558, 114A1, 113EA, 11333, 1127C, 111C6, 1110F, 11058, 10FA1, 10EEA, 10E33, 10D7C, 10CC5, 10C0E, 10B57, 10AA0, 109E9, 10932, 1087B, 107C4, 1070D, 10656, 1059F, 104E9, 10432, 1037B, 102C4, 1020D, 10156, 1009F, FFE9, FF32, FE7B, FDC4, FD0E, FC57, FBA0, FAEA, FA33, F97D, F8C6, F810, F759, F6A3, F5EC, F536, F480, F3C9, F313, F25D, F1A7, F0F1, F03B, EF85, EECF, EE19, ED64, ECAE, EBF8, EB43, EA8D, E9D8, E922, E86D, E7B8, E702, E64D, E598, E4E3, E42E, E379, E2C5, E210, E15B, E0A7, DFF2, DF3E, DE8A, DDD5, DD21, DC6D, DBB9, DB06, DA52, D99E, D8EB, D837, D784, D6D1, D61D, D56A, D4B7, D404, D352, D29F, D1EC, D13A, D088, CFD5, CF23, CE71, CDC0, CD0E, CC5C, CBAB, CAF9, CA48, C997, C8E6, C835, C784, C6D3, C623, C572, C4C2, C412, C362, C2B2, C202, C153, C0A3, BFF4, BF45, BE96, BDE7, BD38, BC89, BBDB, BB2D, BA7E, B9D0, B923, B875, B7C7, B71A, B66D, B5BF, B513, B466, B3B9, B30D, B260, B1B4, B108, B05C, AFB1, AF05, AE5A, ADAF, AD04, AC59, ABAE, AB04, AA5A, A9B0, A906, A85C, A7B2, A709, A660, A5B7, A50E, A465, A3BD, A314, A26C, A1C4, A11D, A075, 9FCE, 9F27, 9E80, 9DD9, 9D33, 9C8C, 9BE6, 9B40, 9A9A, 99F5, 994F, 98AA, 9805, 9761, 96BC, 9618, 9574, 94D0, 942C, 9388, 92E5, 9242, 919F, 90FD, 905A, 8FB8, 8F16, 8E74, 8DD3, 8D31, 8C90, 8BEF, 8B4F, 8AAE, 8A0E, 896E, 88CE, 882F, 878F, 86F0, 8651, 85B3, 8514, 8476, 83D8, 833B, 829D, 8200, 8163, 80C6, 802A, 7F8D, 7EF1, 7E56, 7DBA, 7D1F, 7C84, 7BE9, 7B4E, 7AB4, 7A1A, 7980, 78E6, 784D, 77B4, 771B, 7683, 75EA, 7552, 74BA, 7423, 738C, 72F5, 725E, 71C7, 7131, 709B, 7005, 6F70, 6EDA, 6E46, 6DB1, 6D1C, 6C88, 6BF4, 6B61, 6ACD, 6A3A, 69A7, 6915, 6882, 67F0, 675F, 66CD, 663C, 65AB, 651A, 648A, 63FA, 636A, 62DA, 624B, 61BC, 612D, 609F, 6011, 5F83, 5EF5, 5E68, 5DDB, 5D4E, 5CC1, 5C35, 5BA9, 5B1D, 5A92, 5A07, 597C, 58F2, 5867, 57DE, 5754, 56CB, 5641, 55B9, 5530, 54A8, 5420, 5399, 5311, 528A, 5203, 517D, 50F7, 5071, 4FEC, 4F66, 4EE1, 4E5D, 4DD8, 4D54, 4CD0, 4C4D, 4BCA, 4B47, 4AC4, 4A42, 49C0, 493F, 48BD, 483C, 47BB, 473B, 46BB, 463B, 45BB, 453C, 44BD, 443F, 43C0, 4342, 42C5, 4247, 41CA, 414E, 40D1, 4055, 3FD9, 3F5E, 3EE2, 3E67, 3DED, 3D73, 3CF9, 3C7F, 3C06, 3B8D, 3B14, 3A9B, 3A23, 39AC, 3934, 38BD, 3846, 37D0, 3759, 36E4, 366E, 35F9, 3584, 350F, 349B, 3427, 33B3, 3340, 32CD, 325A, 31E8, 3176, 3104, 3093, 3021, 2FB1, 2F40, 2ED0, 2E60, 2DF1, 2D82, 2D13, 2CA4, 2C36, 2BC8, 2B5B, 2AED, 2A80, 2A14, 29A7, 293B, 28D0, 2865, 27FA, 278F, 2725, 26BB, 2651, 25E7, 257E, 2516, 24AD, 2445, 23DE, 2376, 230F, 22A8, 2242, 21DC, 2176, 2110, 20AB, 2046, 1FE2, 1F7E, 1F1A, 1EB7, 1E53, 1DF0, 1D8E, 1D2C, 1CCA, 1C68, 1C07, 1BA6, 1B46, 1AE5, 1A85, 1A26, 19C7, 1968, 1909, 18AB, 184D, 17EF, 1792, 1735, 16D8, 167C, 1620, 15C4, 1569, 150E, 14B3, 1459, 13FF, 13A5, 134C, 12F3, 129A, 1241, 11E9, 1192, 113A, 10E3, 108C, 1036, FE0, F8A, F34, EDF, E8B, E36, DE2, D8E, D3A, CE7, C94, C42, BF0, B9E, B4C, AFB, AAA, A59, A09, 9B9, 969, 91A, 8CB, 87C, 82E, 7E0, 792, 745, 6F8, 6AB, 65F, 613, 5C7, 57B, 530, 4E5, 49B, 451, 407, 3BD, 374, 32B, 2E3, 29A, 252, 20B, 1C3, 17C, 136, EF, A9, 64, 1E;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_2441d18d6b2cbfd0',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'edcebd1bf542595dc4b604f5737294b7',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_2441d18d6b2cbfd0',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFD9, 3FF94, 3FF50, 3FF0C, 3FEC8, 3FE84, 3FE41, 3FDFE, 3FDBC, 3FD79, 3FD38, 3FCF6, 3FCB5, 3FC74, 3FC33, 3FBF2, 3FBB2, 3FB73, 3FB33, 3FAF4, 3FAB5, 3FA77, 3FA38, 3F9FA, 3F9BD, 3F980, 3F943, 3F906, 3F8C9, 3F88D, 3F852, 3F816, 3F7DB, 3F7A0, 3F766, 3F72B, 3F6F1, 3F6B8, 3F67F, 3F645, 3F60D, 3F5D4, 3F59C, 3F564, 3F52D, 3F4F6, 3F4BF, 3F488, 3F452, 3F41C, 3F3E6, 3F3B1, 3F37C, 3F347, 3F312, 3F2DE, 3F2AA, 3F276, 3F243, 3F210, 3F1DD, 3F1AB, 3F179, 3F147, 3F115, 3F0E4, 3F0B3, 3F082, 3F052, 3F021, 3EFF2, 3EFC2, 3EF93, 3EF64, 3EF35, 3EF07, 3EED9, 3EEAB, 3EE7D, 3EE50, 3EE23, 3EDF6, 3EDCA, 3ED9E, 3ED72, 3ED46, 3ED1B, 3ECF0, 3ECC5, 3EC9B, 3EC71, 3EC47, 3EC1D, 3EBF4, 3EBCB, 3EBA2, 3EB7A, 3EB51, 3EB29, 3EB02, 3EADA, 3EAB3, 3EA8C, 3EA66, 3EA40, 3EA19, 3E9F4, 3E9CE, 3E9A9, 3E984, 3E95F, 3E93B, 3E917, 3E8F3, 3E8CF, 3E8AC, 3E889, 3E866, 3E844, 3E821, 3E7FF, 3E7DD, 3E7BC, 3E79B, 3E77A, 3E759, 3E739, 3E718, 3E6F8, 3E6D9, 3E6B9, 3E69A, 3E67B, 3E65D, 3E63E, 3E620, 3E602, 3E5E4, 3E5C7, 3E5AA, 3E58D, 3E570, 3E554, 3E538, 3E51C, 3E500, 3E4E5, 3E4CA, 3E4AF, 3E494, 3E47A, 3E460, 3E446, 3E42C, 3E413, 3E3F9, 3E3E1, 3E3C8, 3E3AF, 3E397, 3E37F, 3E367, 3E350, 3E339, 3E321, 3E30B, 3E2F4, 3E2DE, 3E2C8, 3E2B2, 3E29C, 3E287, 3E272, 3E25D, 3E248, 3E233, 3E21F, 3E20B, 3E1F7, 3E1E4, 3E1D0, 3E1BD, 3E1AA, 3E198, 3E185, 3E173, 3E161, 3E14F, 3E13D, 3E12C, 3E11B, 3E10A, 3E0F9, 3E0E9, 3E0D9, 3E0C8, 3E0B9, 3E0A9, 3E09A, 3E08A, 3E07B, 3E06D, 3E05E, 3E050, 3E041, 3E034, 3E026, 3E018, 3E00B, 3DFFE, 3DFF1, 3DFE4, 3DFD8, 3DFCB, 3DFBF, 3DFB3, 3DFA8, 3DF9C, 3DF91, 3DF86, 3DF7B, 3DF70, 3DF66, 3DF5B, 3DF51, 3DF47, 3DF3E, 3DF34, 3DF2B, 3DF22, 3DF19, 3DF10, 3DF07, 3DEFF, 3DEF7, 3DEEF, 3DEE7, 3DEDF, 3DED8, 3DED0, 3DEC9, 3DEC2, 3DEBC, 3DEB5, 3DEAF, 3DEA9, 3DEA3, 3DE9D, 3DE97, 3DE92, 3DE8C, 3DE87, 3DE82, 3DE7E, 3DE79, 3DE75, 3DE70, 3DE6C, 3DE68, 3DE65, 3DE61, 3DE5E, 3DE5A, 3DE57, 3DE55, 3DE52, 3DE4F, 3DE4D, 3DE4B, 3DE49, 3DE47, 3DE45, 3DE43, 3DE42, 3DE41, 3DE40, 3DE3F, 3DE3E, 3DE3D, 3DE3D, 3DE3C, 3DE3C, 3DE3C, 3DE3C, 3DE3D, 3DE3D, 3DE3E, 3DE3E, 3DE3F, 3DE40, 3DE42, 3DE43, 3DE44, 3DE46, 3DE48, 3DE4A, 3DE4C, 3DE4E, 3DE50, 3DE53, 3DE55, 3DE58, 3DE5B, 3DE5E, 3DE61, 3DE65, 3DE68, 3DE6C, 3DE6F, 3DE73, 3DE77, 3DE7C, 3DE80, 3DE84, 3DE89, 3DE8D, 3DE92, 3DE97, 3DE9C, 3DEA1, 3DEA7, 3DEAC, 3DEB2, 3DEB7, 3DEBD, 3DEC3, 3DEC9, 3DECF, 3DED6, 3DEDC, 3DEE2, 3DEE9, 3DEF0, 3DEF7, 3DEFE, 3DF05, 3DF0C, 3DF13, 3DF1B, 3DF23, 3DF2A, 3DF32, 3DF3A, 3DF42, 3DF4A, 3DF52, 3DF5B, 3DF63, 3DF6C, 3DF74, 3DF7D, 3DF86, 3DF8F, 3DF98, 3DFA1, 3DFAB, 3DFB4, 3DFBE, 3DFC7, 3DFD1, 3DFDB, 3DFE5, 3DFEF, 3DFF9, 3E003, 3E00D, 3E018, 3E022, 3E02D, 3E037, 3E042, 3E04D, 3E058, 3E063, 3E06E, 3E079, 3E084, 3E090, 3E09B, 3E0A7, 3E0B2, 3E0BE, 3E0CA, 3E0D6, 3E0E2, 3E0EE, 3E0FA, 3E106, 3E113, 3E11F, 3E12C, 3E138, 3E145, 3E151, 3E15E, 3E16B, 3E178, 3E185, 3E192, 3E19F, 3E1AC, 3E1BA, 3E1C7, 3E1D5, 3E1E2, 3E1F0, 3E1FD, 3E20B, 3E219, 3E227, 3E235, 3E243, 3E251, 3E25F, 3E26D, 3E27B, 3E289, 3E298, 3E2A6, 3E2B5, 3E2C3, 3E2D2, 3E2E1, 3E2EF, 3E2FE, 3E30D, 3E31C, 3E32B, 3E33A, 3E349, 3E358, 3E367, 3E377, 3E386, 3E395, 3E3A5, 3E3B4, 3E3C4, 3E3D3, 3E3E3, 3E3F2, 3E402, 3E412, 3E422, 3E431, 3E441, 3E451, 3E461, 3E471, 3E481, 3E491, 3E4A1, 3E4B2, 3E4C2, 3E4D2, 3E4E3, 3E4F3, 3E503, 3E514, 3E524, 3E535, 3E545, 3E556, 3E566, 3E577, 3E588, 3E598, 3E5A9, 3E5BA, 3E5CB, 3E5DC, 3E5ED, 3E5FD, 3E60E, 3E61F, 3E630, 3E641, 3E653, 3E664, 3E675, 3E686, 3E697, 3E6A8, 3E6B9, 3E6CB, 3E6DC, 3E6ED, 3E6FF, 3E710, 3E721, 3E733, 3E744, 3E756, 3E767, 3E779, 3E78A, 3E79C, 3E7AD, 3E7BF, 3E7D0, 3E7E2, 3E7F3, 3E805, 3E817, 3E828, 3E83A, 3E84C, 3E85D, 3E86F, 3E881, 3E893, 3E8A4, 3E8B6, 3E8C8, 3E8DA, 3E8EC, 3E8FD, 3E90F, 3E921, 3E933, 3E945, 3E957, 3E968, 3E97A, 3E98C, 3E99E, 3E9B0, 3E9C2, 3E9D4, 3E9E6, 3E9F7, 3EA09, 3EA1B, 3EA2D, 3EA3F, 3EA51, 3EA63, 3EA75, 3EA87, 3EA99, 3EAAB, 3EABD, 3EACF, 3EAE0, 3EAF2, 3EB04, 3EB16, 3EB28, 3EB3A, 3EB4C, 3EB5E, 3EB70, 3EB82, 3EB94, 3EBA5, 3EBB7, 3EBC9, 3EBDB, 3EBED, 3EBFF, 3EC11, 3EC23, 3EC34, 3EC46, 3EC58, 3EC6A, 3EC7C, 3EC8D, 3EC9F, 3ECB1, 3ECC3, 3ECD4, 3ECE6, 3ECF8, 3ED0A, 3ED1B, 3ED2D, 3ED3F, 3ED50, 3ED62, 3ED74, 3ED85, 3ED97, 3EDA8, 3EDBA, 3EDCC, 3EDDD, 3EDEF, 3EE00, 3EE12, 3EE23, 3EE35, 3EE46, 3EE57, 3EE69, 3EE7A, 3EE8C, 3EE9D, 3EEAE, 3EEC0, 3EED1, 3EEE2, 3EEF3, 3EF05, 3EF16, 3EF27, 3EF38, 3EF49, 3EF5A, 3EF6C, 3EF7D, 3EF8E, 3EF9F, 3EFB0, 3EFC1, 3EFD2, 3EFE3, 3EFF3, 3F004, 3F015, 3F026, 3F037, 3F048, 3F058, 3F069, 3F07A, 3F08B, 3F09B, 3F0AC, 3F0BC, 3F0CD, 3F0DE, 3F0EE, 3F0FF, 3F10F, 3F11F, 3F130, 3F140, 3F151, 3F161, 3F171, 3F181, 3F192, 3F1A2, 3F1B2, 3F1C2, 3F1D2, 3F1E2, 3F1F2, 3F202, 3F212, 3F222, 3F232, 3F242, 3F252, 3F262, 3F272, 3F281, 3F291, 3F2A1, 3F2B0, 3F2C0, 3F2D0, 3F2DF, 3F2EF, 3F2FE, 3F30E, 3F31D, 3F32D, 3F33C, 3F34B, 3F35B, 3F36A, 3F379, 3F388, 3F397, 3F3A7, 3F3B6, 3F3C5, 3F3D4, 3F3E3, 3F3F2, 3F401, 3F40F, 3F41E, 3F42D, 3F43C, 3F44A, 3F459, 3F468, 3F476, 3F485, 3F494, 3F4A2, 3F4B1, 3F4BF, 3F4CD, 3F4DC, 3F4EA, 3F4F8, 3F507, 3F515, 3F523, 3F531, 3F53F, 3F54D, 3F55B, 3F569, 3F577, 3F585, 3F593, 3F5A1, 3F5AF, 3F5BC, 3F5CA, 3F5D8, 3F5E5, 3F5F3, 3F600, 3F60E, 3F61B, 3F629, 3F636, 3F644, 3F651, 3F65E, 3F66B, 3F679, 3F686, 3F693, 3F6A0, 3F6AD, 3F6BA, 3F6C7, 3F6D4, 3F6E1, 3F6EE, 3F6FA, 3F707, 3F714, 3F721, 3F72D, 3F73A, 3F746, 3F753, 3F760, 3F76C, 3F778, 3F785, 3F791, 3F79D, 3F7AA, 3F7B6, 3F7C2, 3F7CE, 3F7DA, 3F7E6, 3F7F2, 3F7FE, 3F80A, 3F816, 3F822, 3F82E, 3F83A, 3F845, 3F851, 3F85D, 3F868, 3F874, 3F87F, 3F88B, 3F896, 3F8A2, 3F8AD, 3F8B8, 3F8C4, 3F8CF, 3F8DA, 3F8E5, 3F8F1, 3F8FC, 3F907, 3F912, 3F91D, 3F928, 3F933, 3F93E, 3F948, 3F953, 3F95E, 3F969, 3F973, 3F97E, 3F989, 3F993, 3F99E, 3F9A8, 3F9B3, 3F9BD, 3F9C7, 3F9D2, 3F9DC, 3F9E6, 3F9F1, 3F9FB, 3FA05, 3FA0F, 3FA19, 3FA23, 3FA2D, 3FA37, 3FA41, 3FA4B, 3FA55, 3FA5E, 3FA68, 3FA72, 3FA7C, 3FA85, 3FA8F, 3FA99, 3FAA2, 3FAAC, 3FAB5, 3FABF, 3FAC8, 3FAD1, 3FADB, 3FAE4, 3FAED, 3FAF7, 3FB00, 3FB09, 3FB12, 3FB1B, 3FB24, 3FB2D, 3FB36, 3FB3F, 3FB48, 3FB51, 3FB5A, 3FB63, 3FB6B, 3FB74, 3FB7D, 3FB86, 3FB8E, 3FB97, 3FB9F, 3FBA8, 3FBB0, 3FBB9, 3FBC1, 3FBCA, 3FBD2, 3FBDB, 3FBE3, 3FBEB, 3FBF3, 3FBFC, 3FC04, 3FC0C, 3FC14, 3FC1C, 3FC24, 3FC2C, 3FC34, 3FC3C, 3FC44, 3FC4C, 3FC54, 3FC5C, 3FC64, 3FC6C, 3FC73, 3FC7B, 3FC83, 3FC8A, 3FC92, 3FC9A, 3FCA1, 3FCA9, 3FCB0, 3FCB8, 3FCBF, 3FCC7, 3FCCE, 3FCD6, 3FCDD, 3FCE4, 3FCEC, 3FCF3, 3FCFA, 3FD01, 3FD08, 3FD10, 3FD17, 3FD1E, 3FD25, 3FD2C, 3FD33, 3FD3A, 3FD41, 3FD48, 3FD4F, 3FD56, 3FD5D, 3FD64, 3FD6A, 3FD71, 3FD78, 3FD7F, 3FD85, 3FD8C, 3FD93, 3FD9A, 3FDA0, 3FDA7, 3FDAD, 3FDB4, 3FDBB, 3FDC1, 3FDC8, 3FDCE, 3FDD4, 3FDDB, 3FDE1, 3FDE8, 3FDEE, 3FDF4, 3FDFB, 3FE01, 3FE07, 3FE0E, 3FE14, 3FE1A, 3FE20, 3FE27, 3FE2D, 3FE33, 3FE39, 3FE3F, 3FE45, 3FE4B, 3FE51, 3FE57, 3FE5D, 3FE63, 3FE69, 3FE6F, 3FE75, 3FE7B, 3FE81, 3FE87, 3FE8D, 3FE93, 3FE98, 3FE9E, 3FEA4, 3FEAA, 3FEB0, 3FEB5, 3FEBB, 3FEC1, 3FEC7, 3FECC, 3FED2, 3FED8, 3FEDD, 3FEE3, 3FEE9, 3FEEE, 3FEF4, 3FEF9, 3FEFF, 3FF04, 3FF0A, 3FF10, 3FF15, 3FF1B, 3FF20, 3FF26, 3FF2B, 3FF30, 3FF36, 3FF3B, 3FF41, 3FF46, 3FF4C, 3FF51, 3FF56, 3FF5C, 3FF61, 3FF66, 3FF6C, 3FF71, 3FF76, 3FF7C, 3FF81, 3FF86, 3FF8C, 3FF91, 3FF96, 3FF9B, 3FFA1, 3FFA6, 3FFAB, 3FFB0, 3FFB5, 3FFBB, 3FFC0, 3FFC5, 3FFCA, 3FFCF, 3FFD5, 3FFDA, 3FFDF, 3FFE4, 3FFE9, 3FFEE, 3FFF4, 3FFF9, 3FFFE;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_cf691ac6ee8733a9',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f108127b236ae12361f78fec5ae14a7e',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_cf691ac6ee8733a9',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e02ff2070486c03c9556436d032c3eab',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlregister.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '32abde61996b9585a214e2b5b4ad253f',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal count_reg_20_23: unsigned((10 - 1) downto 0) := "0000000000";
  signal count_reg_20_23_rst: std_logic;
  signal rel_34_8: boolean;
  signal rst_limit_join_34_5: boolean;
  signal bool_44_4: boolean;
  signal rst_limit_join_44_1: boolean;
  signal count_reg_join_44_1: unsigned((11 - 1) downto 0);
  signal count_reg_join_44_1_rst: std_logic;
begin
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (count_reg_20_23_rst = \'1\')) then
        count_reg_20_23 <= "0000000000";
      elsif (ce = \'1\') then 
        count_reg_20_23 <= count_reg_20_23 + std_logic_vector_to_unsigned("0000000001");
      end if;
    end if;
  end process proc_count_reg_20_23;
  rel_34_8 <= count_reg_20_23 = std_logic_vector_to_unsigned("1111111101");
  proc_if_34_5: process (rel_34_8)
  is
  begin
    if rel_34_8 then
      rst_limit_join_34_5 <= true;
    else 
      rst_limit_join_34_5 <= false;
    end if;
  end process proc_if_34_5;
  bool_44_4 <= false or rst_limit_join_34_5;
  proc_if_44_1: process (bool_44_4, count_reg_20_23, rst_limit_join_34_5)
  is
  begin
    if bool_44_4 then
      count_reg_join_44_1_rst <= \'1\';
    else 
      count_reg_join_44_1_rst <= \'0\';
    end if;
    if bool_44_4 then
      rst_limit_join_44_1 <= false;
    else 
      rst_limit_join_44_1 <= rst_limit_join_34_5;
    end if;
  end process proc_if_44_1;
  count_reg_20_23_rst <= count_reg_join_44_1_rst;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((10 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'counter_2d153b301b',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_RAM',
    'CSET operating_mode_a = READ_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 15',
    'CSET read_width_b = 15',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 15',
    'CSET write_width_b = 15',
    'CSET component_name = bmg_72_397bc2e17ef62bd7',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '283ec3043a09d64e33c63bdffaa61701',
    'sourceFile' => 'hdl/xlspram.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      dina: in std_logic_vector(c_width - 1 downto 0);
      wea: in std_logic_vector(0 downto 0);
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => addr,
        clka => clk,
        dina => data_in,
        wea(0) => core_we,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_397bc2e17ef62bd7',
      'entityName' => 'xlspram_he6_cres_correlator',
      'entity_name.0' => 'xlspram',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'dc4e9ffc0667e3d0ef662e83d676b59f',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_22: signed((15 - 1) downto 0);
  signal b_1_25: signed((18 - 1) downto 0);
  type array_type_op_mem_65_20 is array (0 to (2 - 1)) of signed((33 - 1) downto 0);
  signal op_mem_65_20: array_type_op_mem_65_20 := (
    "000000000000000000000000000000000",
    "000000000000000000000000000000000");
  signal op_mem_65_20_front_din: signed((33 - 1) downto 0);
  signal op_mem_65_20_back: signed((33 - 1) downto 0);
  signal op_mem_65_20_push_front_pop_back_en: std_logic;
  signal mult_46_56: signed((33 - 1) downto 0);
begin
  a_1_22 <= std_logic_vector_to_signed(a);
  b_1_25 <= std_logic_vector_to_signed(b);
  op_mem_65_20_back <= op_mem_65_20(1);
  proc_op_mem_65_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_65_20_push_front_pop_back_en = \'1\')) then
        for i in 1 downto 1 loop 
          op_mem_65_20(i) <= op_mem_65_20(i-1);
        end loop;
        op_mem_65_20(0) <= op_mem_65_20_front_din;
      end if;
    end if;
  end process proc_op_mem_65_20;
  mult_46_56 <= (a_1_22 * b_1_25);
  op_mem_65_20_front_din <= mult_46_56;
  op_mem_65_20_push_front_pop_back_en <= \'1\';
  p <= signed_to_std_logic_vector(op_mem_65_20_back);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((15 - 1) downto 0);
    b : in std_logic_vector((18 - 1) downto 0);
    p : out std_logic_vector((33 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'mult_4af04d161c',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'eb4b96f17965c97b9c3209b4e8ce3060',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: signed((15 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_signed(input_port);
  output_port <= signed_to_std_logic_vector(input_port_1_40);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((15 - 1) downto 0);
    output_port : out std_logic_vector((15 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_9b221d4490',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '030f411660461fc76e027eaad7e4b693',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '4db79a4c5f4253bcbaabe72a8529a3eb',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '535181e0223a1dea69a0211ae15b01d1',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFFD, 3FFF8, 3FFF3, 3FFED, 3FFE8, 3FFE3, 3FFDE, 3FFD9, 3FFD4, 3FFCE, 3FFC9, 3FFC4, 3FFBF, 3FFBA, 3FFB4, 3FFAF, 3FFAA, 3FFA5, 3FFA0, 3FF9A, 3FF95, 3FF90, 3FF8B, 3FF85, 3FF80, 3FF7B, 3FF75, 3FF70, 3FF6B, 3FF65, 3FF60, 3FF5B, 3FF55, 3FF50, 3FF4B, 3FF45, 3FF40, 3FF3A, 3FF35, 3FF2F, 3FF2A, 3FF25, 3FF1F, 3FF1A, 3FF14, 3FF0F, 3FF09, 3FF03, 3FEFE, 3FEF8, 3FEF3, 3FEED, 3FEE7, 3FEE2, 3FEDC, 3FED7, 3FED1, 3FECB, 3FEC6, 3FEC0, 3FEBA, 3FEB4, 3FEAF, 3FEA9, 3FEA3, 3FE9D, 3FE97, 3FE92, 3FE8C, 3FE86, 3FE80, 3FE7A, 3FE74, 3FE6E, 3FE68, 3FE62, 3FE5C, 3FE56, 3FE50, 3FE4A, 3FE44, 3FE3E, 3FE38, 3FE32, 3FE2B, 3FE25, 3FE1F, 3FE19, 3FE13, 3FE0C, 3FE06, 3FE00, 3FDFA, 3FDF3, 3FDED, 3FDE6, 3FDE0, 3FDDA, 3FDD3, 3FDCD, 3FDC6, 3FDC0, 3FDB9, 3FDB3, 3FDAC, 3FDA6, 3FD9F, 3FD98, 3FD92, 3FD8B, 3FD84, 3FD7D, 3FD77, 3FD70, 3FD69, 3FD62, 3FD5B, 3FD54, 3FD4E, 3FD47, 3FD40, 3FD39, 3FD32, 3FD2B, 3FD24, 3FD1C, 3FD15, 3FD0E, 3FD07, 3FD00, 3FCF9, 3FCF1, 3FCEA, 3FCE3, 3FCDB, 3FCD4, 3FCCD, 3FCC5, 3FCBE, 3FCB6, 3FCAF, 3FCA7, 3FCA0, 3FC98, 3FC91, 3FC89, 3FC81, 3FC79, 3FC72, 3FC6A, 3FC62, 3FC5A, 3FC52, 3FC4B, 3FC43, 3FC3B, 3FC33, 3FC2B, 3FC23, 3FC1B, 3FC13, 3FC0A, 3FC02, 3FBFA, 3FBF2, 3FBEA, 3FBE1, 3FBD9, 3FBD1, 3FBC8, 3FBC0, 3FBB7, 3FBAF, 3FBA6, 3FB9E, 3FB95, 3FB8C, 3FB84, 3FB7B, 3FB72, 3FB6A, 3FB61, 3FB58, 3FB4F, 3FB46, 3FB3D, 3FB34, 3FB2B, 3FB22, 3FB19, 3FB10, 3FB07, 3FAFE, 3FAF5, 3FAEB, 3FAE2, 3FAD9, 3FACF, 3FAC6, 3FABD, 3FAB3, 3FAAA, 3FAA0, 3FA97, 3FA8D, 3FA83, 3FA7A, 3FA70, 3FA66, 3FA5C, 3FA53, 3FA49, 3FA3F, 3FA35, 3FA2B, 3FA21, 3FA17, 3FA0D, 3FA03, 3F9F9, 3F9EE, 3F9E4, 3F9DA, 3F9D0, 3F9C5, 3F9BB, 3F9B0, 3F9A6, 3F99B, 3F991, 3F986, 3F97C, 3F971, 3F966, 3F95C, 3F951, 3F946, 3F93B, 3F930, 3F925, 3F91A, 3F90F, 3F904, 3F8F9, 3F8EE, 3F8E3, 3F8D8, 3F8CD, 3F8C1, 3F8B6, 3F8AB, 3F89F, 3F894, 3F888, 3F87D, 3F871, 3F866, 3F85A, 3F84F, 3F843, 3F837, 3F82B, 3F81F, 3F814, 3F808, 3F7FC, 3F7F0, 3F7E4, 3F7D8, 3F7CC, 3F7BF, 3F7B3, 3F7A7, 3F79B, 3F78E, 3F782, 3F776, 3F769, 3F75D, 3F750, 3F744, 3F737, 3F72B, 3F71E, 3F711, 3F705, 3F6F8, 3F6EB, 3F6DE, 3F6D1, 3F6C4, 3F6B7, 3F6AA, 3F69D, 3F690, 3F683, 3F676, 3F669, 3F65B, 3F64E, 3F641, 3F633, 3F626, 3F618, 3F60B, 3F5FD, 3F5F0, 3F5E2, 3F5D5, 3F5C7, 3F5B9, 3F5AC, 3F59E, 3F590, 3F582, 3F574, 3F566, 3F558, 3F54A, 3F53C, 3F52E, 3F520, 3F512, 3F503, 3F4F5, 3F4E7, 3F4D9, 3F4CA, 3F4BC, 3F4AD, 3F49F, 3F490, 3F482, 3F473, 3F465, 3F456, 3F447, 3F439, 3F42A, 3F41B, 3F40C, 3F3FD, 3F3EE, 3F3DF, 3F3D0, 3F3C1, 3F3B2, 3F3A3, 3F394, 3F385, 3F376, 3F366, 3F357, 3F348, 3F339, 3F329, 3F31A, 3F30A, 3F2FB, 3F2EB, 3F2DC, 3F2CC, 3F2BD, 3F2AD, 3F29D, 3F28E, 3F27E, 3F26E, 3F25E, 3F24E, 3F23F, 3F22F, 3F21F, 3F20F, 3F1FF, 3F1EF, 3F1DF, 3F1CF, 3F1BF, 3F1AE, 3F19E, 3F18E, 3F17E, 3F16E, 3F15D, 3F14D, 3F13D, 3F12C, 3F11C, 3F10B, 3F0FB, 3F0EA, 3F0DA, 3F0C9, 3F0B9, 3F0A8, 3F097, 3F087, 3F076, 3F065, 3F055, 3F044, 3F033, 3F022, 3F011, 3F001, 3EFF0, 3EFDF, 3EFCE, 3EFBD, 3EFAC, 3EF9B, 3EF8A, 3EF79, 3EF68, 3EF57, 3EF45, 3EF34, 3EF23, 3EF12, 3EF01, 3EEEF, 3EEDE, 3EECD, 3EEBC, 3EEAA, 3EE99, 3EE88, 3EE76, 3EE65, 3EE53, 3EE42, 3EE31, 3EE1F, 3EE0E, 3EDFC, 3EDEB, 3EDD9, 3EDC8, 3EDB6, 3EDA4, 3ED93, 3ED81, 3ED70, 3ED5E, 3ED4C, 3ED3B, 3ED29, 3ED17, 3ED06, 3ECF4, 3ECE2, 3ECD0, 3ECBF, 3ECAD, 3EC9B, 3EC89, 3EC78, 3EC66, 3EC54, 3EC42, 3EC30, 3EC1E, 3EC0D, 3EBFB, 3EBE9, 3EBD7, 3EBC5, 3EBB3, 3EBA1, 3EB8F, 3EB7E, 3EB6C, 3EB5A, 3EB48, 3EB36, 3EB24, 3EB12, 3EB00, 3EAEE, 3EADC, 3EACA, 3EAB8, 3EAA7, 3EA95, 3EA83, 3EA71, 3EA5F, 3EA4D, 3EA3B, 3EA29, 3EA17, 3EA05, 3E9F3, 3E9E1, 3E9CF, 3E9BE, 3E9AC, 3E99A, 3E988, 3E976, 3E964, 3E952, 3E940, 3E92F, 3E91D, 3E90B, 3E8F9, 3E8E7, 3E8D6, 3E8C4, 3E8B2, 3E8A0, 3E88E, 3E87D, 3E86B, 3E859, 3E848, 3E836, 3E824, 3E813, 3E801, 3E7EF, 3E7DE, 3E7CC, 3E7BB, 3E7A9, 3E797, 3E786, 3E774, 3E763, 3E751, 3E740, 3E72F, 3E71D, 3E70C, 3E6FA, 3E6E9, 3E6D8, 3E6C7, 3E6B5, 3E6A4, 3E693, 3E682, 3E671, 3E65F, 3E64E, 3E63D, 3E62C, 3E61B, 3E60A, 3E5F9, 3E5E8, 3E5D8, 3E5C7, 3E5B6, 3E5A5, 3E594, 3E584, 3E573, 3E562, 3E552, 3E541, 3E531, 3E520, 3E510, 3E4FF, 3E4EF, 3E4DE, 3E4CE, 3E4BE, 3E4AE, 3E49E, 3E48D, 3E47D, 3E46D, 3E45D, 3E44D, 3E43D, 3E42D, 3E41E, 3E40E, 3E3FE, 3E3EE, 3E3DF, 3E3CF, 3E3C0, 3E3B0, 3E3A1, 3E391, 3E382, 3E373, 3E363, 3E354, 3E345, 3E336, 3E327, 3E318, 3E309, 3E2FA, 3E2EC, 3E2DD, 3E2CE, 3E2C0, 3E2B1, 3E2A3, 3E294, 3E286, 3E278, 3E269, 3E25B, 3E24D, 3E23F, 3E231, 3E223, 3E215, 3E207, 3E1FA, 3E1EC, 3E1DF, 3E1D1, 3E1C4, 3E1B6, 3E1A9, 3E19C, 3E18F, 3E182, 3E175, 3E168, 3E15B, 3E14E, 3E141, 3E135, 3E128, 3E11C, 3E10F, 3E103, 3E0F7, 3E0EB, 3E0DF, 3E0D3, 3E0C7, 3E0BB, 3E0AF, 3E0A4, 3E098, 3E08D, 3E081, 3E076, 3E06B, 3E060, 3E055, 3E04A, 3E03F, 3E034, 3E02A, 3E01F, 3E015, 3E00A, 3E000, 3DFF6, 3DFEC, 3DFE2, 3DFD8, 3DFCE, 3DFC4, 3DFBB, 3DFB1, 3DFA8, 3DF9F, 3DF95, 3DF8C, 3DF83, 3DF7A, 3DF72, 3DF69, 3DF60, 3DF58, 3DF50, 3DF48, 3DF3F, 3DF37, 3DF2F, 3DF28, 3DF20, 3DF18, 3DF11, 3DF0A, 3DF02, 3DEFB, 3DEF4, 3DEEE, 3DEE7, 3DEE0, 3DEDA, 3DED3, 3DECD, 3DEC7, 3DEC1, 3DEBB, 3DEB5, 3DEB0, 3DEAA, 3DEA5, 3DE9F, 3DE9A, 3DE95, 3DE90, 3DE8B, 3DE87, 3DE82, 3DE7E, 3DE7A, 3DE76, 3DE72, 3DE6E, 3DE6A, 3DE66, 3DE63, 3DE60, 3DE5D, 3DE5A, 3DE57, 3DE54, 3DE51, 3DE4F, 3DE4D, 3DE4A, 3DE48, 3DE46, 3DE45, 3DE43, 3DE42, 3DE40, 3DE3F, 3DE3E, 3DE3D, 3DE3D, 3DE3C, 3DE3C, 3DE3B, 3DE3B, 3DE3B, 3DE3B, 3DE3C, 3DE3C, 3DE3D, 3DE3E, 3DE3F, 3DE40, 3DE41, 3DE43, 3DE44, 3DE46, 3DE48, 3DE4A, 3DE4C, 3DE4F, 3DE51, 3DE54, 3DE57, 3DE5A, 3DE5D, 3DE61, 3DE64, 3DE68, 3DE6C, 3DE70, 3DE74, 3DE79, 3DE7E, 3DE82, 3DE87, 3DE8C, 3DE92, 3DE97, 3DE9D, 3DEA3, 3DEA9, 3DEAF, 3DEB5, 3DEBC, 3DEC3, 3DECA, 3DED1, 3DED8, 3DEE0, 3DEE7, 3DEEF, 3DEF7, 3DF00, 3DF08, 3DF11, 3DF19, 3DF22, 3DF2C, 3DF35, 3DF3F, 3DF48, 3DF52, 3DF5C, 3DF67, 3DF71, 3DF7C, 3DF87, 3DF92, 3DF9D, 3DFA9, 3DFB5, 3DFC1, 3DFCD, 3DFD9, 3DFE6, 3DFF2, 3DFFF, 3E00D, 3E01A, 3E027, 3E035, 3E043, 3E051, 3E060, 3E06E, 3E07D, 3E08C, 3E09C, 3E0AB, 3E0BB, 3E0CB, 3E0DB, 3E0EB, 3E0FC, 3E10C, 3E11D, 3E12E, 3E140, 3E152, 3E163, 3E175, 3E188, 3E19A, 3E1AD, 3E1C0, 3E1D3, 3E1E6, 3E1FA, 3E20E, 3E222, 3E236, 3E24B, 3E260, 3E275, 3E28A, 3E29F, 3E2B5, 3E2CB, 3E2E1, 3E2F8, 3E30E, 3E325, 3E33C, 3E353, 3E36B, 3E383, 3E39B, 3E3B3, 3E3CC, 3E3E4, 3E3FD, 3E417, 3E430, 3E44A, 3E464, 3E47E, 3E499, 3E4B3, 3E4CE, 3E4E9, 3E505, 3E521, 3E53C, 3E559, 3E575, 3E592, 3E5AF, 3E5CC, 3E5E9, 3E607, 3E625, 3E643, 3E662, 3E680, 3E69F, 3E6BF, 3E6DE, 3E6FE, 3E71E, 3E73E, 3E75F, 3E77F, 3E7A0, 3E7C2, 3E7E3, 3E805, 3E827, 3E849, 3E86C, 3E88F, 3E8B2, 3E8D5, 3E8F9, 3E91D, 3E941, 3E966, 3E98A, 3E9AF, 3E9D5, 3E9FA, 3EA20, 3EA46, 3EA6D, 3EA93, 3EABA, 3EAE1, 3EB09, 3EB30, 3EB58, 3EB81, 3EBA9, 3EBD2, 3EBFB, 3EC25, 3EC4E, 3EC78, 3ECA2, 3ECCD, 3ECF8, 3ED23, 3ED4E, 3ED7A, 3EDA6, 3EDD2, 3EDFE, 3EE2B, 3EE58, 3EE85, 3EEB3, 3EEE1, 3EF0F, 3EF3D, 3EF6C, 3EF9B, 3EFCB, 3EFFA, 3F02A, 3F05A, 3F08B, 3F0BC, 3F0ED, 3F11E, 3F150, 3F182, 3F1B4, 3F1E6, 3F219, 3F24C, 3F280, 3F2B3, 3F2E7, 3F31C, 3F350, 3F385, 3F3BA, 3F3F0, 3F426, 3F45C, 3F492, 3F4C9, 3F500, 3F537, 3F56F, 3F5A6, 3F5DF, 3F617, 3F650, 3F689, 3F6C2, 3F6FC, 3F736, 3F770, 3F7AB, 3F7E6, 3F821, 3F85D, 3F898, 3F8D5, 3F911, 3F94E, 3F98B, 3F9C8, 3FA06, 3FA44, 3FA82, 3FAC1, 3FB00, 3FB3F, 3FB7E, 3FBBE, 3FBFE, 3FC3F, 3FC80, 3FCC1, 3FD02, 3FD44, 3FD86, 3FDC8, 3FE0B, 3FE4E, 3FE91, 3FED5, 3FF19, 3FF5D, 3FFA1, 3FFE6;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_77679df2442ac302',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '540436c3f92d2bbab30028fabf0c130d',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_77679df2442ac302',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 2B, 71, B7, FD, 143, 18A, 1D1, 218, 260, 2A8, 2F0, 339, 382, 3CB, 415, 45F, 4A9, 4F4, 53E, 58A, 5D5, 621, 66D, 6BA, 706, 754, 7A1, 7EF, 83D, 88B, 8DA, 929, 979, 9C8, A18, A69, AB9, B0A, B5C, BAD, BFF, C52, CA4, CF7, D4A, D9E, DF2, E46, E9B, EF0, F45, F9A, FF0, 1046, 109D, 10F4, 114B, 11A2, 11FA, 1252, 12AB, 1304, 135D, 13B6, 1410, 146A, 14C5, 151F, 157A, 15D6, 1632, 168E, 16EA, 1747, 17A4, 1801, 185F, 18BD, 191B, 197A, 19D9, 1A38, 1A98, 1AF8, 1B58, 1BB9, 1C1A, 1C7B, 1CDD, 1D3F, 1DA1, 1E04, 1E66, 1ECA, 1F2D, 1F91, 1FF5, 205A, 20BF, 2124, 218A, 21EF, 2256, 22BC, 2323, 238A, 23F2, 2459, 24C2, 252A, 2593, 25FC, 2665, 26CF, 2739, 27A4, 280E, 2879, 28E5, 2950, 29BC, 2A29, 2A95, 2B02, 2B70, 2BDD, 2C4B, 2CBA, 2D28, 2D97, 2E06, 2E76, 2EE6, 2F56, 2FC7, 3038, 30A9, 311A, 318C, 31FE, 3271, 32E3, 3356, 33CA, 343E, 34B2, 3526, 359B, 3610, 3685, 36FB, 3771, 37E7, 385D, 38D4, 394B, 39C3, 3A3B, 3AB3, 3B2B, 3BA4, 3C1D, 3C97, 3D10, 3D8B, 3E05, 3E80, 3EFA, 3F76, 3FF1, 406D, 40E9, 4166, 41E3, 4260, 42DD, 435B, 43D9, 4458, 44D6, 4555, 45D5, 4654, 46D4, 4754, 47D5, 4856, 48D7, 4958, 49DA, 4A5C, 4ADE, 4B61, 4BE4, 4C67, 4CEA, 4D6E, 4DF2, 4E77, 4EFB, 4F80, 5006, 508B, 5111, 5198, 521E, 52A5, 532C, 53B3, 543B, 54C3, 554B, 55D4, 565D, 56E6, 576F, 57F9, 5883, 590D, 5998, 5A22, 5AAE, 5B39, 5BC5, 5C51, 5CDD, 5D6A, 5DF6, 5E84, 5F11, 5F9F, 602D, 60BB, 6149, 61D8, 6267, 62F7, 6386, 6416, 64A6, 6537, 65C8, 6659, 66EA, 677B, 680D, 689F, 6932, 69C4, 6A57, 6AEA, 6B7E, 6C12, 6CA6, 6D3A, 6DCE, 6E63, 6EF8, 6F8D, 7023, 70B9, 714F, 71E5, 727C, 7313, 73AA, 7441, 74D9, 7570, 7609, 76A1, 773A, 77D2, 786C, 7905, 799F, 7A38, 7AD3, 7B6D, 7C08, 7CA2, 7D3E, 7DD9, 7E75, 7F10, 7FAC, 8049, 80E5, 8182, 821F, 82BC, 835A, 83F8, 8496, 8534, 85D2, 8671, 8710, 87AF, 884E, 88EE, 898E, 8A2E, 8ACE, 8B6F, 8C0F, 8CB0, 8D51, 8DF3, 8E94, 8F36, 8FD8, 907A, 911D, 91C0, 9263, 9306, 93A9, 944D, 94F0, 9594, 9638, 96DD, 9781, 9826, 98CB, 9970, 9A16, 9ABB, 9B61, 9C07, 9CAD, 9D54, 9DFA, 9EA1, 9F48, 9FEF, A097, A13E, A1E6, A28E, A336, A3DE, A487, A530, A5D8, A682, A72B, A7D4, A87E, A928, A9D2, AA7C, AB26, ABD1, AC7B, AD26, ADD1, AE7C, AF28, AFD3, B07F, B12B, B1D7, B283, B32F, B3DC, B488, B535, B5E2, B68F, B73D, B7EA, B898, B945, B9F3, BAA1, BB50, BBFE, BCAC, BD5B, BE0A, BEB9, BF68, C017, C0C6, C176, C226, C2D5, C385, C435, C4E5, C596, C646, C6F7, C7A7, C858, C909, C9BA, CA6B, CB1D, CBCE, CC80, CD31, CDE3, CE95, CF47, CFF9, D0AB, D15E, D210, D2C3, D376, D428, D4DB, D58E, D641, D6F5, D7A8, D85B, D90F, D9C2, DA76, DB2A, DBDE, DC92, DD46, DDFA, DEAE, DF62, E017, E0CB, E180, E234, E2E9, E39E, E453, E508, E5BD, E672, E727, E7DC, E891, E947, E9FC, EAB2, EB67, EC1D, ECD2, ED88, EE3E, EEF4, EFAA, F060, F116, F1CC, F282, F338, F3EE, F4A4, F55B, F611, F6C7, F77E, F834, F8EB, F9A1, FA58, FB0E, FBC5, FC7C, FD32, FDE9, FEA0, FF57, 1000D, 100C4, 1017B, 10232, 102E9, 103A0, 10456, 1050D, 105C4, 1067B, 10732, 107E9, 108A0, 10957, 10A0E, 10AC5, 10B7C, 10C33, 10CEA, 10DA1, 10E58, 10F0F, 10FC6, 1107D, 11133, 111EA, 112A1, 11358, 1140F, 114C6, 1157D, 11633, 116EA, 117A1, 11858, 1190E, 119C5, 11A7C, 11B32, 11BE9, 11CA0, 11D56, 11E0D, 11EC3, 11F79, 12030, 120E6, 1219C, 12253, 12309, 123BF, 12475, 1252B, 125E1, 12697, 1274D, 12803, 128B8, 1296E, 12A24, 12AD9, 12B8F, 12C44, 12CFA, 12DAF, 12E64, 12F19, 12FCE, 13083, 13138, 131ED, 132A2, 13357, 1340B, 134C0, 13574, 13629, 136DD, 13791, 13845, 138F9, 139AD, 13A61, 13B15, 13BC8, 13C7C, 13D2F, 13DE2, 13E96, 13F49, 13FFC, 140AF, 14161, 14214, 142C7, 14379, 1442B, 144DE, 14590, 14642, 146F3, 147A5, 14857, 14908, 149B9, 14A6B, 14B1C, 14BCD, 14C7D, 14D2E, 14DDF, 14E8F, 14F3F, 14FEF, 1509F, 1514F, 151FF, 152AE, 1535E, 1540D, 154BC, 1556B, 1561A, 156C8, 15777, 15825, 158D3, 15981, 15A2F, 15ADD, 15B8A, 15C37, 15CE5, 15D92, 15E3E, 15EEB, 15F97, 16044, 160F0, 1619C, 16247, 162F3, 1639E, 16449, 164F4, 1659F, 1664A, 166F4, 1679E, 16848, 168F2, 1699C, 16A45, 16AEF, 16B98, 16C40, 16CE9, 16D91, 16E3A, 16EE2, 16F89, 17031, 170D8, 1717F, 17226, 172CD, 17374, 1741A, 174C0, 17566, 1760B, 176B1, 17756, 177FB, 1789F, 17944, 179E8, 17A8C, 17B30, 17BD3, 17C76, 17D19, 17DBC, 17E5F, 17F01, 17FA3, 18045, 180E6, 18187, 18228, 182C9, 1836A, 1840A, 184AA, 1854A, 185E9, 18688, 18727, 187C6, 18864, 18903, 189A0, 18A3E, 18ADB, 18B78, 18C15, 18CB2, 18D4E, 18DEA, 18E86, 18F21, 18FBC, 19057, 190F1, 1918C, 19225, 192BF, 19359, 193F2, 1948A, 19523, 195BB, 19653, 196EA, 19782, 19819, 198AF, 19946, 199DC, 19A72, 19B07, 19B9C, 19C31, 19CC5, 19D5A, 19DED, 19E81, 19F14, 19FA7, 1A03A, 1A0CC, 1A15E, 1A1EF, 1A281, 1A312, 1A3A2, 1A433, 1A4C3, 1A552, 1A5E1, 1A670, 1A6FF, 1A78D, 1A81B, 1A8A9, 1A936, 1A9C3, 1AA50, 1AADC, 1AB68, 1ABF3, 1AC7E, 1AD09, 1AD94, 1AE1E, 1AEA7, 1AF31, 1AFBA, 1B042, 1B0CB, 1B153, 1B1DA, 1B261, 1B2E8, 1B36F, 1B3F5, 1B47B, 1B500, 1B585, 1B60A, 1B68E, 1B712, 1B795, 1B818, 1B89B, 1B91E, 1B9A0, 1BA21, 1BAA2, 1BB23, 1BBA4, 1BC24, 1BCA3, 1BD23, 1BDA1, 1BE20, 1BE9E, 1BF1C, 1BF99, 1C016, 1C092, 1C10F, 1C18A, 1C206, 1C281, 1C2FB, 1C375, 1C3EF, 1C468, 1C4E1, 1C559, 1C5D1, 1C649, 1C6C0, 1C737, 1C7AE, 1C824, 1C899, 1C90E, 1C983, 1C9F7, 1CA6B, 1CADF, 1CB52, 1CBC4, 1CC36, 1CCA8, 1CD1A, 1CD8A, 1CDFB, 1CE6B, 1CEDB, 1CF4A, 1CFB8, 1D027, 1D095, 1D102, 1D16F, 1D1DC, 1D248, 1D2B3, 1D31F, 1D389, 1D3F4, 1D45E, 1D4C7, 1D530, 1D599, 1D601, 1D668, 1D6CF, 1D736, 1D79C, 1D802, 1D868, 1D8CD, 1D931, 1D995, 1D9F9, 1DA5C, 1DABE, 1DB20, 1DB82, 1DBE3, 1DC44, 1DCA4, 1DD04, 1DD64, 1DDC3, 1DE21, 1DE7F, 1DEDC, 1DF39, 1DF96, 1DFF2, 1E04E, 1E0A9, 1E103, 1E15E, 1E1B7, 1E210, 1E269, 1E2C1, 1E319, 1E371, 1E3C7, 1E41E, 1E473, 1E4C9, 1E51E, 1E572, 1E5C6, 1E619, 1E66C, 1E6BF, 1E711, 1E762, 1E7B3, 1E803, 1E853, 1E8A3, 1E8F2, 1E940, 1E98E, 1E9DC, 1EA29, 1EA75, 1EAC1, 1EB0C, 1EB57, 1EBA2, 1EBEC, 1EC35, 1EC7E, 1ECC7, 1ED0F, 1ED56, 1ED9D, 1EDE3, 1EE29, 1EE6F, 1EEB4, 1EEF8, 1EF3C, 1EF7F, 1EFC2, 1F004, 1F046, 1F087, 1F0C8, 1F109, 1F148, 1F188, 1F1C6, 1F204, 1F242, 1F27F, 1F2BC, 1F2F8, 1F334, 1F36F, 1F3A9, 1F3E3, 1F41D, 1F456, 1F48E, 1F4C6, 1F4FE, 1F535, 1F56B, 1F5A1, 1F5D6, 1F60B, 1F63F, 1F673, 1F6A6, 1F6D9, 1F70B, 1F73C, 1F76D, 1F79E, 1F7CE, 1F7FD, 1F82C, 1F85B, 1F889, 1F8B6, 1F8E3, 1F90F, 1F93B, 1F966, 1F991, 1F9BB, 1F9E4, 1FA0D, 1FA36, 1FA5E, 1FA85, 1FAAC, 1FAD2, 1FAF8, 1FB1D, 1FB42, 1FB66, 1FB8A, 1FBAD, 1FBD0, 1FBF2, 1FC13, 1FC34, 1FC54, 1FC74, 1FC94, 1FCB2, 1FCD0, 1FCEE, 1FD0B, 1FD28, 1FD44, 1FD5F, 1FD7A, 1FD95, 1FDAE, 1FDC8, 1FDE0, 1FDF9, 1FE10, 1FE27, 1FE3E, 1FE54, 1FE69, 1FE7E, 1FE93, 1FEA6, 1FEBA, 1FECC, 1FEDF, 1FEF0, 1FF01, 1FF12, 1FF22, 1FF31, 1FF40, 1FF4E, 1FF5C, 1FF69, 1FF76, 1FF82, 1FF8D, 1FF98, 1FFA3, 1FFAD, 1FFB6, 1FFBF, 1FFC7, 1FFCF, 1FFD6, 1FFDC, 1FFE2, 1FFE8, 1FFED, 1FFF1, 1FFF5, 1FFF8, 1FFFB, 1FFFD, 1FFFE, 1FFFF, 1FFFF;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_21758865cfafce47',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '0be47b994bf37e1603abd04272487d0b',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_21758865cfafce47',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 1FFFF, 1FFFF, 1FFFE, 1FFFC, 1FFFA, 1FFF7, 1FFF4, 1FFF0, 1FFEB, 1FFE6, 1FFE1, 1FFDB, 1FFD4, 1FFCD, 1FFC5, 1FFBC, 1FFB4, 1FFAA, 1FFA0, 1FF95, 1FF8A, 1FF7F, 1FF72, 1FF66, 1FF58, 1FF4A, 1FF3C, 1FF2D, 1FF1D, 1FF0D, 1FEFD, 1FEEB, 1FEDA, 1FEC7, 1FEB5, 1FEA1, 1FE8D, 1FE79, 1FE64, 1FE4E, 1FE38, 1FE21, 1FE0A, 1FDF2, 1FDDA, 1FDC1, 1FDA8, 1FD8E, 1FD73, 1FD58, 1FD3C, 1FD20, 1FD04, 1FCE6, 1FCC9, 1FCAA, 1FC8B, 1FC6C, 1FC4C, 1FC2B, 1FC0A, 1FBE9, 1FBC7, 1FBA4, 1FB81, 1FB5D, 1FB38, 1FB14, 1FAEE, 1FAC8, 1FAA2, 1FA7B, 1FA53, 1FA2B, 1FA02, 1F9D9, 1F9B0, 1F985, 1F95A, 1F92F, 1F903, 1F8D7, 1F8AA, 1F87C, 1F84E, 1F820, 1F7F1, 1F7C1, 1F791, 1F760, 1F72F, 1F6FD, 1F6CB, 1F698, 1F665, 1F631, 1F5FD, 1F5C8, 1F592, 1F55C, 1F526, 1F4EF, 1F4B7, 1F47F, 1F447, 1F40E, 1F3D4, 1F39A, 1F35F, 1F324, 1F2E8, 1F2AC, 1F26F, 1F232, 1F1F4, 1F1B6, 1F177, 1F137, 1F0F7, 1F0B7, 1F076, 1F035, 1EFF3, 1EFB0, 1EF6D, 1EF2A, 1EEE6, 1EEA1, 1EE5C, 1EE17, 1EDD1, 1ED8A, 1ED43, 1ECFC, 1ECB3, 1EC6B, 1EC22, 1EBD8, 1EB8E, 1EB44, 1EAF8, 1EAAD, 1EA61, 1EA14, 1E9C7, 1E979, 1E92B, 1E8DD, 1E88E, 1E83E, 1E7EE, 1E79D, 1E74C, 1E6FB, 1E6A9, 1E656, 1E603, 1E5B0, 1E55C, 1E507, 1E4B2, 1E45D, 1E407, 1E3B0, 1E359, 1E302, 1E2AA, 1E252, 1E1F9, 1E19F, 1E146, 1E0EB, 1E091, 1E035, 1DFDA, 1DF7D, 1DF21, 1DEC4, 1DE66, 1DE08, 1DDA9, 1DD4A, 1DCEB, 1DC8B, 1DC2B, 1DBCA, 1DB68, 1DB06, 1DAA4, 1DA41, 1D9DE, 1D97B, 1D916, 1D8B2, 1D84D, 1D7E7, 1D781, 1D71B, 1D6B4, 1D64D, 1D5E5, 1D57D, 1D514, 1D4AB, 1D441, 1D3D7, 1D36D, 1D302, 1D297, 1D22B, 1D1BF, 1D152, 1D0E5, 1D077, 1D009, 1CF9B, 1CF2C, 1CEBD, 1CE4D, 1CDDD, 1CD6C, 1CCFB, 1CC8A, 1CC18, 1CBA6, 1CB33, 1CAC0, 1CA4C, 1C9D8, 1C964, 1C8EF, 1C87A, 1C804, 1C78E, 1C718, 1C6A1, 1C629, 1C5B2, 1C539, 1C4C1, 1C448, 1C3CF, 1C355, 1C2DB, 1C260, 1C1E5, 1C169, 1C0EE, 1C071, 1BFF5, 1BF78, 1BEFA, 1BE7D, 1BDFE, 1BD80, 1BD01, 1BC81, 1BC02, 1BB82, 1BB01, 1BA80, 1B9FF, 1B97D, 1B8FB, 1B878, 1B7F6, 1B772, 1B6EF, 1B66B, 1B5E6, 1B562, 1B4DD, 1B457, 1B3D1, 1B34B, 1B2C5, 1B23E, 1B1B6, 1B12F, 1B0A7, 1B01E, 1AF95, 1AF0C, 1AE83, 1ADF9, 1AD6F, 1ACE4, 1AC59, 1ABCE, 1AB42, 1AAB7, 1AA2A, 1A99E, 1A911, 1A883, 1A7F6, 1A768, 1A6D9, 1A64A, 1A5BB, 1A52C, 1A49C, 1A40C, 1A37C, 1A2EB, 1A25A, 1A1C9, 1A137, 1A0A5, 1A013, 19F80, 19EED, 19E5A, 19DC6, 19D32, 19C9E, 19C09, 19B75, 19ADF, 19A4A, 199B4, 1991E, 19887, 197F1, 1975A, 196C2, 1962B, 19593, 194FA, 19462, 193C9, 19330, 19296, 191FD, 19163, 190C8, 1902E, 18F93, 18EF8, 18E5C, 18DC1, 18D25, 18C88, 18BEC, 18B4F, 18AB2, 18A14, 18977, 188D9, 1883A, 1879C, 186FD, 1865E, 185BF, 1851F, 18480, 183E0, 1833F, 1829F, 181FE, 1815D, 180BB, 1801A, 17F78, 17ED6, 17E34, 17D91, 17CEE, 17C4B, 17BA8, 17B04, 17A60, 179BC, 17918, 17874, 177CF, 1772A, 17685, 175DF, 1753A, 17494, 173EE, 17347, 172A1, 171FA, 17153, 170AC, 17005, 16F5D, 16EB5, 16E0D, 16D65, 16CBC, 16C14, 16B6B, 16AC2, 16A18, 1696F, 168C5, 1681B, 16771, 166C7, 1661D, 16572, 164C7, 1641C, 16371, 162C5, 1621A, 1616E, 160C2, 16016, 15F6A, 15EBD, 15E11, 15D64, 15CB7, 15C0A, 15B5C, 15AAF, 15A01, 15953, 158A5, 157F7, 15749, 1569A, 155EC, 1553D, 1548E, 153DF, 1532F, 15280, 151D0, 15121, 15071, 14FC1, 14F11, 14E60, 14DB0, 14CFF, 14C4F, 14B9E, 14AED, 14A3C, 1498B, 148D9, 14828, 14776, 146C4, 14612, 14560, 144AE, 143FC, 1434A, 14297, 141E5, 14132, 1407F, 13FCC, 13F19, 13E66, 13DB3, 13D00, 13C4C, 13B99, 13AE5, 13A31, 1397D, 138CA, 13815, 13761, 136AD, 135F9, 13544, 13490, 133DB, 13327, 13272, 131BD, 13108, 13053, 12F9E, 12EE9, 12E34, 12D7F, 12CCA, 12C14, 12B5F, 12AA9, 129F4, 1293E, 12888, 127D3, 1271D, 12667, 125B1, 124FB, 12445, 1238F, 122D9, 12222, 1216C, 120B6, 12000, 11F49, 11E93, 11DDC, 11D26, 11C6F, 11BB9, 11B02, 11A4C, 11995, 118DE, 11827, 11771, 116BA, 11603, 1154C, 11496, 113DF, 11328, 11271, 111BA, 11103, 1104C, 10F95, 10EDE, 10E27, 10D70, 10CBA, 10C03, 10B4C, 10A95, 109DE, 10927, 10870, 107B9, 10702, 1064B, 10594, 104DD, 10426, 1036F, 102B8, 10202, 1014B, 10094, FFDD, FF26, FE70, FDB9, FD02, FC4B, FB95, FADE, FA28, F971, F8BB, F804, F74E, F697, F5E1, F52B, F474, F3BE, F308, F252, F19C, F0E6, F030, EF7A, EEC4, EE0E, ED58, ECA3, EBED, EB37, EA82, E9CC, E917, E862, E7AC, E6F7, E642, E58D, E4D8, E423, E36E, E2B9, E205, E150, E09C, DFE7, DF33, DE7E, DDCA, DD16, DC62, DBAE, DAFA, DA47, D993, D8DF, D82C, D779, D6C5, D612, D55F, D4AC, D3F9, D347, D294, D1E1, D12F, D07D, CFCA, CF18, CE66, CDB4, CD03, CC51, CB9F, CAEE, CA3D, C98C, C8DB, C82A, C779, C6C8, C618, C567, C4B7, C407, C357, C2A7, C1F7, C148, C098, BFE9, BF3A, BE8B, BDDC, BD2D, BC7F, BBD0, BB22, BA74, B9C6, B918, B86A, B7BC, B70F, B662, B5B5, B508, B45B, B3AE, B302, B256, B1A9, B0FD, B052, AFA6, AEFB, AE4F, ADA4, ACF9, AC4E, ABA4, AAF9, AA4F, A9A5, A8FB, A851, A7A8, A6FE, A655, A5AC, A503, A45B, A3B2, A30A, A262, A1BA, A112, A06B, 9FC3, 9F1C, 9E75, 9DCF, 9D28, 9C82, 9BDC, 9B36, 9A90, 99EA, 9945, 98A0, 97FB, 9756, 96B2, 960D, 9569, 94C5, 9422, 937E, 92DB, 9238, 9195, 90F2, 9050, 8FAE, 8F0C, 8E6A, 8DC8, 8D27, 8C86, 8BE5, 8B45, 8AA4, 8A04, 8964, 88C4, 8825, 8785, 86E6, 8647, 85A9, 850A, 846C, 83CE, 8331, 8293, 81F6, 8159, 80BC, 8020, 7F84, 7EE8, 7E4C, 7DB0, 7D15, 7C7A, 7BDF, 7B45, 7AAA, 7A10, 7976, 78DD, 7844, 77AB, 7712, 7679, 75E1, 7549, 74B1, 7419, 7382, 72EB, 7254, 71BE, 7128, 7092, 6FFC, 6F66, 6ED1, 6E3C, 6DA8, 6D13, 6C7F, 6BEB, 6B57, 6AC4, 6A31, 699E, 690C, 6879, 67E7, 6755, 66C4, 6633, 65A2, 6511, 6481, 63F1, 6361, 62D1, 6242, 61B3, 6124, 6096, 6008, 5F7A, 5EEC, 5E5F, 5DD2, 5D45, 5CB8, 5C2C, 5BA0, 5B15, 5A89, 59FE, 5974, 58E9, 585F, 57D5, 574B, 56C2, 5639, 55B0, 5528, 54A0, 5418, 5390, 5309, 5282, 51FB, 5175, 50EF, 5069, 4FE3, 4F5E, 4ED9, 4E54, 4DD0, 4D4C, 4CC8, 4C45, 4BC2, 4B3F, 4ABC, 4A3A, 49B8, 4936, 48B5, 4834, 47B3, 4733, 46B3, 4633, 45B4, 4534, 44B5, 4437, 43B9, 433B, 42BD, 4240, 41C2, 4146, 40C9, 404D, 3FD1, 3F56, 3EDB, 3E60, 3DE5, 3D6B, 3CF1, 3C77, 3BFE, 3B85, 3B0C, 3A94, 3A1C, 39A4, 392D, 38B6, 383F, 37C8, 3752, 36DC, 3667, 35F1, 357D, 3508, 3494, 3420, 33AC, 3339, 32C6, 3253, 31E1, 316F, 30FD, 308C, 301A, 2FAA, 2F39, 2EC9, 2E59, 2DEA, 2D7B, 2D0C, 2C9D, 2C2F, 2BC1, 2B54, 2AE6, 2A7A, 2A0D, 29A1, 2935, 28C9, 285E, 27F3, 2788, 271E, 26B4, 264A, 25E1, 2578, 250F, 24A7, 243F, 23D7, 2370, 2309, 22A2, 223B, 21D5, 2170, 210A, 20A5, 2040, 1FDC, 1F78, 1F14, 1EB0, 1E4D, 1DEA, 1D88, 1D26, 1CC4, 1C62, 1C01, 1BA0, 1B40, 1ADF, 1A7F, 1A20, 19C1, 1962, 1903, 18A5, 1847, 17E9, 178C, 172F, 16D2, 1676, 161A, 15BF, 1563, 1508, 14AE, 1453, 13F9, 139F, 1346, 12ED, 1294, 123C, 11E4, 118C, 1135, 10DE, 1087, 1031, FDA, F85, F2F, EDA, E85, E31, DDD, D89, D35, CE2, C8F, C3D, BEA, B99, B47, AF6, AA5, A54, A04, 9B4, 964, 915, 8C6, 878, 829, 7DB, 78D, 740, 6F3, 6A6, 65A, 60E, 5C2, 577, 52C, 4E1, 496, 44C, 402, 3B9, 370, 327, 2DE, 296, 24E, 206, 1BF, 178, 131, EB, A5, 5F, 1A;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_d817ed8ddb3646eb',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '1f6132190363c4861544ebd90c3fadc2',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_d817ed8ddb3646eb',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFD5, 3FF90, 3FF4C, 3FF08, 3FEC4, 3FE80, 3FE3D, 3FDFA, 3FDB8, 3FD75, 3FD33, 3FCF2, 3FCB0, 3FC6F, 3FC2F, 3FBEE, 3FBAE, 3FB6F, 3FB2F, 3FAF0, 3FAB1, 3FA73, 3FA34, 3F9F7, 3F9B9, 3F97C, 3F93F, 3F902, 3F8C6, 3F88A, 3F84E, 3F812, 3F7D7, 3F79D, 3F762, 3F728, 3F6EE, 3F6B4, 3F67B, 3F642, 3F609, 3F5D1, 3F599, 3F561, 3F529, 3F4F2, 3F4BB, 3F485, 3F44E, 3F418, 3F3E3, 3F3AD, 3F378, 3F343, 3F30F, 3F2DB, 3F2A7, 3F273, 3F240, 3F20D, 3F1DA, 3F1A8, 3F175, 3F144, 3F112, 3F0E1, 3F0B0, 3F07F, 3F04F, 3F01E, 3EFEF, 3EFBF, 3EF90, 3EF61, 3EF32, 3EF04, 3EED6, 3EEA8, 3EE7A, 3EE4D, 3EE20, 3EDF3, 3EDC7, 3ED9B, 3ED6F, 3ED44, 3ED18, 3ECED, 3ECC3, 3EC98, 3EC6E, 3EC44, 3EC1B, 3EBF1, 3EBC8, 3EBA0, 3EB77, 3EB4F, 3EB27, 3EAFF, 3EAD8, 3EAB1, 3EA8A, 3EA63, 3EA3D, 3EA17, 3E9F1, 3E9CC, 3E9A7, 3E982, 3E95D, 3E939, 3E915, 3E8F1, 3E8CD, 3E8AA, 3E887, 3E864, 3E841, 3E81F, 3E7FD, 3E7DB, 3E7BA, 3E799, 3E778, 3E757, 3E737, 3E716, 3E6F6, 3E6D7, 3E6B7, 3E698, 3E679, 3E65B, 3E63C, 3E61E, 3E600, 3E5E3, 3E5C5, 3E5A8, 3E58B, 3E56F, 3E552, 3E536, 3E51A, 3E4FF, 3E4E3, 3E4C8, 3E4AD, 3E493, 3E478, 3E45E, 3E444, 3E42A, 3E411, 3E3F8, 3E3DF, 3E3C6, 3E3AE, 3E396, 3E37E, 3E366, 3E34E, 3E337, 3E320, 3E309, 3E2F3, 3E2DC, 3E2C6, 3E2B0, 3E29B, 3E285, 3E270, 3E25B, 3E247, 3E232, 3E21E, 3E20A, 3E1F6, 3E1E2, 3E1CF, 3E1BC, 3E1A9, 3E196, 3E184, 3E172, 3E160, 3E14E, 3E13C, 3E12B, 3E11A, 3E109, 3E0F8, 3E0E8, 3E0D7, 3E0C7, 3E0B8, 3E0A8, 3E099, 3E089, 3E07A, 3E06C, 3E05D, 3E04F, 3E041, 3E033, 3E025, 3E017, 3E00A, 3DFFD, 3DFF0, 3DFE3, 3DFD7, 3DFCB, 3DFBF, 3DFB3, 3DFA7, 3DF9B, 3DF90, 3DF85, 3DF7A, 3DF70, 3DF65, 3DF5B, 3DF51, 3DF47, 3DF3D, 3DF33, 3DF2A, 3DF21, 3DF18, 3DF0F, 3DF07, 3DEFE, 3DEF6, 3DEEE, 3DEE6, 3DEDF, 3DED7, 3DED0, 3DEC9, 3DEC2, 3DEBB, 3DEB5, 3DEAE, 3DEA8, 3DEA2, 3DE9C, 3DE97, 3DE91, 3DE8C, 3DE87, 3DE82, 3DE7D, 3DE79, 3DE74, 3DE70, 3DE6C, 3DE68, 3DE64, 3DE61, 3DE5E, 3DE5A, 3DE57, 3DE54, 3DE52, 3DE4F, 3DE4D, 3DE4A, 3DE48, 3DE47, 3DE45, 3DE43, 3DE42, 3DE41, 3DE3F, 3DE3F, 3DE3E, 3DE3D, 3DE3D, 3DE3C, 3DE3C, 3DE3C, 3DE3C, 3DE3D, 3DE3D, 3DE3E, 3DE3E, 3DE3F, 3DE40, 3DE42, 3DE43, 3DE44, 3DE46, 3DE48, 3DE4A, 3DE4C, 3DE4E, 3DE50, 3DE53, 3DE56, 3DE58, 3DE5B, 3DE5E, 3DE62, 3DE65, 3DE68, 3DE6C, 3DE70, 3DE74, 3DE78, 3DE7C, 3DE80, 3DE84, 3DE89, 3DE8E, 3DE92, 3DE97, 3DE9C, 3DEA2, 3DEA7, 3DEAC, 3DEB2, 3DEB8, 3DEBD, 3DEC3, 3DEC9, 3DED0, 3DED6, 3DEDC, 3DEE3, 3DEEA, 3DEF0, 3DEF7, 3DEFE, 3DF05, 3DF0D, 3DF14, 3DF1B, 3DF23, 3DF2B, 3DF32, 3DF3A, 3DF42, 3DF4B, 3DF53, 3DF5B, 3DF64, 3DF6C, 3DF75, 3DF7E, 3DF87, 3DF90, 3DF99, 3DFA2, 3DFAB, 3DFB5, 3DFBE, 3DFC8, 3DFD1, 3DFDB, 3DFE5, 3DFEF, 3DFF9, 3E003, 3E00E, 3E018, 3E023, 3E02D, 3E038, 3E043, 3E04E, 3E058, 3E063, 3E06F, 3E07A, 3E085, 3E091, 3E09C, 3E0A8, 3E0B3, 3E0BF, 3E0CB, 3E0D7, 3E0E3, 3E0EF, 3E0FB, 3E107, 3E113, 3E120, 3E12C, 3E139, 3E145, 3E152, 3E15F, 3E16C, 3E179, 3E186, 3E193, 3E1A0, 3E1AD, 3E1BB, 3E1C8, 3E1D5, 3E1E3, 3E1F0, 3E1FE, 3E20C, 3E21A, 3E228, 3E235, 3E243, 3E252, 3E260, 3E26E, 3E27C, 3E28A, 3E299, 3E2A7, 3E2B6, 3E2C4, 3E2D3, 3E2E2, 3E2F0, 3E2FF, 3E30E, 3E31D, 3E32C, 3E33B, 3E34A, 3E359, 3E368, 3E378, 3E387, 3E396, 3E3A6, 3E3B5, 3E3C5, 3E3D4, 3E3E4, 3E3F3, 3E403, 3E413, 3E423, 3E432, 3E442, 3E452, 3E462, 3E472, 3E482, 3E492, 3E4A3, 3E4B3, 3E4C3, 3E4D3, 3E4E4, 3E4F4, 3E504, 3E515, 3E525, 3E536, 3E546, 3E557, 3E567, 3E578, 3E589, 3E599, 3E5AA, 3E5BB, 3E5CC, 3E5DD, 3E5EE, 3E5FF, 3E60F, 3E620, 3E631, 3E643, 3E654, 3E665, 3E676, 3E687, 3E698, 3E6A9, 3E6BB, 3E6CC, 3E6DD, 3E6EE, 3E700, 3E711, 3E722, 3E734, 3E745, 3E757, 3E768, 3E77A, 3E78B, 3E79D, 3E7AE, 3E7C0, 3E7D1, 3E7E3, 3E7F5, 3E806, 3E818, 3E829, 3E83B, 3E84D, 3E85F, 3E870, 3E882, 3E894, 3E8A5, 3E8B7, 3E8C9, 3E8DB, 3E8ED, 3E8FE, 3E910, 3E922, 3E934, 3E946, 3E958, 3E969, 3E97B, 3E98D, 3E99F, 3E9B1, 3E9C3, 3E9D5, 3E9E7, 3E9F9, 3EA0B, 3EA1C, 3EA2E, 3EA40, 3EA52, 3EA64, 3EA76, 3EA88, 3EA9A, 3EAAC, 3EABE, 3EAD0, 3EAE2, 3EAF4, 3EB05, 3EB17, 3EB29, 3EB3B, 3EB4D, 3EB5F, 3EB71, 3EB83, 3EB95, 3EBA7, 3EBB8, 3EBCA, 3EBDC, 3EBEE, 3EC00, 3EC12, 3EC24, 3EC35, 3EC47, 3EC59, 3EC6B, 3EC7D, 3EC8F, 3ECA0, 3ECB2, 3ECC4, 3ECD6, 3ECE7, 3ECF9, 3ED0B, 3ED1C, 3ED2E, 3ED40, 3ED51, 3ED63, 3ED75, 3ED86, 3ED98, 3EDAA, 3EDBB, 3EDCD, 3EDDE, 3EDF0, 3EE01, 3EE13, 3EE24, 3EE36, 3EE47, 3EE59, 3EE6A, 3EE7B, 3EE8D, 3EE9E, 3EEAF, 3EEC1, 3EED2, 3EEE3, 3EEF4, 3EF06, 3EF17, 3EF28, 3EF39, 3EF4A, 3EF5B, 3EF6D, 3EF7E, 3EF8F, 3EFA0, 3EFB1, 3EFC2, 3EFD3, 3EFE4, 3EFF5, 3F005, 3F016, 3F027, 3F038, 3F049, 3F059, 3F06A, 3F07B, 3F08C, 3F09C, 3F0AD, 3F0BD, 3F0CE, 3F0DF, 3F0EF, 3F100, 3F110, 3F120, 3F131, 3F141, 3F152, 3F162, 3F172, 3F182, 3F193, 3F1A3, 3F1B3, 3F1C3, 3F1D3, 3F1E3, 3F1F3, 3F203, 3F213, 3F223, 3F233, 3F243, 3F253, 3F263, 3F273, 3F282, 3F292, 3F2A2, 3F2B1, 3F2C1, 3F2D1, 3F2E0, 3F2F0, 3F2FF, 3F30F, 3F31E, 3F32E, 3F33D, 3F34C, 3F35C, 3F36B, 3F37A, 3F389, 3F398, 3F3A7, 3F3B7, 3F3C6, 3F3D5, 3F3E4, 3F3F3, 3F401, 3F410, 3F41F, 3F42E, 3F43D, 3F44B, 3F45A, 3F469, 3F477, 3F486, 3F494, 3F4A3, 3F4B1, 3F4C0, 3F4CE, 3F4DD, 3F4EB, 3F4F9, 3F507, 3F516, 3F524, 3F532, 3F540, 3F54E, 3F55C, 3F56A, 3F578, 3F586, 3F594, 3F5A2, 3F5AF, 3F5BD, 3F5CB, 3F5D8, 3F5E6, 3F5F4, 3F601, 3F60F, 3F61C, 3F62A, 3F637, 3F644, 3F652, 3F65F, 3F66C, 3F679, 3F687, 3F694, 3F6A1, 3F6AE, 3F6BB, 3F6C8, 3F6D5, 3F6E2, 3F6EE, 3F6FB, 3F708, 3F715, 3F721, 3F72E, 3F73B, 3F747, 3F754, 3F760, 3F76D, 3F779, 3F786, 3F792, 3F79E, 3F7AA, 3F7B7, 3F7C3, 3F7CF, 3F7DB, 3F7E7, 3F7F3, 3F7FF, 3F80B, 3F817, 3F823, 3F82F, 3F83A, 3F846, 3F852, 3F85D, 3F869, 3F875, 3F880, 3F88C, 3F897, 3F8A2, 3F8AE, 3F8B9, 3F8C4, 3F8D0, 3F8DB, 3F8E6, 3F8F1, 3F8FC, 3F907, 3F912, 3F91D, 3F928, 3F933, 3F93E, 3F949, 3F954, 3F95F, 3F969, 3F974, 3F97F, 3F989, 3F994, 3F99E, 3F9A9, 3F9B3, 3F9BE, 3F9C8, 3F9D2, 3F9DD, 3F9E7, 3F9F1, 3F9FB, 3FA05, 3FA10, 3FA1A, 3FA24, 3FA2E, 3FA38, 3FA42, 3FA4B, 3FA55, 3FA5F, 3FA69, 3FA73, 3FA7C, 3FA86, 3FA90, 3FA99, 3FAA3, 3FAAC, 3FAB6, 3FABF, 3FAC9, 3FAD2, 3FADB, 3FAE5, 3FAEE, 3FAF7, 3FB00, 3FB09, 3FB13, 3FB1C, 3FB25, 3FB2E, 3FB37, 3FB40, 3FB49, 3FB52, 3FB5A, 3FB63, 3FB6C, 3FB75, 3FB7D, 3FB86, 3FB8F, 3FB97, 3FBA0, 3FBA9, 3FBB1, 3FBB9, 3FBC2, 3FBCA, 3FBD3, 3FBDB, 3FBE3, 3FBEC, 3FBF4, 3FBFC, 3FC04, 3FC0D, 3FC15, 3FC1D, 3FC25, 3FC2D, 3FC35, 3FC3D, 3FC45, 3FC4D, 3FC55, 3FC5C, 3FC64, 3FC6C, 3FC74, 3FC7B, 3FC83, 3FC8B, 3FC93, 3FC9A, 3FCA2, 3FCA9, 3FCB1, 3FCB8, 3FCC0, 3FCC7, 3FCCF, 3FCD6, 3FCDD, 3FCE5, 3FCEC, 3FCF3, 3FCFA, 3FD02, 3FD09, 3FD10, 3FD17, 3FD1E, 3FD25, 3FD2C, 3FD33, 3FD3A, 3FD41, 3FD48, 3FD4F, 3FD56, 3FD5D, 3FD64, 3FD6B, 3FD72, 3FD78, 3FD7F, 3FD86, 3FD8D, 3FD93, 3FD9A, 3FDA1, 3FDA7, 3FDAE, 3FDB4, 3FDBB, 3FDC1, 3FDC8, 3FDCE, 3FDD5, 3FDDB, 3FDE2, 3FDE8, 3FDEF, 3FDF5, 3FDFB, 3FE01, 3FE08, 3FE0E, 3FE14, 3FE1B, 3FE21, 3FE27, 3FE2D, 3FE33, 3FE39, 3FE3F, 3FE46, 3FE4C, 3FE52, 3FE58, 3FE5E, 3FE64, 3FE6A, 3FE70, 3FE76, 3FE7B, 3FE81, 3FE87, 3FE8D, 3FE93, 3FE99, 3FE9F, 3FEA4, 3FEAA, 3FEB0, 3FEB6, 3FEBC, 3FEC1, 3FEC7, 3FECD, 3FED2, 3FED8, 3FEDE, 3FEE3, 3FEE9, 3FEEF, 3FEF4, 3FEFA, 3FEFF, 3FF05, 3FF0A, 3FF10, 3FF15, 3FF1B, 3FF20, 3FF26, 3FF2B, 3FF31, 3FF36, 3FF3C, 3FF41, 3FF47, 3FF4C, 3FF51, 3FF57, 3FF5C, 3FF61, 3FF67, 3FF6C, 3FF71, 3FF77, 3FF7C, 3FF81, 3FF87, 3FF8C, 3FF91, 3FF96, 3FF9C, 3FFA1, 3FFA6, 3FFAB, 3FFB1, 3FFB6, 3FFBB, 3FFC0, 3FFC5, 3FFCB, 3FFD0, 3FFD5, 3FFDA, 3FFDF, 3FFE4, 3FFEA, 3FFEF, 3FFF4, 3FFF9, 3FFFE;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_11c202c1b9a21438',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'bde512287f950ffc9ee1b37ecfcdae1a',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_11c202c1b9a21438',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFFC, 3FFF7, 3FFF2, 3FFED, 3FFE8, 3FFE3, 3FFDE, 3FFD8, 3FFD3, 3FFCE, 3FFC9, 3FFC4, 3FFBF, 3FFB9, 3FFB4, 3FFAF, 3FFAA, 3FFA5, 3FF9F, 3FF9A, 3FF95, 3FF8F, 3FF8A, 3FF85, 3FF80, 3FF7A, 3FF75, 3FF70, 3FF6A, 3FF65, 3FF60, 3FF5A, 3FF55, 3FF50, 3FF4A, 3FF45, 3FF3F, 3FF3A, 3FF35, 3FF2F, 3FF2A, 3FF24, 3FF1F, 3FF19, 3FF14, 3FF0E, 3FF09, 3FF03, 3FEFE, 3FEF8, 3FEF2, 3FEED, 3FEE7, 3FEE2, 3FEDC, 3FED6, 3FED1, 3FECB, 3FEC5, 3FEBF, 3FEBA, 3FEB4, 3FEAE, 3FEA8, 3FEA3, 3FE9D, 3FE97, 3FE91, 3FE8B, 3FE85, 3FE80, 3FE7A, 3FE74, 3FE6E, 3FE68, 3FE62, 3FE5C, 3FE56, 3FE50, 3FE4A, 3FE44, 3FE3D, 3FE37, 3FE31, 3FE2B, 3FE25, 3FE1F, 3FE19, 3FE12, 3FE0C, 3FE06, 3FDFF, 3FDF9, 3FDF3, 3FDEC, 3FDE6, 3FDE0, 3FDD9, 3FDD3, 3FDCC, 3FDC6, 3FDBF, 3FDB9, 3FDB2, 3FDAC, 3FDA5, 3FD9E, 3FD98, 3FD91, 3FD8A, 3FD84, 3FD7D, 3FD76, 3FD6F, 3FD69, 3FD62, 3FD5B, 3FD54, 3FD4D, 3FD46, 3FD3F, 3FD38, 3FD31, 3FD2A, 3FD23, 3FD1C, 3FD15, 3FD0E, 3FD07, 3FCFF, 3FCF8, 3FCF1, 3FCEA, 3FCE2, 3FCDB, 3FCD4, 3FCCC, 3FCC5, 3FCBD, 3FCB6, 3FCAE, 3FCA7, 3FC9F, 3FC98, 3FC90, 3FC88, 3FC81, 3FC79, 3FC71, 3FC69, 3FC62, 3FC5A, 3FC52, 3FC4A, 3FC42, 3FC3A, 3FC32, 3FC2A, 3FC22, 3FC1A, 3FC12, 3FC0A, 3FC02, 3FBF9, 3FBF1, 3FBE9, 3FBE1, 3FBD8, 3FBD0, 3FBC8, 3FBBF, 3FBB7, 3FBAE, 3FBA6, 3FB9D, 3FB95, 3FB8C, 3FB83, 3FB7B, 3FB72, 3FB69, 3FB60, 3FB57, 3FB4F, 3FB46, 3FB3D, 3FB34, 3FB2B, 3FB22, 3FB19, 3FB10, 3FB06, 3FAFD, 3FAF4, 3FAEB, 3FAE2, 3FAD8, 3FACF, 3FAC5, 3FABC, 3FAB3, 3FAA9, 3FAA0, 3FA96, 3FA8C, 3FA83, 3FA79, 3FA6F, 3FA66, 3FA5C, 3FA52, 3FA48, 3FA3E, 3FA34, 3FA2A, 3FA20, 3FA16, 3FA0C, 3FA02, 3F9F8, 3F9EE, 3F9E4, 3F9D9, 3F9CF, 3F9C5, 3F9BA, 3F9B0, 3F9A5, 3F99B, 3F990, 3F986, 3F97B, 3F970, 3F966, 3F95B, 3F950, 3F945, 3F93B, 3F930, 3F925, 3F91A, 3F90F, 3F904, 3F8F9, 3F8EE, 3F8E2, 3F8D7, 3F8CC, 3F8C1, 3F8B5, 3F8AA, 3F89F, 3F893, 3F888, 3F87C, 3F871, 3F865, 3F859, 3F84E, 3F842, 3F836, 3F82B, 3F81F, 3F813, 3F807, 3F7FB, 3F7EF, 3F7E3, 3F7D7, 3F7CB, 3F7BF, 3F7B2, 3F7A6, 3F79A, 3F78E, 3F781, 3F775, 3F769, 3F75C, 3F750, 3F743, 3F736, 3F72A, 3F71D, 3F710, 3F704, 3F6F7, 3F6EA, 3F6DD, 3F6D0, 3F6C3, 3F6B6, 3F6A9, 3F69C, 3F68F, 3F682, 3F675, 3F668, 3F65B, 3F64D, 3F640, 3F633, 3F625, 3F618, 3F60A, 3F5FD, 3F5EF, 3F5E1, 3F5D4, 3F5C6, 3F5B8, 3F5AB, 3F59D, 3F58F, 3F581, 3F573, 3F565, 3F557, 3F549, 3F53B, 3F52D, 3F51F, 3F511, 3F503, 3F4F4, 3F4E6, 3F4D8, 3F4C9, 3F4BB, 3F4AC, 3F49E, 3F48F, 3F481, 3F472, 3F464, 3F455, 3F446, 3F438, 3F429, 3F41A, 3F40B, 3F3FC, 3F3ED, 3F3DE, 3F3CF, 3F3C0, 3F3B1, 3F3A2, 3F393, 3F384, 3F375, 3F366, 3F356, 3F347, 3F338, 3F328, 3F319, 3F309, 3F2FA, 3F2EA, 3F2DB, 3F2CB, 3F2BC, 3F2AC, 3F29C, 3F28D, 3F27D, 3F26D, 3F25D, 3F24E, 3F23E, 3F22E, 3F21E, 3F20E, 3F1FE, 3F1EE, 3F1DE, 3F1CE, 3F1BE, 3F1AD, 3F19D, 3F18D, 3F17D, 3F16D, 3F15C, 3F14C, 3F13C, 3F12B, 3F11B, 3F10A, 3F0FA, 3F0E9, 3F0D9, 3F0C8, 3F0B8, 3F0A7, 3F096, 3F086, 3F075, 3F064, 3F054, 3F043, 3F032, 3F021, 3F010, 3EFFF, 3EFEF, 3EFDE, 3EFCD, 3EFBC, 3EFAB, 3EF9A, 3EF89, 3EF78, 3EF67, 3EF55, 3EF44, 3EF33, 3EF22, 3EF11, 3EF00, 3EEEE, 3EEDD, 3EECC, 3EEBB, 3EEA9, 3EE98, 3EE87, 3EE75, 3EE64, 3EE52, 3EE41, 3EE2F, 3EE1E, 3EE0D, 3EDFB, 3EDEA, 3EDD8, 3EDC6, 3EDB5, 3EDA3, 3ED92, 3ED80, 3ED6E, 3ED5D, 3ED4B, 3ED3A, 3ED28, 3ED16, 3ED04, 3ECF3, 3ECE1, 3ECCF, 3ECBE, 3ECAC, 3EC9A, 3EC88, 3EC76, 3EC65, 3EC53, 3EC41, 3EC2F, 3EC1D, 3EC0B, 3EBFA, 3EBE8, 3EBD6, 3EBC4, 3EBB2, 3EBA0, 3EB8E, 3EB7C, 3EB6B, 3EB59, 3EB47, 3EB35, 3EB23, 3EB11, 3EAFF, 3EAED, 3EADB, 3EAC9, 3EAB7, 3EAA5, 3EA93, 3EA82, 3EA70, 3EA5E, 3EA4C, 3EA3A, 3EA28, 3EA16, 3EA04, 3E9F2, 3E9E0, 3E9CE, 3E9BC, 3E9AB, 3E999, 3E987, 3E975, 3E963, 3E951, 3E93F, 3E92E, 3E91C, 3E90A, 3E8F8, 3E8E6, 3E8D4, 3E8C3, 3E8B1, 3E89F, 3E88D, 3E87C, 3E86A, 3E858, 3E846, 3E835, 3E823, 3E811, 3E800, 3E7EE, 3E7DD, 3E7CB, 3E7B9, 3E7A8, 3E796, 3E785, 3E773, 3E762, 3E750, 3E73F, 3E72E, 3E71C, 3E70B, 3E6F9, 3E6E8, 3E6D7, 3E6C6, 3E6B4, 3E6A3, 3E692, 3E681, 3E670, 3E65E, 3E64D, 3E63C, 3E62B, 3E61A, 3E609, 3E5F8, 3E5E7, 3E5D7, 3E5C6, 3E5B5, 3E5A4, 3E593, 3E583, 3E572, 3E561, 3E551, 3E540, 3E530, 3E51F, 3E50F, 3E4FE, 3E4EE, 3E4DD, 3E4CD, 3E4BD, 3E4AD, 3E49C, 3E48C, 3E47C, 3E46C, 3E45C, 3E44C, 3E43C, 3E42C, 3E41D, 3E40D, 3E3FD, 3E3ED, 3E3DE, 3E3CE, 3E3BF, 3E3AF, 3E3A0, 3E390, 3E381, 3E372, 3E363, 3E353, 3E344, 3E335, 3E326, 3E317, 3E308, 3E2F9, 3E2EB, 3E2DC, 3E2CD, 3E2BF, 3E2B0, 3E2A2, 3E293, 3E285, 3E277, 3E268, 3E25A, 3E24C, 3E23E, 3E230, 3E222, 3E214, 3E207, 3E1F9, 3E1EB, 3E1DE, 3E1D0, 3E1C3, 3E1B5, 3E1A8, 3E19B, 3E18E, 3E181, 3E174, 3E167, 3E15A, 3E14D, 3E141, 3E134, 3E127, 3E11B, 3E10F, 3E102, 3E0F6, 3E0EA, 3E0DE, 3E0D2, 3E0C6, 3E0BA, 3E0AF, 3E0A3, 3E097, 3E08C, 3E081, 3E075, 3E06A, 3E05F, 3E054, 3E049, 3E03E, 3E034, 3E029, 3E01E, 3E014, 3E00A, 3DFFF, 3DFF5, 3DFEB, 3DFE1, 3DFD7, 3DFCD, 3DFC4, 3DFBA, 3DFB1, 3DFA7, 3DF9E, 3DF95, 3DF8C, 3DF83, 3DF7A, 3DF71, 3DF69, 3DF60, 3DF58, 3DF4F, 3DF47, 3DF3F, 3DF37, 3DF2F, 3DF27, 3DF20, 3DF18, 3DF11, 3DF09, 3DF02, 3DEFB, 3DEF4, 3DEED, 3DEE6, 3DEE0, 3DED9, 3DED3, 3DECD, 3DEC6, 3DEC0, 3DEBB, 3DEB5, 3DEAF, 3DEAA, 3DEA4, 3DE9F, 3DE9A, 3DE95, 3DE90, 3DE8B, 3DE87, 3DE82, 3DE7E, 3DE79, 3DE75, 3DE71, 3DE6E, 3DE6A, 3DE66, 3DE63, 3DE60, 3DE5C, 3DE59, 3DE56, 3DE54, 3DE51, 3DE4F, 3DE4C, 3DE4A, 3DE48, 3DE46, 3DE45, 3DE43, 3DE42, 3DE40, 3DE3F, 3DE3E, 3DE3D, 3DE3C, 3DE3C, 3DE3C, 3DE3B, 3DE3B, 3DE3B, 3DE3B, 3DE3C, 3DE3C, 3DE3D, 3DE3E, 3DE3F, 3DE40, 3DE41, 3DE43, 3DE44, 3DE46, 3DE48, 3DE4A, 3DE4C, 3DE4F, 3DE52, 3DE54, 3DE57, 3DE5A, 3DE5E, 3DE61, 3DE65, 3DE68, 3DE6C, 3DE70, 3DE75, 3DE79, 3DE7E, 3DE83, 3DE88, 3DE8D, 3DE92, 3DE98, 3DE9D, 3DEA3, 3DEA9, 3DEAF, 3DEB6, 3DEBC, 3DEC3, 3DECA, 3DED1, 3DED9, 3DEE0, 3DEE8, 3DEF0, 3DEF8, 3DF00, 3DF08, 3DF11, 3DF1A, 3DF23, 3DF2C, 3DF36, 3DF3F, 3DF49, 3DF53, 3DF5D, 3DF67, 3DF72, 3DF7D, 3DF88, 3DF93, 3DF9E, 3DFAA, 3DFB5, 3DFC1, 3DFCE, 3DFDA, 3DFE6, 3DFF3, 3E000, 3E00D, 3E01B, 3E028, 3E036, 3E044, 3E052, 3E061, 3E06F, 3E07E, 3E08D, 3E09D, 3E0AC, 3E0BC, 3E0CC, 3E0DC, 3E0EC, 3E0FD, 3E10D, 3E11E, 3E130, 3E141, 3E153, 3E164, 3E177, 3E189, 3E19B, 3E1AE, 3E1C1, 3E1D4, 3E1E8, 3E1FB, 3E20F, 3E223, 3E238, 3E24C, 3E261, 3E276, 3E28B, 3E2A1, 3E2B6, 3E2CC, 3E2E3, 3E2F9, 3E310, 3E326, 3E33E, 3E355, 3E36D, 3E384, 3E39C, 3E3B5, 3E3CD, 3E3E6, 3E3FF, 3E418, 3E432, 3E44C, 3E466, 3E480, 3E49A, 3E4B5, 3E4D0, 3E4EB, 3E507, 3E522, 3E53E, 3E55A, 3E577, 3E594, 3E5B1, 3E5CE, 3E5EB, 3E609, 3E627, 3E645, 3E664, 3E682, 3E6A1, 3E6C1, 3E6E0, 3E700, 3E720, 3E740, 3E761, 3E781, 3E7A2, 3E7C4, 3E7E5, 3E807, 3E829, 3E84C, 3E86E, 3E891, 3E8B4, 3E8D8, 3E8FB, 3E91F, 3E943, 3E968, 3E98D, 3E9B2, 3E9D7, 3E9FD, 3EA22, 3EA49, 3EA6F, 3EA96, 3EABC, 3EAE4, 3EB0B, 3EB33, 3EB5B, 3EB83, 3EBAC, 3EBD5, 3EBFE, 3EC27, 3EC51, 3EC7B, 3ECA5, 3ECD0, 3ECFA, 3ED25, 3ED51, 3ED7C, 3EDA8, 3EDD5, 3EE01, 3EE2E, 3EE5B, 3EE88, 3EEB6, 3EEE4, 3EF12, 3EF40, 3EF6F, 3EF9E, 3EFCE, 3EFFD, 3F02D, 3F05D, 3F08E, 3F0BF, 3F0F0, 3F121, 3F153, 3F185, 3F1B7, 3F1EA, 3F21C, 3F24F, 3F283, 3F2B7, 3F2EB, 3F31F, 3F354, 3F388, 3F3BE, 3F3F3, 3F429, 3F45F, 3F495, 3F4CC, 3F503, 3F53A, 3F572, 3F5AA, 3F5E2, 3F61B, 3F653, 3F68D, 3F6C6, 3F700, 3F73A, 3F774, 3F7AF, 3F7EA, 3F825, 3F860, 3F89C, 3F8D8, 3F915, 3F952, 3F98F, 3F9CC, 3FA0A, 3FA48, 3FA86, 3FAC5, 3FB04, 3FB43, 3FB82, 3FBC2, 3FC02, 3FC43, 3FC84, 3FCC5, 3FD06, 3FD48, 3FD8A, 3FDCC, 3FE0F, 3FE52, 3FE95, 3FED9, 3FF1D, 3FF61, 3FFA6, 3FFEA;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_15abfe73d44907c1',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '3225833d3abb06790359cad3f5934478',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_15abfe73d44907c1',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 30, 75, BB, 101, 147, 18E, 1D5, 21D, 264, 2AC, 2F5, 33D, 386, 3D0, 419, 463, 4AE, 4F8, 543, 58E, 5DA, 626, 672, 6BE, 70B, 758, 7A6, 7F4, 842, 890, 8DF, 92E, 97D, 9CD, A1D, A6E, ABE, B0F, B61, BB2, C04, C57, CA9, CFC, D50, DA3, DF7, E4B, EA0, EF5, F4A, FA0, FF6, 104C, 10A2, 10F9, 1150, 11A8, 1200, 1258, 12B0, 1309, 1362, 13BC, 1416, 1470, 14CA, 1525, 1580, 15DC, 1637, 1693, 16F0, 174D, 17AA, 1807, 1865, 18C3, 1921, 1980, 19DF, 1A3E, 1A9E, 1AFE, 1B5E, 1BBF, 1C20, 1C81, 1CE3, 1D45, 1DA7, 1E0A, 1E6D, 1ED0, 1F34, 1F97, 1FFC, 2060, 20C5, 212A, 2190, 21F6, 225C, 22C3, 2329, 2391, 23F8, 2460, 24C8, 2531, 2599, 2602, 266C, 26D6, 2740, 27AA, 2815, 2880, 28EB, 2957, 29C3, 2A30, 2A9C, 2B09, 2B77, 2BE4, 2C52, 2CC1, 2D2F, 2D9E, 2E0D, 2E7D, 2EED, 2F5D, 2FCE, 303F, 30B0, 3121, 3193, 3205, 3278, 32EB, 335E, 33D1, 3445, 34B9, 352D, 35A2, 3617, 368C, 3702, 3778, 37EE, 3865, 38DC, 3953, 39CB, 3A42, 3ABB, 3B33, 3BAC, 3C25, 3C9E, 3D18, 3D92, 3E0D, 3E87, 3F02, 3F7D, 3FF9, 4075, 40F1, 416E, 41EB, 4268, 42E5, 4363, 43E1, 445F, 44DE, 455D, 45DC, 465C, 46DC, 475C, 47DD, 485E, 48DF, 4960, 49E2, 4A64, 4AE6, 4B69, 4BEC, 4C6F, 4CF3, 4D76, 4DFB, 4E7F, 4F04, 4F89, 500E, 5094, 511A, 51A0, 5226, 52AD, 5334, 53BC, 5443, 54CB, 5554, 55DC, 5665, 56EE, 5778, 5801, 588B, 5916, 59A0, 5A2B, 5AB6, 5B42, 5BCD, 5C59, 5CE6, 5D72, 5DFF, 5E8C, 5F1A, 5FA7, 6035, 60C4, 6152, 61E1, 6270, 6300, 638F, 641F, 64AF, 6540, 65D1, 6662, 66F3, 6785, 6816, 68A8, 693B, 69CE, 6A60, 6AF4, 6B87, 6C1B, 6CAF, 6D43, 6DD8, 6E6C, 6F01, 6F97, 702C, 70C2, 7158, 71EE, 7285, 731C, 73B3, 744A, 74E2, 757A, 7612, 76AA, 7743, 77DC, 7875, 790F, 79A8, 7A42, 7ADC, 7B77, 7C11, 7CAC, 7D47, 7DE3, 7E7E, 7F1A, 7FB6, 8053, 80EF, 818C, 8229, 82C6, 8364, 8402, 849F, 853E, 85DC, 867B, 871A, 87B9, 8858, 88F8, 8998, 8A38, 8AD8, 8B79, 8C19, 8CBA, 8D5B, 8DFD, 8E9E, 8F40, 8FE2, 9085, 9127, 91CA, 926D, 9310, 93B3, 9457, 94FB, 959E, 9643, 96E7, 978C, 9830, 98D5, 997B, 9A20, 9AC6, 9B6C, 9C12, 9CB8, 9D5E, 9E05, 9EAC, 9F53, 9FFA, A0A1, A149, A1F0, A298, A341, A3E9, A491, A53A, A5E3, A68C, A735, A7DF, A888, A932, A9DC, AA86, AB31, ABDB, AC86, AD31, ADDC, AE87, AF32, AFDE, B089, B135, B1E1, B28E, B33A, B3E6, B493, B540, B5ED, B69A, B747, B7F5, B8A2, B950, B9FE, BAAC, BB5A, BC09, BCB7, BD66, BE15, BEC4, BF73, C022, C0D1, C181, C231, C2E0, C390, C440, C4F0, C5A1, C651, C702, C7B2, C863, C914, C9C5, CA77, CB28, CBD9, CC8B, CD3D, CDEE, CEA0, CF52, D004, D0B7, D169, D21B, D2CE, D381, D434, D4E6, D599, D64D, D700, D7B3, D866, D91A, D9CD, DA81, DB35, DBE9, DC9D, DD51, DE05, DEB9, DF6D, E022, E0D6, E18B, E240, E2F4, E3A9, E45E, E513, E5C8, E67D, E732, E7E7, E89D, E952, EA07, EABD, EB72, EC28, ECDE, ED94, EE49, EEFF, EFB5, F06B, F121, F1D7, F28D, F343, F3FA, F4B0, F566, F61C, F6D3, F789, F840, F8F6, F9AD, FA63, FB1A, FBD0, FC87, FD3E, FDF5, FEAB, FF62, 10019, 100D0, 10186, 1023D, 102F4, 103AB, 10462, 10519, 105D0, 10687, 1073E, 107F5, 108AC, 10962, 10A19, 10AD0, 10B87, 10C3E, 10CF5, 10DAC, 10E63, 10F1A, 10FD1, 11088, 1113F, 111F6, 112AD, 11364, 1141A, 114D1, 11588, 1163F, 116F6, 117AC, 11863, 1191A, 119D1, 11A87, 11B3E, 11BF4, 11CAB, 11D61, 11E18, 11ECE, 11F85, 1203B, 120F1, 121A8, 1225E, 12314, 123CA, 12480, 12536, 125EC, 126A2, 12758, 1280E, 128C4, 12979, 12A2F, 12AE5, 12B9A, 12C50, 12D05, 12DBA, 12E6F, 12F25, 12FDA, 1308F, 13144, 131F8, 132AD, 13362, 13417, 134CB, 13580, 13634, 136E8, 1379C, 13850, 13904, 139B8, 13A6C, 13B20, 13BD3, 13C87, 13D3A, 13DEE, 13EA1, 13F54, 14007, 140BA, 1416D, 1421F, 142D2, 14384, 14436, 144E9, 1459B, 1464D, 146FE, 147B0, 14862, 14913, 149C5, 14A76, 14B27, 14BD8, 14C89, 14D39, 14DEA, 14E9A, 14F4A, 14FFA, 150AA, 1515A, 1520A, 152B9, 15369, 15418, 154C7, 15576, 15625, 156D3, 15782, 15830, 158DE, 1598C, 15A3A, 15AE8, 15B95, 15C42, 15CEF, 15D9C, 15E49, 15EF6, 15FA2, 1604E, 160FA, 161A6, 16252, 162FE, 163A9, 16454, 164FF, 165AA, 16654, 166FF, 167A9, 16853, 168FD, 169A6, 16A50, 16AF9, 16BA2, 16C4B, 16CF4, 16D9C, 16E44, 16EEC, 16F94, 1703B, 170E3, 1718A, 17231, 172D7, 1737E, 17424, 174CA, 17570, 17616, 176BB, 17760, 17805, 178AA, 1794E, 179F2, 17A96, 17B3A, 17BDD, 17C80, 17D23, 17DC6, 17E69, 17F0B, 17FAD, 1804F, 180F0, 18192, 18233, 182D3, 18374, 18414, 184B4, 18554, 185F3, 18692, 18731, 187D0, 1886E, 1890C, 189AA, 18A48, 18AE5, 18B82, 18C1F, 18CBB, 18D58, 18DF4, 18E8F, 18F2B, 18FC6, 19060, 190FB, 19195, 1922F, 192C9, 19362, 193FB, 19494, 1952C, 195C4, 1965C, 196F4, 1978B, 19822, 198B9, 1994F, 199E5, 19A7B, 19B10, 19BA5, 19C3A, 19CCF, 19D63, 19DF7, 19E8A, 19F1D, 19FB0, 1A043, 1A0D5, 1A167, 1A1F9, 1A28A, 1A31B, 1A3AB, 1A43C, 1A4CC, 1A55B, 1A5EA, 1A679, 1A708, 1A796, 1A824, 1A8B2, 1A93F, 1A9CC, 1AA58, 1AAE4, 1AB70, 1ABFC, 1AC87, 1AD12, 1AD9C, 1AE26, 1AEB0, 1AF39, 1AFC2, 1B04B, 1B0D3, 1B15B, 1B1E3, 1B26A, 1B2F1, 1B377, 1B3FD, 1B483, 1B508, 1B58D, 1B612, 1B696, 1B71A, 1B79E, 1B821, 1B8A3, 1B926, 1B9A8, 1BA29, 1BAAA, 1BB2B, 1BBAC, 1BC2C, 1BCAB, 1BD2B, 1BDA9, 1BE28, 1BEA6, 1BF24, 1BFA1, 1C01E, 1C09A, 1C116, 1C192, 1C20D, 1C288, 1C303, 1C37D, 1C3F6, 1C470, 1C4E9, 1C561, 1C5D9, 1C651, 1C6C8, 1C73F, 1C7B5, 1C82B, 1C8A0, 1C916, 1C98A, 1C9FF, 1CA72, 1CAE6, 1CB59, 1CBCB, 1CC3E, 1CCAF, 1CD21, 1CD91, 1CE02, 1CE72, 1CEE2, 1CF51, 1CFBF, 1D02E, 1D09B, 1D109, 1D176, 1D1E2, 1D24E, 1D2BA, 1D325, 1D390, 1D3FA, 1D464, 1D4CE, 1D537, 1D59F, 1D607, 1D66F, 1D6D6, 1D73D, 1D7A3, 1D809, 1D86E, 1D8D3, 1D937, 1D99B, 1D9FF, 1DA62, 1DAC4, 1DB27, 1DB88, 1DBE9, 1DC4A, 1DCAA, 1DD0A, 1DD6A, 1DDC9, 1DE27, 1DE85, 1DEE2, 1DF3F, 1DF9C, 1DFF8, 1E053, 1E0AE, 1E109, 1E163, 1E1BD, 1E216, 1E26F, 1E2C7, 1E31F, 1E376, 1E3CD, 1E423, 1E479, 1E4CE, 1E523, 1E577, 1E5CB, 1E61E, 1E671, 1E6C4, 1E716, 1E767, 1E7B8, 1E808, 1E858, 1E8A8, 1E8F7, 1E945, 1E993, 1E9E0, 1EA2D, 1EA7A, 1EAC6, 1EB11, 1EB5C, 1EBA7, 1EBF0, 1EC3A, 1EC83, 1ECCB, 1ED13, 1ED5B, 1EDA1, 1EDE8, 1EE2E, 1EE73, 1EEB8, 1EEFC, 1EF40, 1EF83, 1EFC6, 1F008, 1F04A, 1F08C, 1F0CC, 1F10D, 1F14C, 1F18B, 1F1CA, 1F208, 1F246, 1F283, 1F2C0, 1F2FC, 1F337, 1F372, 1F3AD, 1F3E7, 1F420, 1F459, 1F492, 1F4CA, 1F501, 1F538, 1F56E, 1F5A4, 1F5D9, 1F60E, 1F642, 1F676, 1F6A9, 1F6DC, 1F70E, 1F73F, 1F770, 1F7A1, 1F7D1, 1F800, 1F82F, 1F85E, 1F88B, 1F8B9, 1F8E6, 1F912, 1F93D, 1F969, 1F993, 1F9BD, 1F9E7, 1FA10, 1FA38, 1FA60, 1FA88, 1FAAE, 1FAD5, 1FAFB, 1FB20, 1FB44, 1FB69, 1FB8C, 1FBAF, 1FBD2, 1FBF4, 1FC15, 1FC36, 1FC56, 1FC76, 1FC95, 1FCB4, 1FCD2, 1FCF0, 1FD0D, 1FD2A, 1FD46, 1FD61, 1FD7C, 1FD96, 1FDB0, 1FDC9, 1FDE2, 1FDFA, 1FE12, 1FE29, 1FE3F, 1FE55, 1FE6B, 1FE80, 1FE94, 1FEA8, 1FEBB, 1FECE, 1FEE0, 1FEF1, 1FF02, 1FF13, 1FF23, 1FF32, 1FF41, 1FF4F, 1FF5D, 1FF6A, 1FF76, 1FF83, 1FF8E, 1FF99, 1FFA3, 1FFAD, 1FFB6, 1FFBF, 1FFC7, 1FFCF, 1FFD6, 1FFDD, 1FFE3, 1FFE8, 1FFED, 1FFF1, 1FFF5, 1FFF8, 1FFFB, 1FFFD, 1FFFF, 1FFFF, 1FFFF;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_db0357c42c191153',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '13d1edde4a729603aefdc13a0cccd6e3',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_db0357c42c191153',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 1FFFF, 1FFFF, 1FFFE, 1FFFC, 1FFFA, 1FFF7, 1FFF4, 1FFF0, 1FFEB, 1FFE6, 1FFE0, 1FFDA, 1FFD3, 1FFCC, 1FFC4, 1FFBC, 1FFB3, 1FFA9, 1FF9F, 1FF95, 1FF8A, 1FF7E, 1FF72, 1FF65, 1FF57, 1FF49, 1FF3B, 1FF2C, 1FF1C, 1FF0C, 1FEFC, 1FEEA, 1FED9, 1FEC6, 1FEB3, 1FEA0, 1FE8C, 1FE77, 1FE62, 1FE4D, 1FE37, 1FE20, 1FE09, 1FDF1, 1FDD8, 1FDBF, 1FDA6, 1FD8C, 1FD71, 1FD56, 1FD3B, 1FD1F, 1FD02, 1FCE4, 1FCC7, 1FCA8, 1FC89, 1FC6A, 1FC4A, 1FC29, 1FC08, 1FBE7, 1FBC4, 1FBA2, 1FB7E, 1FB5B, 1FB36, 1FB11, 1FAEC, 1FAC6, 1FA9F, 1FA78, 1FA51, 1FA29, 1FA00, 1F9D7, 1F9AD, 1F983, 1F958, 1F92C, 1F901, 1F8D4, 1F8A7, 1F87A, 1F84C, 1F81D, 1F7EE, 1F7BE, 1F78E, 1F75D, 1F72C, 1F6FA, 1F6C8, 1F695, 1F662, 1F62E, 1F5FA, 1F5C5, 1F58F, 1F559, 1F523, 1F4EB, 1F4B4, 1F47C, 1F443, 1F40A, 1F3D0, 1F396, 1F35B, 1F320, 1F2E4, 1F2A8, 1F26B, 1F22E, 1F1F0, 1F1B2, 1F173, 1F133, 1F0F3, 1F0B3, 1F072, 1F031, 1EFEF, 1EFAC, 1EF69, 1EF26, 1EEE2, 1EE9D, 1EE58, 1EE12, 1EDCC, 1ED86, 1ED3F, 1ECF7, 1ECAF, 1EC66, 1EC1D, 1EBD4, 1EB89, 1EB3F, 1EAF4, 1EAA8, 1EA5C, 1EA0F, 1E9C2, 1E975, 1E926, 1E8D8, 1E889, 1E839, 1E7E9, 1E798, 1E747, 1E6F6, 1E6A4, 1E651, 1E5FE, 1E5AA, 1E556, 1E502, 1E4AD, 1E457, 1E401, 1E3AB, 1E354, 1E2FC, 1E2A5, 1E24C, 1E1F3, 1E19A, 1E140, 1E0E6, 1E08B, 1E030, 1DFD4, 1DF78, 1DF1B, 1DEBE, 1DE60, 1DE02, 1DDA3, 1DD44, 1DCE5, 1DC85, 1DC24, 1DBC4, 1DB62, 1DB00, 1DA9E, 1DA3B, 1D9D8, 1D974, 1D910, 1D8AC, 1D846, 1D7E1, 1D77B, 1D715, 1D6AE, 1D646, 1D5DF, 1D576, 1D50E, 1D4A4, 1D43B, 1D3D1, 1D366, 1D2FB, 1D290, 1D224, 1D1B8, 1D14B, 1D0DE, 1D071, 1D003, 1CF94, 1CF25, 1CEB6, 1CE46, 1CDD6, 1CD65, 1CCF4, 1CC83, 1CC11, 1CB9F, 1CB2C, 1CAB9, 1CA45, 1C9D1, 1C95D, 1C8E8, 1C873, 1C7FD, 1C787, 1C710, 1C699, 1C622, 1C5AA, 1C532, 1C4B9, 1C440, 1C3C7, 1C34D, 1C2D3, 1C258, 1C1DD, 1C162, 1C0E6, 1C06A, 1BFED, 1BF70, 1BEF3, 1BE75, 1BDF7, 1BD78, 1BCF9, 1BC79, 1BBFA, 1BB79, 1BAF9, 1BA78, 1B9F7, 1B975, 1B8F3, 1B870, 1B7ED, 1B76A, 1B6E7, 1B663, 1B5DE, 1B559, 1B4D4, 1B44F, 1B3C9, 1B343, 1B2BC, 1B235, 1B1AE, 1B126, 1B09E, 1B016, 1AF8D, 1AF04, 1AE7A, 1ADF0, 1AD66, 1ACDC, 1AC51, 1ABC5, 1AB3A, 1AAAE, 1AA21, 1A995, 1A908, 1A87A, 1A7ED, 1A75F, 1A6D0, 1A642, 1A5B2, 1A523, 1A493, 1A403, 1A373, 1A2E2, 1A251, 1A1C0, 1A12E, 1A09C, 1A00A, 19F77, 19EE4, 19E51, 19DBD, 19D29, 19C95, 19C00, 19B6B, 19AD6, 19A40, 199AB, 19914, 1987E, 197E7, 19750, 196B9, 19621, 19589, 194F1, 19458, 193BF, 19326, 1928D, 191F3, 19159, 190BF, 19024, 18F89, 18EEE, 18E53, 18DB7, 18D1B, 18C7E, 18BE2, 18B45, 18AA8, 18A0A, 1896D, 188CF, 18831, 18792, 186F3, 18654, 185B5, 18515, 18476, 183D5, 18335, 18295, 181F4, 18153, 180B1, 18010, 17F6E, 17ECC, 17E29, 17D87, 17CE4, 17C41, 17B9E, 17AFA, 17A56, 179B2, 1790E, 17869, 177C5, 17720, 1767A, 175D5, 1752F, 17489, 173E3, 1733D, 17296, 171F0, 17149, 170A1, 16FFA, 16F52, 16EAB, 16E03, 16D5A, 16CB2, 16C09, 16B60, 16AB7, 16A0E, 16964, 168BB, 16811, 16767, 166BC, 16612, 16567, 164BC, 16411, 16366, 162BB, 1620F, 16163, 160B7, 1600B, 15F5F, 15EB2, 15E06, 15D59, 15CAC, 15BFF, 15B51, 15AA4, 159F6, 15948, 1589A, 157EC, 1573E, 1568F, 155E1, 15532, 15483, 153D4, 15324, 15275, 151C5, 15116, 15066, 14FB6, 14F06, 14E55, 14DA5, 14CF4, 14C44, 14B93, 14AE2, 14A31, 1497F, 148CE, 1481D, 1476B, 146B9, 14607, 14555, 144A3, 143F1, 1433F, 1428C, 141DA, 14127, 14074, 13FC1, 13F0E, 13E5B, 13DA8, 13CF4, 13C41, 13B8D, 13ADA, 13A26, 13972, 138BE, 1380A, 13756, 136A2, 135EE, 13539, 13485, 133D0, 1331C, 13267, 131B2, 130FD, 13048, 12F93, 12EDE, 12E29, 12D74, 12CBE, 12C09, 12B53, 12A9E, 129E8, 12933, 1287D, 127C7, 12711, 1265B, 125A6, 124F0, 12439, 12383, 122CD, 12217, 12161, 120AA, 11FF4, 11F3E, 11E87, 11DD1, 11D1A, 11C64, 11BAD, 11AF7, 11A40, 11989, 118D3, 1181C, 11765, 116AF, 115F8, 11541, 1148A, 113D3, 1131C, 11266, 111AF, 110F8, 11041, 10F8A, 10ED3, 10E1C, 10D65, 10CAE, 10BF7, 10B40, 10A89, 109D2, 1091B, 10864, 107AD, 106F6, 10640, 10589, 104D2, 1041B, 10364, 102AD, 101F6, 1013F, 10088, FFD2, FF1B, FE64, FDAD, FCF7, FC40, FB89, FAD3, FA1C, F966, F8AF, F7F9, F742, F68C, F5D6, F51F, F469, F3B3, F2FD, F246, F190, F0DA, F024, EF6E, EEB8, EE03, ED4D, EC97, EBE2, EB2C, EA76, E9C1, E90C, E856, E7A1, E6EC, E637, E582, E4CD, E418, E363, E2AE, E1F9, E145, E090, DFDC, DF27, DE73, DDBF, DD0B, DC57, DBA3, DAEF, DA3B, D988, D8D4, D821, D76D, D6BA, D607, D554, D4A1, D3EE, D33B, D289, D1D6, D124, D071, CFBF, CF0D, CE5B, CDA9, CCF8, CC46, CB94, CAE3, CA32, C981, C8D0, C81F, C76E, C6BD, C60D, C55C, C4AC, C3FC, C34C, C29C, C1EC, C13D, C08D, BFDE, BF2F, BE80, BDD1, BD22, BC74, BBC5, BB17, BA69, B9BB, B90D, B85F, B7B2, B704, B657, B5AA, B4FD, B450, B3A4, B2F7, B24B, B19F, B0F3, B047, AF9B, AEF0, AE45, AD99, ACEE, AC44, AB99, AAEF, AA44, A99A, A8F0, A847, A79D, A6F4, A64B, A5A2, A4F9, A450, A3A8, A2FF, A257, A1AF, A108, A060, 9FB9, 9F12, 9E6B, 9DC4, 9D1E, 9C77, 9BD1, 9B2B, 9A86, 99E0, 993B, 9896, 97F1, 974C, 96A7, 9603, 955F, 94BB, 9417, 9374, 92D1, 922E, 918B, 90E8, 9046, 8FA4, 8F02, 8E60, 8DBE, 8D1D, 8C7C, 8BDB, 8B3A, 8A9A, 89FA, 895A, 88BA, 881B, 877B, 86DC, 863D, 859F, 8501, 8462, 83C5, 8327, 8289, 81EC, 814F, 80B3, 8016, 7F7A, 7EDE, 7E42, 7DA7, 7D0B, 7C70, 7BD6, 7B3B, 7AA1, 7A07, 796D, 78D3, 783A, 77A1, 7708, 7670, 75D7, 753F, 74A8, 7410, 7379, 72E2, 724B, 71B4, 711E, 7088, 6FF3, 6F5D, 6EC8, 6E33, 6D9E, 6D0A, 6C76, 6BE2, 6B4E, 6ABB, 6A28, 6995, 6902, 6870, 67DE, 674C, 66BB, 662A, 6599, 6508, 6478, 63E8, 6358, 62C8, 6239, 61AA, 611B, 608D, 5FFF, 5F71, 5EE3, 5E56, 5DC9, 5D3C, 5CB0, 5C24, 5B98, 5B0C, 5A81, 59F6, 596B, 58E0, 5856, 57CC, 5743, 56B9, 5630, 55A8, 551F, 5497, 540F, 5388, 5300, 5279, 51F3, 516C, 50E6, 5060, 4FDB, 4F56, 4ED1, 4E4C, 4DC8, 4D44, 4CC0, 4C3D, 4BB9, 4B37, 4AB4, 4A32, 49B0, 492E, 48AD, 482C, 47AB, 472B, 46AB, 462B, 45AC, 452C, 44AD, 442F, 43B1, 4333, 42B5, 4238, 41BB, 413E, 40C2, 4045, 3FCA, 3F4E, 3ED3, 3E58, 3DDE, 3D63, 3CE9, 3C70, 3BF6, 3B7D, 3B05, 3A8C, 3A14, 399D, 3925, 38AE, 3837, 37C1, 374B, 36D5, 365F, 35EA, 3575, 3501, 348C, 3418, 33A5, 3332, 32BF, 324C, 31DA, 3168, 30F6, 3084, 3013, 2FA3, 2F32, 2EC2, 2E52, 2DE3, 2D74, 2D05, 2C96, 2C28, 2BBA, 2B4D, 2AE0, 2A73, 2A06, 299A, 292E, 28C2, 2857, 27EC, 2782, 2717, 26AD, 2644, 25DA, 2571, 2509, 24A0, 2438, 23D1, 2369, 2302, 229B, 2235, 21CF, 2169, 2104, 209F, 203A, 1FD5, 1F71, 1F0E, 1EAA, 1E47, 1DE4, 1D82, 1D1F, 1CBE, 1C5C, 1BFB, 1B9A, 1B3A, 1AD9, 1A79, 1A1A, 19BB, 195C, 18FD, 189F, 1841, 17E3, 1786, 1729, 16CD, 1670, 1614, 15B9, 155E, 1503, 14A8, 144E, 13F4, 139A, 1341, 12E8, 128F, 1236, 11DE, 1187, 112F, 10D8, 1082, 102B, FD5, F7F, F2A, ED5, E80, E2B, DD7, D84, D30, CDD, C8A, C38, BE5, B93, B42, AF1, AA0, A4F, 9FF, 9AF, 95F, 910, 8C1, 873, 824, 7D6, 789, 73B, 6EE, 6A2, 655, 609, 5BD, 572, 527, 4DC, 492, 447, 3FE, 3B4, 36B, 322, 2DA, 291, 249, 202, 1BB, 174, 12D, E7, A1, 5B, 16;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_9b21af6ed15b3d62',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '53a3a5e6a566980772a6b7a2a98cb5e6',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_9b21af6ed15b3d62',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFD1, 3FF8C, 3FF47, 3FF03, 3FEBF, 3FE7C, 3FE39, 3FDF6, 3FDB3, 3FD71, 3FD2F, 3FCEE, 3FCAC, 3FC6B, 3FC2B, 3FBEA, 3FBAA, 3FB6B, 3FB2B, 3FAEC, 3FAAD, 3FA6F, 3FA31, 3F9F3, 3F9B5, 3F978, 3F93B, 3F8FE, 3F8C2, 3F886, 3F84A, 3F80F, 3F7D4, 3F799, 3F75E, 3F724, 3F6EA, 3F6B1, 3F677, 3F63E, 3F606, 3F5CD, 3F595, 3F55D, 3F526, 3F4EF, 3F4B8, 3F481, 3F44B, 3F415, 3F3DF, 3F3AA, 3F375, 3F340, 3F30C, 3F2D7, 3F2A3, 3F270, 3F23D, 3F20A, 3F1D7, 3F1A4, 3F172, 3F140, 3F10F, 3F0DE, 3F0AD, 3F07C, 3F04C, 3F01B, 3EFEC, 3EFBC, 3EF8D, 3EF5E, 3EF2F, 3EF01, 3EED3, 3EEA5, 3EE78, 3EE4A, 3EE1D, 3EDF1, 3EDC4, 3ED98, 3ED6C, 3ED41, 3ED16, 3ECEB, 3ECC0, 3EC96, 3EC6B, 3EC42, 3EC18, 3EBEF, 3EBC6, 3EB9D, 3EB75, 3EB4C, 3EB24, 3EAFD, 3EAD5, 3EAAE, 3EA88, 3EA61, 3EA3B, 3EA15, 3E9EF, 3E9CA, 3E9A4, 3E97F, 3E95B, 3E936, 3E912, 3E8EE, 3E8CB, 3E8A8, 3E885, 3E862, 3E83F, 3E81D, 3E7FB, 3E7D9, 3E7B8, 3E797, 3E776, 3E755, 3E735, 3E714, 3E6F4, 3E6D5, 3E6B5, 3E696, 3E677, 3E659, 3E63A, 3E61C, 3E5FE, 3E5E1, 3E5C3, 3E5A6, 3E589, 3E56D, 3E551, 3E534, 3E519, 3E4FD, 3E4E2, 3E4C6, 3E4AC, 3E491, 3E477, 3E45C, 3E443, 3E429, 3E40F, 3E3F6, 3E3DD, 3E3C5, 3E3AC, 3E394, 3E37C, 3E364, 3E34D, 3E336, 3E31F, 3E308, 3E2F1, 3E2DB, 3E2C5, 3E2AF, 3E299, 3E284, 3E26F, 3E25A, 3E245, 3E231, 3E21D, 3E209, 3E1F5, 3E1E1, 3E1CE, 3E1BB, 3E1A8, 3E195, 3E183, 3E171, 3E15F, 3E14D, 3E13B, 3E12A, 3E119, 3E108, 3E0F7, 3E0E7, 3E0D6, 3E0C6, 3E0B7, 3E0A7, 3E098, 3E088, 3E079, 3E06B, 3E05C, 3E04E, 3E040, 3E032, 3E024, 3E017, 3E009, 3DFFC, 3DFEF, 3DFE3, 3DFD6, 3DFCA, 3DFBE, 3DFB2, 3DFA6, 3DF9B, 3DF90, 3DF84, 3DF7A, 3DF6F, 3DF64, 3DF5A, 3DF50, 3DF46, 3DF3C, 3DF33, 3DF2A, 3DF20, 3DF18, 3DF0F, 3DF06, 3DEFE, 3DEF6, 3DEEE, 3DEE6, 3DEDE, 3DED7, 3DED0, 3DEC9, 3DEC2, 3DEBB, 3DEB4, 3DEAE, 3DEA8, 3DEA2, 3DE9C, 3DE97, 3DE91, 3DE8C, 3DE87, 3DE82, 3DE7D, 3DE78, 3DE74, 3DE70, 3DE6C, 3DE68, 3DE64, 3DE61, 3DE5D, 3DE5A, 3DE57, 3DE54, 3DE51, 3DE4F, 3DE4D, 3DE4A, 3DE48, 3DE46, 3DE45, 3DE43, 3DE42, 3DE40, 3DE3F, 3DE3E, 3DE3E, 3DE3D, 3DE3D, 3DE3C, 3DE3C, 3DE3C, 3DE3C, 3DE3D, 3DE3D, 3DE3E, 3DE3F, 3DE3F, 3DE40, 3DE42, 3DE43, 3DE45, 3DE46, 3DE48, 3DE4A, 3DE4C, 3DE4E, 3DE51, 3DE53, 3DE56, 3DE59, 3DE5B, 3DE5F, 3DE62, 3DE65, 3DE69, 3DE6C, 3DE70, 3DE74, 3DE78, 3DE7C, 3DE80, 3DE85, 3DE89, 3DE8E, 3DE93, 3DE98, 3DE9D, 3DEA2, 3DEA7, 3DEAD, 3DEB2, 3DEB8, 3DEBE, 3DEC4, 3DECA, 3DED0, 3DED6, 3DEDD, 3DEE3, 3DEEA, 3DEF1, 3DEF8, 3DEFF, 3DF06, 3DF0D, 3DF14, 3DF1C, 3DF23, 3DF2B, 3DF33, 3DF3B, 3DF43, 3DF4B, 3DF53, 3DF5C, 3DF64, 3DF6D, 3DF75, 3DF7E, 3DF87, 3DF90, 3DF99, 3DFA2, 3DFAC, 3DFB5, 3DFBF, 3DFC8, 3DFD2, 3DFDC, 3DFE6, 3DFF0, 3DFFA, 3E004, 3E00E, 3E019, 3E023, 3E02E, 3E039, 3E043, 3E04E, 3E059, 3E064, 3E06F, 3E07B, 3E086, 3E091, 3E09D, 3E0A8, 3E0B4, 3E0C0, 3E0CC, 3E0D7, 3E0E3, 3E0EF, 3E0FC, 3E108, 3E114, 3E121, 3E12D, 3E13A, 3E146, 3E153, 3E160, 3E16D, 3E17A, 3E187, 3E194, 3E1A1, 3E1AE, 3E1BB, 3E1C9, 3E1D6, 3E1E4, 3E1F1, 3E1FF, 3E20D, 3E21B, 3E228, 3E236, 3E244, 3E252, 3E261, 3E26F, 3E27D, 3E28B, 3E29A, 3E2A8, 3E2B7, 3E2C5, 3E2D4, 3E2E2, 3E2F1, 3E300, 3E30F, 3E31E, 3E32D, 3E33C, 3E34B, 3E35A, 3E369, 3E378, 3E388, 3E397, 3E3A7, 3E3B6, 3E3C5, 3E3D5, 3E3E5, 3E3F4, 3E404, 3E414, 3E424, 3E433, 3E443, 3E453, 3E463, 3E473, 3E483, 3E493, 3E4A4, 3E4B4, 3E4C4, 3E4D4, 3E4E5, 3E4F5, 3E505, 3E516, 3E526, 3E537, 3E547, 3E558, 3E568, 3E579, 3E58A, 3E59B, 3E5AB, 3E5BC, 3E5CD, 3E5DE, 3E5EF, 3E600, 3E611, 3E622, 3E633, 3E644, 3E655, 3E666, 3E677, 3E688, 3E699, 3E6AA, 3E6BC, 3E6CD, 3E6DE, 3E6EF, 3E701, 3E712, 3E724, 3E735, 3E746, 3E758, 3E769, 3E77B, 3E78C, 3E79E, 3E7AF, 3E7C1, 3E7D2, 3E7E4, 3E7F6, 3E807, 3E819, 3E82B, 3E83C, 3E84E, 3E860, 3E871, 3E883, 3E895, 3E8A7, 3E8B8, 3E8CA, 3E8DC, 3E8EE, 3E900, 3E911, 3E923, 3E935, 3E947, 3E959, 3E96B, 3E97C, 3E98E, 3E9A0, 3E9B2, 3E9C4, 3E9D6, 3E9E8, 3E9FA, 3EA0C, 3EA1E, 3EA2F, 3EA41, 3EA53, 3EA65, 3EA77, 3EA89, 3EA9B, 3EAAD, 3EABF, 3EAD1, 3EAE3, 3EAF5, 3EB07, 3EB18, 3EB2A, 3EB3C, 3EB4E, 3EB60, 3EB72, 3EB84, 3EB96, 3EBA8, 3EBBA, 3EBCB, 3EBDD, 3EBEF, 3EC01, 3EC13, 3EC25, 3EC37, 3EC48, 3EC5A, 3EC6C, 3EC7E, 3EC90, 3ECA1, 3ECB3, 3ECC5, 3ECD7, 3ECE8, 3ECFA, 3ED0C, 3ED1E, 3ED2F, 3ED41, 3ED53, 3ED64, 3ED76, 3ED87, 3ED99, 3EDAB, 3EDBC, 3EDCE, 3EDDF, 3EDF1, 3EE02, 3EE14, 3EE25, 3EE37, 3EE48, 3EE5A, 3EE6B, 3EE7C, 3EE8E, 3EE9F, 3EEB0, 3EEC2, 3EED3, 3EEE4, 3EEF6, 3EF07, 3EF18, 3EF29, 3EF3A, 3EF4B, 3EF5D, 3EF6E, 3EF7F, 3EF90, 3EFA1, 3EFB2, 3EFC3, 3EFD4, 3EFE5, 3EFF6, 3F006, 3F017, 3F028, 3F039, 3F04A, 3F05A, 3F06B, 3F07C, 3F08D, 3F09D, 3F0AE, 3F0BE, 3F0CF, 3F0E0, 3F0F0, 3F101, 3F111, 3F121, 3F132, 3F142, 3F153, 3F163, 3F173, 3F183, 3F194, 3F1A4, 3F1B4, 3F1C4, 3F1D4, 3F1E4, 3F1F4, 3F204, 3F214, 3F224, 3F234, 3F244, 3F254, 3F264, 3F274, 3F283, 3F293, 3F2A3, 3F2B2, 3F2C2, 3F2D2, 3F2E1, 3F2F1, 3F300, 3F310, 3F31F, 3F32F, 3F33E, 3F34D, 3F35D, 3F36C, 3F37B, 3F38A, 3F399, 3F3A8, 3F3B8, 3F3C7, 3F3D6, 3F3E5, 3F3F3, 3F402, 3F411, 3F420, 3F42F, 3F43E, 3F44C, 3F45B, 3F46A, 3F478, 3F487, 3F495, 3F4A4, 3F4B2, 3F4C1, 3F4CF, 3F4DE, 3F4EC, 3F4FA, 3F508, 3F517, 3F525, 3F533, 3F541, 3F54F, 3F55D, 3F56B, 3F579, 3F587, 3F595, 3F5A2, 3F5B0, 3F5BE, 3F5CC, 3F5D9, 3F5E7, 3F5F5, 3F602, 3F610, 3F61D, 3F62B, 3F638, 3F645, 3F653, 3F660, 3F66D, 3F67A, 3F687, 3F695, 3F6A2, 3F6AF, 3F6BC, 3F6C9, 3F6D6, 3F6E2, 3F6EF, 3F6FC, 3F709, 3F716, 3F722, 3F72F, 3F73C, 3F748, 3F755, 3F761, 3F76E, 3F77A, 3F786, 3F793, 3F79F, 3F7AB, 3F7B7, 3F7C4, 3F7D0, 3F7DC, 3F7E8, 3F7F4, 3F800, 3F80C, 3F818, 3F823, 3F82F, 3F83B, 3F847, 3F852, 3F85E, 3F86A, 3F875, 3F881, 3F88C, 3F898, 3F8A3, 3F8AF, 3F8BA, 3F8C5, 3F8D0, 3F8DC, 3F8E7, 3F8F2, 3F8FD, 3F908, 3F913, 3F91E, 3F929, 3F934, 3F93F, 3F94A, 3F955, 3F95F, 3F96A, 3F975, 3F97F, 3F98A, 3F994, 3F99F, 3F9A9, 3F9B4, 3F9BE, 3F9C9, 3F9D3, 3F9DD, 3F9E8, 3F9F2, 3F9FC, 3FA06, 3FA10, 3FA1A, 3FA24, 3FA2E, 3FA38, 3FA42, 3FA4C, 3FA56, 3FA60, 3FA69, 3FA73, 3FA7D, 3FA87, 3FA90, 3FA9A, 3FAA3, 3FAAD, 3FAB6, 3FAC0, 3FAC9, 3FAD3, 3FADC, 3FAE5, 3FAEE, 3FAF8, 3FB01, 3FB0A, 3FB13, 3FB1C, 3FB25, 3FB2E, 3FB37, 3FB40, 3FB49, 3FB52, 3FB5B, 3FB64, 3FB6D, 3FB75, 3FB7E, 3FB87, 3FB8F, 3FB98, 3FBA0, 3FBA9, 3FBB2, 3FBBA, 3FBC2, 3FBCB, 3FBD3, 3FBDC, 3FBE4, 3FBEC, 3FBF4, 3FBFD, 3FC05, 3FC0D, 3FC15, 3FC1D, 3FC25, 3FC2D, 3FC35, 3FC3D, 3FC45, 3FC4D, 3FC55, 3FC5D, 3FC65, 3FC6C, 3FC74, 3FC7C, 3FC84, 3FC8B, 3FC93, 3FC9B, 3FCA2, 3FCAA, 3FCB1, 3FCB9, 3FCC0, 3FCC8, 3FCCF, 3FCD6, 3FCDE, 3FCE5, 3FCEC, 3FCF4, 3FCFB, 3FD02, 3FD09, 3FD11, 3FD18, 3FD1F, 3FD26, 3FD2D, 3FD34, 3FD3B, 3FD42, 3FD49, 3FD50, 3FD57, 3FD5E, 3FD64, 3FD6B, 3FD72, 3FD79, 3FD80, 3FD86, 3FD8D, 3FD94, 3FD9A, 3FDA1, 3FDA8, 3FDAE, 3FDB5, 3FDBB, 3FDC2, 3FDC8, 3FDCF, 3FDD5, 3FDDC, 3FDE2, 3FDE9, 3FDEF, 3FDF5, 3FDFC, 3FE02, 3FE08, 3FE0E, 3FE15, 3FE1B, 3FE21, 3FE27, 3FE2D, 3FE34, 3FE3A, 3FE40, 3FE46, 3FE4C, 3FE52, 3FE58, 3FE5E, 3FE64, 3FE6A, 3FE70, 3FE76, 3FE7C, 3FE82, 3FE88, 3FE8E, 3FE93, 3FE99, 3FE9F, 3FEA5, 3FEAB, 3FEB0, 3FEB6, 3FEBC, 3FEC2, 3FEC7, 3FECD, 3FED3, 3FED8, 3FEDE, 3FEE4, 3FEE9, 3FEEF, 3FEF4, 3FEFA, 3FF00, 3FF05, 3FF0B, 3FF10, 3FF16, 3FF1B, 3FF21, 3FF26, 3FF2C, 3FF31, 3FF37, 3FF3C, 3FF41, 3FF47, 3FF4C, 3FF52, 3FF57, 3FF5C, 3FF62, 3FF67, 3FF6C, 3FF72, 3FF77, 3FF7C, 3FF82, 3FF87, 3FF8C, 3FF91, 3FF97, 3FF9C, 3FFA1, 3FFA6, 3FFAC, 3FFB1, 3FFB6, 3FFBB, 3FFC1, 3FFC6, 3FFCB, 3FFD0, 3FFD5, 3FFDA, 3FFE0, 3FFE5, 3FFEA, 3FFEF, 3FFF4, 3FFF9, 3FFFE;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_228adcdb209ef640',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '1d80766f2783f57d07e24b26657799d1',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_228adcdb209ef640',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFFC, 3FFF7, 3FFF2, 3FFED, 3FFE8, 3FFE2, 3FFDD, 3FFD8, 3FFD3, 3FFCE, 3FFC9, 3FFC3, 3FFBE, 3FFB9, 3FFB4, 3FFAF, 3FFA9, 3FFA4, 3FF9F, 3FF9A, 3FF94, 3FF8F, 3FF8A, 3FF85, 3FF7F, 3FF7A, 3FF75, 3FF6F, 3FF6A, 3FF65, 3FF5F, 3FF5A, 3FF55, 3FF4F, 3FF4A, 3FF44, 3FF3F, 3FF3A, 3FF34, 3FF2F, 3FF29, 3FF24, 3FF1E, 3FF19, 3FF13, 3FF0E, 3FF08, 3FF03, 3FEFD, 3FEF8, 3FEF2, 3FEEC, 3FEE7, 3FEE1, 3FEDC, 3FED6, 3FED0, 3FECB, 3FEC5, 3FEBF, 3FEB9, 3FEB4, 3FEAE, 3FEA8, 3FEA2, 3FE9C, 3FE97, 3FE91, 3FE8B, 3FE85, 3FE7F, 3FE79, 3FE73, 3FE6D, 3FE67, 3FE61, 3FE5B, 3FE55, 3FE4F, 3FE49, 3FE43, 3FE3D, 3FE37, 3FE31, 3FE2B, 3FE25, 3FE1E, 3FE18, 3FE12, 3FE0C, 3FE05, 3FDFF, 3FDF9, 3FDF2, 3FDEC, 3FDE6, 3FDDF, 3FDD9, 3FDD2, 3FDCC, 3FDC5, 3FDBF, 3FDB8, 3FDB2, 3FDAB, 3FDA5, 3FD9E, 3FD97, 3FD91, 3FD8A, 3FD83, 3FD7D, 3FD76, 3FD6F, 3FD68, 3FD61, 3FD5B, 3FD54, 3FD4D, 3FD46, 3FD3F, 3FD38, 3FD31, 3FD2A, 3FD23, 3FD1C, 3FD14, 3FD0D, 3FD06, 3FCFF, 3FCF8, 3FCF0, 3FCE9, 3FCE2, 3FCDB, 3FCD3, 3FCCC, 3FCC4, 3FCBD, 3FCB5, 3FCAE, 3FCA6, 3FC9F, 3FC97, 3FC90, 3FC88, 3FC80, 3FC79, 3FC71, 3FC69, 3FC61, 3FC59, 3FC51, 3FC4A, 3FC42, 3FC3A, 3FC32, 3FC2A, 3FC22, 3FC1A, 3FC11, 3FC09, 3FC01, 3FBF9, 3FBF1, 3FBE8, 3FBE0, 3FBD8, 3FBCF, 3FBC7, 3FBBF, 3FBB6, 3FBAE, 3FBA5, 3FB9D, 3FB94, 3FB8B, 3FB83, 3FB7A, 3FB71, 3FB69, 3FB60, 3FB57, 3FB4E, 3FB45, 3FB3C, 3FB33, 3FB2A, 3FB21, 3FB18, 3FB0F, 3FB06, 3FAFD, 3FAF4, 3FAEA, 3FAE1, 3FAD8, 3FACE, 3FAC5, 3FABB, 3FAB2, 3FAA9, 3FA9F, 3FA95, 3FA8C, 3FA82, 3FA78, 3FA6F, 3FA65, 3FA5B, 3FA51, 3FA48, 3FA3E, 3FA34, 3FA2A, 3FA20, 3FA16, 3FA0C, 3FA01, 3F9F7, 3F9ED, 3F9E3, 3F9D9, 3F9CE, 3F9C4, 3F9BA, 3F9AF, 3F9A5, 3F99A, 3F990, 3F985, 3F97A, 3F970, 3F965, 3F95A, 3F950, 3F945, 3F93A, 3F92F, 3F924, 3F919, 3F90E, 3F903, 3F8F8, 3F8ED, 3F8E2, 3F8D7, 3F8CB, 3F8C0, 3F8B5, 3F8A9, 3F89E, 3F892, 3F887, 3F87B, 3F870, 3F864, 3F859, 3F84D, 3F841, 3F836, 3F82A, 3F81E, 3F812, 3F806, 3F7FA, 3F7EE, 3F7E2, 3F7D6, 3F7CA, 3F7BE, 3F7B2, 3F7A5, 3F799, 3F78D, 3F781, 3F774, 3F768, 3F75B, 3F74F, 3F742, 3F736, 3F729, 3F71C, 3F710, 3F703, 3F6F6, 3F6E9, 3F6DC, 3F6D0, 3F6C3, 3F6B6, 3F6A9, 3F69C, 3F68E, 3F681, 3F674, 3F667, 3F65A, 3F64C, 3F63F, 3F632, 3F624, 3F617, 3F609, 3F5FC, 3F5EE, 3F5E1, 3F5D3, 3F5C5, 3F5B8, 3F5AA, 3F59C, 3F58E, 3F580, 3F572, 3F564, 3F556, 3F548, 3F53A, 3F52C, 3F51E, 3F510, 3F502, 3F4F3, 3F4E5, 3F4D7, 3F4C8, 3F4BA, 3F4AC, 3F49D, 3F48F, 3F480, 3F471, 3F463, 3F454, 3F445, 3F437, 3F428, 3F419, 3F40A, 3F3FB, 3F3EC, 3F3DE, 3F3CF, 3F3BF, 3F3B0, 3F3A1, 3F392, 3F383, 3F374, 3F365, 3F355, 3F346, 3F337, 3F327, 3F318, 3F308, 3F2F9, 3F2E9, 3F2DA, 3F2CA, 3F2BB, 3F2AB, 3F29B, 3F28C, 3F27C, 3F26C, 3F25C, 3F24D, 3F23D, 3F22D, 3F21D, 3F20D, 3F1FD, 3F1ED, 3F1DD, 3F1CD, 3F1BD, 3F1AC, 3F19C, 3F18C, 3F17C, 3F16B, 3F15B, 3F14B, 3F13A, 3F12A, 3F11A, 3F109, 3F0F9, 3F0E8, 3F0D8, 3F0C7, 3F0B7, 3F0A6, 3F095, 3F085, 3F074, 3F063, 3F053, 3F042, 3F031, 3F020, 3F00F, 3EFFE, 3EFEE, 3EFDD, 3EFCC, 3EFBB, 3EFAA, 3EF99, 3EF88, 3EF77, 3EF66, 3EF54, 3EF43, 3EF32, 3EF21, 3EF10, 3EEFF, 3EEED, 3EEDC, 3EECB, 3EEB9, 3EEA8, 3EE97, 3EE85, 3EE74, 3EE63, 3EE51, 3EE40, 3EE2E, 3EE1D, 3EE0B, 3EDFA, 3EDE8, 3EDD7, 3EDC5, 3EDB4, 3EDA2, 3ED91, 3ED7F, 3ED6D, 3ED5C, 3ED4A, 3ED38, 3ED27, 3ED15, 3ED03, 3ECF2, 3ECE0, 3ECCE, 3ECBC, 3ECAB, 3EC99, 3EC87, 3EC75, 3EC63, 3EC52, 3EC40, 3EC2E, 3EC1C, 3EC0A, 3EBF8, 3EBE7, 3EBD5, 3EBC3, 3EBB1, 3EB9F, 3EB8D, 3EB7B, 3EB69, 3EB58, 3EB46, 3EB34, 3EB22, 3EB10, 3EAFE, 3EAEC, 3EADA, 3EAC8, 3EAB6, 3EAA4, 3EA92, 3EA80, 3EA6F, 3EA5D, 3EA4B, 3EA39, 3EA27, 3EA15, 3EA03, 3E9F1, 3E9DF, 3E9CD, 3E9BB, 3E9A9, 3E998, 3E986, 3E974, 3E962, 3E950, 3E93E, 3E92C, 3E91B, 3E909, 3E8F7, 3E8E5, 3E8D3, 3E8C2, 3E8B0, 3E89E, 3E88C, 3E87A, 3E869, 3E857, 3E845, 3E834, 3E822, 3E810, 3E7FF, 3E7ED, 3E7DB, 3E7CA, 3E7B8, 3E7A7, 3E795, 3E784, 3E772, 3E761, 3E74F, 3E73E, 3E72C, 3E71B, 3E70A, 3E6F8, 3E6E7, 3E6D6, 3E6C4, 3E6B3, 3E6A2, 3E691, 3E680, 3E66E, 3E65D, 3E64C, 3E63B, 3E62A, 3E619, 3E608, 3E5F7, 3E5E6, 3E5D5, 3E5C5, 3E5B4, 3E5A3, 3E592, 3E582, 3E571, 3E560, 3E550, 3E53F, 3E52F, 3E51E, 3E50E, 3E4FD, 3E4ED, 3E4DC, 3E4CC, 3E4BC, 3E4AC, 3E49B, 3E48B, 3E47B, 3E46B, 3E45B, 3E44B, 3E43B, 3E42B, 3E41C, 3E40C, 3E3FC, 3E3EC, 3E3DD, 3E3CD, 3E3BE, 3E3AE, 3E39F, 3E38F, 3E380, 3E371, 3E362, 3E352, 3E343, 3E334, 3E325, 3E316, 3E307, 3E2F9, 3E2EA, 3E2DB, 3E2CC, 3E2BE, 3E2AF, 3E2A1, 3E292, 3E284, 3E276, 3E267, 3E259, 3E24B, 3E23D, 3E22F, 3E221, 3E213, 3E206, 3E1F8, 3E1EA, 3E1DD, 3E1CF, 3E1C2, 3E1B5, 3E1A7, 3E19A, 3E18D, 3E180, 3E173, 3E166, 3E159, 3E14C, 3E140, 3E133, 3E127, 3E11A, 3E10E, 3E102, 3E0F5, 3E0E9, 3E0DD, 3E0D1, 3E0C5, 3E0BA, 3E0AE, 3E0A2, 3E097, 3E08B, 3E080, 3E075, 3E069, 3E05E, 3E053, 3E048, 3E03E, 3E033, 3E028, 3E01E, 3E013, 3E009, 3DFFF, 3DFF4, 3DFEA, 3DFE0, 3DFD7, 3DFCD, 3DFC3, 3DFBA, 3DFB0, 3DFA7, 3DF9D, 3DF94, 3DF8B, 3DF82, 3DF79, 3DF71, 3DF68, 3DF5F, 3DF57, 3DF4F, 3DF46, 3DF3E, 3DF36, 3DF2F, 3DF27, 3DF1F, 3DF18, 3DF10, 3DF09, 3DF02, 3DEFB, 3DEF4, 3DEED, 3DEE6, 3DEDF, 3DED9, 3DED2, 3DECC, 3DEC6, 3DEC0, 3DEBA, 3DEB4, 3DEAF, 3DEA9, 3DEA4, 3DE9F, 3DE9A, 3DE94, 3DE90, 3DE8B, 3DE86, 3DE82, 3DE7D, 3DE79, 3DE75, 3DE71, 3DE6D, 3DE6A, 3DE66, 3DE63, 3DE5F, 3DE5C, 3DE59, 3DE56, 3DE54, 3DE51, 3DE4F, 3DE4C, 3DE4A, 3DE48, 3DE46, 3DE44, 3DE43, 3DE41, 3DE40, 3DE3F, 3DE3E, 3DE3D, 3DE3C, 3DE3C, 3DE3C, 3DE3B, 3DE3B, 3DE3B, 3DE3B, 3DE3C, 3DE3C, 3DE3D, 3DE3E, 3DE3F, 3DE40, 3DE41, 3DE43, 3DE44, 3DE46, 3DE48, 3DE4A, 3DE4D, 3DE4F, 3DE52, 3DE54, 3DE57, 3DE5B, 3DE5E, 3DE61, 3DE65, 3DE69, 3DE6D, 3DE71, 3DE75, 3DE79, 3DE7E, 3DE83, 3DE88, 3DE8D, 3DE92, 3DE98, 3DE9E, 3DEA4, 3DEAA, 3DEB0, 3DEB6, 3DEBD, 3DEC4, 3DECB, 3DED2, 3DED9, 3DEE1, 3DEE8, 3DEF0, 3DEF8, 3DF01, 3DF09, 3DF12, 3DF1A, 3DF24, 3DF2D, 3DF36, 3DF40, 3DF4A, 3DF54, 3DF5E, 3DF68, 3DF73, 3DF7D, 3DF88, 3DF94, 3DF9F, 3DFAA, 3DFB6, 3DFC2, 3DFCE, 3DFDB, 3DFE7, 3DFF4, 3E001, 3E00E, 3E01C, 3E029, 3E037, 3E045, 3E053, 3E062, 3E070, 3E07F, 3E08E, 3E09E, 3E0AD, 3E0BD, 3E0CD, 3E0DD, 3E0ED, 3E0FE, 3E10E, 3E11F, 3E131, 3E142, 3E154, 3E166, 3E178, 3E18A, 3E19D, 3E1AF, 3E1C2, 3E1D6, 3E1E9, 3E1FD, 3E210, 3E225, 3E239, 3E24E, 3E262, 3E277, 3E28D, 3E2A2, 3E2B8, 3E2CE, 3E2E4, 3E2FA, 3E311, 3E328, 3E33F, 3E356, 3E36E, 3E386, 3E39E, 3E3B6, 3E3CF, 3E3E8, 3E401, 3E41A, 3E433, 3E44D, 3E467, 3E481, 3E49C, 3E4B7, 3E4D2, 3E4ED, 3E508, 3E524, 3E540, 3E55C, 3E579, 3E595, 3E5B2, 3E5D0, 3E5ED, 3E60B, 3E629, 3E647, 3E665, 3E684, 3E6A3, 3E6C2, 3E6E2, 3E702, 3E722, 3E742, 3E763, 3E783, 3E7A4, 3E7C6, 3E7E7, 3E809, 3E82B, 3E84E, 3E870, 3E893, 3E8B6, 3E8DA, 3E8FE, 3E922, 3E946, 3E96A, 3E98F, 3E9B4, 3E9D9, 3E9FF, 3EA25, 3EA4B, 3EA71, 3EA98, 3EABF, 3EAE6, 3EB0E, 3EB35, 3EB5D, 3EB86, 3EBAE, 3EBD7, 3EC00, 3EC2A, 3EC53, 3EC7D, 3ECA8, 3ECD2, 3ECFD, 3ED28, 3ED53, 3ED7F, 3EDAB, 3EDD7, 3EE04, 3EE31, 3EE5E, 3EE8B, 3EEB9, 3EEE7, 3EF15, 3EF43, 3EF72, 3EFA1, 3EFD1, 3F000, 3F030, 3F060, 3F091, 3F0C2, 3F0F3, 3F124, 3F156, 3F188, 3F1BA, 3F1ED, 3F220, 3F253, 3F286, 3F2BA, 3F2EE, 3F322, 3F357, 3F38C, 3F3C1, 3F3F7, 3F42C, 3F462, 3F499, 3F4D0, 3F507, 3F53E, 3F576, 3F5AD, 3F5E6, 3F61E, 3F657, 3F690, 3F6CA, 3F703, 3F73D, 3F778, 3F7B2, 3F7ED, 3F829, 3F864, 3F8A0, 3F8DC, 3F919, 3F955, 3F993, 3F9D0, 3FA0E, 3FA4C, 3FA8A, 3FAC9, 3FB08, 3FB47, 3FB86, 3FBC6, 3FC06, 3FC47, 3FC88, 3FCC9, 3FD0A, 3FD4C, 3FD8E, 3FDD0, 3FE13, 3FE56, 3FE99, 3FEDD, 3FF21, 3FF65, 3FFAA, 3FFEF;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_d6cb91b542ad37c0',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'dbeea4cfc48f6685924be30ec57d141c',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_d6cb91b542ad37c0',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 34, 79, BF, 105, 14C, 193, 1DA, 221, 269, 2B1, 2F9, 342, 38B, 3D4, 41E, 468, 4B2, 4FD, 548, 593, 5DF, 62A, 677, 6C3, 710, 75D, 7AB, 7F9, 847, 895, 8E4, 933, 982, 9D2, A22, A73, AC3, B14, B66, BB7, C09, C5C, CAE, D01, D55, DA8, DFC, E51, EA5, EFA, F4F, FA5, FFB, 1051, 10A8, 10FF, 1156, 11AD, 1205, 125D, 12B6, 130F, 1368, 13C1, 141B, 1475, 14D0, 152B, 1586, 15E1, 163D, 1699, 16F6, 1752, 17AF, 180D, 186B, 18C9, 1927, 1986, 19E5, 1A44, 1AA4, 1B04, 1B64, 1BC5, 1C26, 1C87, 1CE9, 1D4B, 1DAD, 1E10, 1E73, 1ED6, 1F3A, 1F9E, 2002, 2067, 20CB, 2131, 2196, 21FC, 2262, 22C9, 2330, 2397, 23FF, 2466, 24CF, 2537, 25A0, 2609, 2673, 26DC, 2746, 27B1, 281C, 2887, 28F2, 295E, 29CA, 2A36, 2AA3, 2B10, 2B7D, 2BEB, 2C59, 2CC7, 2D36, 2DA5, 2E14, 2E84, 2EF4, 2F64, 2FD5, 3046, 30B7, 3128, 319A, 320C, 327F, 32F2, 3365, 33D8, 344C, 34C0, 3535, 35A9, 361E, 3694, 3709, 377F, 37F6, 386C, 38E3, 395A, 39D2, 3A4A, 3AC2, 3B3B, 3BB3, 3C2D, 3CA6, 3D20, 3D9A, 3E14, 3E8F, 3F0A, 3F85, 4001, 407D, 40F9, 4176, 41F2, 4270, 42ED, 436B, 43E9, 4467, 44E6, 4565, 45E4, 4664, 46E4, 4764, 47E5, 4866, 48E7, 4968, 49EA, 4A6C, 4AEE, 4B71, 4BF4, 4C77, 4CFB, 4D7F, 4E03, 4E87, 4F0C, 4F91, 5016, 509C, 5122, 51A8, 522F, 52B6, 533D, 53C4, 544C, 54D4, 555C, 55E5, 566E, 56F7, 5780, 580A, 5894, 591E, 59A9, 5A34, 5ABF, 5B4A, 5BD6, 5C62, 5CEF, 5D7B, 5E08, 5E95, 5F23, 5FB0, 603E, 60CD, 615B, 61EA, 6279, 6309, 6398, 6428, 64B8, 6549, 65DA, 666B, 66FC, 678E, 681F, 68B2, 6944, 69D7, 6A6A, 6AFD, 6B90, 6C24, 6CB8, 6D4C, 6DE1, 6E76, 6F0B, 6FA0, 7036, 70CB, 7162, 71F8, 728F, 7325, 73BD, 7454, 74EC, 7583, 761C, 76B4, 774D, 77E6, 787F, 7918, 79B2, 7A4C, 7AE6, 7B80, 7C1B, 7CB6, 7D51, 7DEC, 7E88, 7F24, 7FC0, 805C, 80F9, 8196, 8233, 82D0, 836E, 840B, 84A9, 8548, 85E6, 8685, 8724, 87C3, 8862, 8902, 89A2, 8A42, 8AE2, 8B83, 8C23, 8CC4, 8D66, 8E07, 8EA9, 8F4A, 8FEC, 908F, 9131, 91D4, 9277, 931A, 93BD, 9461, 9505, 95A9, 964D, 96F1, 9796, 983B, 98E0, 9985, 9A2A, 9AD0, 9B76, 9C1C, 9CC2, 9D69, 9E0F, 9EB6, 9F5D, A004, A0AC, A153, A1FB, A2A3, A34B, A3F3, A49C, A545, A5EE, A697, A740, A7E9, A893, A93D, A9E7, AA91, AB3B, ABE6, AC91, AD3B, ADE6, AE92, AF3D, AFE9, B094, B140, B1EC, B298, B345, B3F1, B49E, B54B, B5F8, B6A5, B752, B800, B8AD, B95B, BA09, BAB7, BB65, BC14, BCC2, BD71, BE20, BECF, BF7E, C02D, C0DC, C18C, C23C, C2EB, C39B, C44B, C4FB, C5AC, C65C, C70D, C7BE, C86E, C91F, C9D0, CA82, CB33, CBE4, CC96, CD48, CDF9, CEAB, CF5D, D010, D0C2, D174, D227, D2D9, D38C, D43F, D4F2, D5A5, D658, D70B, D7BE, D872, D925, D9D9, DA8C, DB40, DBF4, DCA8, DD5C, DE10, DEC4, DF79, E02D, E0E2, E196, E24B, E300, E3B4, E469, E51E, E5D3, E688, E73D, E7F3, E8A8, E95D, EA13, EAC8, EB7E, EC33, ECE9, ED9F, EE55, EF0B, EFC0, F076, F12C, F1E2, F299, F34F, F405, F4BB, F571, F628, F6DE, F795, F84B, F902, F9B8, FA6F, FB25, FBDC, FC93, FD49, FE00, FEB7, FF6D, 10024, 100DB, 10192, 10249, 10300, 103B6, 1046D, 10524, 105DB, 10692, 10749, 10800, 108B7, 1096E, 10A25, 10ADC, 10B93, 10C4A, 10D01, 10DB8, 10E6F, 10F26, 10FDD, 11093, 1114A, 11201, 112B8, 1136F, 11426, 114DD, 11594, 1164A, 11701, 117B8, 1186F, 11925, 119DC, 11A93, 11B49, 11C00, 11CB6, 11D6D, 11E23, 11EDA, 11F90, 12047, 120FD, 121B3, 12269, 12320, 123D6, 1248C, 12542, 125F8, 126AE, 12764, 12819, 128CF, 12985, 12A3A, 12AF0, 12BA5, 12C5B, 12D10, 12DC6, 12E7B, 12F30, 12FE5, 1309A, 1314F, 13204, 132B9, 1336D, 13422, 134D6, 1358B, 1363F, 136F3, 137A8, 1385C, 13910, 139C4, 13A77, 13B2B, 13BDF, 13C92, 13D46, 13DF9, 13EAC, 13F5F, 14012, 140C5, 14178, 1422A, 142DD, 1438F, 14442, 144F4, 145A6, 14658, 1470A, 147BB, 1486D, 1491E, 149D0, 14A81, 14B32, 14BE3, 14C94, 14D44, 14DF5, 14EA5, 14F55, 15005, 150B5, 15165, 15215, 152C4, 15374, 15423, 154D2, 15581, 15630, 156DE, 1578D, 1583B, 158E9, 15997, 15A45, 15AF2, 15BA0, 15C4D, 15CFA, 15DA7, 15E54, 15F01, 15FAD, 16059, 16105, 161B1, 1625D, 16308, 163B4, 1645F, 1650A, 165B5, 1665F, 16709, 167B4, 1685E, 16907, 169B1, 16A5A, 16B04, 16BAD, 16C55, 16CFE, 16DA6, 16E4F, 16EF7, 16F9E, 17046, 170ED, 17194, 1723B, 172E2, 17388, 1742F, 174D5, 1757A, 17620, 176C5, 1776A, 1780F, 178B4, 17958, 179FC, 17AA0, 17B44, 17BE7, 17C8B, 17D2E, 17DD0, 17E73, 17F15, 17FB7, 18059, 180FA, 1819C, 1823D, 182DD, 1837E, 1841E, 184BE, 1855E, 185FD, 1869C, 1873B, 187DA, 18878, 18916, 189B4, 18A52, 18AEF, 18B8C, 18C29, 18CC5, 18D61, 18DFD, 18E99, 18F34, 18FCF, 1906A, 19105, 1919F, 19239, 192D2, 1936C, 19405, 1949D, 19536, 195CE, 19666, 196FD, 19795, 1982C, 198C2, 19958, 199EE, 19A84, 19B1A, 19BAF, 19C43, 19CD8, 19D6C, 19E00, 19E93, 19F27, 19FB9, 1A04C, 1A0DE, 1A170, 1A202, 1A293, 1A324, 1A3B4, 1A445, 1A4D5, 1A564, 1A5F3, 1A682, 1A711, 1A79F, 1A82D, 1A8BA, 1A948, 1A9D5, 1AA61, 1AAED, 1AB79, 1AC05, 1AC90, 1AD1A, 1ADA5, 1AE2F, 1AEB9, 1AF42, 1AFCB, 1B053, 1B0DC, 1B164, 1B1EB, 1B272, 1B2F9, 1B380, 1B406, 1B48B, 1B511, 1B596, 1B61A, 1B69E, 1B722, 1B7A6, 1B829, 1B8AB, 1B92E, 1B9B0, 1BA31, 1BAB2, 1BB33, 1BBB4, 1BC34, 1BCB3, 1BD32, 1BDB1, 1BE30, 1BEAE, 1BF2B, 1BFA9, 1C026, 1C0A2, 1C11E, 1C19A, 1C215, 1C290, 1C30A, 1C384, 1C3FE, 1C477, 1C4F0, 1C568, 1C5E0, 1C658, 1C6CF, 1C746, 1C7BC, 1C832, 1C8A8, 1C91D, 1C992, 1CA06, 1CA7A, 1CAED, 1CB60, 1CBD3, 1CC45, 1CCB6, 1CD28, 1CD99, 1CE09, 1CE79, 1CEE8, 1CF58, 1CFC6, 1D035, 1D0A2, 1D110, 1D17D, 1D1E9, 1D255, 1D2C1, 1D32C, 1D397, 1D401, 1D46B, 1D4D4, 1D53D, 1D5A6, 1D60E, 1D675, 1D6DC, 1D743, 1D7A9, 1D80F, 1D874, 1D8D9, 1D93E, 1D9A2, 1DA05, 1DA68, 1DACB, 1DB2D, 1DB8E, 1DBF0, 1DC50, 1DCB0, 1DD10, 1DD70, 1DDCE, 1DE2D, 1DE8B, 1DEE8, 1DF45, 1DFA2, 1DFFE, 1E059, 1E0B4, 1E10F, 1E169, 1E1C2, 1E21C, 1E274, 1E2CC, 1E324, 1E37B, 1E3D2, 1E428, 1E47E, 1E4D3, 1E528, 1E57D, 1E5D0, 1E624, 1E677, 1E6C9, 1E71B, 1E76C, 1E7BD, 1E80D, 1E85D, 1E8AD, 1E8FC, 1E94A, 1E998, 1E9E5, 1EA32, 1EA7F, 1EACA, 1EB16, 1EB61, 1EBAB, 1EBF5, 1EC3E, 1EC87, 1ECD0, 1ED18, 1ED5F, 1EDA6, 1EDEC, 1EE32, 1EE77, 1EEBC, 1EF00, 1EF44, 1EF88, 1EFCA, 1F00D, 1F04E, 1F090, 1F0D0, 1F111, 1F150, 1F18F, 1F1CE, 1F20C, 1F24A, 1F287, 1F2C3, 1F300, 1F33B, 1F376, 1F3B1, 1F3EB, 1F424, 1F45D, 1F495, 1F4CD, 1F505, 1F53B, 1F572, 1F5A7, 1F5DD, 1F611, 1F646, 1F679, 1F6AC, 1F6DF, 1F711, 1F742, 1F773, 1F7A4, 1F7D4, 1F803, 1F832, 1F861, 1F88E, 1F8BC, 1F8E8, 1F914, 1F940, 1F96B, 1F996, 1F9C0, 1F9E9, 1FA12, 1FA3B, 1FA63, 1FA8A, 1FAB1, 1FAD7, 1FAFD, 1FB22, 1FB47, 1FB6B, 1FB8E, 1FBB1, 1FBD4, 1FBF6, 1FC17, 1FC38, 1FC58, 1FC78, 1FC97, 1FCB6, 1FCD4, 1FCF2, 1FD0F, 1FD2B, 1FD47, 1FD63, 1FD7E, 1FD98, 1FDB2, 1FDCB, 1FDE4, 1FDFC, 1FE13, 1FE2A, 1FE41, 1FE57, 1FE6C, 1FE81, 1FE95, 1FEA9, 1FEBC, 1FECF, 1FEE1, 1FEF2, 1FF03, 1FF14, 1FF24, 1FF33, 1FF42, 1FF50, 1FF5E, 1FF6B, 1FF77, 1FF83, 1FF8F, 1FF9A, 1FFA4, 1FFAE, 1FFB7, 1FFC0, 1FFC8, 1FFD0, 1FFD7, 1FFDD, 1FFE3, 1FFE8, 1FFED, 1FFF1, 1FFF5, 1FFF8, 1FFFB, 1FFFD, 1FFFF, 1FFFF, 1FFFF;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_f9ac63e4787fa6ff',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'caff2417e9a0f1083fd7d71ca46624eb',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_f9ac63e4787fa6ff',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 1FFFF, 1FFFF, 1FFFE, 1FFFC, 1FFFA, 1FFF7, 1FFF3, 1FFEF, 1FFEB, 1FFE6, 1FFE0, 1FFDA, 1FFD3, 1FFCC, 1FFC4, 1FFBB, 1FFB2, 1FFA9, 1FF9F, 1FF94, 1FF89, 1FF7D, 1FF71, 1FF64, 1FF57, 1FF49, 1FF3A, 1FF2B, 1FF1B, 1FF0B, 1FEFB, 1FEE9, 1FED7, 1FEC5, 1FEB2, 1FE9F, 1FE8B, 1FE76, 1FE61, 1FE4B, 1FE35, 1FE1E, 1FE07, 1FDEF, 1FDD7, 1FDBE, 1FDA4, 1FD8A, 1FD70, 1FD55, 1FD39, 1FD1D, 1FD00, 1FCE3, 1FCC5, 1FCA6, 1FC87, 1FC68, 1FC48, 1FC27, 1FC06, 1FBE4, 1FBC2, 1FB9F, 1FB7C, 1FB58, 1FB34, 1FB0F, 1FAE9, 1FAC3, 1FA9D, 1FA76, 1FA4E, 1FA26, 1F9FD, 1F9D4, 1F9AA, 1F980, 1F955, 1F92A, 1F8FE, 1F8D1, 1F8A4, 1F877, 1F849, 1F81A, 1F7EB, 1F7BB, 1F78B, 1F75A, 1F729, 1F6F7, 1F6C5, 1F692, 1F65F, 1F62B, 1F5F6, 1F5C1, 1F58C, 1F556, 1F51F, 1F4E8, 1F4B0, 1F478, 1F440, 1F406, 1F3CD, 1F392, 1F358, 1F31C, 1F2E1, 1F2A4, 1F267, 1F22A, 1F1EC, 1F1AE, 1F16F, 1F12F, 1F0EF, 1F0AF, 1F06E, 1F02D, 1EFEA, 1EFA8, 1EF65, 1EF21, 1EEDD, 1EE99, 1EE54, 1EE0E, 1EDC8, 1ED81, 1ED3A, 1ECF3, 1ECAA, 1EC62, 1EC19, 1EBCF, 1EB85, 1EB3A, 1EAEF, 1EAA3, 1EA57, 1EA0B, 1E9BD, 1E970, 1E922, 1E8D3, 1E884, 1E834, 1E7E4, 1E793, 1E742, 1E6F1, 1E69E, 1E64C, 1E5F9, 1E5A5, 1E551, 1E4FD, 1E4A7, 1E452, 1E3FC, 1E3A5, 1E34E, 1E2F7, 1E29F, 1E247, 1E1EE, 1E194, 1E13A, 1E0E0, 1E085, 1E02A, 1DFCE, 1DF72, 1DF15, 1DEB8, 1DE5A, 1DDFC, 1DD9E, 1DD3E, 1DCDF, 1DC7F, 1DC1E, 1DBBD, 1DB5C, 1DAFA, 1DA98, 1DA35, 1D9D2, 1D96E, 1D90A, 1D8A5, 1D840, 1D7DB, 1D775, 1D70E, 1D6A7, 1D640, 1D5D8, 1D570, 1D507, 1D49E, 1D434, 1D3CA, 1D360, 1D2F5, 1D289, 1D21D, 1D1B1, 1D144, 1D0D7, 1D06A, 1CFFC, 1CF8D, 1CF1E, 1CEAF, 1CE3F, 1CDCF, 1CD5E, 1CCED, 1CC7C, 1CC0A, 1CB98, 1CB25, 1CAB2, 1CA3E, 1C9CA, 1C955, 1C8E1, 1C86B, 1C7F5, 1C77F, 1C709, 1C692, 1C61A, 1C5A3, 1C52A, 1C4B2, 1C439, 1C3BF, 1C345, 1C2CB, 1C251, 1C1D5, 1C15A, 1C0DE, 1C062, 1BFE5, 1BF68, 1BEEB, 1BE6D, 1BDEF, 1BD70, 1BCF1, 1BC71, 1BBF2, 1BB71, 1BAF1, 1BA70, 1B9EF, 1B96D, 1B8EB, 1B868, 1B7E5, 1B762, 1B6DE, 1B65A, 1B5D6, 1B551, 1B4CC, 1B446, 1B3C1, 1B33A, 1B2B4, 1B22D, 1B1A5, 1B11E, 1B096, 1B00D, 1AF84, 1AEFB, 1AE72, 1ADE8, 1AD5D, 1ACD3, 1AC48, 1ABBD, 1AB31, 1AAA5, 1AA19, 1A98C, 1A8FF, 1A872, 1A7E4, 1A756, 1A6C7, 1A639, 1A5AA, 1A51A, 1A48A, 1A3FA, 1A36A, 1A2D9, 1A248, 1A1B7, 1A125, 1A093, 1A000, 19F6E, 19EDB, 19E47, 19DB4, 19D20, 19C8B, 19BF7, 19B62, 19ACD, 19A37, 199A1, 1990B, 19875, 197DE, 19747, 196AF, 19618, 19580, 194E7, 1944F, 193B6, 1931D, 19283, 191E9, 1914F, 190B5, 1901A, 18F7F, 18EE4, 18E49, 18DAD, 18D11, 18C75, 18BD8, 18B3B, 18A9E, 18A01, 18963, 188C5, 18827, 18788, 186E9, 1864A, 185AB, 1850B, 1846C, 183CB, 1832B, 1828B, 181EA, 18149, 180A7, 18006, 17F64, 17EC2, 17E1F, 17D7D, 17CDA, 17C37, 17B93, 17AF0, 17A4C, 179A8, 17904, 1785F, 177BA, 17715, 17670, 175CB, 17525, 1747F, 173D9, 17333, 1728C, 171E5, 1713E, 17097, 16FF0, 16F48, 16EA0, 16DF8, 16D50, 16CA7, 16BFF, 16B56, 16AAD, 16A03, 1695A, 168B0, 16806, 1675C, 166B2, 16607, 1655D, 164B2, 16407, 1635B, 162B0, 16204, 16159, 160AD, 16001, 15F54, 15EA8, 15DFB, 15D4E, 15CA1, 15BF4, 15B47, 15A99, 159EB, 1593D, 1588F, 157E1, 15733, 15684, 155D6, 15527, 15478, 153C9, 15319, 1526A, 151BA, 1510B, 1505B, 14FAB, 14EFB, 14E4A, 14D9A, 14CE9, 14C39, 14B88, 14AD7, 14A26, 14974, 148C3, 14811, 14760, 146AE, 145FC, 1454A, 14498, 143E6, 14333, 14281, 141CE, 1411C, 14069, 13FB6, 13F03, 13E50, 13D9D, 13CE9, 13C36, 13B82, 13ACF, 13A1B, 13967, 138B3, 137FF, 1374B, 13697, 135E2, 1352E, 13479, 133C5, 13310, 1325C, 131A7, 130F2, 1303D, 12F88, 12ED3, 12E1E, 12D68, 12CB3, 12BFE, 12B48, 12A93, 129DD, 12927, 12872, 127BC, 12706, 12650, 1259A, 124E4, 1242E, 12378, 122C2, 1220C, 12155, 1209F, 11FE9, 11F32, 11E7C, 11DC6, 11D0F, 11C58, 11BA2, 11AEB, 11A35, 1197E, 118C7, 11811, 1175A, 116A3, 115EC, 11536, 1147F, 113C8, 11311, 1125A, 111A3, 110EC, 11035, 10F7E, 10EC8, 10E11, 10D5A, 10CA3, 10BEC, 10B35, 10A7E, 109C7, 10910, 10859, 107A2, 106EB, 10634, 1057D, 104C6, 1040F, 10358, 102A2, 101EB, 10134, 1007D, FFC6, FF10, FE59, FDA2, FCEB, FC35, FB7E, FAC7, FA11, F95A, F8A4, F7ED, F737, F680, F5CA, F514, F45E, F3A7, F2F1, F23B, F185, F0CF, F019, EF63, EEAD, EDF7, ED42, EC8C, EBD6, EB21, EA6B, E9B6, E900, E84B, E796, E6E0, E62B, E576, E4C1, E40C, E358, E2A3, E1EE, E139, E085, DFD1, DF1C, DE68, DDB4, DD00, DC4C, DB98, DAE4, DA30, D97D, D8C9, D816, D762, D6AF, D5FC, D549, D496, D3E3, D330, D27E, D1CB, D119, D066, CFB4, CF02, CE50, CD9E, CCEC, CC3B, CB89, CAD8, CA27, C976, C8C5, C814, C763, C6B2, C602, C551, C4A1, C3F1, C341, C291, C1E1, C132, C082, BFD3, BF24, BE75, BDC6, BD17, BC69, BBBA, BB0C, BA5E, B9B0, B902, B854, B7A7, B6F9, B64C, B59F, B4F2, B445, B399, B2EC, B240, B194, B0E8, B03C, AF91, AEE5, AE3A, AD8F, ACE4, AC39, AB8E, AAE4, AA3A, A990, A8E6, A83C, A793, A6E9, A640, A597, A4EE, A446, A39D, A2F5, A24D, A1A5, A0FD, A056, 9FAF, 9F07, 9E61, 9DBA, 9D13, 9C6D, 9BC7, 9B21, 9A7B, 99D6, 9930, 988B, 97E6, 9742, 969D, 95F9, 9555, 94B1, 940D, 936A, 92C7, 9223, 9181, 90DE, 903C, 8F9A, 8EF8, 8E56, 8DB4, 8D13, 8C72, 8BD1, 8B30, 8A90, 89F0, 8950, 88B0, 8811, 8771, 86D2, 8634, 8595, 84F7, 8459, 83BB, 831D, 8280, 81E2, 8145, 80A9, 800C, 7F70, 7ED4, 7E38, 7D9D, 7D02, 7C67, 7BCC, 7B31, 7A97, 79FD, 7963, 78CA, 7830, 7797, 76FF, 7666, 75CE, 7536, 749E, 7407, 736F, 72D8, 7242, 71AB, 7115, 707F, 6FE9, 6F54, 6EBF, 6E2A, 6D95, 6D01, 6C6C, 6BD9, 6B45, 6AB2, 6A1F, 698C, 68F9, 6867, 67D5, 6743, 66B2, 6621, 6590, 64FF, 646F, 63DF, 634F, 62BF, 6230, 61A1, 6112, 6084, 5FF6, 5F68, 5EDA, 5E4D, 5DC0, 5D33, 5CA7, 5C1B, 5B8F, 5B03, 5A78, 59ED, 5962, 58D8, 584E, 57C4, 573A, 56B1, 5628, 559F, 5517, 548F, 5407, 537F, 52F8, 5271, 51EA, 5164, 50DE, 5058, 4FD3, 4F4D, 4EC8, 4E44, 4DC0, 4D3C, 4CB8, 4C34, 4BB1, 4B2E, 4AAC, 4A2A, 49A8, 4926, 48A5, 4824, 47A3, 4723, 46A3, 4623, 45A4, 4524, 44A6, 4427, 43A9, 432B, 42AD, 4230, 41B3, 4136, 40BA, 403E, 3FC2, 3F46, 3ECB, 3E50, 3DD6, 3D5C, 3CE2, 3C68, 3BEF, 3B76, 3AFD, 3A85, 3A0D, 3995, 391E, 38A7, 3830, 37B9, 3743, 36CE, 3658, 35E3, 356E, 34F9, 3485, 3411, 339E, 332A, 32B7, 3245, 31D2, 3160, 30EF, 307D, 300C, 2F9C, 2F2B, 2EBB, 2E4B, 2DDC, 2D6D, 2CFE, 2C90, 2C21, 2BB4, 2B46, 2AD9, 2A6C, 29FF, 2993, 2927, 28BC, 2850, 27E6, 277B, 2711, 26A7, 263D, 25D4, 256B, 2502, 249A, 2432, 23CA, 2363, 22FC, 2295, 222F, 21C9, 2163, 20FD, 2098, 2034, 1FCF, 1F6B, 1F07, 1EA4, 1E41, 1DDE, 1D7B, 1D19, 1CB8, 1C56, 1BF5, 1B94, 1B34, 1AD3, 1A74, 1A14, 19B5, 1956, 18F7, 1899, 183B, 17DE, 1780, 1724, 16C7, 166B, 160F, 15B3, 1558, 14FD, 14A2, 1448, 13EE, 1394, 133B, 12E2, 1289, 1231, 11D9, 1181, 112A, 10D3, 107C, 1026, FD0, F7A, F24, ECF, E7B, E26, DD2, D7E, D2B, CD8, C85, C32, BE0, B8E, B3D, AEC, A9B, A4A, 9FA, 9AA, 95B, 90B, 8BC, 86E, 81F, 7D1, 784, 736, 6E9, 69D, 650, 604, 5B9, 56D, 522, 4D7, 48D, 443, 3F9, 3B0, 366, 31E, 2D5, 28D, 245, 1FD, 1B6, 16F, 129, E2, 9C, 57, 11;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_ffb4b8e6a1869a4a',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '9434f0c8bbf21d0fdcb8516affc3fc83',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_ffb4b8e6a1869a4a',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFCC, 3FF88, 3FF43, 3FEFF, 3FEBB, 3FE78, 3FE35, 3FDF2, 3FDAF, 3FD6D, 3FD2B, 3FCEA, 3FCA8, 3FC67, 3FC27, 3FBE6, 3FBA6, 3FB67, 3FB27, 3FAE8, 3FAA9, 3FA6B, 3FA2D, 3F9EF, 3F9B1, 3F974, 3F937, 3F8FB, 3F8BE, 3F882, 3F846, 3F80B, 3F7D0, 3F795, 3F75B, 3F721, 3F6E7, 3F6AD, 3F674, 3F63B, 3F602, 3F5CA, 3F592, 3F55A, 3F522, 3F4EB, 3F4B4, 3F47E, 3F448, 3F412, 3F3DC, 3F3A7, 3F372, 3F33D, 3F308, 3F2D4, 3F2A0, 3F26D, 3F239, 3F206, 3F1D4, 3F1A1, 3F16F, 3F13D, 3F10C, 3F0DB, 3F0AA, 3F079, 3F049, 3F018, 3EFE9, 3EFB9, 3EF8A, 3EF5B, 3EF2C, 3EEFE, 3EED0, 3EEA2, 3EE75, 3EE47, 3EE1B, 3EDEE, 3EDC2, 3ED95, 3ED6A, 3ED3E, 3ED13, 3ECE8, 3ECBD, 3EC93, 3EC69, 3EC3F, 3EC15, 3EBEC, 3EBC3, 3EB9A, 3EB72, 3EB4A, 3EB22, 3EAFA, 3EAD3, 3EAAC, 3EA85, 3EA5F, 3EA38, 3EA12, 3E9ED, 3E9C7, 3E9A2, 3E97D, 3E959, 3E934, 3E910, 3E8EC, 3E8C9, 3E8A5, 3E882, 3E860, 3E83D, 3E81B, 3E7F9, 3E7D7, 3E7B6, 3E795, 3E774, 3E753, 3E733, 3E712, 3E6F2, 3E6D3, 3E6B3, 3E694, 3E675, 3E657, 3E638, 3E61A, 3E5FD, 3E5DF, 3E5C2, 3E5A5, 3E588, 3E56B, 3E54F, 3E533, 3E517, 3E4FB, 3E4E0, 3E4C5, 3E4AA, 3E48F, 3E475, 3E45B, 3E441, 3E427, 3E40E, 3E3F5, 3E3DC, 3E3C3, 3E3AB, 3E393, 3E37B, 3E363, 3E34B, 3E334, 3E31D, 3E306, 3E2F0, 3E2DA, 3E2C4, 3E2AE, 3E298, 3E283, 3E26E, 3E259, 3E244, 3E230, 3E21B, 3E207, 3E1F4, 3E1E0, 3E1CD, 3E1BA, 3E1A7, 3E194, 3E182, 3E16F, 3E15D, 3E14C, 3E13A, 3E129, 3E118, 3E107, 3E0F6, 3E0E6, 3E0D5, 3E0C5, 3E0B6, 3E0A6, 3E097, 3E088, 3E079, 3E06A, 3E05B, 3E04D, 3E03F, 3E031, 3E023, 3E016, 3E008, 3DFFB, 3DFEF, 3DFE2, 3DFD5, 3DFC9, 3DFBD, 3DFB1, 3DFA6, 3DF9A, 3DF8F, 3DF84, 3DF79, 3DF6E, 3DF64, 3DF59, 3DF4F, 3DF46, 3DF3C, 3DF32, 3DF29, 3DF20, 3DF17, 3DF0E, 3DF06, 3DEFD, 3DEF5, 3DEED, 3DEE5, 3DEDE, 3DED6, 3DECF, 3DEC8, 3DEC1, 3DEBB, 3DEB4, 3DEAE, 3DEA8, 3DEA2, 3DE9C, 3DE96, 3DE91, 3DE8B, 3DE86, 3DE81, 3DE7D, 3DE78, 3DE74, 3DE70, 3DE6C, 3DE68, 3DE64, 3DE60, 3DE5D, 3DE5A, 3DE57, 3DE54, 3DE51, 3DE4F, 3DE4C, 3DE4A, 3DE48, 3DE46, 3DE45, 3DE43, 3DE42, 3DE40, 3DE3F, 3DE3E, 3DE3E, 3DE3D, 3DE3D, 3DE3C, 3DE3C, 3DE3C, 3DE3C, 3DE3D, 3DE3D, 3DE3E, 3DE3F, 3DE3F, 3DE41, 3DE42, 3DE43, 3DE45, 3DE46, 3DE48, 3DE4A, 3DE4C, 3DE4E, 3DE51, 3DE53, 3DE56, 3DE59, 3DE5C, 3DE5F, 3DE62, 3DE65, 3DE69, 3DE6C, 3DE70, 3DE74, 3DE78, 3DE7C, 3DE81, 3DE85, 3DE8A, 3DE8E, 3DE93, 3DE98, 3DE9D, 3DEA2, 3DEA8, 3DEAD, 3DEB3, 3DEB8, 3DEBE, 3DEC4, 3DECA, 3DED0, 3DED7, 3DEDD, 3DEE4, 3DEEA, 3DEF1, 3DEF8, 3DEFF, 3DF06, 3DF0D, 3DF15, 3DF1C, 3DF24, 3DF2C, 3DF33, 3DF3B, 3DF43, 3DF4C, 3DF54, 3DF5C, 3DF65, 3DF6D, 3DF76, 3DF7F, 3DF88, 3DF91, 3DF9A, 3DFA3, 3DFAC, 3DFB6, 3DFBF, 3DFC9, 3DFD3, 3DFDC, 3DFE6, 3DFF0, 3DFFB, 3E005, 3E00F, 3E019, 3E024, 3E02F, 3E039, 3E044, 3E04F, 3E05A, 3E065, 3E070, 3E07B, 3E087, 3E092, 3E09D, 3E0A9, 3E0B5, 3E0C0, 3E0CC, 3E0D8, 3E0E4, 3E0F0, 3E0FC, 3E109, 3E115, 3E121, 3E12E, 3E13A, 3E147, 3E154, 3E161, 3E16D, 3E17A, 3E187, 3E195, 3E1A2, 3E1AF, 3E1BC, 3E1CA, 3E1D7, 3E1E5, 3E1F2, 3E200, 3E20E, 3E21B, 3E229, 3E237, 3E245, 3E253, 3E261, 3E270, 3E27E, 3E28C, 3E29B, 3E2A9, 3E2B8, 3E2C6, 3E2D5, 3E2E3, 3E2F2, 3E301, 3E310, 3E31F, 3E32E, 3E33D, 3E34C, 3E35B, 3E36A, 3E379, 3E389, 3E398, 3E3A7, 3E3B7, 3E3C6, 3E3D6, 3E3E6, 3E3F5, 3E405, 3E415, 3E425, 3E434, 3E444, 3E454, 3E464, 3E474, 3E484, 3E494, 3E4A5, 3E4B5, 3E4C5, 3E4D5, 3E4E6, 3E4F6, 3E506, 3E517, 3E527, 3E538, 3E548, 3E559, 3E56A, 3E57A, 3E58B, 3E59C, 3E5AC, 3E5BD, 3E5CE, 3E5DF, 3E5F0, 3E601, 3E612, 3E623, 3E634, 3E645, 3E656, 3E667, 3E678, 3E689, 3E69A, 3E6AB, 3E6BD, 3E6CE, 3E6DF, 3E6F1, 3E702, 3E713, 3E725, 3E736, 3E747, 3E759, 3E76A, 3E77C, 3E78D, 3E79F, 3E7B0, 3E7C2, 3E7D4, 3E7E5, 3E7F7, 3E808, 3E81A, 3E82C, 3E83D, 3E84F, 3E861, 3E872, 3E884, 3E896, 3E8A8, 3E8B9, 3E8CB, 3E8DD, 3E8EF, 3E901, 3E912, 3E924, 3E936, 3E948, 3E95A, 3E96C, 3E97E, 3E98F, 3E9A1, 3E9B3, 3E9C5, 3E9D7, 3E9E9, 3E9FB, 3EA0D, 3EA1F, 3EA31, 3EA43, 3EA54, 3EA66, 3EA78, 3EA8A, 3EA9C, 3EAAE, 3EAC0, 3EAD2, 3EAE4, 3EAF6, 3EB08, 3EB1A, 3EB2C, 3EB3D, 3EB4F, 3EB61, 3EB73, 3EB85, 3EB97, 3EBA9, 3EBBB, 3EBCD, 3EBDE, 3EBF0, 3EC02, 3EC14, 3EC26, 3EC38, 3EC4A, 3EC5B, 3EC6D, 3EC7F, 3EC91, 3ECA3, 3ECB4, 3ECC6, 3ECD8, 3ECEA, 3ECFB, 3ED0D, 3ED1F, 3ED30, 3ED42, 3ED54, 3ED65, 3ED77, 3ED89, 3ED9A, 3EDAC, 3EDBD, 3EDCF, 3EDE0, 3EDF2, 3EE03, 3EE15, 3EE26, 3EE38, 3EE49, 3EE5B, 3EE6C, 3EE7D, 3EE8F, 3EEA0, 3EEB2, 3EEC3, 3EED4, 3EEE5, 3EEF7, 3EF08, 3EF19, 3EF2A, 3EF3B, 3EF4D, 3EF5E, 3EF6F, 3EF80, 3EF91, 3EFA2, 3EFB3, 3EFC4, 3EFD5, 3EFE6, 3EFF7, 3F008, 3F018, 3F029, 3F03A, 3F04B, 3F05C, 3F06C, 3F07D, 3F08E, 3F09E, 3F0AF, 3F0C0, 3F0D0, 3F0E1, 3F0F1, 3F102, 3F112, 3F122, 3F133, 3F143, 3F154, 3F164, 3F174, 3F184, 3F195, 3F1A5, 3F1B5, 3F1C5, 3F1D5, 3F1E5, 3F1F5, 3F205, 3F215, 3F225, 3F235, 3F245, 3F255, 3F265, 3F275, 3F284, 3F294, 3F2A4, 3F2B3, 3F2C3, 3F2D3, 3F2E2, 3F2F2, 3F301, 3F311, 3F320, 3F32F, 3F33F, 3F34E, 3F35D, 3F36D, 3F37C, 3F38B, 3F39A, 3F3A9, 3F3B8, 3F3C7, 3F3D6, 3F3E5, 3F3F4, 3F403, 3F412, 3F421, 3F430, 3F43F, 3F44D, 3F45C, 3F46B, 3F479, 3F488, 3F496, 3F4A5, 3F4B3, 3F4C2, 3F4D0, 3F4DE, 3F4ED, 3F4FB, 3F509, 3F517, 3F526, 3F534, 3F542, 3F550, 3F55E, 3F56C, 3F57A, 3F588, 3F596, 3F5A3, 3F5B1, 3F5BF, 3F5CD, 3F5DA, 3F5E8, 3F5F5, 3F603, 3F610, 3F61E, 3F62B, 3F639, 3F646, 3F653, 3F661, 3F66E, 3F67B, 3F688, 3F695, 3F6A2, 3F6AF, 3F6BC, 3F6C9, 3F6D6, 3F6E3, 3F6F0, 3F6FD, 3F70A, 3F716, 3F723, 3F730, 3F73C, 3F749, 3F755, 3F762, 3F76E, 3F77B, 3F787, 3F793, 3F7A0, 3F7AC, 3F7B8, 3F7C4, 3F7D0, 3F7DC, 3F7E9, 3F7F5, 3F801, 3F80C, 3F818, 3F824, 3F830, 3F83C, 3F847, 3F853, 3F85F, 3F86A, 3F876, 3F882, 3F88D, 3F898, 3F8A4, 3F8AF, 3F8BB, 3F8C6, 3F8D1, 3F8DC, 3F8E8, 3F8F3, 3F8FE, 3F909, 3F914, 3F91F, 3F92A, 3F935, 3F940, 3F94A, 3F955, 3F960, 3F96B, 3F975, 3F980, 3F98B, 3F995, 3F9A0, 3F9AA, 3F9B5, 3F9BF, 3F9C9, 3F9D4, 3F9DE, 3F9E8, 3F9F2, 3F9FD, 3FA07, 3FA11, 3FA1B, 3FA25, 3FA2F, 3FA39, 3FA43, 3FA4D, 3FA57, 3FA60, 3FA6A, 3FA74, 3FA7E, 3FA87, 3FA91, 3FA9A, 3FAA4, 3FAAD, 3FAB7, 3FAC0, 3FACA, 3FAD3, 3FADC, 3FAE6, 3FAEF, 3FAF8, 3FB01, 3FB0B, 3FB14, 3FB1D, 3FB26, 3FB2F, 3FB38, 3FB41, 3FB4A, 3FB53, 3FB5B, 3FB64, 3FB6D, 3FB76, 3FB7F, 3FB87, 3FB90, 3FB98, 3FBA1, 3FBAA, 3FBB2, 3FBBB, 3FBC3, 3FBCB, 3FBD4, 3FBDC, 3FBE4, 3FBED, 3FBF5, 3FBFD, 3FC05, 3FC0E, 3FC16, 3FC1E, 3FC26, 3FC2E, 3FC36, 3FC3E, 3FC46, 3FC4E, 3FC56, 3FC5D, 3FC65, 3FC6D, 3FC75, 3FC7C, 3FC84, 3FC8C, 3FC93, 3FC9B, 3FCA3, 3FCAA, 3FCB2, 3FCB9, 3FCC1, 3FCC8, 3FCD0, 3FCD7, 3FCDE, 3FCE6, 3FCED, 3FCF4, 3FCFB, 3FD03, 3FD0A, 3FD11, 3FD18, 3FD1F, 3FD26, 3FD2D, 3FD34, 3FD3B, 3FD42, 3FD49, 3FD50, 3FD57, 3FD5E, 3FD65, 3FD6C, 3FD72, 3FD79, 3FD80, 3FD87, 3FD8D, 3FD94, 3FD9B, 3FDA1, 3FDA8, 3FDAF, 3FDB5, 3FDBC, 3FDC2, 3FDC9, 3FDCF, 3FDD6, 3FDDC, 3FDE3, 3FDE9, 3FDEF, 3FDF6, 3FDFC, 3FE02, 3FE09, 3FE0F, 3FE15, 3FE1B, 3FE21, 3FE28, 3FE2E, 3FE34, 3FE3A, 3FE40, 3FE46, 3FE4C, 3FE52, 3FE58, 3FE5E, 3FE64, 3FE6A, 3FE70, 3FE76, 3FE7C, 3FE82, 3FE88, 3FE8E, 3FE94, 3FE9A, 3FE9F, 3FEA5, 3FEAB, 3FEB1, 3FEB6, 3FEBC, 3FEC2, 3FEC8, 3FECD, 3FED3, 3FED9, 3FEDE, 3FEE4, 3FEEA, 3FEEF, 3FEF5, 3FEFA, 3FF00, 3FF06, 3FF0B, 3FF11, 3FF16, 3FF1C, 3FF21, 3FF27, 3FF2C, 3FF31, 3FF37, 3FF3C, 3FF42, 3FF47, 3FF4D, 3FF52, 3FF57, 3FF5D, 3FF62, 3FF67, 3FF6D, 3FF72, 3FF77, 3FF7D, 3FF82, 3FF87, 3FF8D, 3FF92, 3FF97, 3FF9C, 3FFA2, 3FFA7, 3FFAC, 3FFB1, 3FFB6, 3FFBC, 3FFC1, 3FFC6, 3FFCB, 3FFD0, 3FFD6, 3FFDB, 3FFE0, 3FFE5, 3FFEA, 3FFEF, 3FFF4, 3FFFA, 3FFFF;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_730496867cd75f1e',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b9bdcc4023c158f547be5cc7ed050dfe',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_730496867cd75f1e',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFFC, 3FFF7, 3FFF2, 3FFEC, 3FFE7, 3FFE2, 3FFDD, 3FFD8, 3FFD3, 3FFCD, 3FFC8, 3FFC3, 3FFBE, 3FFB9, 3FFB4, 3FFAE, 3FFA9, 3FFA4, 3FF9F, 3FF99, 3FF94, 3FF8F, 3FF8A, 3FF84, 3FF7F, 3FF7A, 3FF74, 3FF6F, 3FF6A, 3FF64, 3FF5F, 3FF5A, 3FF54, 3FF4F, 3FF4A, 3FF44, 3FF3F, 3FF39, 3FF34, 3FF2E, 3FF29, 3FF23, 3FF1E, 3FF18, 3FF13, 3FF0D, 3FF08, 3FF02, 3FEFD, 3FEF7, 3FEF2, 3FEEC, 3FEE6, 3FEE1, 3FEDB, 3FED6, 3FED0, 3FECA, 3FEC4, 3FEBF, 3FEB9, 3FEB3, 3FEAD, 3FEA8, 3FEA2, 3FE9C, 3FE96, 3FE90, 3FE8B, 3FE85, 3FE7F, 3FE79, 3FE73, 3FE6D, 3FE67, 3FE61, 3FE5B, 3FE55, 3FE4F, 3FE49, 3FE43, 3FE3D, 3FE37, 3FE30, 3FE2A, 3FE24, 3FE1E, 3FE18, 3FE12, 3FE0B, 3FE05, 3FDFF, 3FDF8, 3FDF2, 3FDEC, 3FDE5, 3FDDF, 3FDD8, 3FDD2, 3FDCC, 3FDC5, 3FDBF, 3FDB8, 3FDB1, 3FDAB, 3FDA4, 3FD9E, 3FD97, 3FD90, 3FD8A, 3FD83, 3FD7C, 3FD75, 3FD6F, 3FD68, 3FD61, 3FD5A, 3FD53, 3FD4C, 3FD45, 3FD3E, 3FD37, 3FD30, 3FD29, 3FD22, 3FD1B, 3FD14, 3FD0D, 3FD06, 3FCFE, 3FCF7, 3FCF0, 3FCE9, 3FCE1, 3FCDA, 3FCD3, 3FCCB, 3FCC4, 3FCBC, 3FCB5, 3FCAD, 3FCA6, 3FC9E, 3FC97, 3FC8F, 3FC87, 3FC80, 3FC78, 3FC70, 3FC69, 3FC61, 3FC59, 3FC51, 3FC49, 3FC41, 3FC39, 3FC31, 3FC29, 3FC21, 3FC19, 3FC11, 3FC09, 3FC01, 3FBF8, 3FBF0, 3FBE8, 3FBE0, 3FBD7, 3FBCF, 3FBC7, 3FBBE, 3FBB6, 3FBAD, 3FBA5, 3FB9C, 3FB93, 3FB8B, 3FB82, 3FB79, 3FB71, 3FB68, 3FB5F, 3FB56, 3FB4D, 3FB45, 3FB3C, 3FB33, 3FB2A, 3FB21, 3FB18, 3FB0E, 3FB05, 3FAFC, 3FAF3, 3FAEA, 3FAE0, 3FAD7, 3FACE, 3FAC4, 3FABB, 3FAB1, 3FAA8, 3FA9E, 3FA95, 3FA8B, 3FA82, 3FA78, 3FA6E, 3FA64, 3FA5B, 3FA51, 3FA47, 3FA3D, 3FA33, 3FA29, 3FA1F, 3FA15, 3FA0B, 3FA01, 3F9F7, 3F9EC, 3F9E2, 3F9D8, 3F9CE, 3F9C3, 3F9B9, 3F9AE, 3F9A4, 3F999, 3F98F, 3F984, 3F97A, 3F96F, 3F964, 3F95A, 3F94F, 3F944, 3F939, 3F92E, 3F923, 3F918, 3F90D, 3F902, 3F8F7, 3F8EC, 3F8E1, 3F8D6, 3F8CB, 3F8BF, 3F8B4, 3F8A9, 3F89D, 3F892, 3F886, 3F87B, 3F86F, 3F864, 3F858, 3F84C, 3F841, 3F835, 3F829, 3F81D, 3F811, 3F805, 3F7F9, 3F7ED, 3F7E1, 3F7D5, 3F7C9, 3F7BD, 3F7B1, 3F7A5, 3F798, 3F78C, 3F780, 3F773, 3F767, 3F75B, 3F74E, 3F741, 3F735, 3F728, 3F71C, 3F70F, 3F702, 3F6F5, 3F6E9, 3F6DC, 3F6CF, 3F6C2, 3F6B5, 3F6A8, 3F69B, 3F68E, 3F680, 3F673, 3F666, 3F659, 3F64C, 3F63E, 3F631, 3F623, 3F616, 3F608, 3F5FB, 3F5ED, 3F5E0, 3F5D2, 3F5C4, 3F5B7, 3F5A9, 3F59B, 3F58D, 3F57F, 3F572, 3F564, 3F556, 3F548, 3F539, 3F52B, 3F51D, 3F50F, 3F501, 3F4F3, 3F4E4, 3F4D6, 3F4C8, 3F4B9, 3F4AB, 3F49C, 3F48E, 3F47F, 3F471, 3F462, 3F453, 3F445, 3F436, 3F427, 3F418, 3F409, 3F3FA, 3F3EC, 3F3DD, 3F3CE, 3F3BF, 3F3AF, 3F3A0, 3F391, 3F382, 3F373, 3F364, 3F354, 3F345, 3F336, 3F326, 3F317, 3F307, 3F2F8, 3F2E8, 3F2D9, 3F2C9, 3F2BA, 3F2AA, 3F29A, 3F28B, 3F27B, 3F26B, 3F25B, 3F24C, 3F23C, 3F22C, 3F21C, 3F20C, 3F1FC, 3F1EC, 3F1DC, 3F1CC, 3F1BC, 3F1AB, 3F19B, 3F18B, 3F17B, 3F16A, 3F15A, 3F14A, 3F139, 3F129, 3F119, 3F108, 3F0F8, 3F0E7, 3F0D7, 3F0C6, 3F0B6, 3F0A5, 3F094, 3F084, 3F073, 3F062, 3F051, 3F041, 3F030, 3F01F, 3F00E, 3EFFD, 3EFEC, 3EFDC, 3EFCB, 3EFBA, 3EFA9, 3EF98, 3EF87, 3EF76, 3EF64, 3EF53, 3EF42, 3EF31, 3EF20, 3EF0F, 3EEFD, 3EEEC, 3EEDB, 3EECA, 3EEB8, 3EEA7, 3EE96, 3EE84, 3EE73, 3EE62, 3EE50, 3EE3F, 3EE2D, 3EE1C, 3EE0A, 3EDF9, 3EDE7, 3EDD6, 3EDC4, 3EDB3, 3EDA1, 3ED90, 3ED7E, 3ED6C, 3ED5B, 3ED49, 3ED37, 3ED26, 3ED14, 3ED02, 3ECF1, 3ECDF, 3ECCD, 3ECBB, 3ECAA, 3EC98, 3EC86, 3EC74, 3EC62, 3EC51, 3EC3F, 3EC2D, 3EC1B, 3EC09, 3EBF7, 3EBE6, 3EBD4, 3EBC2, 3EBB0, 3EB9E, 3EB8C, 3EB7A, 3EB68, 3EB56, 3EB44, 3EB33, 3EB21, 3EB0F, 3EAFD, 3EAEB, 3EAD9, 3EAC7, 3EAB5, 3EAA3, 3EA91, 3EA7F, 3EA6D, 3EA5B, 3EA4A, 3EA38, 3EA26, 3EA14, 3EA02, 3E9F0, 3E9DE, 3E9CC, 3E9BA, 3E9A8, 3E996, 3E985, 3E973, 3E961, 3E94F, 3E93D, 3E92B, 3E919, 3E908, 3E8F6, 3E8E4, 3E8D2, 3E8C0, 3E8AF, 3E89D, 3E88B, 3E879, 3E868, 3E856, 3E844, 3E833, 3E821, 3E80F, 3E7FE, 3E7EC, 3E7DA, 3E7C9, 3E7B7, 3E7A6, 3E794, 3E783, 3E771, 3E760, 3E74E, 3E73D, 3E72B, 3E71A, 3E709, 3E6F7, 3E6E6, 3E6D5, 3E6C3, 3E6B2, 3E6A1, 3E690, 3E67F, 3E66D, 3E65C, 3E64B, 3E63A, 3E629, 3E618, 3E607, 3E5F6, 3E5E5, 3E5D4, 3E5C4, 3E5B3, 3E5A2, 3E591, 3E581, 3E570, 3E55F, 3E54F, 3E53E, 3E52E, 3E51D, 3E50D, 3E4FC, 3E4EC, 3E4DB, 3E4CB, 3E4BB, 3E4AB, 3E49A, 3E48A, 3E47A, 3E46A, 3E45A, 3E44A, 3E43A, 3E42A, 3E41B, 3E40B, 3E3FB, 3E3EB, 3E3DC, 3E3CC, 3E3BD, 3E3AD, 3E39E, 3E38E, 3E37F, 3E370, 3E361, 3E351, 3E342, 3E333, 3E324, 3E315, 3E306, 3E2F8, 3E2E9, 3E2DA, 3E2CB, 3E2BD, 3E2AE, 3E2A0, 3E291, 3E283, 3E275, 3E267, 3E258, 3E24A, 3E23C, 3E22E, 3E220, 3E213, 3E205, 3E1F7, 3E1EA, 3E1DC, 3E1CE, 3E1C1, 3E1B4, 3E1A6, 3E199, 3E18C, 3E17F, 3E172, 3E165, 3E158, 3E14C, 3E13F, 3E132, 3E126, 3E119, 3E10D, 3E101, 3E0F5, 3E0E8, 3E0DC, 3E0D0, 3E0C5, 3E0B9, 3E0AD, 3E0A1, 3E096, 3E08B, 3E07F, 3E074, 3E069, 3E05E, 3E053, 3E048, 3E03D, 3E032, 3E028, 3E01D, 3E013, 3E008, 3DFFE, 3DFF4, 3DFEA, 3DFE0, 3DFD6, 3DFCC, 3DFC2, 3DFB9, 3DFAF, 3DFA6, 3DF9D, 3DF94, 3DF8B, 3DF82, 3DF79, 3DF70, 3DF67, 3DF5F, 3DF56, 3DF4E, 3DF46, 3DF3E, 3DF36, 3DF2E, 3DF26, 3DF1F, 3DF17, 3DF10, 3DF08, 3DF01, 3DEFA, 3DEF3, 3DEEC, 3DEE6, 3DEDF, 3DED8, 3DED2, 3DECC, 3DEC6, 3DEC0, 3DEBA, 3DEB4, 3DEAE, 3DEA9, 3DEA4, 3DE9E, 3DE99, 3DE94, 3DE8F, 3DE8B, 3DE86, 3DE81, 3DE7D, 3DE79, 3DE75, 3DE71, 3DE6D, 3DE69, 3DE66, 3DE62, 3DE5F, 3DE5C, 3DE59, 3DE56, 3DE53, 3DE51, 3DE4E, 3DE4C, 3DE4A, 3DE48, 3DE46, 3DE44, 3DE43, 3DE41, 3DE40, 3DE3F, 3DE3E, 3DE3D, 3DE3C, 3DE3C, 3DE3B, 3DE3B, 3DE3B, 3DE3B, 3DE3B, 3DE3C, 3DE3C, 3DE3D, 3DE3E, 3DE3F, 3DE40, 3DE41, 3DE43, 3DE45, 3DE46, 3DE48, 3DE4A, 3DE4D, 3DE4F, 3DE52, 3DE55, 3DE58, 3DE5B, 3DE5E, 3DE61, 3DE65, 3DE69, 3DE6D, 3DE71, 3DE75, 3DE7A, 3DE7E, 3DE83, 3DE88, 3DE8D, 3DE93, 3DE98, 3DE9E, 3DEA4, 3DEAA, 3DEB0, 3DEB7, 3DEBD, 3DEC4, 3DECB, 3DED2, 3DEDA, 3DEE1, 3DEE9, 3DEF1, 3DEF9, 3DF01, 3DF0A, 3DF12, 3DF1B, 3DF24, 3DF2D, 3DF37, 3DF40, 3DF4A, 3DF54, 3DF5E, 3DF69, 3DF73, 3DF7E, 3DF89, 3DF94, 3DFA0, 3DFAB, 3DFB7, 3DFC3, 3DFCF, 3DFDB, 3DFE8, 3DFF5, 3E002, 3E00F, 3E01C, 3E02A, 3E038, 3E046, 3E054, 3E063, 3E071, 3E080, 3E08F, 3E09E, 3E0AE, 3E0BE, 3E0CE, 3E0DE, 3E0EE, 3E0FF, 3E10F, 3E120, 3E132, 3E143, 3E155, 3E167, 3E179, 3E18B, 3E19E, 3E1B0, 3E1C3, 3E1D7, 3E1EA, 3E1FE, 3E212, 3E226, 3E23A, 3E24F, 3E264, 3E279, 3E28E, 3E2A3, 3E2B9, 3E2CF, 3E2E5, 3E2FC, 3E312, 3E329, 3E340, 3E358, 3E36F, 3E387, 3E39F, 3E3B8, 3E3D0, 3E3E9, 3E402, 3E41B, 3E435, 3E44F, 3E469, 3E483, 3E49E, 3E4B8, 3E4D3, 3E4EF, 3E50A, 3E526, 3E542, 3E55E, 3E57A, 3E597, 3E5B4, 3E5D1, 3E5EF, 3E60D, 3E62B, 3E649, 3E667, 3E686, 3E6A5, 3E6C4, 3E6E4, 3E704, 3E724, 3E744, 3E765, 3E785, 3E7A7, 3E7C8, 3E7EA, 3E80B, 3E82D, 3E850, 3E873, 3E895, 3E8B9, 3E8DC, 3E900, 3E924, 3E948, 3E96D, 3E991, 3E9B6, 3E9DC, 3EA01, 3EA27, 3EA4D, 3EA74, 3EA9A, 3EAC1, 3EAE9, 3EB10, 3EB38, 3EB60, 3EB88, 3EBB1, 3EBDA, 3EC03, 3EC2C, 3EC56, 3EC80, 3ECAA, 3ECD5, 3ED00, 3ED2B, 3ED56, 3ED82, 3EDAE, 3EDDA, 3EE07, 3EE33, 3EE60, 3EE8E, 3EEBB, 3EEE9, 3EF18, 3EF46, 3EF75, 3EFA4, 3EFD3, 3F003, 3F033, 3F063, 3F094, 3F0C5, 3F0F6, 3F127, 3F159, 3F18B, 3F1BD, 3F1F0, 3F223, 3F256, 3F289, 3F2BD, 3F2F1, 3F326, 3F35A, 3F38F, 3F3C4, 3F3FA, 3F430, 3F466, 3F49C, 3F4D3, 3F50A, 3F541, 3F579, 3F5B1, 3F5E9, 3F622, 3F65B, 3F694, 3F6CD, 3F707, 3F741, 3F77B, 3F7B6, 3F7F1, 3F82C, 3F868, 3F8A4, 3F8E0, 3F91C, 3F959, 3F996, 3F9D4, 3FA11, 3FA50, 3FA8E, 3FACD, 3FB0B, 3FB4B, 3FB8A, 3FBCA, 3FC0A, 3FC4B, 3FC8C, 3FCCD, 3FD0E, 3FD50, 3FD92, 3FDD5, 3FE17, 3FE5A, 3FE9E, 3FEE1, 3FF25, 3FF6A, 3FFAE, 3FFF3;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_0e77235adf0aed1d',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '718f0736de99eb448b7aa063dcea301e',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_0e77235adf0aed1d',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 38, 7E, C4, 10A, 150, 197, 1DE, 226, 26D, 2B5, 2FE, 347, 390, 3D9, 423, 46D, 4B7, 502, 54C, 598, 5E3, 62F, 67B, 6C8, 715, 762, 7B0, 7FD, 84C, 89A, 8E9, 938, 987, 9D7, A27, A78, AC8, B1A, B6B, BBD, C0F, C61, CB4, D07, D5A, DAE, E02, E56, EAB, F00, F55, FAA, 1000, 1057, 10AD, 1104, 115B, 11B3, 120B, 1263, 12BC, 1314, 136E, 13C7, 1421, 147B, 14D6, 1530, 158C, 15E7, 1643, 169F, 16FB, 1758, 17B5, 1813, 1870, 18CF, 192D, 198C, 19EB, 1A4A, 1AAA, 1B0A, 1B6A, 1BCB, 1C2C, 1C8D, 1CEF, 1D51, 1DB3, 1E16, 1E79, 1EDC, 1F40, 1FA4, 2008, 206D, 20D2, 2137, 219D, 2203, 2269, 22CF, 2336, 239E, 2405, 246D, 24D5, 253E, 25A6, 2610, 2679, 26E3, 274D, 27B8, 2822, 288D, 28F9, 2965, 29D1, 2A3D, 2AAA, 2B17, 2B84, 2BF2, 2C60, 2CCE, 2D3D, 2DAC, 2E1B, 2E8B, 2EFB, 2F6B, 2FDC, 304D, 30BE, 3130, 31A1, 3214, 3286, 32F9, 336C, 33E0, 3453, 34C7, 353C, 35B1, 3626, 369B, 3711, 3787, 37FD, 3874, 38EB, 3962, 39D9, 3A51, 3ACA, 3B42, 3BBB, 3C34, 3CAE, 3D27, 3DA1, 3E1C, 3E97, 3F12, 3F8D, 4009, 4085, 4101, 417D, 41FA, 4277, 42F5, 4373, 43F1, 446F, 44EE, 456D, 45EC, 466C, 46EC, 476C, 47ED, 486E, 48EF, 4970, 49F2, 4A74, 4AF7, 4B79, 4BFC, 4C7F, 4D03, 4D87, 4E0B, 4E90, 4F14, 4F99, 501F, 50A4, 512A, 51B1, 5237, 52BE, 5345, 53CD, 5454, 54DC, 5565, 55ED, 5676, 56FF, 5789, 5813, 589D, 5927, 59B2, 5A3D, 5AC8, 5B53, 5BDF, 5C6B, 5CF7, 5D84, 5E11, 5E9E, 5F2B, 5FB9, 6047, 60D6, 6164, 61F3, 6282, 6312, 63A1, 6431, 64C1, 6552, 65E3, 6674, 6705, 6797, 6829, 68BB, 694D, 69E0, 6A73, 6B06, 6B9A, 6C2D, 6CC1, 6D56, 6DEA, 6E7F, 6F14, 6FA9, 703F, 70D5, 716B, 7201, 7298, 732F, 73C6, 745D, 74F5, 758D, 7625, 76BE, 7756, 77EF, 7888, 7922, 79BB, 7A55, 7AF0, 7B8A, 7C25, 7CC0, 7D5B, 7DF6, 7E92, 7F2E, 7FCA, 8066, 8103, 81A0, 823D, 82DA, 8377, 8415, 84B3, 8552, 85F0, 868F, 872E, 87CD, 886C, 890C, 89AC, 8A4C, 8AEC, 8B8D, 8C2D, 8CCE, 8D70, 8E11, 8EB3, 8F55, 8FF7, 9099, 913B, 91DE, 9281, 9324, 93C8, 946B, 950F, 95B3, 9657, 96FC, 97A0, 9845, 98EA, 998F, 9A35, 9ADA, 9B80, 9C26, 9CCD, 9D73, 9E1A, 9EC0, 9F67, A00F, A0B6, A15E, A205, A2AD, A356, A3FE, A4A7, A54F, A5F8, A6A1, A74B, A7F4, A89E, A947, A9F1, AA9C, AB46, ABF1, AC9B, AD46, ADF1, AE9C, AF48, AFF3, B09F, B14B, B1F7, B2A3, B34F, B3FC, B4A9, B556, B603, B6B0, B75D, B80B, B8B8, B966, BA14, BAC2, BB70, BC1F, BCCD, BD7C, BE2B, BEDA, BF89, C038, C0E7, C197, C246, C2F6, C3A6, C456, C506, C5B7, C667, C718, C7C9, C879, C92A, C9DB, CA8D, CB3E, CBEF, CCA1, CD53, CE05, CEB6, CF69, D01B, D0CD, D17F, D232, D2E4, D397, D44A, D4FD, D5B0, D663, D716, D7C9, D87D, D930, D9E4, DA98, DB4B, DBFF, DCB3, DD67, DE1B, DED0, DF84, E038, E0ED, E1A1, E256, E30B, E3C0, E475, E529, E5DF, E694, E749, E7FE, E8B3, E969, EA1E, EAD4, EB89, EC3F, ECF4, EDAA, EE60, EF16, EFCC, F082, F138, F1EE, F2A4, F35A, F410, F4C7, F57D, F633, F6EA, F7A0, F856, F90D, F9C3, FA7A, FB31, FBE7, FC9E, FD55, FE0B, FEC2, FF79, 10030, 100E6, 1019D, 10254, 1030B, 103C2, 10479, 10530, 105E7, 1069E, 10754, 1080B, 108C2, 10979, 10A30, 10AE7, 10B9E, 10C55, 10D0C, 10DC3, 10E7A, 10F31, 10FE8, 1109F, 11156, 1120D, 112C4, 1137A, 11431, 114E8, 1159F, 11656, 1170D, 117C3, 1187A, 11931, 119E7, 11A9E, 11B55, 11C0B, 11CC2, 11D78, 11E2F, 11EE5, 11F9C, 12052, 12108, 121BF, 12275, 1232B, 123E1, 12497, 1254D, 12603, 126B9, 1276F, 12825, 128DA, 12990, 12A46, 12AFB, 12BB1, 12C66, 12D1C, 12DD1, 12E86, 12F3B, 12FF0, 130A5, 1315A, 1320F, 132C4, 13379, 1342D, 134E2, 13596, 1364A, 136FF, 137B3, 13867, 1391B, 139CF, 13A83, 13B36, 13BEA, 13C9D, 13D51, 13E04, 13EB7, 13F6A, 1401D, 140D0, 14183, 14236, 142E8, 1439A, 1444D, 144FF, 145B1, 14663, 14715, 147C6, 14878, 14929, 149DB, 14A8C, 14B3D, 14BEE, 14C9F, 14D4F, 14E00, 14EB0, 14F60, 15010, 150C0, 15170, 15220, 152CF, 1537F, 1542E, 154DD, 1558C, 1563B, 156E9, 15798, 15846, 158F4, 159A2, 15A50, 15AFD, 15BAB, 15C58, 15D05, 15DB2, 15E5F, 15F0B, 15FB8, 16064, 16110, 161BC, 16268, 16313, 163BE, 1646A, 16514, 165BF, 1666A, 16714, 167BE, 16868, 16912, 169BC, 16A65, 16B0E, 16BB7, 16C60, 16D09, 16DB1, 16E59, 16F01, 16FA9, 17050, 170F8, 1719F, 17246, 172EC, 17393, 17439, 174DF, 17585, 1762A, 176D0, 17775, 17819, 178BE, 17962, 17A07, 17AAB, 17B4E, 17BF2, 17C95, 17D38, 17DDB, 17E7D, 17F1F, 17FC1, 18063, 18104, 181A6, 18247, 182E7, 18388, 18428, 184C8, 18568, 18607, 186A6, 18745, 187E4, 18882, 18920, 189BE, 18A5C, 18AF9, 18B96, 18C33, 18CCF, 18D6B, 18E07, 18EA3, 18F3E, 18FD9, 19074, 1910E, 191A8, 19242, 192DC, 19375, 1940E, 194A7, 1953F, 195D7, 1966F, 19707, 1979E, 19835, 198CC, 19962, 199F8, 19A8E, 19B23, 19BB8, 19C4D, 19CE1, 19D75, 19E09, 19E9D, 19F30, 19FC3, 1A055, 1A0E7, 1A179, 1A20B, 1A29C, 1A32D, 1A3BD, 1A44E, 1A4DE, 1A56D, 1A5FC, 1A68B, 1A71A, 1A7A8, 1A836, 1A8C3, 1A950, 1A9DD, 1AA6A, 1AAF6, 1AB82, 1AC0D, 1AC98, 1AD23, 1ADAD, 1AE37, 1AEC1, 1AF4A, 1AFD3, 1B05C, 1B0E4, 1B16C, 1B1F4, 1B27B, 1B302, 1B388, 1B40E, 1B494, 1B519, 1B59E, 1B623, 1B6A7, 1B72A, 1B7AE, 1B831, 1B8B4, 1B936, 1B9B8, 1BA39, 1BABB, 1BB3B, 1BBBC, 1BC3C, 1BCBB, 1BD3A, 1BDB9, 1BE38, 1BEB6, 1BF33, 1BFB1, 1C02D, 1C0AA, 1C126, 1C1A1, 1C21D, 1C298, 1C312, 1C38C, 1C406, 1C47F, 1C4F8, 1C570, 1C5E8, 1C660, 1C6D7, 1C74D, 1C7C4, 1C83A, 1C8AF, 1C924, 1C999, 1CA0D, 1CA81, 1CAF4, 1CB67, 1CBDA, 1CC4C, 1CCBD, 1CD2F, 1CDA0, 1CE10, 1CE80, 1CEEF, 1CF5F, 1CFCD, 1D03B, 1D0A9, 1D117, 1D183, 1D1F0, 1D25C, 1D2C7, 1D333, 1D39D, 1D408, 1D471, 1D4DB, 1D544, 1D5AC, 1D614, 1D67C, 1D6E3, 1D749, 1D7B0, 1D815, 1D87B, 1D8DF, 1D944, 1D9A8, 1DA0B, 1DA6E, 1DAD1, 1DB33, 1DB94, 1DBF6, 1DC56, 1DCB6, 1DD16, 1DD76, 1DDD4, 1DE33, 1DE91, 1DEEE, 1DF4B, 1DFA7, 1E003, 1E05F, 1E0BA, 1E114, 1E16E, 1E1C8, 1E221, 1E27A, 1E2D2, 1E32A, 1E381, 1E3D8, 1E42E, 1E483, 1E4D9, 1E52E, 1E582, 1E5D6, 1E629, 1E67C, 1E6CE, 1E720, 1E771, 1E7C2, 1E812, 1E862, 1E8B2, 1E900, 1E94F, 1E99D, 1E9EA, 1EA37, 1EA83, 1EACF, 1EB1B, 1EB65, 1EBB0, 1EBFA, 1EC43, 1EC8C, 1ECD4, 1ED1C, 1ED63, 1EDAA, 1EDF1, 1EE36, 1EE7C, 1EEC0, 1EF05, 1EF49, 1EF8C, 1EFCF, 1F011, 1F052, 1F094, 1F0D4, 1F115, 1F154, 1F193, 1F1D2, 1F210, 1F24E, 1F28B, 1F2C7, 1F303, 1F33F, 1F37A, 1F3B4, 1F3EE, 1F428, 1F460, 1F499, 1F4D1, 1F508, 1F53F, 1F575, 1F5AB, 1F5E0, 1F615, 1F649, 1F67C, 1F6AF, 1F6E2, 1F714, 1F746, 1F777, 1F7A7, 1F7D7, 1F806, 1F835, 1F863, 1F891, 1F8BE, 1F8EB, 1F917, 1F943, 1F96E, 1F998, 1F9C3, 1F9EC, 1FA15, 1FA3D, 1FA65, 1FA8D, 1FAB3, 1FADA, 1FAFF, 1FB24, 1FB49, 1FB6D, 1FB91, 1FBB4, 1FBD6, 1FBF8, 1FC19, 1FC3A, 1FC5A, 1FC7A, 1FC99, 1FCB8, 1FCD6, 1FCF4, 1FD11, 1FD2D, 1FD49, 1FD64, 1FD7F, 1FD9A, 1FDB3, 1FDCC, 1FDE5, 1FDFD, 1FE15, 1FE2C, 1FE42, 1FE58, 1FE6D, 1FE82, 1FE96, 1FEAA, 1FEBD, 1FED0, 1FEE2, 1FEF3, 1FF04, 1FF15, 1FF25, 1FF34, 1FF43, 1FF51, 1FF5E, 1FF6B, 1FF78, 1FF84, 1FF8F, 1FF9A, 1FFA5, 1FFAE, 1FFB8, 1FFC0, 1FFC8, 1FFD0, 1FFD7, 1FFDD, 1FFE3, 1FFE9, 1FFED, 1FFF2, 1FFF5, 1FFF9, 1FFFB, 1FFFD, 1FFFF, 1FFFF, 1FFFF;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_46c2172210d730b3',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '4053f705a843927fcf687f1703d551f5',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_46c2172210d730b3',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 1FFFF, 1FFFF, 1FFFE, 1FFFC, 1FFFA, 1FFF7, 1FFF3, 1FFEF, 1FFEA, 1FFE5, 1FFE0, 1FFD9, 1FFD3, 1FFCB, 1FFC3, 1FFBB, 1FFB2, 1FFA8, 1FF9E, 1FF93, 1FF88, 1FF7C, 1FF70, 1FF63, 1FF56, 1FF48, 1FF39, 1FF2A, 1FF1A, 1FF0A, 1FEF9, 1FEE8, 1FED6, 1FEC4, 1FEB1, 1FE9E, 1FE89, 1FE75, 1FE60, 1FE4A, 1FE34, 1FE1D, 1FE06, 1FDEE, 1FDD5, 1FDBC, 1FDA3, 1FD89, 1FD6E, 1FD53, 1FD37, 1FD1B, 1FCFE, 1FCE1, 1FCC3, 1FCA4, 1FC85, 1FC66, 1FC46, 1FC25, 1FC04, 1FBE2, 1FBC0, 1FB9D, 1FB7A, 1FB56, 1FB32, 1FB0D, 1FAE7, 1FAC1, 1FA9A, 1FA73, 1FA4C, 1FA23, 1F9FB, 1F9D1, 1F9A8, 1F97D, 1F952, 1F927, 1F8FB, 1F8CE, 1F8A1, 1F874, 1F846, 1F817, 1F7E8, 1F7B8, 1F788, 1F757, 1F726, 1F6F4, 1F6C2, 1F68F, 1F65B, 1F627, 1F5F3, 1F5BE, 1F588, 1F552, 1F51C, 1F4E5, 1F4AD, 1F475, 1F43C, 1F403, 1F3C9, 1F38F, 1F354, 1F319, 1F2DD, 1F2A0, 1F264, 1F226, 1F1E8, 1F1AA, 1F16B, 1F12B, 1F0EB, 1F0AB, 1F06A, 1F028, 1EFE6, 1EFA4, 1EF61, 1EF1D, 1EED9, 1EE94, 1EE4F, 1EE0A, 1EDC4, 1ED7D, 1ED36, 1ECEE, 1ECA6, 1EC5D, 1EC14, 1EBCA, 1EB80, 1EB35, 1EAEA, 1EA9F, 1EA52, 1EA06, 1E9B9, 1E96B, 1E91D, 1E8CE, 1E87F, 1E82F, 1E7DF, 1E78E, 1E73D, 1E6EB, 1E699, 1E647, 1E5F4, 1E5A0, 1E54C, 1E4F7, 1E4A2, 1E44D, 1E3F7, 1E3A0, 1E349, 1E2F1, 1E29A, 1E241, 1E1E8, 1E18F, 1E135, 1E0DA, 1E080, 1E024, 1DFC8, 1DF6C, 1DF0F, 1DEB2, 1DE54, 1DDF6, 1DD98, 1DD39, 1DCD9, 1DC79, 1DC18, 1DBB7, 1DB56, 1DAF4, 1DA92, 1DA2F, 1D9CC, 1D968, 1D904, 1D89F, 1D83A, 1D7D4, 1D76E, 1D708, 1D6A1, 1D639, 1D5D2, 1D569, 1D500, 1D497, 1D42E, 1D3C4, 1D359, 1D2EE, 1D283, 1D217, 1D1AA, 1D13E, 1D0D0, 1D063, 1CFF5, 1CF86, 1CF17, 1CEA8, 1CE38, 1CDC8, 1CD57, 1CCE6, 1CC75, 1CC03, 1CB90, 1CB1E, 1CAAA, 1CA37, 1C9C3, 1C94E, 1C8D9, 1C864, 1C7EE, 1C778, 1C701, 1C68A, 1C613, 1C59B, 1C523, 1C4AA, 1C431, 1C3B8, 1C33E, 1C2C4, 1C249, 1C1CE, 1C152, 1C0D6, 1C05A, 1BFDD, 1BF60, 1BEE3, 1BE65, 1BDE7, 1BD68, 1BCE9, 1BC6A, 1BBEA, 1BB69, 1BAE9, 1BA68, 1B9E6, 1B965, 1B8E3, 1B860, 1B7DD, 1B75A, 1B6D6, 1B652, 1B5CE, 1B549, 1B4C4, 1B43E, 1B3B8, 1B332, 1B2AB, 1B224, 1B19D, 1B115, 1B08D, 1B005, 1AF7C, 1AEF3, 1AE69, 1ADDF, 1AD55, 1ACCA, 1AC3F, 1ABB4, 1AB28, 1AA9C, 1AA10, 1A983, 1A8F6, 1A869, 1A7DB, 1A74D, 1A6BE, 1A630, 1A5A1, 1A511, 1A481, 1A3F1, 1A361, 1A2D0, 1A23F, 1A1AE, 1A11C, 1A08A, 19FF7, 19F65, 19ED2, 19E3E, 19DAA, 19D16, 19C82, 19BEE, 19B59, 19AC3, 19A2E, 19998, 19902, 1986B, 197D4, 1973D, 196A6, 1960E, 19576, 194DE, 19445, 193AC, 19313, 1927A, 191E0, 19146, 190AB, 19011, 18F76, 18EDB, 18E3F, 18DA3, 18D07, 18C6B, 18BCE, 18B31, 18A94, 189F7, 18959, 188BB, 1881D, 1877E, 186DF, 18640, 185A1, 18501, 18462, 183C1, 18321, 18280, 181E0, 1813E, 1809D, 17FFB, 17F5A, 17EB7, 17E15, 17D72, 17CD0, 17C2C, 17B89, 17AE5, 17A42, 1799E, 178F9, 17855, 177B0, 1770B, 17666, 175C0, 1751B, 17475, 173CF, 17328, 17282, 171DB, 17134, 1708D, 16FE5, 16F3D, 16E96, 16DEE, 16D45, 16C9D, 16BF4, 16B4B, 16AA2, 169F9, 1694F, 168A5, 167FC, 16751, 166A7, 165FD, 16552, 164A7, 163FC, 16351, 162A5, 161FA, 1614E, 160A2, 15FF6, 15F49, 15E9D, 15DF0, 15D43, 15C96, 15BE9, 15B3C, 15A8E, 159E0, 15933, 15885, 157D6, 15728, 15679, 155CB, 1551C, 1546D, 153BE, 1530E, 1525F, 151AF, 15100, 15050, 14FA0, 14EF0, 14E3F, 14D8F, 14CDE, 14C2E, 14B7D, 14ACC, 14A1B, 14969, 148B8, 14806, 14755, 146A3, 145F1, 1453F, 1448D, 143DB, 14328, 14276, 141C3, 14111, 1405E, 13FAB, 13EF8, 13E45, 13D91, 13CDE, 13C2B, 13B77, 13AC3, 13A10, 1395C, 138A8, 137F4, 13740, 1368B, 135D7, 13523, 1346E, 133BA, 13305, 13250, 1319B, 130E7, 13032, 12F7D, 12EC7, 12E12, 12D5D, 12CA8, 12BF2, 12B3D, 12A87, 129D2, 1291C, 12866, 127B0, 126FB, 12645, 1258F, 124D9, 12423, 1236D, 122B6, 12200, 1214A, 12094, 11FDD, 11F27, 11E71, 11DBA, 11D04, 11C4D, 11B97, 11AE0, 11A29, 11973, 118BC, 11805, 1174E, 11698, 115E1, 1152A, 11473, 113BC, 11306, 1124F, 11198, 110E1, 1102A, 10F73, 10EBC, 10E05, 10D4E, 10C97, 10BE0, 10B29, 10A72, 109BB, 10904, 1084D, 10797, 106E0, 10629, 10572, 104BB, 10404, 1034D, 10296, 101DF, 10128, 10072, FFBB, FF04, FE4D, FD97, FCE0, FC29, FB73, FABC, FA05, F94F, F898, F7E2, F72B, F675, F5BF, F508, F452, F39C, F2E6, F230, F17A, F0C4, F00E, EF58, EEA2, EDEC, ED36, EC80, EBCB, EB15, EA60, E9AA, E8F5, E840, E78A, E6D5, E620, E56B, E4B6, E401, E34C, E297, E1E3, E12E, E07A, DFC5, DF11, DE5D, DDA8, DCF4, DC40, DB8C, DAD9, DA25, D971, D8BE, D80A, D757, D6A4, D5F1, D53E, D48B, D3D8, D325, D272, D1C0, D10D, D05B, CFA9, CEF7, CE45, CD93, CCE1, CC30, CB7E, CACD, CA1C, C96A, C8B9, C809, C758, C6A7, C5F7, C546, C496, C3E6, C336, C286, C1D6, C127, C077, BFC8, BF19, BE6A, BDBB, BD0C, BC5E, BBAF, BB01, BA53, B9A5, B8F7, B849, B79C, B6EF, B641, B594, B4E7, B43B, B38E, B2E2, B235, B189, B0DD, B031, AF86, AEDA, AE2F, AD84, ACD9, AC2E, AB84, AAD9, AA2F, A985, A8DB, A831, A788, A6DF, A635, A58C, A4E4, A43B, A393, A2EA, A242, A19B, A0F3, A04B, 9FA4, 9EFD, 9E56, 9DAF, 9D09, 9C63, 9BBC, 9B17, 9A71, 99CB, 9926, 9881, 97DC, 9737, 9693, 95EF, 954B, 94A7, 9403, 9360, 92BC, 9219, 9176, 90D4, 9032, 8F8F, 8EED, 8E4C, 8DAA, 8D09, 8C68, 8BC7, 8B26, 8A86, 89E6, 8946, 88A6, 8807, 8767, 86C8, 862A, 858B, 84ED, 844F, 83B1, 8313, 8276, 81D9, 813C, 809F, 8003, 7F66, 7ECA, 7E2F, 7D93, 7CF8, 7C5D, 7BC2, 7B28, 7A8D, 79F3, 795A, 78C0, 7827, 778E, 76F5, 765D, 75C4, 752C, 7495, 73FD, 7366, 72CF, 7238, 71A2, 710B, 7075, 6FE0, 6F4A, 6EB5, 6E20, 6D8C, 6CF7, 6C63, 6BCF, 6B3C, 6AA8, 6A15, 6983, 68F0, 685E, 67CC, 673A, 66A9, 6618, 6587, 64F6, 6466, 63D6, 6346, 62B6, 6227, 6198, 610A, 607B, 5FED, 5F5F, 5ED2, 5E44, 5DB7, 5D2B, 5C9E, 5C12, 5B86, 5AFB, 5A6F, 59E4, 595A, 58CF, 5845, 57BB, 5732, 56A8, 561F, 5597, 550E, 5486, 53FE, 5377, 52EF, 5268, 51E2, 515B, 50D5, 5050, 4FCA, 4F45, 4EC0, 4E3C, 4DB7, 4D33, 4CB0, 4C2C, 4BA9, 4B26, 4AA4, 4A22, 49A0, 491E, 489D, 481C, 479B, 471B, 469B, 461B, 459C, 451C, 449E, 441F, 43A1, 4323, 42A5, 4228, 41AB, 412E, 40B2, 4036, 3FBA, 3F3F, 3EC4, 3E49, 3DCE, 3D54, 3CDA, 3C61, 3BE7, 3B6E, 3AF6, 3A7D, 3A05, 398E, 3916, 389F, 3829, 37B2, 373C, 36C6, 3651, 35DC, 3567, 34F2, 347E, 340A, 3396, 3323, 32B0, 323E, 31CB, 3159, 30E8, 3076, 3005, 2F95, 2F24, 2EB4, 2E44, 2DD5, 2D66, 2CF7, 2C89, 2C1A, 2BAD, 2B3F, 2AD2, 2A65, 29F9, 298C, 2921, 28B5, 284A, 27DF, 2774, 270A, 26A0, 2636, 25CD, 2564, 24FC, 2493, 242B, 23C4, 235C, 22F5, 228F, 2228, 21C2, 215D, 20F7, 2092, 202D, 1FC9, 1F65, 1F01, 1E9E, 1E3B, 1DD8, 1D75, 1D13, 1CB1, 1C50, 1BEF, 1B8E, 1B2E, 1ACD, 1A6E, 1A0E, 19AF, 1950, 18F1, 1893, 1835, 17D8, 177B, 171E, 16C1, 1665, 1609, 15AD, 1552, 14F7, 149D, 1442, 13E8, 138F, 1335, 12DC, 1284, 122B, 11D3, 117C, 1124, 10CD, 1077, 1020, FCA, F75, F1F, ECA, E75, E21, DCD, D79, D26, CD3, C80, C2D, BDB, B89, B38, AE7, A96, A45, 9F5, 9A5, 956, 906, 8B7, 869, 81B, 7CD, 77F, 732, 6E5, 698, 64C, 600, 5B4, 569, 51E, 4D3, 488, 43E, 3F4, 3AB, 362, 319, 2D1, 288, 240, 1F9, 1B2, 16B, 124, DE, 98, 52, D;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_e9f07b7b2f08b8e0',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '33d0a00bc0022edb790906662a8dd33f',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_e9f07b7b2f08b8e0',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFC8, 3FF83, 3FF3F, 3FEFB, 3FEB7, 3FE74, 3FE30, 3FDEE, 3FDAB, 3FD69, 3FD27, 3FCE6, 3FCA4, 3FC63, 3FC23, 3FBE2, 3FBA2, 3FB63, 3FB23, 3FAE4, 3FAA5, 3FA67, 3FA29, 3F9EB, 3F9AD, 3F970, 3F933, 3F8F7, 3F8BA, 3F87E, 3F843, 3F807, 3F7CC, 3F792, 3F757, 3F71D, 3F6E3, 3F6A9, 3F670, 3F637, 3F5FF, 3F5C6, 3F58E, 3F556, 3F51F, 3F4E8, 3F4B1, 3F47B, 3F444, 3F40E, 3F3D9, 3F3A3, 3F36E, 3F33A, 3F305, 3F2D1, 3F29D, 3F269, 3F236, 3F203, 3F1D1, 3F19E, 3F16C, 3F13A, 3F109, 3F0D7, 3F0A7, 3F076, 3F046, 3F015, 3EFE6, 3EFB6, 3EF87, 3EF58, 3EF29, 3EEFB, 3EECD, 3EE9F, 3EE72, 3EE45, 3EE18, 3EDEB, 3EDBF, 3ED93, 3ED67, 3ED3B, 3ED10, 3ECE5, 3ECBB, 3EC90, 3EC66, 3EC3C, 3EC13, 3EBEA, 3EBC1, 3EB98, 3EB70, 3EB47, 3EB1F, 3EAF8, 3EAD1, 3EAAA, 3EA83, 3EA5C, 3EA36, 3EA10, 3E9EA, 3E9C5, 3E9A0, 3E97B, 3E956, 3E932, 3E90E, 3E8EA, 3E8C6, 3E8A3, 3E880, 3E85D, 3E83B, 3E819, 3E7F7, 3E7D5, 3E7B4, 3E792, 3E772, 3E751, 3E730, 3E710, 3E6F0, 3E6D1, 3E6B1, 3E692, 3E674, 3E655, 3E637, 3E619, 3E5FB, 3E5DD, 3E5C0, 3E5A3, 3E586, 3E569, 3E54D, 3E531, 3E515, 3E4F9, 3E4DE, 3E4C3, 3E4A8, 3E48E, 3E473, 3E459, 3E43F, 3E426, 3E40C, 3E3F3, 3E3DA, 3E3C2, 3E3A9, 3E391, 3E379, 3E361, 3E34A, 3E333, 3E31C, 3E305, 3E2EE, 3E2D8, 3E2C2, 3E2AC, 3E297, 3E281, 3E26C, 3E257, 3E243, 3E22E, 3E21A, 3E206, 3E1F2, 3E1DF, 3E1CB, 3E1B8, 3E1A6, 3E193, 3E180, 3E16E, 3E15C, 3E14B, 3E139, 3E128, 3E117, 3E106, 3E0F5, 3E0E5, 3E0D4, 3E0C4, 3E0B5, 3E0A5, 3E096, 3E087, 3E078, 3E069, 3E05A, 3E04C, 3E03E, 3E030, 3E022, 3E015, 3E008, 3DFFB, 3DFEE, 3DFE1, 3DFD5, 3DFC8, 3DFBC, 3DFB0, 3DFA5, 3DF99, 3DF8E, 3DF83, 3DF78, 3DF6E, 3DF63, 3DF59, 3DF4F, 3DF45, 3DF3B, 3DF32, 3DF28, 3DF1F, 3DF16, 3DF0E, 3DF05, 3DEFD, 3DEF5, 3DEED, 3DEE5, 3DEDD, 3DED6, 3DECF, 3DEC8, 3DEC1, 3DEBA, 3DEB4, 3DEAD, 3DEA7, 3DEA1, 3DE9B, 3DE96, 3DE90, 3DE8B, 3DE86, 3DE81, 3DE7C, 3DE78, 3DE74, 3DE6F, 3DE6B, 3DE67, 3DE64, 3DE60, 3DE5D, 3DE5A, 3DE57, 3DE54, 3DE51, 3DE4F, 3DE4C, 3DE4A, 3DE48, 3DE46, 3DE44, 3DE43, 3DE42, 3DE40, 3DE3F, 3DE3E, 3DE3E, 3DE3D, 3DE3D, 3DE3C, 3DE3C, 3DE3C, 3DE3C, 3DE3D, 3DE3D, 3DE3E, 3DE3F, 3DE40, 3DE41, 3DE42, 3DE43, 3DE45, 3DE46, 3DE48, 3DE4A, 3DE4C, 3DE4F, 3DE51, 3DE53, 3DE56, 3DE59, 3DE5C, 3DE5F, 3DE62, 3DE66, 3DE69, 3DE6D, 3DE70, 3DE74, 3DE78, 3DE7D, 3DE81, 3DE85, 3DE8A, 3DE8F, 3DE93, 3DE98, 3DE9D, 3DEA3, 3DEA8, 3DEAD, 3DEB3, 3DEB9, 3DEBF, 3DEC4, 3DECB, 3DED1, 3DED7, 3DEDE, 3DEE4, 3DEEB, 3DEF2, 3DEF8, 3DF00, 3DF07, 3DF0E, 3DF15, 3DF1D, 3DF24, 3DF2C, 3DF34, 3DF3C, 3DF44, 3DF4C, 3DF54, 3DF5D, 3DF65, 3DF6E, 3DF77, 3DF7F, 3DF88, 3DF91, 3DF9A, 3DFA4, 3DFAD, 3DFB6, 3DFC0, 3DFCA, 3DFD3, 3DFDD, 3DFE7, 3DFF1, 3DFFB, 3E005, 3E010, 3E01A, 3E025, 3E02F, 3E03A, 3E045, 3E050, 3E05B, 3E066, 3E071, 3E07C, 3E087, 3E093, 3E09E, 3E0AA, 3E0B5, 3E0C1, 3E0CD, 3E0D9, 3E0E5, 3E0F1, 3E0FD, 3E109, 3E116, 3E122, 3E12F, 3E13B, 3E148, 3E155, 3E161, 3E16E, 3E17B, 3E188, 3E195, 3E1A3, 3E1B0, 3E1BD, 3E1CA, 3E1D8, 3E1E5, 3E1F3, 3E201, 3E20E, 3E21C, 3E22A, 3E238, 3E246, 3E254, 3E262, 3E270, 3E27F, 3E28D, 3E29B, 3E2AA, 3E2B8, 3E2C7, 3E2D6, 3E2E4, 3E2F3, 3E302, 3E311, 3E320, 3E32F, 3E33E, 3E34D, 3E35C, 3E36B, 3E37A, 3E38A, 3E399, 3E3A8, 3E3B8, 3E3C7, 3E3D7, 3E3E7, 3E3F6, 3E406, 3E416, 3E426, 3E435, 3E445, 3E455, 3E465, 3E475, 3E485, 3E495, 3E4A6, 3E4B6, 3E4C6, 3E4D6, 3E4E7, 3E4F7, 3E507, 3E518, 3E528, 3E539, 3E549, 3E55A, 3E56B, 3E57B, 3E58C, 3E59D, 3E5AD, 3E5BE, 3E5CF, 3E5E0, 3E5F1, 3E602, 3E613, 3E624, 3E635, 3E646, 3E657, 3E668, 3E679, 3E68A, 3E69B, 3E6AD, 3E6BE, 3E6CF, 3E6E0, 3E6F2, 3E703, 3E714, 3E726, 3E737, 3E749, 3E75A, 3E76B, 3E77D, 3E78E, 3E7A0, 3E7B2, 3E7C3, 3E7D5, 3E7E6, 3E7F8, 3E809, 3E81B, 3E82D, 3E83E, 3E850, 3E862, 3E874, 3E885, 3E897, 3E8A9, 3E8BB, 3E8CC, 3E8DE, 3E8F0, 3E902, 3E914, 3E925, 3E937, 3E949, 3E95B, 3E96D, 3E97F, 3E991, 3E9A2, 3E9B4, 3E9C6, 3E9D8, 3E9EA, 3E9FC, 3EA0E, 3EA20, 3EA32, 3EA44, 3EA56, 3EA67, 3EA79, 3EA8B, 3EA9D, 3EAAF, 3EAC1, 3EAD3, 3EAE5, 3EAF7, 3EB09, 3EB1B, 3EB2D, 3EB3F, 3EB50, 3EB62, 3EB74, 3EB86, 3EB98, 3EBAA, 3EBBC, 3EBCE, 3EBE0, 3EBF1, 3EC03, 3EC15, 3EC27, 3EC39, 3EC4B, 3EC5C, 3EC6E, 3EC80, 3EC92, 3ECA4, 3ECB5, 3ECC7, 3ECD9, 3ECEB, 3ECFC, 3ED0E, 3ED20, 3ED31, 3ED43, 3ED55, 3ED66, 3ED78, 3ED8A, 3ED9B, 3EDAD, 3EDBE, 3EDD0, 3EDE1, 3EDF3, 3EE05, 3EE16, 3EE27, 3EE39, 3EE4A, 3EE5C, 3EE6D, 3EE7F, 3EE90, 3EEA1, 3EEB3, 3EEC4, 3EED5, 3EEE6, 3EEF8, 3EF09, 3EF1A, 3EF2B, 3EF3C, 3EF4E, 3EF5F, 3EF70, 3EF81, 3EF92, 3EFA3, 3EFB4, 3EFC5, 3EFD6, 3EFE7, 3EFF8, 3F009, 3F019, 3F02A, 3F03B, 3F04C, 3F05D, 3F06D, 3F07E, 3F08F, 3F09F, 3F0B0, 3F0C1, 3F0D1, 3F0E2, 3F0F2, 3F103, 3F113, 3F124, 3F134, 3F144, 3F155, 3F165, 3F175, 3F185, 3F196, 3F1A6, 3F1B6, 3F1C6, 3F1D6, 3F1E6, 3F1F6, 3F206, 3F216, 3F226, 3F236, 3F246, 3F256, 3F266, 3F276, 3F285, 3F295, 3F2A5, 3F2B4, 3F2C4, 3F2D4, 3F2E3, 3F2F3, 3F302, 3F312, 3F321, 3F330, 3F340, 3F34F, 3F35E, 3F36E, 3F37D, 3F38C, 3F39B, 3F3AA, 3F3B9, 3F3C8, 3F3D7, 3F3E6, 3F3F5, 3F404, 3F413, 3F422, 3F431, 3F43F, 3F44E, 3F45D, 3F46B, 3F47A, 3F489, 3F497, 3F4A6, 3F4B4, 3F4C3, 3F4D1, 3F4DF, 3F4EE, 3F4FC, 3F50A, 3F518, 3F526, 3F535, 3F543, 3F551, 3F55F, 3F56D, 3F57B, 3F589, 3F596, 3F5A4, 3F5B2, 3F5C0, 3F5CD, 3F5DB, 3F5E9, 3F5F6, 3F604, 3F611, 3F61F, 3F62C, 3F63A, 3F647, 3F654, 3F662, 3F66F, 3F67C, 3F689, 3F696, 3F6A3, 3F6B0, 3F6BD, 3F6CA, 3F6D7, 3F6E4, 3F6F1, 3F6FE, 3F70A, 3F717, 3F724, 3F730, 3F73D, 3F74A, 3F756, 3F763, 3F76F, 3F77B, 3F788, 3F794, 3F7A0, 3F7AD, 3F7B9, 3F7C5, 3F7D1, 3F7DD, 3F7E9, 3F7F5, 3F801, 3F80D, 3F819, 3F825, 3F831, 3F83C, 3F848, 3F854, 3F860, 3F86B, 3F877, 3F882, 3F88E, 3F899, 3F8A5, 3F8B0, 3F8BB, 3F8C7, 3F8D2, 3F8DD, 3F8E8, 3F8F3, 3F8FE, 3F90A, 3F915, 3F920, 3F92A, 3F935, 3F940, 3F94B, 3F956, 3F961, 3F96B, 3F976, 3F981, 3F98B, 3F996, 3F9A0, 3F9AB, 3F9B5, 3F9C0, 3F9CA, 3F9D4, 3F9DF, 3F9E9, 3F9F3, 3F9FD, 3FA07, 3FA11, 3FA1C, 3FA26, 3FA30, 3FA3A, 3FA43, 3FA4D, 3FA57, 3FA61, 3FA6B, 3FA74, 3FA7E, 3FA88, 3FA91, 3FA9B, 3FAA5, 3FAAE, 3FAB8, 3FAC1, 3FACA, 3FAD4, 3FADD, 3FAE6, 3FAF0, 3FAF9, 3FB02, 3FB0B, 3FB14, 3FB1D, 3FB26, 3FB2F, 3FB38, 3FB41, 3FB4A, 3FB53, 3FB5C, 3FB65, 3FB6E, 3FB76, 3FB7F, 3FB88, 3FB90, 3FB99, 3FBA2, 3FBAA, 3FBB3, 3FBBB, 3FBC4, 3FBCC, 3FBD4, 3FBDD, 3FBE5, 3FBED, 3FBF5, 3FBFE, 3FC06, 3FC0E, 3FC16, 3FC1E, 3FC26, 3FC2E, 3FC36, 3FC3E, 3FC46, 3FC4E, 3FC56, 3FC5E, 3FC66, 3FC6D, 3FC75, 3FC7D, 3FC85, 3FC8C, 3FC94, 3FC9C, 3FCA3, 3FCAB, 3FCB2, 3FCBA, 3FCC1, 3FCC9, 3FCD0, 3FCD7, 3FCDF, 3FCE6, 3FCED, 3FCF5, 3FCFC, 3FD03, 3FD0A, 3FD11, 3FD19, 3FD20, 3FD27, 3FD2E, 3FD35, 3FD3C, 3FD43, 3FD4A, 3FD51, 3FD58, 3FD5E, 3FD65, 3FD6C, 3FD73, 3FD7A, 3FD80, 3FD87, 3FD8E, 3FD95, 3FD9B, 3FDA2, 3FDA8, 3FDAF, 3FDB6, 3FDBC, 3FDC3, 3FDC9, 3FDD0, 3FDD6, 3FDDD, 3FDE3, 3FDE9, 3FDF0, 3FDF6, 3FDFC, 3FE03, 3FE09, 3FE0F, 3FE15, 3FE1C, 3FE22, 3FE28, 3FE2E, 3FE34, 3FE3A, 3FE41, 3FE47, 3FE4D, 3FE53, 3FE59, 3FE5F, 3FE65, 3FE6B, 3FE71, 3FE77, 3FE7D, 3FE82, 3FE88, 3FE8E, 3FE94, 3FE9A, 3FEA0, 3FEA6, 3FEAB, 3FEB1, 3FEB7, 3FEBD, 3FEC2, 3FEC8, 3FECE, 3FED3, 3FED9, 3FEDF, 3FEE4, 3FEEA, 3FEF0, 3FEF5, 3FEFB, 3FF00, 3FF06, 3FF0B, 3FF11, 3FF16, 3FF1C, 3FF21, 3FF27, 3FF2C, 3FF32, 3FF37, 3FF3D, 3FF42, 3FF48, 3FF4D, 3FF52, 3FF58, 3FF5D, 3FF62, 3FF68, 3FF6D, 3FF72, 3FF78, 3FF7D, 3FF82, 3FF88, 3FF8D, 3FF92, 3FF97, 3FF9D, 3FFA2, 3FFA7, 3FFAC, 3FFB2, 3FFB7, 3FFBC, 3FFC1, 3FFC6, 3FFCC, 3FFD1, 3FFD6, 3FFDB, 3FFE0, 3FFE5, 3FFEB, 3FFF0, 3FFF5, 3FFFA, 3FFFF;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_8ff2e75b8b509fd9',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '0b726b2a1b372d2dc3902ec923924672',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_8ff2e75b8b509fd9',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFFC, 3FFF6, 3FFF1, 3FFEC, 3FFE7, 3FFE2, 3FFDD, 3FFD8, 3FFD2, 3FFCD, 3FFC8, 3FFC3, 3FFBE, 3FFB8, 3FFB3, 3FFAE, 3FFA9, 3FFA4, 3FF9E, 3FF99, 3FF94, 3FF8F, 3FF89, 3FF84, 3FF7F, 3FF79, 3FF74, 3FF6F, 3FF69, 3FF64, 3FF5F, 3FF59, 3FF54, 3FF4F, 3FF49, 3FF44, 3FF3E, 3FF39, 3FF34, 3FF2E, 3FF29, 3FF23, 3FF1E, 3FF18, 3FF13, 3FF0D, 3FF08, 3FF02, 3FEFC, 3FEF7, 3FEF1, 3FEEC, 3FEE6, 3FEE0, 3FEDB, 3FED5, 3FECF, 3FECA, 3FEC4, 3FEBE, 3FEB9, 3FEB3, 3FEAD, 3FEA7, 3FEA2, 3FE9C, 3FE96, 3FE90, 3FE8A, 3FE84, 3FE7E, 3FE78, 3FE73, 3FE6D, 3FE67, 3FE61, 3FE5B, 3FE55, 3FE4F, 3FE49, 3FE42, 3FE3C, 3FE36, 3FE30, 3FE2A, 3FE24, 3FE1E, 3FE17, 3FE11, 3FE0B, 3FE05, 3FDFE, 3FDF8, 3FDF2, 3FDEB, 3FDE5, 3FDDE, 3FDD8, 3FDD2, 3FDCB, 3FDC5, 3FDBE, 3FDB8, 3FDB1, 3FDAA, 3FDA4, 3FD9D, 3FD97, 3FD90, 3FD89, 3FD82, 3FD7C, 3FD75, 3FD6E, 3FD67, 3FD61, 3FD5A, 3FD53, 3FD4C, 3FD45, 3FD3E, 3FD37, 3FD30, 3FD29, 3FD22, 3FD1B, 3FD14, 3FD0C, 3FD05, 3FCFE, 3FCF7, 3FCF0, 3FCE8, 3FCE1, 3FCDA, 3FCD2, 3FCCB, 3FCC3, 3FCBC, 3FCB4, 3FCAD, 3FCA5, 3FC9E, 3FC96, 3FC8F, 3FC87, 3FC7F, 3FC78, 3FC70, 3FC68, 3FC60, 3FC58, 3FC51, 3FC49, 3FC41, 3FC39, 3FC31, 3FC29, 3FC21, 3FC19, 3FC10, 3FC08, 3FC00, 3FBF8, 3FBF0, 3FBE7, 3FBDF, 3FBD7, 3FBCE, 3FBC6, 3FBBE, 3FBB5, 3FBAD, 3FBA4, 3FB9C, 3FB93, 3FB8A, 3FB82, 3FB79, 3FB70, 3FB67, 3FB5F, 3FB56, 3FB4D, 3FB44, 3FB3B, 3FB32, 3FB29, 3FB20, 3FB17, 3FB0E, 3FB05, 3FAFC, 3FAF2, 3FAE9, 3FAE0, 3FAD6, 3FACD, 3FAC4, 3FABA, 3FAB1, 3FAA7, 3FA9E, 3FA94, 3FA8B, 3FA81, 3FA77, 3FA6E, 3FA64, 3FA5A, 3FA50, 3FA46, 3FA3C, 3FA32, 3FA28, 3FA1E, 3FA14, 3FA0A, 3FA00, 3F9F6, 3F9EC, 3F9E2, 3F9D7, 3F9CD, 3F9C3, 3F9B8, 3F9AE, 3F9A3, 3F999, 3F98E, 3F984, 3F979, 3F96E, 3F964, 3F959, 3F94E, 3F943, 3F939, 3F92E, 3F923, 3F918, 3F90D, 3F902, 3F8F7, 3F8EB, 3F8E0, 3F8D5, 3F8CA, 3F8BF, 3F8B3, 3F8A8, 3F89C, 3F891, 3F886, 3F87A, 3F86E, 3F863, 3F857, 3F84C, 3F840, 3F834, 3F828, 3F81C, 3F811, 3F805, 3F7F9, 3F7ED, 3F7E1, 3F7D5, 3F7C9, 3F7BC, 3F7B0, 3F7A4, 3F798, 3F78B, 3F77F, 3F773, 3F766, 3F75A, 3F74D, 3F741, 3F734, 3F727, 3F71B, 3F70E, 3F701, 3F6F5, 3F6E8, 3F6DB, 3F6CE, 3F6C1, 3F6B4, 3F6A7, 3F69A, 3F68D, 3F680, 3F672, 3F665, 3F658, 3F64B, 3F63D, 3F630, 3F623, 3F615, 3F608, 3F5FA, 3F5ED, 3F5DF, 3F5D1, 3F5C4, 3F5B6, 3F5A8, 3F59A, 3F58C, 3F57F, 3F571, 3F563, 3F555, 3F547, 3F539, 3F52A, 3F51C, 3F50E, 3F500, 3F4F2, 3F4E3, 3F4D5, 3F4C7, 3F4B8, 3F4AA, 3F49B, 3F48D, 3F47E, 3F470, 3F461, 3F452, 3F444, 3F435, 3F426, 3F417, 3F408, 3F3FA, 3F3EB, 3F3DC, 3F3CD, 3F3BE, 3F3AF, 3F39F, 3F390, 3F381, 3F372, 3F363, 3F353, 3F344, 3F335, 3F325, 3F316, 3F307, 3F2F7, 3F2E8, 3F2D8, 3F2C8, 3F2B9, 3F2A9, 3F299, 3F28A, 3F27A, 3F26A, 3F25A, 3F24B, 3F23B, 3F22B, 3F21B, 3F20B, 3F1FB, 3F1EB, 3F1DB, 3F1CB, 3F1BB, 3F1AA, 3F19A, 3F18A, 3F17A, 3F169, 3F159, 3F149, 3F138, 3F128, 3F118, 3F107, 3F0F7, 3F0E6, 3F0D6, 3F0C5, 3F0B5, 3F0A4, 3F093, 3F083, 3F072, 3F061, 3F050, 3F040, 3F02F, 3F01E, 3F00D, 3EFFC, 3EFEB, 3EFDB, 3EFCA, 3EFB9, 3EFA8, 3EF97, 3EF86, 3EF74, 3EF63, 3EF52, 3EF41, 3EF30, 3EF1F, 3EF0E, 3EEFC, 3EEEB, 3EEDA, 3EEC9, 3EEB7, 3EEA6, 3EE95, 3EE83, 3EE72, 3EE61, 3EE4F, 3EE3E, 3EE2C, 3EE1B, 3EE09, 3EDF8, 3EDE6, 3EDD5, 3EDC3, 3EDB2, 3EDA0, 3ED8E, 3ED7D, 3ED6B, 3ED5A, 3ED48, 3ED36, 3ED25, 3ED13, 3ED01, 3ECEF, 3ECDE, 3ECCC, 3ECBA, 3ECA8, 3EC97, 3EC85, 3EC73, 3EC61, 3EC4F, 3EC3E, 3EC2C, 3EC1A, 3EC08, 3EBF6, 3EBE4, 3EBD3, 3EBC1, 3EBAF, 3EB9D, 3EB8B, 3EB79, 3EB67, 3EB55, 3EB43, 3EB31, 3EB20, 3EB0E, 3EAFC, 3EAEA, 3EAD8, 3EAC6, 3EAB4, 3EAA2, 3EA90, 3EA7E, 3EA6C, 3EA5A, 3EA48, 3EA36, 3EA25, 3EA13, 3EA01, 3E9EF, 3E9DD, 3E9CB, 3E9B9, 3E9A7, 3E995, 3E983, 3E972, 3E960, 3E94E, 3E93C, 3E92A, 3E918, 3E906, 3E8F5, 3E8E3, 3E8D1, 3E8BF, 3E8AE, 3E89C, 3E88A, 3E878, 3E867, 3E855, 3E843, 3E831, 3E820, 3E80E, 3E7FC, 3E7EB, 3E7D9, 3E7C8, 3E7B6, 3E7A5, 3E793, 3E782, 3E770, 3E75F, 3E74D, 3E73C, 3E72A, 3E719, 3E708, 3E6F6, 3E6E5, 3E6D4, 3E6C2, 3E6B1, 3E6A0, 3E68F, 3E67D, 3E66C, 3E65B, 3E64A, 3E639, 3E628, 3E617, 3E606, 3E5F5, 3E5E4, 3E5D3, 3E5C3, 3E5B2, 3E5A1, 3E590, 3E57F, 3E56F, 3E55E, 3E54E, 3E53D, 3E52C, 3E51C, 3E50C, 3E4FB, 3E4EB, 3E4DA, 3E4CA, 3E4BA, 3E4AA, 3E499, 3E489, 3E479, 3E469, 3E459, 3E449, 3E439, 3E429, 3E41A, 3E40A, 3E3FA, 3E3EA, 3E3DB, 3E3CB, 3E3BC, 3E3AC, 3E39D, 3E38D, 3E37E, 3E36F, 3E360, 3E351, 3E341, 3E332, 3E323, 3E314, 3E306, 3E2F7, 3E2E8, 3E2D9, 3E2CB, 3E2BC, 3E2AD, 3E29F, 3E291, 3E282, 3E274, 3E266, 3E258, 3E249, 3E23B, 3E22D, 3E220, 3E212, 3E204, 3E1F6, 3E1E9, 3E1DB, 3E1CE, 3E1C0, 3E1B3, 3E1A6, 3E198, 3E18B, 3E17E, 3E171, 3E164, 3E158, 3E14B, 3E13E, 3E132, 3E125, 3E119, 3E10C, 3E100, 3E0F4, 3E0E8, 3E0DC, 3E0D0, 3E0C4, 3E0B8, 3E0AC, 3E0A1, 3E095, 3E08A, 3E07E, 3E073, 3E068, 3E05D, 3E052, 3E047, 3E03C, 3E032, 3E027, 3E01C, 3E012, 3E008, 3DFFD, 3DFF3, 3DFE9, 3DFDF, 3DFD5, 3DFCC, 3DFC2, 3DFB8, 3DFAF, 3DFA6, 3DF9C, 3DF93, 3DF8A, 3DF81, 3DF78, 3DF70, 3DF67, 3DF5E, 3DF56, 3DF4E, 3DF45, 3DF3D, 3DF35, 3DF2E, 3DF26, 3DF1E, 3DF17, 3DF0F, 3DF08, 3DF01, 3DEFA, 3DEF3, 3DEEC, 3DEE5, 3DEDF, 3DED8, 3DED2, 3DECB, 3DEC5, 3DEBF, 3DEB9, 3DEB4, 3DEAE, 3DEA9, 3DEA3, 3DE9E, 3DE99, 3DE94, 3DE8F, 3DE8A, 3DE86, 3DE81, 3DE7D, 3DE79, 3DE75, 3DE71, 3DE6D, 3DE69, 3DE66, 3DE62, 3DE5F, 3DE5C, 3DE59, 3DE56, 3DE53, 3DE51, 3DE4E, 3DE4C, 3DE4A, 3DE48, 3DE46, 3DE44, 3DE43, 3DE41, 3DE40, 3DE3F, 3DE3E, 3DE3D, 3DE3C, 3DE3C, 3DE3B, 3DE3B, 3DE3B, 3DE3B, 3DE3B, 3DE3C, 3DE3C, 3DE3D, 3DE3E, 3DE3F, 3DE40, 3DE42, 3DE43, 3DE45, 3DE46, 3DE48, 3DE4B, 3DE4D, 3DE4F, 3DE52, 3DE55, 3DE58, 3DE5B, 3DE5E, 3DE62, 3DE65, 3DE69, 3DE6D, 3DE71, 3DE76, 3DE7A, 3DE7F, 3DE84, 3DE89, 3DE8E, 3DE93, 3DE99, 3DE9E, 3DEA4, 3DEAA, 3DEB1, 3DEB7, 3DEBE, 3DEC5, 3DECC, 3DED3, 3DEDA, 3DEE2, 3DEE9, 3DEF1, 3DEF9, 3DF02, 3DF0A, 3DF13, 3DF1C, 3DF25, 3DF2E, 3DF37, 3DF41, 3DF4B, 3DF55, 3DF5F, 3DF69, 3DF74, 3DF7F, 3DF8A, 3DF95, 3DFA0, 3DFAC, 3DFB8, 3DFC4, 3DFD0, 3DFDC, 3DFE9, 3DFF6, 3E003, 3E010, 3E01D, 3E02B, 3E039, 3E047, 3E055, 3E063, 3E072, 3E081, 3E090, 3E09F, 3E0AF, 3E0BF, 3E0CF, 3E0DF, 3E0EF, 3E100, 3E111, 3E122, 3E133, 3E144, 3E156, 3E168, 3E17A, 3E18C, 3E19F, 3E1B2, 3E1C5, 3E1D8, 3E1EB, 3E1FF, 3E213, 3E227, 3E23B, 3E250, 3E265, 3E27A, 3E28F, 3E2A5, 3E2BB, 3E2D1, 3E2E7, 3E2FD, 3E314, 3E32B, 3E342, 3E359, 3E371, 3E389, 3E3A1, 3E3B9, 3E3D2, 3E3EB, 3E404, 3E41D, 3E437, 3E450, 3E46A, 3E485, 3E49F, 3E4BA, 3E4D5, 3E4F0, 3E50C, 3E528, 3E544, 3E560, 3E57C, 3E599, 3E5B6, 3E5D3, 3E5F1, 3E60F, 3E62D, 3E64B, 3E669, 3E688, 3E6A7, 3E6C6, 3E6E6, 3E706, 3E726, 3E746, 3E767, 3E788, 3E7A9, 3E7CA, 3E7EC, 3E80D, 3E830, 3E852, 3E875, 3E898, 3E8BB, 3E8DE, 3E902, 3E926, 3E94A, 3E96F, 3E994, 3E9B9, 3E9DE, 3EA04, 3EA2A, 3EA50, 3EA76, 3EA9D, 3EAC4, 3EAEB, 3EB13, 3EB3A, 3EB62, 3EB8B, 3EBB3, 3EBDC, 3EC05, 3EC2F, 3EC59, 3EC83, 3ECAD, 3ECD8, 3ED02, 3ED2D, 3ED59, 3ED85, 3EDB1, 3EDDD, 3EE09, 3EE36, 3EE63, 3EE91, 3EEBE, 3EEEC, 3EF1B, 3EF49, 3EF78, 3EFA7, 3EFD6, 3F006, 3F036, 3F066, 3F097, 3F0C8, 3F0F9, 3F12A, 3F15C, 3F18E, 3F1C0, 3F1F3, 3F226, 3F259, 3F28D, 3F2C0, 3F2F4, 3F329, 3F35D, 3F392, 3F3C8, 3F3FD, 3F433, 3F469, 3F4A0, 3F4D6, 3F50E, 3F545, 3F57D, 3F5B4, 3F5ED, 3F625, 3F65E, 3F697, 3F6D1, 3F70B, 3F745, 3F77F, 3F7BA, 3F7F5, 3F830, 3F86C, 3F8A7, 3F8E4, 3F920, 3F95D, 3F99A, 3F9D8, 3FA15, 3FA53, 3FA92, 3FAD0, 3FB0F, 3FB4F, 3FB8E, 3FBCE, 3FC0E, 3FC4F, 3FC90, 3FCD1, 3FD12, 3FD54, 3FD96, 3FDD9, 3FE1C, 3FE5F, 3FEA2, 3FEE6, 3FF2A, 3FF6E, 3FFB2, 3FFF7;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_f468ef5b99517297',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '2aa2c1bcb95a4eb1995e1d3bf1f92cc6',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_f468ef5b99517297',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3D, 82, C8, 10E, 155, 19C, 1E3, 22A, 272, 2BA, 302, 34B, 394, 3DE, 427, 471, 4BC, 506, 551, 59C, 5E8, 634, 680, 6CD, 71A, 767, 7B4, 802, 850, 89F, 8EE, 93D, 98C, 9DC, A2C, A7D, ACD, B1F, B70, BC2, C14, C66, CB9, D0C, D5F, DB3, E07, E5B, EB0, F05, F5A, FB0, 1006, 105C, 10B3, 110A, 1161, 11B8, 1210, 1268, 12C1, 131A, 1373, 13CD, 1427, 1481, 14DB, 1536, 1591, 15ED, 1649, 16A5, 1701, 175E, 17BB, 1819, 1876, 18D4, 1933, 1992, 19F1, 1A50, 1AB0, 1B10, 1B70, 1BD1, 1C32, 1C93, 1CF5, 1D57, 1DBA, 1E1C, 1E7F, 1EE3, 1F46, 1FAA, 200F, 2073, 20D8, 213D, 21A3, 2209, 226F, 22D6, 233D, 23A4, 240C, 2473, 24DC, 2544, 25AD, 2616, 2680, 26EA, 2754, 27BE, 2829, 2894, 2900, 296B, 29D8, 2A44, 2AB1, 2B1E, 2B8B, 2BF9, 2C67, 2CD5, 2D44, 2DB3, 2E22, 2E92, 2F02, 2F72, 2FE3, 3054, 30C5, 3137, 31A9, 321B, 328D, 3300, 3373, 33E7, 345B, 34CF, 3543, 35B8, 362D, 36A2, 3718, 378E, 3804, 387B, 38F2, 3969, 39E1, 3A59, 3AD1, 3B4A, 3BC3, 3C3C, 3CB5, 3D2F, 3DA9, 3E23, 3E9E, 3F19, 3F95, 4010, 408C, 4109, 4185, 4202, 427F, 42FD, 437B, 43F9, 4477, 44F6, 4575, 45F4, 4674, 46F4, 4774, 47F5, 4876, 48F7, 4978, 49FA, 4A7C, 4AFF, 4B81, 4C04, 4C88, 4D0B, 4D8F, 4E13, 4E98, 4F1D, 4FA2, 5027, 50AD, 5133, 51B9, 5240, 52C7, 534E, 53D5, 545D, 54E5, 556D, 55F6, 567F, 5708, 5791, 581B, 58A5, 5930, 59BA, 5A45, 5AD0, 5B5C, 5BE8, 5C74, 5D00, 5D8D, 5E1A, 5EA7, 5F34, 5FC2, 6050, 60DE, 616D, 61FC, 628B, 631B, 63AA, 643A, 64CA, 655B, 65EC, 667D, 670E, 67A0, 6832, 68C4, 6956, 69E9, 6A7C, 6B0F, 6BA3, 6C37, 6CCB, 6D5F, 6DF3, 6E88, 6F1D, 6FB3, 7048, 70DE, 7174, 720B, 72A1, 7338, 73CF, 7467, 74FF, 7596, 762F, 76C7, 7760, 77F9, 7892, 792B, 79C5, 7A5F, 7AF9, 7B94, 7C2E, 7CC9, 7D64, 7E00, 7E9B, 7F37, 7FD3, 8070, 810C, 81A9, 8246, 82E4, 8381, 841F, 84BD, 855B, 85FA, 8699, 8738, 87D7, 8876, 8916, 89B6, 8A56, 8AF6, 8B97, 8C37, 8CD8, 8D7A, 8E1B, 8EBD, 8F5F, 9001, 90A3, 9146, 91E8, 928B, 932E, 93D2, 9475, 9519, 95BD, 9661, 9706, 97AB, 984F, 98F4, 999A, 9A3F, 9AE5, 9B8B, 9C31, 9CD7, 9D7D, 9E24, 9ECB, 9F72, A019, A0C1, A168, A210, A2B8, A360, A409, A4B1, A55A, A603, A6AC, A755, A7FF, A8A8, A952, A9FC, AAA6, AB51, ABFB, ACA6, AD51, ADFC, AEA7, AF52, AFFE, B0AA, B156, B202, B2AE, B35A, B407, B4B3, B560, B60D, B6BB, B768, B815, B8C3, B971, BA1F, BACD, BB7B, BC29, BCD8, BD87, BE36, BEE5, BF94, C043, C0F2, C1A2, C251, C301, C3B1, C461, C511, C5C2, C672, C723, C7D4, C884, C935, C9E7, CA98, CB49, CBFB, CCAC, CD5E, CE10, CEC2, CF74, D026, D0D8, D18A, D23D, D2F0, D3A2, D455, D508, D5BB, D66E, D721, D7D5, D888, D93C, D9EF, DAA3, DB57, DC0B, DCBF, DD73, DE27, DEDB, DF8F, E044, E0F8, E1AD, E261, E316, E3CB, E480, E535, E5EA, E69F, E754, E809, E8BF, E974, EA29, EADF, EB95, EC4A, ED00, EDB6, EE6B, EF21, EFD7, F08D, F143, F1F9, F2AF, F365, F41C, F4D2, F588, F63F, F6F5, F7AB, F862, F918, F9CF, FA85, FB3C, FBF3, FCA9, FD60, FE17, FECE, FF84, 1003B, 100F2, 101A9, 10260, 10316, 103CD, 10484, 1053B, 105F2, 106A9, 10760, 10817, 108CE, 10985, 10A3C, 10AF3, 10BAA, 10C61, 10D18, 10DCF, 10E85, 10F3C, 10FF3, 110AA, 11161, 11218, 112CF, 11386, 1143D, 114F4, 115AA, 11661, 11718, 117CF, 11885, 1193C, 119F3, 11AA9, 11B60, 11C17, 11CCD, 11D84, 11E3A, 11EF1, 11FA7, 1205D, 12114, 121CA, 12280, 12336, 123EC, 124A2, 12559, 1260E, 126C4, 1277A, 12830, 128E6, 1299B, 12A51, 12B07, 12BBC, 12C72, 12D27, 12DDC, 12E91, 12F47, 12FFC, 130B1, 13166, 1321A, 132CF, 13384, 13438, 134ED, 135A1, 13656, 1370A, 137BE, 13872, 13926, 139DA, 13A8E, 13B41, 13BF5, 13CA9, 13D5C, 13E0F, 13EC2, 13F75, 14028, 140DB, 1418E, 14241, 142F3, 143A6, 14458, 1450A, 145BC, 1466E, 14720, 147D1, 14883, 14934, 149E6, 14A97, 14B48, 14BF9, 14CAA, 14D5A, 14E0B, 14EBB, 14F6B, 1501B, 150CB, 1517B, 1522B, 152DA, 1538A, 15439, 154E8, 15597, 15645, 156F4, 157A2, 15851, 158FF, 159AD, 15A5A, 15B08, 15BB5, 15C63, 15D10, 15DBD, 15E6A, 15F16, 15FC2, 1606F, 1611B, 161C7, 16272, 1631E, 163C9, 16474, 1651F, 165CA, 16674, 1671F, 167C9, 16873, 1691D, 169C6, 16A70, 16B19, 16BC2, 16C6B, 16D13, 16DBB, 16E64, 16F0C, 16FB3, 1705B, 17102, 171A9, 17250, 172F7, 1739D, 17443, 174E9, 1758F, 17635, 176DA, 1777F, 17824, 178C8, 1796D, 17A11, 17AB5, 17B58, 17BFC, 17C9F, 17D42, 17DE5, 17E87, 17F29, 17FCB, 1806D, 1810F, 181B0, 18251, 182F1, 18392, 18432, 184D2, 18572, 18611, 186B0, 1874F, 187EE, 1888C, 1892A, 189C8, 18A65, 18B03, 18BA0, 18C3C, 18CD9, 18D75, 18E11, 18EAC, 18F48, 18FE3, 1907D, 19118, 191B2, 1924C, 192E6, 1937F, 19418, 194B0, 19549, 195E1, 19679, 19710, 197A7, 1983E, 198D5, 1996B, 19A01, 19A97, 19B2C, 19BC1, 19C56, 19CEA, 19D7F, 19E12, 19EA6, 19F39, 19FCC, 1A05E, 1A0F0, 1A182, 1A214, 1A2A5, 1A336, 1A3C6, 1A457, 1A4E6, 1A576, 1A605, 1A694, 1A723, 1A7B1, 1A83F, 1A8CC, 1A959, 1A9E6, 1AA73, 1AAFF, 1AB8A, 1AC16, 1ACA1, 1AD2C, 1ADB6, 1AE40, 1AECA, 1AF53, 1AFDC, 1B065, 1B0ED, 1B175, 1B1FC, 1B283, 1B30A, 1B390, 1B416, 1B49C, 1B521, 1B5A6, 1B62B, 1B6AF, 1B733, 1B7B6, 1B839, 1B8BC, 1B93E, 1B9C0, 1BA41, 1BAC3, 1BB43, 1BBC4, 1BC44, 1BCC3, 1BD42, 1BDC1, 1BE40, 1BEBE, 1BF3B, 1BFB8, 1C035, 1C0B2, 1C12E, 1C1A9, 1C224, 1C29F, 1C31A, 1C394, 1C40D, 1C486, 1C4FF, 1C577, 1C5EF, 1C667, 1C6DE, 1C755, 1C7CB, 1C841, 1C8B6, 1C92B, 1C9A0, 1CA14, 1CA88, 1CAFB, 1CB6E, 1CBE1, 1CC53, 1CCC5, 1CD36, 1CDA7, 1CE17, 1CE87, 1CEF6, 1CF65, 1CFD4, 1D042, 1D0B0, 1D11D, 1D18A, 1D1F7, 1D263, 1D2CE, 1D339, 1D3A4, 1D40E, 1D478, 1D4E1, 1D54A, 1D5B3, 1D61B, 1D682, 1D6E9, 1D750, 1D7B6, 1D81C, 1D881, 1D8E6, 1D94A, 1D9AE, 1DA11, 1DA74, 1DAD7, 1DB39, 1DB9B, 1DBFC, 1DC5C, 1DCBC, 1DD1C, 1DD7B, 1DDDA, 1DE39, 1DE96, 1DEF4, 1DF51, 1DFAD, 1E009, 1E065, 1E0BF, 1E11A, 1E174, 1E1CE, 1E227, 1E27F, 1E2D7, 1E32F, 1E386, 1E3DD, 1E433, 1E489, 1E4DE, 1E533, 1E587, 1E5DB, 1E62E, 1E681, 1E6D3, 1E725, 1E776, 1E7C7, 1E817, 1E867, 1E8B7, 1E905, 1E954, 1E9A2, 1E9EF, 1EA3C, 1EA88, 1EAD4, 1EB1F, 1EB6A, 1EBB4, 1EBFE, 1EC48, 1EC90, 1ECD9, 1ED21, 1ED68, 1EDAF, 1EDF5, 1EE3B, 1EE80, 1EEC5, 1EF09, 1EF4D, 1EF90, 1EFD3, 1F015, 1F057, 1F098, 1F0D8, 1F119, 1F158, 1F197, 1F1D6, 1F214, 1F251, 1F28F, 1F2CB, 1F307, 1F342, 1F37D, 1F3B8, 1F3F2, 1F42B, 1F464, 1F49C, 1F4D4, 1F50B, 1F542, 1F578, 1F5AE, 1F5E3, 1F618, 1F64C, 1F680, 1F6B3, 1F6E5, 1F717, 1F749, 1F77A, 1F7AA, 1F7DA, 1F809, 1F838, 1F866, 1F894, 1F8C1, 1F8EE, 1F91A, 1F946, 1F971, 1F99B, 1F9C5, 1F9EF, 1FA17, 1FA40, 1FA68, 1FA8F, 1FAB6, 1FADC, 1FB02, 1FB27, 1FB4B, 1FB6F, 1FB93, 1FBB6, 1FBD8, 1FBFA, 1FC1B, 1FC3C, 1FC5C, 1FC7C, 1FC9B, 1FCBA, 1FCD8, 1FCF5, 1FD12, 1FD2F, 1FD4B, 1FD66, 1FD81, 1FD9B, 1FDB5, 1FDCE, 1FDE7, 1FDFF, 1FE16, 1FE2D, 1FE43, 1FE59, 1FE6F, 1FE83, 1FE98, 1FEAB, 1FEBE, 1FED1, 1FEE3, 1FEF4, 1FF05, 1FF16, 1FF26, 1FF35, 1FF43, 1FF52, 1FF5F, 1FF6C, 1FF79, 1FF85, 1FF90, 1FF9B, 1FFA5, 1FFAF, 1FFB8, 1FFC1, 1FFC9, 1FFD0, 1FFD7, 1FFDE, 1FFE4, 1FFE9, 1FFEE, 1FFF2, 1FFF6, 1FFF9, 1FFFB, 1FFFD, 1FFFF, 1FFFF, 1FFFF;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_570d16daded9dae1',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'eb016c6c68533faca31048cca19d3eef',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_570d16daded9dae1',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 1FFFF, 1FFFF, 1FFFE, 1FFFC, 1FFF9, 1FFF6, 1FFF3, 1FFEF, 1FFEA, 1FFE5, 1FFDF, 1FFD9, 1FFD2, 1FFCB, 1FFC3, 1FFBA, 1FFB1, 1FFA8, 1FF9D, 1FF93, 1FF87, 1FF7C, 1FF6F, 1FF62, 1FF55, 1FF47, 1FF38, 1FF29, 1FF19, 1FF09, 1FEF8, 1FEE7, 1FED5, 1FEC3, 1FEB0, 1FE9C, 1FE88, 1FE74, 1FE5E, 1FE49, 1FE32, 1FE1C, 1FE04, 1FDEC, 1FDD4, 1FDBB, 1FDA1, 1FD87, 1FD6C, 1FD51, 1FD35, 1FD19, 1FCFC, 1FCDF, 1FCC1, 1FCA2, 1FC83, 1FC64, 1FC44, 1FC23, 1FC02, 1FBE0, 1FBBE, 1FB9B, 1FB78, 1FB54, 1FB2F, 1FB0A, 1FAE5, 1FABF, 1FA98, 1FA71, 1FA49, 1FA21, 1F9F8, 1F9CF, 1F9A5, 1F97B, 1F950, 1F924, 1F8F8, 1F8CC, 1F89F, 1F871, 1F843, 1F814, 1F7E5, 1F7B5, 1F785, 1F754, 1F723, 1F6F1, 1F6BF, 1F68C, 1F658, 1F624, 1F5F0, 1F5BB, 1F585, 1F54F, 1F518, 1F4E1, 1F4A9, 1F471, 1F438, 1F3FF, 1F3C5, 1F38B, 1F350, 1F315, 1F2D9, 1F29D, 1F260, 1F222, 1F1E4, 1F1A6, 1F167, 1F127, 1F0E7, 1F0A7, 1F066, 1F024, 1EFE2, 1EFA0, 1EF5D, 1EF19, 1EED5, 1EE90, 1EE4B, 1EE05, 1EDBF, 1ED78, 1ED31, 1ECEA, 1ECA1, 1EC59, 1EC0F, 1EBC6, 1EB7C, 1EB31, 1EAE6, 1EA9A, 1EA4E, 1EA01, 1E9B4, 1E966, 1E918, 1E8C9, 1E87A, 1E82A, 1E7DA, 1E789, 1E738, 1E6E6, 1E694, 1E641, 1E5EE, 1E59B, 1E547, 1E4F2, 1E49D, 1E447, 1E3F1, 1E39B, 1E344, 1E2EC, 1E294, 1E23C, 1E1E3, 1E189, 1E12F, 1E0D5, 1E07A, 1E01E, 1DFC3, 1DF66, 1DF0A, 1DEAC, 1DE4F, 1DDF0, 1DD92, 1DD33, 1DCD3, 1DC73, 1DC12, 1DBB1, 1DB50, 1DAEE, 1DA8C, 1DA29, 1D9C5, 1D962, 1D8FD, 1D899, 1D833, 1D7CE, 1D768, 1D701, 1D69A, 1D633, 1D5CB, 1D563, 1D4FA, 1D491, 1D427, 1D3BD, 1D352, 1D2E7, 1D27C, 1D210, 1D1A4, 1D137, 1D0CA, 1D05C, 1CFEE, 1CF7F, 1CF10, 1CEA1, 1CE31, 1CDC1, 1CD50, 1CCDF, 1CC6E, 1CBFC, 1CB89, 1CB16, 1CAA3, 1CA2F, 1C9BB, 1C947, 1C8D2, 1C85D, 1C7E7, 1C771, 1C6FA, 1C683, 1C60B, 1C594, 1C51B, 1C4A3, 1C42A, 1C3B0, 1C336, 1C2BC, 1C241, 1C1C6, 1C14B, 1C0CF, 1C052, 1BFD6, 1BF59, 1BEDB, 1BE5D, 1BDDF, 1BD60, 1BCE1, 1BC62, 1BBE2, 1BB61, 1BAE1, 1BA60, 1B9DE, 1B95D, 1B8DA, 1B858, 1B7D5, 1B752, 1B6CE, 1B64A, 1B5C5, 1B541, 1B4BB, 1B436, 1B3B0, 1B32A, 1B2A3, 1B21C, 1B194, 1B10D, 1B085, 1AFFC, 1AF73, 1AEEA, 1AE60, 1ADD6, 1AD4C, 1ACC2, 1AC37, 1ABAB, 1AB20, 1AA93, 1AA07, 1A97A, 1A8ED, 1A860, 1A7D2, 1A744, 1A6B6, 1A627, 1A598, 1A508, 1A478, 1A3E8, 1A358, 1A2C7, 1A236, 1A1A4, 1A113, 1A081, 19FEE, 19F5B, 19EC8, 19E35, 19DA1, 19D0D, 19C79, 19BE4, 19B4F, 19ABA, 19A24, 1998E, 198F8, 19862, 197CB, 19734, 1969C, 19605, 1956D, 194D4, 1943C, 193A3, 1930A, 19270, 191D6, 1913C, 190A2, 19007, 18F6C, 18ED1, 18E35, 18D9A, 18CFD, 18C61, 18BC4, 18B28, 18A8A, 189ED, 1894F, 188B1, 18813, 18774, 186D5, 18636, 18597, 184F7, 18458, 183B7, 18317, 18276, 181D6, 18134, 18093, 17FF1, 17F4F, 17EAD, 17E0B, 17D68, 17CC5, 17C22, 17B7F, 17ADB, 17A37, 17993, 178EF, 1784A, 177A6, 17701, 1765B, 175B6, 17510, 1746A, 173C4, 1731E, 17277, 171D0, 17129, 17082, 16FDB, 16F33, 16E8B, 16DE3, 16D3B, 16C92, 16BE9, 16B41, 16A97, 169EE, 16945, 1689B, 167F1, 16747, 1669C, 165F2, 16547, 1649C, 163F1, 16346, 1629B, 161EF, 16143, 16097, 15FEB, 15F3F, 15E92, 15DE5, 15D39, 15C8B, 15BDE, 15B31, 15A83, 159D6, 15928, 1587A, 157CB, 1571D, 1566F, 155C0, 15511, 15462, 153B3, 15304, 15254, 151A4, 150F5, 15045, 14F95, 14EE5, 14E34, 14D84, 14CD3, 14C22, 14B72, 14AC1, 14A0F, 1495E, 148AD, 147FB, 1474A, 14698, 145E6, 14534, 14482, 143D0, 1431D, 1426B, 141B8, 14105, 14053, 13FA0, 13EED, 13E39, 13D86, 13CD3, 13C1F, 13B6C, 13AB8, 13A04, 13950, 1389D, 137E8, 13734, 13680, 135CC, 13517, 13463, 133AE, 132FA, 13245, 13190, 130DB, 13026, 12F71, 12EBC, 12E07, 12D52, 12C9C, 12BE7, 12B31, 12A7C, 129C6, 12911, 1285B, 127A5, 126EF, 12639, 12583, 124CD, 12417, 12361, 122AB, 121F5, 1213F, 12088, 11FD2, 11F1C, 11E65, 11DAF, 11CF8, 11C42, 11B8B, 11AD5, 11A1E, 11967, 118B1, 117FA, 11743, 1168C, 115D6, 1151F, 11468, 113B1, 112FA, 11243, 1118C, 110D5, 1101F, 10F68, 10EB1, 10DFA, 10D43, 10C8C, 10BD5, 10B1E, 10A67, 109B0, 108F9, 10842, 1078B, 106D4, 1061D, 10566, 104AF, 103F8, 10342, 1028B, 101D4, 1011D, 10066, FFAF, FEF9, FE42, FD8B, FCD4, FC1E, FB67, FAB1, F9FA, F943, F88D, F7D7, F720, F66A, F5B3, F4FD, F447, F391, F2DA, F224, F16E, F0B8, F002, EF4C, EE96, EDE1, ED2B, EC75, EBBF, EB0A, EA54, E99F, E8EA, E834, E77F, E6CA, E615, E560, E4AB, E3F6, E341, E28C, E1D7, E123, E06E, DFBA, DF06, DE51, DD9D, DCE9, DC35, DB81, DACD, DA1A, D966, D8B3, D7FF, D74C, D699, D5E5, D532, D47F, D3CD, D31A, D267, D1B5, D102, D050, CF9E, CEEC, CE3A, CD88, CCD6, CC25, CB73, CAC2, CA11, C95F, C8AE, C7FE, C74D, C69C, C5EC, C53B, C48B, C3DB, C32B, C27B, C1CB, C11C, C06C, BFBD, BF0E, BE5F, BDB0, BD01, BC53, BBA4, BAF6, BA48, B99A, B8EC, B83F, B791, B6E4, B636, B589, B4DD, B430, B383, B2D7, B22B, B17E, B0D2, B027, AF7B, AED0, AE24, AD79, ACCE, AC24, AB79, AACF, AA24, A97A, A8D1, A827, A77D, A6D4, A62B, A582, A4D9, A431, A388, A2E0, A238, A190, A0E8, A041, 9F9A, 9EF3, 9E4C, 9DA5, 9CFF, 9C58, 9BB2, 9B0C, 9A67, 99C1, 991C, 9877, 97D2, 972D, 9689, 95E4, 9540, 949C, 93F9, 9355, 92B2, 920F, 916C, 90CA, 9027, 8F85, 8EE3, 8E42, 8DA0, 8CFF, 8C5E, 8BBD, 8B1C, 8A7C, 89DC, 893C, 889C, 87FD, 875E, 86BF, 8620, 8581, 84E3, 8445, 83A7, 8309, 826C, 81CF, 8132, 8095, 7FF9, 7F5D, 7EC1, 7E25, 7D89, 7CEE, 7C53, 7BB9, 7B1E, 7A84, 79EA, 7950, 78B7, 781D, 7784, 76EC, 7653, 75BB, 7523, 748B, 73F4, 735C, 72C5, 722F, 7198, 7102, 706C, 6FD6, 6F41, 6EAC, 6E17, 6D82, 6CEE, 6C5A, 6BC6, 6B33, 6A9F, 6A0C, 6979, 68E7, 6855, 67C3, 6731, 66A0, 660F, 657E, 64ED, 645D, 63CD, 633D, 62AD, 621E, 618F, 6101, 6072, 5FE4, 5F56, 5EC9, 5E3B, 5DAF, 5D22, 5C95, 5C09, 5B7D, 5AF2, 5A67, 59DC, 5951, 58C6, 583C, 57B3, 5729, 56A0, 5617, 558E, 5506, 547E, 53F6, 536E, 52E7, 5260, 51D9, 5153, 50CD, 5047, 4FC2, 4F3D, 4EB8, 4E33, 4DAF, 4D2B, 4CA7, 4C24, 4BA1, 4B1E, 4A9C, 4A1A, 4998, 4916, 4895, 4814, 4793, 4713, 4693, 4613, 4594, 4515, 4496, 4417, 4399, 431B, 429E, 4220, 41A3, 4127, 40AA, 402E, 3FB2, 3F37, 3EBC, 3E41, 3DC7, 3D4C, 3CD3, 3C59, 3BE0, 3B67, 3AEE, 3A76, 39FE, 3986, 390F, 3898, 3821, 37AB, 3735, 36BF, 3649, 35D4, 355F, 34EB, 3477, 3403, 338F, 331C, 32A9, 3236, 31C4, 3152, 30E1, 306F, 2FFE, 2F8E, 2F1D, 2EAD, 2E3D, 2DCE, 2D5F, 2CF0, 2C82, 2C14, 2BA6, 2B38, 2ACB, 2A5E, 29F2, 2986, 291A, 28AE, 2843, 27D8, 276E, 2703, 2699, 2630, 25C7, 255E, 24F5, 248D, 2425, 23BD, 2356, 22EF, 2288, 2222, 21BC, 2156, 20F1, 208C, 2027, 1FC3, 1F5F, 1EFB, 1E97, 1E34, 1DD2, 1D6F, 1D0D, 1CAB, 1C4A, 1BE9, 1B88, 1B28, 1AC7, 1A68, 1A08, 19A9, 194A, 18EC, 188D, 1830, 17D2, 1775, 1718, 16BB, 165F, 1603, 15A8, 154C, 14F2, 1497, 143D, 13E3, 1389, 1330, 12D7, 127E, 1226, 11CE, 1176, 111F, 10C8, 1071, 101B, FC5, F6F, F1A, EC5, E70, E1C, DC8, D74, D20, CCD, C7B, C28, BD6, B84, B33, AE2, A91, A40, 9F0, 9A0, 951, 901, 8B2, 864, 816, 7C8, 77A, 72D, 6E0, 693, 647, 5FB, 5AF, 564, 519, 4CE, 484, 43A, 3F0, 3A6, 35D, 315, 2CC, 284, 23C, 1F4, 1AD, 166, 120, DA, 94, 4E, 9;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_7a6e30cd29f87404',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '1c1a583c022a31153bb1a12c6b815684',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_7a6e30cd29f87404',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFC4, 3FF7F, 3FF3B, 3FEF7, 3FEB3, 3FE6F, 3FE2C, 3FDE9, 3FDA7, 3FD65, 3FD23, 3FCE1, 3FCA0, 3FC5F, 3FC1F, 3FBDE, 3FB9E, 3FB5F, 3FB1F, 3FAE0, 3FAA2, 3FA63, 3FA25, 3F9E7, 3F9AA, 3F96C, 3F930, 3F8F3, 3F8B7, 3F87B, 3F83F, 3F804, 3F7C9, 3F78E, 3F753, 3F719, 3F6DF, 3F6A6, 3F66D, 3F634, 3F5FB, 3F5C3, 3F58B, 3F553, 3F51C, 3F4E4, 3F4AE, 3F477, 3F441, 3F40B, 3F3D5, 3F3A0, 3F36B, 3F336, 3F302, 3F2CE, 3F29A, 3F266, 3F233, 3F200, 3F1CD, 3F19B, 3F169, 3F137, 3F106, 3F0D4, 3F0A3, 3F073, 3F043, 3F012, 3EFE3, 3EFB3, 3EF84, 3EF55, 3EF27, 3EEF8, 3EECA, 3EE9C, 3EE6F, 3EE42, 3EE15, 3EDE8, 3EDBC, 3ED90, 3ED64, 3ED39, 3ED0E, 3ECE3, 3ECB8, 3EC8E, 3EC64, 3EC3A, 3EC10, 3EBE7, 3EBBE, 3EB95, 3EB6D, 3EB45, 3EB1D, 3EAF5, 3EACE, 3EAA7, 3EA80, 3EA5A, 3EA34, 3EA0E, 3E9E8, 3E9C3, 3E99D, 3E979, 3E954, 3E930, 3E90C, 3E8E8, 3E8C4, 3E8A1, 3E87E, 3E85B, 3E839, 3E817, 3E7F5, 3E7D3, 3E7B2, 3E790, 3E76F, 3E74F, 3E72E, 3E70E, 3E6EE, 3E6CF, 3E6B0, 3E690, 3E672, 3E653, 3E635, 3E617, 3E5F9, 3E5DB, 3E5BE, 3E5A1, 3E584, 3E568, 3E54B, 3E52F, 3E513, 3E4F8, 3E4DC, 3E4C1, 3E4A7, 3E48C, 3E472, 3E458, 3E43E, 3E424, 3E40B, 3E3F2, 3E3D9, 3E3C0, 3E3A8, 3E390, 3E378, 3E360, 3E349, 3E331, 3E31A, 3E304, 3E2ED, 3E2D7, 3E2C1, 3E2AB, 3E295, 3E280, 3E26B, 3E256, 3E241, 3E22D, 3E219, 3E205, 3E1F1, 3E1DE, 3E1CA, 3E1B7, 3E1A4, 3E192, 3E17F, 3E16D, 3E15B, 3E149, 3E138, 3E127, 3E116, 3E105, 3E0F4, 3E0E4, 3E0D3, 3E0C3, 3E0B4, 3E0A4, 3E095, 3E086, 3E077, 3E068, 3E059, 3E04B, 3E03D, 3E02F, 3E022, 3E014, 3E007, 3DFFA, 3DFED, 3DFE0, 3DFD4, 3DFC8, 3DFBC, 3DFB0, 3DFA4, 3DF99, 3DF8D, 3DF82, 3DF78, 3DF6D, 3DF62, 3DF58, 3DF4E, 3DF44, 3DF3B, 3DF31, 3DF28, 3DF1F, 3DF16, 3DF0D, 3DF05, 3DEFC, 3DEF4, 3DEEC, 3DEE4, 3DEDD, 3DED5, 3DECE, 3DEC7, 3DEC0, 3DEBA, 3DEB3, 3DEAD, 3DEA7, 3DEA1, 3DE9B, 3DE95, 3DE90, 3DE8B, 3DE86, 3DE81, 3DE7C, 3DE78, 3DE73, 3DE6F, 3DE6B, 3DE67, 3DE64, 3DE60, 3DE5D, 3DE5A, 3DE57, 3DE54, 3DE51, 3DE4E, 3DE4C, 3DE4A, 3DE48, 3DE46, 3DE44, 3DE43, 3DE41, 3DE40, 3DE3F, 3DE3E, 3DE3E, 3DE3D, 3DE3D, 3DE3C, 3DE3C, 3DE3C, 3DE3C, 3DE3D, 3DE3D, 3DE3E, 3DE3F, 3DE40, 3DE41, 3DE42, 3DE43, 3DE45, 3DE47, 3DE48, 3DE4A, 3DE4C, 3DE4F, 3DE51, 3DE54, 3DE56, 3DE59, 3DE5C, 3DE5F, 3DE62, 3DE66, 3DE69, 3DE6D, 3DE71, 3DE75, 3DE79, 3DE7D, 3DE81, 3DE86, 3DE8A, 3DE8F, 3DE94, 3DE99, 3DE9E, 3DEA3, 3DEA8, 3DEAE, 3DEB3, 3DEB9, 3DEBF, 3DEC5, 3DECB, 3DED1, 3DED7, 3DEDE, 3DEE5, 3DEEB, 3DEF2, 3DEF9, 3DF00, 3DF07, 3DF0E, 3DF16, 3DF1D, 3DF25, 3DF2D, 3DF34, 3DF3C, 3DF44, 3DF4D, 3DF55, 3DF5D, 3DF66, 3DF6E, 3DF77, 3DF80, 3DF89, 3DF92, 3DF9B, 3DFA4, 3DFAE, 3DFB7, 3DFC1, 3DFCA, 3DFD4, 3DFDE, 3DFE8, 3DFF2, 3DFFC, 3E006, 3E010, 3E01B, 3E025, 3E030, 3E03B, 3E045, 3E050, 3E05B, 3E066, 3E071, 3E07D, 3E088, 3E093, 3E09F, 3E0AA, 3E0B6, 3E0C2, 3E0CE, 3E0DA, 3E0E6, 3E0F2, 3E0FE, 3E10A, 3E117, 3E123, 3E12F, 3E13C, 3E149, 3E155, 3E162, 3E16F, 3E17C, 3E189, 3E196, 3E1A3, 3E1B1, 3E1BE, 3E1CB, 3E1D9, 3E1E6, 3E1F4, 3E202, 3E20F, 3E21D, 3E22B, 3E239, 3E247, 3E255, 3E263, 3E271, 3E280, 3E28E, 3E29C, 3E2AB, 3E2B9, 3E2C8, 3E2D7, 3E2E5, 3E2F4, 3E303, 3E312, 3E321, 3E330, 3E33F, 3E34E, 3E35D, 3E36C, 3E37B, 3E38B, 3E39A, 3E3A9, 3E3B9, 3E3C8, 3E3D8, 3E3E8, 3E3F7, 3E407, 3E417, 3E426, 3E436, 3E446, 3E456, 3E466, 3E476, 3E486, 3E496, 3E4A7, 3E4B7, 3E4C7, 3E4D7, 3E4E8, 3E4F8, 3E508, 3E519, 3E529, 3E53A, 3E54A, 3E55B, 3E56C, 3E57C, 3E58D, 3E59E, 3E5AE, 3E5BF, 3E5D0, 3E5E1, 3E5F2, 3E603, 3E614, 3E625, 3E636, 3E647, 3E658, 3E669, 3E67A, 3E68B, 3E69C, 3E6AE, 3E6BF, 3E6D0, 3E6E1, 3E6F3, 3E704, 3E715, 3E727, 3E738, 3E74A, 3E75B, 3E76D, 3E77E, 3E790, 3E7A1, 3E7B3, 3E7C4, 3E7D6, 3E7E7, 3E7F9, 3E80B, 3E81C, 3E82E, 3E840, 3E851, 3E863, 3E875, 3E886, 3E898, 3E8AA, 3E8BC, 3E8CD, 3E8DF, 3E8F1, 3E903, 3E915, 3E927, 3E938, 3E94A, 3E95C, 3E96E, 3E980, 3E992, 3E9A4, 3E9B5, 3E9C7, 3E9D9, 3E9EB, 3E9FD, 3EA0F, 3EA21, 3EA33, 3EA45, 3EA57, 3EA69, 3EA7B, 3EA8C, 3EA9E, 3EAB0, 3EAC2, 3EAD4, 3EAE6, 3EAF8, 3EB0A, 3EB1C, 3EB2E, 3EB40, 3EB52, 3EB63, 3EB75, 3EB87, 3EB99, 3EBAB, 3EBBD, 3EBCF, 3EBE1, 3EBF3, 3EC04, 3EC16, 3EC28, 3EC3A, 3EC4C, 3EC5E, 3EC6F, 3EC81, 3EC93, 3ECA5, 3ECB6, 3ECC8, 3ECDA, 3ECEC, 3ECFD, 3ED0F, 3ED21, 3ED33, 3ED44, 3ED56, 3ED67, 3ED79, 3ED8B, 3ED9C, 3EDAE, 3EDBF, 3EDD1, 3EDE3, 3EDF4, 3EE06, 3EE17, 3EE29, 3EE3A, 3EE4B, 3EE5D, 3EE6E, 3EE80, 3EE91, 3EEA2, 3EEB4, 3EEC5, 3EED6, 3EEE8, 3EEF9, 3EF0A, 3EF1B, 3EF2C, 3EF3E, 3EF4F, 3EF60, 3EF71, 3EF82, 3EF93, 3EFA4, 3EFB5, 3EFC6, 3EFD7, 3EFE8, 3EFF9, 3F00A, 3F01A, 3F02B, 3F03C, 3F04D, 3F05E, 3F06E, 3F07F, 3F090, 3F0A0, 3F0B1, 3F0C2, 3F0D2, 3F0E3, 3F0F3, 3F104, 3F114, 3F125, 3F135, 3F145, 3F156, 3F166, 3F176, 3F186, 3F197, 3F1A7, 3F1B7, 3F1C7, 3F1D7, 3F1E7, 3F1F7, 3F207, 3F217, 3F227, 3F237, 3F247, 3F257, 3F267, 3F277, 3F286, 3F296, 3F2A6, 3F2B5, 3F2C5, 3F2D5, 3F2E4, 3F2F4, 3F303, 3F313, 3F322, 3F331, 3F341, 3F350, 3F35F, 3F36F, 3F37E, 3F38D, 3F39C, 3F3AB, 3F3BA, 3F3C9, 3F3D8, 3F3E7, 3F3F6, 3F405, 3F414, 3F423, 3F432, 3F440, 3F44F, 3F45E, 3F46C, 3F47B, 3F48A, 3F498, 3F4A7, 3F4B5, 3F4C3, 3F4D2, 3F4E0, 3F4EF, 3F4FD, 3F50B, 3F519, 3F527, 3F535, 3F544, 3F552, 3F560, 3F56E, 3F57B, 3F589, 3F597, 3F5A5, 3F5B3, 3F5C1, 3F5CE, 3F5DC, 3F5EA, 3F5F7, 3F605, 3F612, 3F620, 3F62D, 3F63A, 3F648, 3F655, 3F662, 3F670, 3F67D, 3F68A, 3F697, 3F6A4, 3F6B1, 3F6BE, 3F6CB, 3F6D8, 3F6E5, 3F6F2, 3F6FE, 3F70B, 3F718, 3F725, 3F731, 3F73E, 3F74A, 3F757, 3F763, 3F770, 3F77C, 3F789, 3F795, 3F7A1, 3F7AD, 3F7BA, 3F7C6, 3F7D2, 3F7DE, 3F7EA, 3F7F6, 3F802, 3F80E, 3F81A, 3F826, 3F831, 3F83D, 3F849, 3F855, 3F860, 3F86C, 3F877, 3F883, 3F88E, 3F89A, 3F8A5, 3F8B1, 3F8BC, 3F8C7, 3F8D3, 3F8DE, 3F8E9, 3F8F4, 3F8FF, 3F90A, 3F915, 3F920, 3F92B, 3F936, 3F941, 3F94C, 3F957, 3F961, 3F96C, 3F977, 3F981, 3F98C, 3F996, 3F9A1, 3F9AB, 3F9B6, 3F9C0, 3F9CB, 3F9D5, 3F9DF, 3F9E9, 3F9F4, 3F9FE, 3FA08, 3FA12, 3FA1C, 3FA26, 3FA30, 3FA3A, 3FA44, 3FA4E, 3FA58, 3FA62, 3FA6B, 3FA75, 3FA7F, 3FA88, 3FA92, 3FA9C, 3FAA5, 3FAAF, 3FAB8, 3FAC2, 3FACB, 3FAD4, 3FADE, 3FAE7, 3FAF0, 3FAF9, 3FB03, 3FB0C, 3FB15, 3FB1E, 3FB27, 3FB30, 3FB39, 3FB42, 3FB4B, 3FB54, 3FB5D, 3FB65, 3FB6E, 3FB77, 3FB80, 3FB88, 3FB91, 3FB9A, 3FBA2, 3FBAB, 3FBB3, 3FBBC, 3FBC4, 3FBCC, 3FBD5, 3FBDD, 3FBE5, 3FBEE, 3FBF6, 3FBFE, 3FC06, 3FC0F, 3FC17, 3FC1F, 3FC27, 3FC2F, 3FC37, 3FC3F, 3FC47, 3FC4F, 3FC57, 3FC5E, 3FC66, 3FC6E, 3FC76, 3FC7D, 3FC85, 3FC8D, 3FC94, 3FC9C, 3FCA4, 3FCAB, 3FCB3, 3FCBA, 3FCC2, 3FCC9, 3FCD0, 3FCD8, 3FCDF, 3FCE6, 3FCEE, 3FCF5, 3FCFC, 3FD04, 3FD0B, 3FD12, 3FD19, 3FD20, 3FD27, 3FD2E, 3FD35, 3FD3C, 3FD43, 3FD4A, 3FD51, 3FD58, 3FD5F, 3FD66, 3FD6D, 3FD73, 3FD7A, 3FD81, 3FD88, 3FD8E, 3FD95, 3FD9C, 3FDA2, 3FDA9, 3FDAF, 3FDB6, 3FDBD, 3FDC3, 3FDCA, 3FDD0, 3FDD7, 3FDDD, 3FDE3, 3FDEA, 3FDF0, 3FDF6, 3FDFD, 3FE03, 3FE09, 3FE10, 3FE16, 3FE1C, 3FE22, 3FE28, 3FE2F, 3FE35, 3FE3B, 3FE41, 3FE47, 3FE4D, 3FE53, 3FE59, 3FE5F, 3FE65, 3FE6B, 3FE71, 3FE77, 3FE7D, 3FE83, 3FE89, 3FE8F, 3FE94, 3FE9A, 3FEA0, 3FEA6, 3FEAC, 3FEB1, 3FEB7, 3FEBD, 3FEC3, 3FEC8, 3FECE, 3FED4, 3FED9, 3FEDF, 3FEE5, 3FEEA, 3FEF0, 3FEF6, 3FEFB, 3FF01, 3FF06, 3FF0C, 3FF11, 3FF17, 3FF1C, 3FF22, 3FF27, 3FF2D, 3FF32, 3FF38, 3FF3D, 3FF42, 3FF48, 3FF4D, 3FF53, 3FF58, 3FF5D, 3FF63, 3FF68, 3FF6D, 3FF73, 3FF78, 3FF7D, 3FF83, 3FF88, 3FF8D, 3FF92, 3FF98, 3FF9D, 3FFA2, 3FFA7, 3FFAD, 3FFB2, 3FFB7, 3FFBC, 3FFC2, 3FFC7, 3FFCC, 3FFD1, 3FFD6, 3FFDB, 3FFE1, 3FFE6, 3FFEB, 3FFF0, 3FFF5, 3FFFA, 3FFFF;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_3d1bbfbe6849d726',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a182bea0210345b88af0ff07691bd9ee',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_3d1bbfbe6849d726',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFFB, 3FFF6, 3FFF1, 3FFEC, 3FFE7, 3FFE2, 3FFDC, 3FFD7, 3FFD2, 3FFCD, 3FFC8, 3FFC2, 3FFBD, 3FFB8, 3FFB3, 3FFAE, 3FFA8, 3FFA3, 3FF9E, 3FF99, 3FF93, 3FF8E, 3FF89, 3FF84, 3FF7E, 3FF79, 3FF74, 3FF6E, 3FF69, 3FF64, 3FF5E, 3FF59, 3FF54, 3FF4E, 3FF49, 3FF43, 3FF3E, 3FF39, 3FF33, 3FF2E, 3FF28, 3FF23, 3FF1D, 3FF18, 3FF12, 3FF0D, 3FF07, 3FF02, 3FEFC, 3FEF7, 3FEF1, 3FEEB, 3FEE6, 3FEE0, 3FEDA, 3FED5, 3FECF, 3FEC9, 3FEC4, 3FEBE, 3FEB8, 3FEB3, 3FEAD, 3FEA7, 3FEA1, 3FE9B, 3FE96, 3FE90, 3FE8A, 3FE84, 3FE7E, 3FE78, 3FE72, 3FE6C, 3FE66, 3FE60, 3FE5A, 3FE54, 3FE4E, 3FE48, 3FE42, 3FE3C, 3FE36, 3FE30, 3FE2A, 3FE23, 3FE1D, 3FE17, 3FE11, 3FE0A, 3FE04, 3FDFE, 3FDF8, 3FDF1, 3FDEB, 3FDE4, 3FDDE, 3FDD8, 3FDD1, 3FDCB, 3FDC4, 3FDBE, 3FDB7, 3FDB1, 3FDAA, 3FDA3, 3FD9D, 3FD96, 3FD8F, 3FD89, 3FD82, 3FD7B, 3FD75, 3FD6E, 3FD67, 3FD60, 3FD59, 3FD52, 3FD4B, 3FD44, 3FD3D, 3FD36, 3FD2F, 3FD28, 3FD21, 3FD1A, 3FD13, 3FD0C, 3FD05, 3FCFE, 3FCF6, 3FCEF, 3FCE8, 3FCE0, 3FCD9, 3FCD2, 3FCCA, 3FCC3, 3FCBB, 3FCB4, 3FCAC, 3FCA5, 3FC9D, 3FC96, 3FC8E, 3FC86, 3FC7F, 3FC77, 3FC6F, 3FC68, 3FC60, 3FC58, 3FC50, 3FC48, 3FC40, 3FC38, 3FC30, 3FC28, 3FC20, 3FC18, 3FC10, 3FC08, 3FC00, 3FBF7, 3FBEF, 3FBE7, 3FBDF, 3FBD6, 3FBCE, 3FBC6, 3FBBD, 3FBB5, 3FBAC, 3FBA4, 3FB9B, 3FB92, 3FB8A, 3FB81, 3FB78, 3FB70, 3FB67, 3FB5E, 3FB55, 3FB4C, 3FB43, 3FB3B, 3FB32, 3FB29, 3FB20, 3FB16, 3FB0D, 3FB04, 3FAFB, 3FAF2, 3FAE9, 3FADF, 3FAD6, 3FACD, 3FAC3, 3FABA, 3FAB0, 3FAA7, 3FA9D, 3FA94, 3FA8A, 3FA80, 3FA77, 3FA6D, 3FA63, 3FA59, 3FA50, 3FA46, 3FA3C, 3FA32, 3FA28, 3FA1E, 3FA14, 3FA0A, 3FA00, 3F9F5, 3F9EB, 3F9E1, 3F9D7, 3F9CC, 3F9C2, 3F9B8, 3F9AD, 3F9A3, 3F998, 3F98E, 3F983, 3F978, 3F96E, 3F963, 3F958, 3F94E, 3F943, 3F938, 3F92D, 3F922, 3F917, 3F90C, 3F901, 3F8F6, 3F8EB, 3F8E0, 3F8D4, 3F8C9, 3F8BE, 3F8B3, 3F8A7, 3F89C, 3F890, 3F885, 3F879, 3F86E, 3F862, 3F857, 3F84B, 3F83F, 3F833, 3F828, 3F81C, 3F810, 3F804, 3F7F8, 3F7EC, 3F7E0, 3F7D4, 3F7C8, 3F7BC, 3F7AF, 3F7A3, 3F797, 3F78B, 3F77E, 3F772, 3F765, 3F759, 3F74C, 3F740, 3F733, 3F727, 3F71A, 3F70D, 3F701, 3F6F4, 3F6E7, 3F6DA, 3F6CD, 3F6C0, 3F6B3, 3F6A6, 3F699, 3F68C, 3F67F, 3F672, 3F664, 3F657, 3F64A, 3F63D, 3F62F, 3F622, 3F614, 3F607, 3F5F9, 3F5EC, 3F5DE, 3F5D0, 3F5C3, 3F5B5, 3F5A7, 3F599, 3F58C, 3F57E, 3F570, 3F562, 3F554, 3F546, 3F538, 3F52A, 3F51B, 3F50D, 3F4FF, 3F4F1, 3F4E2, 3F4D4, 3F4C6, 3F4B7, 3F4A9, 3F49A, 3F48C, 3F47D, 3F46F, 3F460, 3F451, 3F443, 3F434, 3F425, 3F416, 3F407, 3F3F9, 3F3EA, 3F3DB, 3F3CC, 3F3BD, 3F3AE, 3F39E, 3F38F, 3F380, 3F371, 3F362, 3F352, 3F343, 3F334, 3F324, 3F315, 3F306, 3F2F6, 3F2E7, 3F2D7, 3F2C7, 3F2B8, 3F2A8, 3F298, 3F289, 3F279, 3F269, 3F259, 3F24A, 3F23A, 3F22A, 3F21A, 3F20A, 3F1FA, 3F1EA, 3F1DA, 3F1CA, 3F1BA, 3F1A9, 3F199, 3F189, 3F179, 3F168, 3F158, 3F148, 3F137, 3F127, 3F117, 3F106, 3F0F6, 3F0E5, 3F0D5, 3F0C4, 3F0B3, 3F0A3, 3F092, 3F082, 3F071, 3F060, 3F04F, 3F03F, 3F02E, 3F01D, 3F00C, 3EFFB, 3EFEA, 3EFD9, 3EFC8, 3EFB8, 3EFA7, 3EF96, 3EF84, 3EF73, 3EF62, 3EF51, 3EF40, 3EF2F, 3EF1E, 3EF0D, 3EEFB, 3EEEA, 3EED9, 3EEC8, 3EEB6, 3EEA5, 3EE94, 3EE82, 3EE71, 3EE5F, 3EE4E, 3EE3D, 3EE2B, 3EE1A, 3EE08, 3EDF7, 3EDE5, 3EDD4, 3EDC2, 3EDB1, 3ED9F, 3ED8D, 3ED7C, 3ED6A, 3ED58, 3ED47, 3ED35, 3ED23, 3ED12, 3ED00, 3ECEE, 3ECDD, 3ECCB, 3ECB9, 3ECA7, 3EC96, 3EC84, 3EC72, 3EC60, 3EC4E, 3EC3D, 3EC2B, 3EC19, 3EC07, 3EBF5, 3EBE3, 3EBD1, 3EBC0, 3EBAE, 3EB9C, 3EB8A, 3EB78, 3EB66, 3EB54, 3EB42, 3EB30, 3EB1E, 3EB0C, 3EAFB, 3EAE9, 3EAD7, 3EAC5, 3EAB3, 3EAA1, 3EA8F, 3EA7D, 3EA6B, 3EA59, 3EA47, 3EA35, 3EA23, 3EA12, 3EA00, 3E9EE, 3E9DC, 3E9CA, 3E9B8, 3E9A6, 3E994, 3E982, 3E970, 3E95F, 3E94D, 3E93B, 3E929, 3E917, 3E905, 3E8F4, 3E8E2, 3E8D0, 3E8BE, 3E8AC, 3E89B, 3E889, 3E877, 3E865, 3E854, 3E842, 3E830, 3E81F, 3E80D, 3E7FB, 3E7EA, 3E7D8, 3E7C7, 3E7B5, 3E7A3, 3E792, 3E780, 3E76F, 3E75D, 3E74C, 3E73B, 3E729, 3E718, 3E706, 3E6F5, 3E6E4, 3E6D2, 3E6C1, 3E6B0, 3E69F, 3E68E, 3E67C, 3E66B, 3E65A, 3E649, 3E638, 3E627, 3E616, 3E605, 3E5F4, 3E5E3, 3E5D2, 3E5C1, 3E5B1, 3E5A0, 3E58F, 3E57E, 3E56E, 3E55D, 3E54D, 3E53C, 3E52B, 3E51B, 3E50A, 3E4FA, 3E4EA, 3E4D9, 3E4C9, 3E4B9, 3E4A9, 3E498, 3E488, 3E478, 3E468, 3E458, 3E448, 3E438, 3E428, 3E419, 3E409, 3E3F9, 3E3EA, 3E3DA, 3E3CA, 3E3BB, 3E3AB, 3E39C, 3E38D, 3E37D, 3E36E, 3E35F, 3E350, 3E340, 3E331, 3E322, 3E313, 3E305, 3E2F6, 3E2E7, 3E2D8, 3E2CA, 3E2BB, 3E2AD, 3E29E, 3E290, 3E281, 3E273, 3E265, 3E257, 3E249, 3E23B, 3E22D, 3E21F, 3E211, 3E203, 3E1F5, 3E1E8, 3E1DA, 3E1CD, 3E1BF, 3E1B2, 3E1A5, 3E198, 3E18A, 3E17D, 3E170, 3E164, 3E157, 3E14A, 3E13D, 3E131, 3E124, 3E118, 3E10B, 3E0FF, 3E0F3, 3E0E7, 3E0DB, 3E0CF, 3E0C3, 3E0B7, 3E0AC, 3E0A0, 3E095, 3E089, 3E07E, 3E072, 3E067, 3E05C, 3E051, 3E046, 3E03C, 3E031, 3E026, 3E01C, 3E011, 3E007, 3DFFD, 3DFF3, 3DFE8, 3DFDF, 3DFD5, 3DFCB, 3DFC1, 3DFB8, 3DFAE, 3DFA5, 3DF9C, 3DF93, 3DF89, 3DF81, 3DF78, 3DF6F, 3DF66, 3DF5E, 3DF55, 3DF4D, 3DF45, 3DF3D, 3DF35, 3DF2D, 3DF25, 3DF1E, 3DF16, 3DF0F, 3DF07, 3DF00, 3DEF9, 3DEF2, 3DEEB, 3DEE5, 3DEDE, 3DED8, 3DED1, 3DECB, 3DEC5, 3DEBF, 3DEB9, 3DEB3, 3DEAE, 3DEA8, 3DEA3, 3DE9E, 3DE99, 3DE94, 3DE8F, 3DE8A, 3DE85, 3DE81, 3DE7D, 3DE78, 3DE74, 3DE70, 3DE6D, 3DE69, 3DE65, 3DE62, 3DE5F, 3DE5C, 3DE59, 3DE56, 3DE53, 3DE51, 3DE4E, 3DE4C, 3DE4A, 3DE48, 3DE46, 3DE44, 3DE43, 3DE41, 3DE40, 3DE3F, 3DE3E, 3DE3D, 3DE3C, 3DE3C, 3DE3B, 3DE3B, 3DE3B, 3DE3B, 3DE3C, 3DE3C, 3DE3C, 3DE3D, 3DE3E, 3DE3F, 3DE40, 3DE42, 3DE43, 3DE45, 3DE47, 3DE49, 3DE4B, 3DE4D, 3DE50, 3DE52, 3DE55, 3DE58, 3DE5B, 3DE5E, 3DE62, 3DE66, 3DE69, 3DE6D, 3DE72, 3DE76, 3DE7A, 3DE7F, 3DE84, 3DE89, 3DE8E, 3DE93, 3DE99, 3DE9F, 3DEA5, 3DEAB, 3DEB1, 3DEB8, 3DEBE, 3DEC5, 3DECC, 3DED3, 3DEDB, 3DEE2, 3DEEA, 3DEF2, 3DEFA, 3DF02, 3DF0B, 3DF13, 3DF1C, 3DF25, 3DF2E, 3DF38, 3DF42, 3DF4B, 3DF55, 3DF60, 3DF6A, 3DF75, 3DF7F, 3DF8A, 3DF96, 3DFA1, 3DFAD, 3DFB8, 3DFC4, 3DFD1, 3DFDD, 3DFEA, 3DFF6, 3E003, 3E011, 3E01E, 3E02C, 3E03A, 3E048, 3E056, 3E064, 3E073, 3E082, 3E091, 3E0A0, 3E0B0, 3E0C0, 3E0D0, 3E0E0, 3E0F0, 3E101, 3E112, 3E123, 3E134, 3E145, 3E157, 3E169, 3E17B, 3E18D, 3E1A0, 3E1B3, 3E1C6, 3E1D9, 3E1ED, 3E200, 3E214, 3E228, 3E23D, 3E251, 3E266, 3E27B, 3E291, 3E2A6, 3E2BC, 3E2D2, 3E2E8, 3E2FF, 3E315, 3E32C, 3E343, 3E35B, 3E372, 3E38A, 3E3A2, 3E3BB, 3E3D3, 3E3EC, 3E405, 3E41F, 3E438, 3E452, 3E46C, 3E486, 3E4A1, 3E4BC, 3E4D7, 3E4F2, 3E50D, 3E529, 3E545, 3E562, 3E57E, 3E59B, 3E5B8, 3E5D5, 3E5F3, 3E610, 3E62E, 3E64D, 3E66B, 3E68A, 3E6A9, 3E6C8, 3E6E8, 3E708, 3E728, 3E748, 3E769, 3E78A, 3E7AB, 3E7CC, 3E7EE, 3E810, 3E832, 3E854, 3E877, 3E89A, 3E8BD, 3E8E1, 3E904, 3E928, 3E94D, 3E971, 3E996, 3E9BB, 3E9E0, 3EA06, 3EA2C, 3EA52, 3EA79, 3EA9F, 3EAC6, 3EAEE, 3EB15, 3EB3D, 3EB65, 3EB8D, 3EBB6, 3EBDF, 3EC08, 3EC32, 3EC5B, 3EC85, 3ECB0, 3ECDA, 3ED05, 3ED30, 3ED5C, 3ED87, 3EDB3, 3EDE0, 3EE0C, 3EE39, 3EE66, 3EE94, 3EEC1, 3EEEF, 3EF1D, 3EF4C, 3EF7B, 3EFAA, 3EFD9, 3F009, 3F039, 3F069, 3F09A, 3F0CB, 3F0FC, 3F12D, 3F15F, 3F191, 3F1C4, 3F1F6, 3F229, 3F25C, 3F290, 3F2C4, 3F2F8, 3F32C, 3F361, 3F396, 3F3CB, 3F401, 3F436, 3F46D, 3F4A3, 3F4DA, 3F511, 3F548, 3F580, 3F5B8, 3F5F0, 3F629, 3F662, 3F69B, 3F6D4, 3F70E, 3F748, 3F783, 3F7BD, 3F7F8, 3F834, 3F86F, 3F8AB, 3F8E7, 3F924, 3F961, 3F99E, 3F9DB, 3FA19, 3FA57, 3FA96, 3FAD4, 3FB13, 3FB53, 3FB92, 3FBD2, 3FC13, 3FC53, 3FC94, 3FCD5, 3FD17, 3FD58, 3FD9B, 3FDDD, 3FE20, 3FE63, 3FEA6, 3FEEA, 3FF2E, 3FF72, 3FFB7, 3FFFC;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_2c851313e04aebd0',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '0500a21f80c3921ce2e07d31236395bc',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_2c851313e04aebd0',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 41, 87, CC, 113, 159, 1A0, 1E7, 22F, 276, 2BF, 307, 350, 399, 3E2, 42C, 476, 4C0, 50B, 556, 5A1, 5ED, 639, 685, 6D2, 71F, 76C, 7B9, 807, 855, 8A4, 8F3, 942, 991, 9E1, A31, A82, AD3, B24, B75, BC7, C19, C6B, CBE, D11, D64, DB8, E0C, E61, EB5, F0A, F5F, FB5, 100B, 1061, 10B8, 110F, 1166, 11BE, 1216, 126E, 12C7, 131F, 1379, 13D2, 142C, 1486, 14E1, 153C, 1597, 15F2, 164E, 16AA, 1707, 1764, 17C1, 181E, 187C, 18DA, 1939, 1998, 19F7, 1A56, 1AB6, 1B16, 1B76, 1BD7, 1C38, 1C9A, 1CFB, 1D5D, 1DC0, 1E22, 1E85, 1EE9, 1F4C, 1FB0, 2015, 2079, 20DE, 2144, 21A9, 220F, 2276, 22DC, 2343, 23AA, 2412, 247A, 24E2, 254B, 25B4, 261D, 2686, 26F0, 275A, 27C5, 2830, 289B, 2906, 2972, 29DE, 2A4B, 2AB8, 2B25, 2B92, 2C00, 2C6E, 2CDC, 2D4B, 2DBA, 2E29, 2E99, 2F09, 2F79, 2FEA, 305B, 30CC, 313E, 31B0, 3222, 3294, 3307, 337A, 33EE, 3462, 34D6, 354A, 35BF, 3634, 36AA, 371F, 3795, 380C, 3883, 38FA, 3971, 39E8, 3A60, 3AD9, 3B51, 3BCA, 3C43, 3CBD, 3D37, 3DB1, 3E2B, 3EA6, 3F21, 3F9C, 4018, 4094, 4110, 418D, 420A, 4287, 4305, 4382, 4401, 447F, 44FE, 457D, 45FC, 467C, 46FC, 477C, 47FD, 487E, 48FF, 4981, 4A02, 4A84, 4B07, 4B8A, 4C0D, 4C90, 4D14, 4D97, 4E1C, 4EA0, 4F25, 4FAA, 5030, 50B5, 513B, 51C2, 5248, 52CF, 5356, 53DE, 5465, 54ED, 5576, 55FE, 5687, 5711, 579A, 5824, 58AE, 5938, 59C3, 5A4E, 5AD9, 5B65, 5BF0, 5C7D, 5D09, 5D96, 5E22, 5EB0, 5F3D, 5FCB, 6059, 60E7, 6176, 6205, 6294, 6323, 63B3, 6443, 64D3, 6564, 65F5, 6686, 6717, 67A9, 683B, 68CD, 695F, 69F2, 6A85, 6B18, 6BAC, 6C40, 6CD4, 6D68, 6DFD, 6E92, 6F27, 6FBC, 7052, 70E8, 717E, 7214, 72AB, 7342, 73D9, 7470, 7508, 75A0, 7638, 76D1, 7769, 7802, 789C, 7935, 79CF, 7A69, 7B03, 7B9D, 7C38, 7CD3, 7D6E, 7E0A, 7EA5, 7F41, 7FDD, 807A, 8116, 81B3, 8250, 82EE, 838B, 8429, 84C7, 8565, 8604, 86A3, 8742, 87E1, 8880, 8920, 89C0, 8A60, 8B00, 8BA1, 8C42, 8CE3, 8D84, 8E25, 8EC7, 8F69, 900B, 90AD, 9150, 91F3, 9295, 9339, 93DC, 9480, 9523, 95C8, 966C, 9710, 97B5, 985A, 98FF, 99A4, 9A49, 9AEF, 9B95, 9C3B, 9CE1, 9D88, 9E2E, 9ED5, 9F7C, A024, A0CB, A173, A21A, A2C2, A36B, A413, A4BC, A564, A60D, A6B6, A760, A809, A8B3, A95D, AA07, AAB1, AB5B, AC06, ACB1, AD5B, AE06, AEB2, AF5D, B009, B0B4, B160, B20C, B2B9, B365, B412, B4BE, B56B, B618, B6C5, B773, B820, B8CE, B97C, BA2A, BAD8, BB86, BC34, BCE3, BD92, BE40, BEEF, BF9F, C04E, C0FD, C1AD, C25C, C30C, C3BC, C46C, C51D, C5CD, C67D, C72E, C7DF, C890, C941, C9F2, CAA3, CB54, CC06, CCB7, CD69, CE1B, CECD, CF7F, D031, D0E3, D196, D248, D2FB, D3AD, D460, D513, D5C6, D679, D72D, D7E0, D893, D947, D9FA, DAAE, DB62, DC16, DCCA, DD7E, DE32, DEE6, DF9B, E04F, E103, E1B8, E26D, E321, E3D6, E48B, E540, E5F5, E6AA, E75F, E815, E8CA, E97F, EA35, EAEA, EBA0, EC56, ED0B, EDC1, EE77, EF2D, EFE3, F099, F14F, F205, F2BB, F371, F427, F4DD, F594, F64A, F700, F7B7, F86D, F924, F9DA, FA91, FB47, FBFE, FCB5, FD6B, FE22, FED9, FF90, 10046, 100FD, 101B4, 1026B, 10322, 103D9, 10490, 10547, 105FD, 106B4, 1076B, 10822, 108D9, 10990, 10A47, 10AFE, 10BB5, 10C6C, 10D23, 10DDA, 10E91, 10F48, 10FFF, 110B6, 1116D, 11224, 112DA, 11391, 11448, 114FF, 115B6, 1166D, 11723, 117DA, 11891, 11948, 119FE, 11AB5, 11B6B, 11C22, 11CD9, 11D8F, 11E46, 11EFC, 11FB2, 12069, 1211F, 121D5, 1228C, 12342, 123F8, 124AE, 12564, 1261A, 126D0, 12786, 1283B, 128F1, 129A7, 12A5C, 12B12, 12BC7, 12C7D, 12D32, 12DE8, 12E9D, 12F52, 13007, 130BC, 13171, 13226, 132DA, 1338F, 13444, 134F8, 135AD, 13661, 13715, 137C9, 1387D, 13931, 139E5, 13A99, 13B4D, 13C00, 13CB4, 13D67, 13E1A, 13ECE, 13F81, 14034, 140E6, 14199, 1424C, 142FE, 143B1, 14463, 14515, 145C7, 14679, 1472B, 147DD, 1488E, 14940, 149F1, 14AA2, 14B53, 14C04, 14CB5, 14D65, 14E16, 14EC6, 14F76, 15026, 150D6, 15186, 15236, 152E5, 15395, 15444, 154F3, 155A2, 15650, 156FF, 157AD, 1585C, 1590A, 159B8, 15A65, 15B13, 15BC0, 15C6E, 15D1B, 15DC8, 15E74, 15F21, 15FCD, 16079, 16125, 161D1, 1627D, 16328, 163D4, 1647F, 1652A, 165D5, 1667F, 16729, 167D4, 1687E, 16927, 169D1, 16A7A, 16B23, 16BCC, 16C75, 16D1E, 16DC6, 16E6E, 16F16, 16FBE, 17065, 1710D, 171B4, 1725A, 17301, 173A7, 1744E, 174F4, 17599, 1763F, 176E4, 17789, 1782E, 178D3, 17977, 17A1B, 17ABF, 17B63, 17C06, 17CA9, 17D4C, 17DEF, 17E91, 17F34, 17FD5, 18077, 18119, 181BA, 1825B, 182FB, 1839C, 1843C, 184DC, 1857C, 1861B, 186BA, 18759, 187F8, 18896, 18934, 189D2, 18A6F, 18B0C, 18BA9, 18C46, 18CE3, 18D7F, 18E1B, 18EB6, 18F51, 18FEC, 19087, 19122, 191BC, 19256, 192EF, 19388, 19421, 194BA, 19552, 195EA, 19682, 1971A, 197B1, 19848, 198DE, 19975, 19A0B, 19AA0, 19B36, 19BCB, 19C5F, 19CF4, 19D88, 19E1C, 19EAF, 19F42, 19FD5, 1A067, 1A0FA, 1A18B, 1A21D, 1A2AE, 1A33F, 1A3CF, 1A460, 1A4EF, 1A57F, 1A60E, 1A69D, 1A72C, 1A7BA, 1A847, 1A8D5, 1A962, 1A9EF, 1AA7B, 1AB07, 1AB93, 1AC1F, 1ACAA, 1AD34, 1ADBF, 1AE49, 1AED2, 1AF5C, 1AFE5, 1B06D, 1B0F5, 1B17D, 1B205, 1B28C, 1B312, 1B399, 1B41F, 1B4A4, 1B52A, 1B5AF, 1B633, 1B6B7, 1B73B, 1B7BE, 1B841, 1B8C4, 1B946, 1B9C8, 1BA4A, 1BACB, 1BB4B, 1BBCC, 1BC4C, 1BCCB, 1BD4A, 1BDC9, 1BE47, 1BEC5, 1BF43, 1BFC0, 1C03D, 1C0B9, 1C135, 1C1B1, 1C22C, 1C2A7, 1C321, 1C39B, 1C415, 1C48E, 1C507, 1C57F, 1C5F7, 1C66E, 1C6E6, 1C75C, 1C7D2, 1C848, 1C8BE, 1C933, 1C9A7, 1CA1C, 1CA8F, 1CB03, 1CB76, 1CBE8, 1CC5A, 1CCCC, 1CD3D, 1CDAE, 1CE1E, 1CE8E, 1CEFD, 1CF6C, 1CFDB, 1D049, 1D0B7, 1D124, 1D191, 1D1FD, 1D269, 1D2D5, 1D340, 1D3AB, 1D415, 1D47F, 1D4E8, 1D551, 1D5B9, 1D621, 1D689, 1D6F0, 1D756, 1D7BC, 1D822, 1D887, 1D8EC, 1D950, 1D9B4, 1DA18, 1DA7B, 1DADD, 1DB3F, 1DBA1, 1DC02, 1DC62, 1DCC2, 1DD22, 1DD81, 1DDE0, 1DE3E, 1DE9C, 1DEFA, 1DF56, 1DFB3, 1E00F, 1E06A, 1E0C5, 1E120, 1E17A, 1E1D3, 1E22C, 1E285, 1E2DD, 1E335, 1E38C, 1E3E2, 1E438, 1E48E, 1E4E3, 1E538, 1E58C, 1E5E0, 1E633, 1E686, 1E6D8, 1E72A, 1E77B, 1E7CC, 1E81C, 1E86C, 1E8BB, 1E90A, 1E959, 1E9A6, 1E9F4, 1EA41, 1EA8D, 1EAD9, 1EB24, 1EB6F, 1EBB9, 1EC03, 1EC4C, 1EC95, 1ECDD, 1ED25, 1ED6C, 1EDB3, 1EDF9, 1EE3F, 1EE84, 1EEC9, 1EF0D, 1EF51, 1EF94, 1EFD7, 1F019, 1F05B, 1F09C, 1F0DC, 1F11D, 1F15C, 1F19B, 1F1DA, 1F218, 1F255, 1F292, 1F2CF, 1F30B, 1F346, 1F381, 1F3BB, 1F3F5, 1F42F, 1F468, 1F4A0, 1F4D8, 1F50F, 1F546, 1F57C, 1F5B1, 1F5E7, 1F61B, 1F64F, 1F683, 1F6B6, 1F6E8, 1F71A, 1F74C, 1F77D, 1F7AD, 1F7DD, 1F80C, 1F83B, 1F869, 1F897, 1F8C4, 1F8F1, 1F91D, 1F948, 1F973, 1F99E, 1F9C8, 1F9F1, 1FA1A, 1FA42, 1FA6A, 1FA91, 1FAB8, 1FADE, 1FB04, 1FB29, 1FB4E, 1FB72, 1FB95, 1FBB8, 1FBDA, 1FBFC, 1FC1D, 1FC3E, 1FC5E, 1FC7E, 1FC9D, 1FCBC, 1FCDA, 1FCF7, 1FD14, 1FD31, 1FD4C, 1FD68, 1FD83, 1FD9D, 1FDB6, 1FDD0, 1FDE8, 1FE00, 1FE18, 1FE2F, 1FE45, 1FE5B, 1FE70, 1FE85, 1FE99, 1FEAC, 1FEC0, 1FED2, 1FEE4, 1FEF6, 1FF06, 1FF17, 1FF26, 1FF36, 1FF44, 1FF52, 1FF60, 1FF6D, 1FF7A, 1FF85, 1FF91, 1FF9C, 1FFA6, 1FFB0, 1FFB9, 1FFC1, 1FFC9, 1FFD1, 1FFD8, 1FFDE, 1FFE4, 1FFE9, 1FFEE, 1FFF2, 1FFF6, 1FFF9, 1FFFB, 1FFFD, 1FFFF, 1FFFF, 1FFFF;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_c196405d618f523e',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '1026d5962c8629824bc8e6f36f889325',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_c196405d618f523e',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 1FFFF, 1FFFF, 1FFFE, 1FFFC, 1FFF9, 1FFF6, 1FFF3, 1FFEF, 1FFEA, 1FFE5, 1FFDF, 1FFD9, 1FFD2, 1FFCA, 1FFC2, 1FFBA, 1FFB1, 1FFA7, 1FF9D, 1FF92, 1FF87, 1FF7B, 1FF6E, 1FF61, 1FF54, 1FF46, 1FF37, 1FF28, 1FF18, 1FF08, 1FEF7, 1FEE6, 1FED4, 1FEC2, 1FEAF, 1FE9B, 1FE87, 1FE72, 1FE5D, 1FE47, 1FE31, 1FE1A, 1FE03, 1FDEB, 1FDD2, 1FDB9, 1FDA0, 1FD85, 1FD6B, 1FD4F, 1FD34, 1FD17, 1FCFA, 1FCDD, 1FCBF, 1FCA1, 1FC82, 1FC62, 1FC42, 1FC21, 1FC00, 1FBDE, 1FBBC, 1FB99, 1FB75, 1FB51, 1FB2D, 1FB08, 1FAE2, 1FABC, 1FA96, 1FA6E, 1FA47, 1FA1E, 1F9F6, 1F9CC, 1F9A2, 1F978, 1F94D, 1F921, 1F8F5, 1F8C9, 1F89C, 1F86E, 1F840, 1F811, 1F7E2, 1F7B2, 1F782, 1F751, 1F720, 1F6EE, 1F6BB, 1F688, 1F655, 1F621, 1F5EC, 1F5B7, 1F582, 1F54B, 1F515, 1F4DE, 1F4A6, 1F46E, 1F435, 1F3FC, 1F3C2, 1F387, 1F34D, 1F311, 1F2D5, 1F299, 1F25C, 1F21F, 1F1E1, 1F1A2, 1F163, 1F123, 1F0E3, 1F0A3, 1F062, 1F020, 1EFDE, 1EF9B, 1EF58, 1EF15, 1EED0, 1EE8C, 1EE47, 1EE01, 1EDBB, 1ED74, 1ED2D, 1ECE5, 1EC9D, 1EC54, 1EC0B, 1EBC1, 1EB77, 1EB2C, 1EAE1, 1EA95, 1EA49, 1E9FC, 1E9AF, 1E961, 1E913, 1E8C4, 1E875, 1E825, 1E7D5, 1E784, 1E733, 1E6E1, 1E68F, 1E63C, 1E5E9, 1E595, 1E541, 1E4ED, 1E497, 1E442, 1E3EC, 1E395, 1E33E, 1E2E7, 1E28E, 1E236, 1E1DD, 1E183, 1E12A, 1E0CF, 1E074, 1E019, 1DFBD, 1DF61, 1DF04, 1DEA6, 1DE49, 1DDEA, 1DD8C, 1DD2D, 1DCCD, 1DC6D, 1DC0C, 1DBAB, 1DB4A, 1DAE8, 1DA85, 1DA22, 1D9BF, 1D95B, 1D8F7, 1D892, 1D82D, 1D7C7, 1D761, 1D6FB, 1D694, 1D62C, 1D5C4, 1D55C, 1D4F3, 1D48A, 1D420, 1D3B6, 1D34C, 1D2E1, 1D275, 1D209, 1D19D, 1D130, 1D0C3, 1D055, 1CFE7, 1CF78, 1CF09, 1CE9A, 1CE2A, 1CDBA, 1CD49, 1CCD8, 1CC66, 1CBF4, 1CB82, 1CB0F, 1CA9C, 1CA28, 1C9B4, 1C940, 1C8CB, 1C855, 1C7DF, 1C769, 1C6F3, 1C67B, 1C604, 1C58C, 1C514, 1C49B, 1C422, 1C3A8, 1C32F, 1C2B4, 1C23A, 1C1BE, 1C143, 1C0C7, 1C04B, 1BFCE, 1BF51, 1BED3, 1BE55, 1BDD7, 1BD58, 1BCD9, 1BC5A, 1BBDA, 1BB59, 1BAD9, 1BA58, 1B9D6, 1B954, 1B8D2, 1B850, 1B7CD, 1B749, 1B6C6, 1B642, 1B5BD, 1B538, 1B4B3, 1B42D, 1B3A7, 1B321, 1B29A, 1B213, 1B18C, 1B104, 1B07C, 1AFF3, 1AF6B, 1AEE1, 1AE58, 1ADCE, 1AD44, 1ACB9, 1AC2E, 1ABA2, 1AB17, 1AA8B, 1A9FE, 1A972, 1A8E4, 1A857, 1A7C9, 1A73B, 1A6AD, 1A61E, 1A58F, 1A4FF, 1A46F, 1A3DF, 1A34F, 1A2BE, 1A22D, 1A19B, 1A10A, 1A077, 19FE5, 19F52, 19EBF, 19E2C, 19D98, 19D04, 19C70, 19BDB, 19B46, 19AB1, 19A1B, 19985, 198EF, 19858, 197C1, 1972A, 19693, 195FB, 19563, 194CB, 19432, 19399, 19300, 19266, 191CD, 19132, 19098, 18FFD, 18F62, 18EC7, 18E2C, 18D90, 18CF4, 18C57, 18BBB, 18B1E, 18A81, 189E3, 18945, 188A7, 18809, 1876A, 186CC, 1862C, 1858D, 184ED, 1844E, 183AD, 1830D, 1826C, 181CB, 1812A, 18089, 17FE7, 17F45, 17EA3, 17E01, 17D5E, 17CBB, 17C18, 17B75, 17AD1, 17A2D, 17989, 178E5, 17840, 1779B, 176F6, 17651, 175AC, 17506, 17460, 173BA, 17313, 1726D, 171C6, 1711F, 17078, 16FD0, 16F28, 16E81, 16DD8, 16D30, 16C88, 16BDF, 16B36, 16A8D, 169E3, 1693A, 16890, 167E6, 1673C, 16692, 165E7, 1653D, 16492, 163E7, 1633B, 16290, 161E4, 16138, 1608C, 15FE0, 15F34, 15E87, 15DDB, 15D2E, 15C81, 15BD3, 15B26, 15A78, 159CB, 1591D, 1586F, 157C1, 15712, 15664, 155B5, 15506, 15457, 153A8, 152F9, 15249, 15199, 150EA, 1503A, 14F8A, 14EDA, 14E29, 14D79, 14CC8, 14C17, 14B67, 14AB6, 14A04, 14953, 148A2, 147F0, 1473F, 1468D, 145DB, 14529, 14477, 143C4, 14312, 14260, 141AD, 140FA, 14047, 13F94, 13EE1, 13E2E, 13D7B, 13CC8, 13C14, 13B61, 13AAD, 139F9, 13945, 13891, 137DD, 13729, 13675, 135C1, 1350C, 13458, 133A3, 132EE, 1323A, 13185, 130D0, 1301B, 12F66, 12EB1, 12DFC, 12D46, 12C91, 12BDC, 12B26, 12A71, 129BB, 12905, 12850, 1279A, 126E4, 1262E, 12578, 124C2, 1240C, 12356, 122A0, 121E9, 12133, 1207D, 11FC7, 11F10, 11E5A, 11DA3, 11CED, 11C36, 11B80, 11AC9, 11A12, 1195C, 118A5, 117EE, 11738, 11681, 115CA, 11513, 1145C, 113A6, 112EF, 11238, 11181, 110CA, 11013, 10F5C, 10EA5, 10DEE, 10D37, 10C80, 10BC9, 10B12, 10A5B, 109A5, 108EE, 10837, 10780, 106C9, 10612, 1055B, 104A4, 103ED, 10336, 1027F, 101C8, 10112, 1005B, FFA4, FEED, FE36, FD80, FCC9, FC12, FB5C, FAA5, F9EF, F938, F882, F7CB, F715, F65E, F5A8, F4F2, F43B, F385, F2CF, F219, F163, F0AD, EFF7, EF41, EE8B, EDD5, ED1F, EC6A, EBB4, EAFF, EA49, E994, E8DE, E829, E774, E6BE, E609, E554, E49F, E3EA, E336, E281, E1CC, E118, E063, DFAF, DEFA, DE46, DD92, DCDE, DC2A, DB76, DAC2, DA0E, D95B, D8A7, D7F4, D741, D68D, D5DA, D527, D474, D3C1, D30F, D25C, D1AA, D0F7, D045, CF93, CEE1, CE2F, CD7D, CCCB, CC1A, CB68, CAB7, CA05, C954, C8A3, C7F2, C742, C691, C5E1, C530, C480, C3D0, C320, C270, C1C0, C111, C061, BFB2, BF03, BE54, BDA5, BCF7, BC48, BB9A, BAEB, BA3D, B98F, B8E1, B834, B786, B6D9, B62C, B57F, B4D2, B425, B378, B2CC, B220, B174, B0C8, B01C, AF70, AEC5, AE1A, AD6F, ACC4, AC19, AB6E, AAC4, AA1A, A970, A8C6, A81C, A773, A6C9, A620, A577, A4CF, A426, A37E, A2D5, A22D, A186, A0DE, A036, 9F8F, 9EE8, 9E41, 9D9B, 9CF4, 9C4E, 9BA8, 9B02, 9A5C, 99B7, 9911, 986C, 97C7, 9723, 967E, 95DA, 9536, 9492, 93EF, 934B, 92A8, 9205, 9162, 90C0, 901D, 8F7B, 8ED9, 8E38, 8D96, 8CF5, 8C54, 8BB3, 8B12, 8A72, 89D2, 8932, 8892, 87F3, 8754, 86B5, 8616, 8577, 84D9, 843B, 839D, 82FF, 8262, 81C5, 8128, 808B, 7FEF, 7F53, 7EB7, 7E1B, 7D80, 7CE5, 7C4A, 7BAF, 7B14, 7A7A, 79E0, 7946, 78AD, 7814, 777B, 76E2, 764A, 75B1, 7519, 7482, 73EA, 7353, 72BC, 7225, 718F, 70F9, 7063, 6FCD, 6F38, 6EA3, 6E0E, 6D79, 6CE5, 6C51, 6BBD, 6B29, 6A96, 6A03, 6970, 68DE, 684C, 67BA, 6728, 6697, 6605, 6575, 64E4, 6454, 63C4, 6334, 62A4, 6215, 6186, 60F8, 6069, 5FDB, 5F4D, 5EC0, 5E33, 5DA6, 5D19, 5C8D, 5C01, 5B75, 5AE9, 5A5E, 59D3, 5948, 58BE, 5834, 57AA, 5720, 5697, 560E, 5586, 54FD, 5475, 53ED, 5366, 52DF, 5258, 51D1, 514B, 50C5, 503F, 4FBA, 4F34, 4EB0, 4E2B, 4DA7, 4D23, 4C9F, 4C1C, 4B99, 4B16, 4A94, 4A11, 4990, 490E, 488D, 480C, 478B, 470B, 468B, 460B, 458C, 450D, 448E, 440F, 4391, 4313, 4296, 4218, 419B, 411F, 40A2, 4026, 3FAB, 3F2F, 3EB4, 3E39, 3DBF, 3D45, 3CCB, 3C51, 3BD8, 3B5F, 3AE7, 3A6E, 39F6, 397F, 3907, 3890, 381A, 37A3, 372D, 36B7, 3642, 35CD, 3558, 34E4, 346F, 33FC, 3388, 3315, 32A2, 322F, 31BD, 314B, 30D9, 3068, 2FF7, 2F86, 2F16, 2EA6, 2E36, 2DC7, 2D58, 2CE9, 2C7B, 2C0D, 2B9F, 2B32, 2AC4, 2A58, 29EB, 297F, 2913, 28A8, 283C, 27D2, 2767, 26FD, 2693, 2629, 25C0, 2557, 24EF, 2486, 241E, 23B7, 234F, 22E8, 2282, 221B, 21B5, 2150, 20EA, 2085, 2021, 1FBC, 1F58, 1EF5, 1E91, 1E2E, 1DCB, 1D69, 1D07, 1CA5, 1C44, 1BE3, 1B82, 1B21, 1AC1, 1A62, 1A02, 19A3, 1944, 18E6, 1887, 182A, 17CC, 176F, 1712, 16B6, 1659, 15FE, 15A2, 1547, 14EC, 1491, 1437, 13DD, 1384, 132A, 12D1, 1279, 1220, 11C8, 1171, 111A, 10C3, 106C, 1016, FC0, F6A, F15, EBF, E6B, E16, DC2, D6F, D1B, CC8, C75, C23, BD1, B7F, B2E, ADC, A8C, A3B, 9EB, 99B, 94C, 8FC, 8AE, 85F, 811, 7C3, 775, 728, 6DB, 68E, 642, 5F6, 5AB, 55F, 514, 4C9, 47F, 435, 3EB, 3A2, 359, 310, 2C8, 27F, 238, 1F0, 1A9, 162, 11B, D5, 8F, 4A, 4;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_eb4ba4ee5ad07826',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'bf8a162d28ea0ba37cc6f52d40c8277c',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_eb4ba4ee5ad07826',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFBF, 3FF7B, 3FF36, 3FEF2, 3FEAF, 3FE6B, 3FE28, 3FDE5, 3FDA3, 3FD61, 3FD1F, 3FCDD, 3FC9C, 3FC5B, 3FC1B, 3FBDA, 3FB9A, 3FB5B, 3FB1B, 3FADC, 3FA9E, 3FA5F, 3FA21, 3F9E3, 3F9A6, 3F969, 3F92C, 3F8EF, 3F8B3, 3F877, 3F83B, 3F800, 3F7C5, 3F78A, 3F750, 3F716, 3F6DC, 3F6A2, 3F669, 3F630, 3F5F8, 3F5BF, 3F587, 3F550, 3F518, 3F4E1, 3F4AA, 3F474, 3F43E, 3F408, 3F3D2, 3F39D, 3F368, 3F333, 3F2FF, 3F2CA, 3F297, 3F263, 3F230, 3F1FD, 3F1CA, 3F198, 3F166, 3F134, 3F103, 3F0D1, 3F0A0, 3F070, 3F040, 3F00F, 3EFE0, 3EFB0, 3EF81, 3EF52, 3EF24, 3EEF5, 3EEC7, 3EE9A, 3EE6C, 3EE3F, 3EE12, 3EDE6, 3EDB9, 3ED8D, 3ED62, 3ED36, 3ED0B, 3ECE0, 3ECB5, 3EC8B, 3EC61, 3EC37, 3EC0E, 3EBE4, 3EBBC, 3EB93, 3EB6A, 3EB42, 3EB1B, 3EAF3, 3EACC, 3EAA5, 3EA7E, 3EA57, 3EA31, 3EA0B, 3E9E6, 3E9C0, 3E99B, 3E976, 3E952, 3E92D, 3E909, 3E8E6, 3E8C2, 3E89F, 3E87C, 3E859, 3E837, 3E814, 3E7F3, 3E7D1, 3E7AF, 3E78E, 3E76D, 3E74D, 3E72C, 3E70C, 3E6ED, 3E6CD, 3E6AE, 3E68F, 3E670, 3E651, 3E633, 3E615, 3E5F7, 3E5D9, 3E5BC, 3E59F, 3E582, 3E566, 3E549, 3E52D, 3E512, 3E4F6, 3E4DB, 3E4C0, 3E4A5, 3E48A, 3E470, 3E456, 3E43C, 3E423, 3E409, 3E3F0, 3E3D7, 3E3BF, 3E3A6, 3E38E, 3E376, 3E35E, 3E347, 3E330, 3E319, 3E302, 3E2EC, 3E2D5, 3E2BF, 3E2AA, 3E294, 3E27F, 3E26A, 3E255, 3E240, 3E22C, 3E218, 3E204, 3E1F0, 3E1DC, 3E1C9, 3E1B6, 3E1A3, 3E191, 3E17E, 3E16C, 3E15A, 3E148, 3E137, 3E126, 3E115, 3E104, 3E0F3, 3E0E3, 3E0D2, 3E0C2, 3E0B3, 3E0A3, 3E094, 3E085, 3E076, 3E067, 3E059, 3E04A, 3E03C, 3E02E, 3E021, 3E013, 3E006, 3DFF9, 3DFEC, 3DFDF, 3DFD3, 3DFC7, 3DFBB, 3DFAF, 3DFA3, 3DF98, 3DF8D, 3DF82, 3DF77, 3DF6C, 3DF62, 3DF58, 3DF4E, 3DF44, 3DF3A, 3DF31, 3DF27, 3DF1E, 3DF15, 3DF0D, 3DF04, 3DEFC, 3DEF4, 3DEEC, 3DEE4, 3DEDC, 3DED5, 3DECE, 3DEC7, 3DEC0, 3DEB9, 3DEB3, 3DEAD, 3DEA6, 3DEA0, 3DE9B, 3DE95, 3DE90, 3DE8B, 3DE85, 3DE81, 3DE7C, 3DE77, 3DE73, 3DE6F, 3DE6B, 3DE67, 3DE63, 3DE60, 3DE5C, 3DE59, 3DE56, 3DE53, 3DE51, 3DE4E, 3DE4C, 3DE4A, 3DE48, 3DE46, 3DE44, 3DE43, 3DE41, 3DE40, 3DE3F, 3DE3E, 3DE3E, 3DE3D, 3DE3D, 3DE3C, 3DE3C, 3DE3C, 3DE3C, 3DE3D, 3DE3D, 3DE3E, 3DE3F, 3DE40, 3DE41, 3DE42, 3DE43, 3DE45, 3DE47, 3DE48, 3DE4A, 3DE4D, 3DE4F, 3DE51, 3DE54, 3DE56, 3DE59, 3DE5C, 3DE5F, 3DE63, 3DE66, 3DE69, 3DE6D, 3DE71, 3DE75, 3DE79, 3DE7D, 3DE81, 3DE86, 3DE8A, 3DE8F, 3DE94, 3DE99, 3DE9E, 3DEA3, 3DEA9, 3DEAE, 3DEB4, 3DEB9, 3DEBF, 3DEC5, 3DECB, 3DED2, 3DED8, 3DEDE, 3DEE5, 3DEEC, 3DEF2, 3DEF9, 3DF00, 3DF08, 3DF0F, 3DF16, 3DF1E, 3DF25, 3DF2D, 3DF35, 3DF3D, 3DF45, 3DF4D, 3DF55, 3DF5E, 3DF66, 3DF6F, 3DF78, 3DF80, 3DF89, 3DF92, 3DF9C, 3DFA5, 3DFAE, 3DFB8, 3DFC1, 3DFCB, 3DFD5, 3DFDE, 3DFE8, 3DFF2, 3DFFC, 3E007, 3E011, 3E01B, 3E026, 3E031, 3E03B, 3E046, 3E051, 3E05C, 3E067, 3E072, 3E07D, 3E089, 3E094, 3E0A0, 3E0AB, 3E0B7, 3E0C3, 3E0CE, 3E0DA, 3E0E6, 3E0F3, 3E0FF, 3E10B, 3E117, 3E124, 3E130, 3E13D, 3E149, 3E156, 3E163, 3E170, 3E17D, 3E18A, 3E197, 3E1A4, 3E1B1, 3E1BF, 3E1CC, 3E1DA, 3E1E7, 3E1F5, 3E202, 3E210, 3E21E, 3E22C, 3E23A, 3E248, 3E256, 3E264, 3E272, 3E281, 3E28F, 3E29D, 3E2AC, 3E2BA, 3E2C9, 3E2D7, 3E2E6, 3E2F5, 3E304, 3E313, 3E322, 3E331, 3E340, 3E34F, 3E35E, 3E36D, 3E37C, 3E38C, 3E39B, 3E3AA, 3E3BA, 3E3C9, 3E3D9, 3E3E9, 3E3F8, 3E408, 3E418, 3E427, 3E437, 3E447, 3E457, 3E467, 3E477, 3E487, 3E497, 3E4A8, 3E4B8, 3E4C8, 3E4D8, 3E4E9, 3E4F9, 3E509, 3E51A, 3E52A, 3E53B, 3E54B, 3E55C, 3E56D, 3E57D, 3E58E, 3E59F, 3E5AF, 3E5C0, 3E5D1, 3E5E2, 3E5F3, 3E604, 3E615, 3E626, 3E637, 3E648, 3E659, 3E66A, 3E67B, 3E68C, 3E69E, 3E6AF, 3E6C0, 3E6D1, 3E6E3, 3E6F4, 3E705, 3E717, 3E728, 3E739, 3E74B, 3E75C, 3E76E, 3E77F, 3E791, 3E7A2, 3E7B4, 3E7C5, 3E7D7, 3E7E8, 3E7FA, 3E80C, 3E81D, 3E82F, 3E841, 3E852, 3E864, 3E876, 3E888, 3E899, 3E8AB, 3E8BD, 3E8CF, 3E8E0, 3E8F2, 3E904, 3E916, 3E928, 3E93A, 3E94B, 3E95D, 3E96F, 3E981, 3E993, 3E9A5, 3E9B7, 3E9C8, 3E9DA, 3E9EC, 3E9FE, 3EA10, 3EA22, 3EA34, 3EA46, 3EA58, 3EA6A, 3EA7C, 3EA8E, 3EA9F, 3EAB1, 3EAC3, 3EAD5, 3EAE7, 3EAF9, 3EB0B, 3EB1D, 3EB2F, 3EB41, 3EB53, 3EB65, 3EB77, 3EB88, 3EB9A, 3EBAC, 3EBBE, 3EBD0, 3EBE2, 3EBF4, 3EC06, 3EC17, 3EC29, 3EC3B, 3EC4D, 3EC5F, 3EC70, 3EC82, 3EC94, 3ECA6, 3ECB8, 3ECC9, 3ECDB, 3ECED, 3ECFF, 3ED10, 3ED22, 3ED34, 3ED45, 3ED57, 3ED69, 3ED7A, 3ED8C, 3ED9D, 3EDAF, 3EDC1, 3EDD2, 3EDE4, 3EDF5, 3EE07, 3EE18, 3EE2A, 3EE3B, 3EE4D, 3EE5E, 3EE6F, 3EE81, 3EE92, 3EEA3, 3EEB5, 3EEC6, 3EED7, 3EEE9, 3EEFA, 3EF0B, 3EF1C, 3EF2D, 3EF3F, 3EF50, 3EF61, 3EF72, 3EF83, 3EF94, 3EFA5, 3EFB6, 3EFC7, 3EFD8, 3EFE9, 3EFFA, 3F00B, 3F01C, 3F02C, 3F03D, 3F04E, 3F05F, 3F06F, 3F080, 3F091, 3F0A1, 3F0B2, 3F0C3, 3F0D3, 3F0E4, 3F0F4, 3F105, 3F115, 3F126, 3F136, 3F146, 3F157, 3F167, 3F177, 3F188, 3F198, 3F1A8, 3F1B8, 3F1C8, 3F1D8, 3F1E8, 3F1F8, 3F208, 3F218, 3F228, 3F238, 3F248, 3F258, 3F268, 3F278, 3F287, 3F297, 3F2A7, 3F2B6, 3F2C6, 3F2D6, 3F2E5, 3F2F5, 3F304, 3F314, 3F323, 3F332, 3F342, 3F351, 3F360, 3F370, 3F37F, 3F38E, 3F39D, 3F3AC, 3F3BB, 3F3CA, 3F3D9, 3F3E8, 3F3F7, 3F406, 3F415, 3F424, 3F433, 3F441, 3F450, 3F45F, 3F46D, 3F47C, 3F48A, 3F499, 3F4A8, 3F4B6, 3F4C4, 3F4D3, 3F4E1, 3F4EF, 3F4FE, 3F50C, 3F51A, 3F528, 3F536, 3F544, 3F552, 3F560, 3F56E, 3F57C, 3F58A, 3F598, 3F5A6, 3F5B4, 3F5C1, 3F5CF, 3F5DD, 3F5EA, 3F5F8, 3F605, 3F613, 3F620, 3F62E, 3F63B, 3F649, 3F656, 3F663, 3F670, 3F67E, 3F68B, 3F698, 3F6A5, 3F6B2, 3F6BF, 3F6CC, 3F6D9, 3F6E6, 3F6F2, 3F6FF, 3F70C, 3F719, 3F725, 3F732, 3F73F, 3F74B, 3F758, 3F764, 3F771, 3F77D, 3F789, 3F796, 3F7A2, 3F7AE, 3F7BA, 3F7C7, 3F7D3, 3F7DF, 3F7EB, 3F7F7, 3F803, 3F80F, 3F81B, 3F826, 3F832, 3F83E, 3F84A, 3F855, 3F861, 3F86D, 3F878, 3F884, 3F88F, 3F89B, 3F8A6, 3F8B1, 3F8BD, 3F8C8, 3F8D3, 3F8DE, 3F8EA, 3F8F5, 3F900, 3F90B, 3F916, 3F921, 3F92C, 3F937, 3F942, 3F94C, 3F957, 3F962, 3F96D, 3F977, 3F982, 3F98D, 3F997, 3F9A2, 3F9AC, 3F9B7, 3F9C1, 3F9CB, 3F9D6, 3F9E0, 3F9EA, 3F9F4, 3F9FF, 3FA09, 3FA13, 3FA1D, 3FA27, 3FA31, 3FA3B, 3FA45, 3FA4F, 3FA58, 3FA62, 3FA6C, 3FA76, 3FA7F, 3FA89, 3FA93, 3FA9C, 3FAA6, 3FAAF, 3FAB9, 3FAC2, 3FACC, 3FAD5, 3FADE, 3FAE8, 3FAF1, 3FAFA, 3FB03, 3FB0C, 3FB15, 3FB1F, 3FB28, 3FB31, 3FB3A, 3FB43, 3FB4B, 3FB54, 3FB5D, 3FB66, 3FB6F, 3FB77, 3FB80, 3FB89, 3FB91, 3FB9A, 3FBA3, 3FBAB, 3FBB4, 3FBBC, 3FBC5, 3FBCD, 3FBD5, 3FBDE, 3FBE6, 3FBEE, 3FBF7, 3FBFF, 3FC07, 3FC0F, 3FC17, 3FC1F, 3FC27, 3FC2F, 3FC37, 3FC3F, 3FC47, 3FC4F, 3FC57, 3FC5F, 3FC67, 3FC6E, 3FC76, 3FC7E, 3FC86, 3FC8D, 3FC95, 3FC9C, 3FCA4, 3FCAC, 3FCB3, 3FCBB, 3FCC2, 3FCCA, 3FCD1, 3FCD8, 3FCE0, 3FCE7, 3FCEE, 3FCF6, 3FCFD, 3FD04, 3FD0B, 3FD12, 3FD19, 3FD21, 3FD28, 3FD2F, 3FD36, 3FD3D, 3FD44, 3FD4B, 3FD52, 3FD58, 3FD5F, 3FD66, 3FD6D, 3FD74, 3FD7B, 3FD81, 3FD88, 3FD8F, 3FD95, 3FD9C, 3FDA3, 3FDA9, 3FDB0, 3FDB6, 3FDBD, 3FDC3, 3FDCA, 3FDD0, 3FDD7, 3FDDD, 3FDE4, 3FDEA, 3FDF0, 3FDF7, 3FDFD, 3FE03, 3FE0A, 3FE10, 3FE16, 3FE1C, 3FE23, 3FE29, 3FE2F, 3FE35, 3FE3B, 3FE41, 3FE47, 3FE4D, 3FE54, 3FE5A, 3FE60, 3FE66, 3FE6C, 3FE71, 3FE77, 3FE7D, 3FE83, 3FE89, 3FE8F, 3FE95, 3FE9B, 3FEA0, 3FEA6, 3FEAC, 3FEB2, 3FEB8, 3FEBD, 3FEC3, 3FEC9, 3FECE, 3FED4, 3FEDA, 3FEDF, 3FEE5, 3FEEB, 3FEF0, 3FEF6, 3FEFB, 3FF01, 3FF07, 3FF0C, 3FF12, 3FF17, 3FF1D, 3FF22, 3FF28, 3FF2D, 3FF33, 3FF38, 3FF3D, 3FF43, 3FF48, 3FF4E, 3FF53, 3FF58, 3FF5E, 3FF63, 3FF68, 3FF6E, 3FF73, 3FF78, 3FF7E, 3FF83, 3FF88, 3FF8E, 3FF93, 3FF98, 3FF9D, 3FFA3, 3FFA8, 3FFAD, 3FFB2, 3FFB7, 3FFBD, 3FFC2, 3FFC7, 3FFCC, 3FFD1, 3FFD7, 3FFDC, 3FFE1, 3FFE6, 3FFEB, 3FFF0, 3FFF5, 3FFFB, 0;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_af634d68f1ef6d34',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '9221b399e91b65b020cbac2bcaf61050',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_af634d68f1ef6d34',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Binary_Counter virtex6 Xilinx,_Inc. 11.0',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET ainit_value = 0',
    'CSET ce = true',
    'CSET count_mode = UP',
    'CSET fb_latency = 0',
    'CSET final_count_value = 1',
    'CSET implementation = Fabric',
    'CSET increment_value = 1',
    'CSET latency = 1',
    'CSET load = false',
    'CSET output_width = 10',
    'CSET restrict_count = false',
    'CSET sclr = false',
    'CSET sinit = true',
    'CSET sinit_value = 0',
    'CSET sset = false',
    'CSET sync_ce_priority = Sync_Overrides_CE',
    'CSET sync_threshold_output = false',
    'CSET syncctrlpriority = Reset_Overrides_Set',
    'CSET component_name = cntr_11_0_5c0d8fded7f0a054',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '26b663f8a13527db8b8b8237e0ac95cc',
    'sourceFile' => 'hdl/xlcounter_free.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)',
      'core_instance_text' => '        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net',
      'core_name0' => 'cntr_11_0_5c0d8fded7f0a054',
      'entityName' => 'xlcounter_free_he6_cres_correlator',
      'entity_name.0' => 'xlcounter_free',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c285bc64881ae80d3868bcd920a8cd7b',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xldelay.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 0, 3FFFB, 3FFF6, 3FFF1, 3FFEB, 3FFE6, 3FFE1, 3FFDC, 3FFD7, 3FFD2, 3FFCD, 3FFC7, 3FFC2, 3FFBD, 3FFB8, 3FFB3, 3FFAD, 3FFA8, 3FFA3, 3FF9E, 3FF98, 3FF93, 3FF8E, 3FF89, 3FF83, 3FF7E, 3FF79, 3FF73, 3FF6E, 3FF69, 3FF63, 3FF5E, 3FF59, 3FF53, 3FF4E, 3FF49, 3FF43, 3FF3E, 3FF38, 3FF33, 3FF2D, 3FF28, 3FF22, 3FF1D, 3FF17, 3FF12, 3FF0C, 3FF07, 3FF01, 3FEFC, 3FEF6, 3FEF1, 3FEEB, 3FEE5, 3FEE0, 3FEDA, 3FED4, 3FECF, 3FEC9, 3FEC3, 3FEBE, 3FEB8, 3FEB2, 3FEAC, 3FEA7, 3FEA1, 3FE9B, 3FE95, 3FE8F, 3FE89, 3FE84, 3FE7E, 3FE78, 3FE72, 3FE6C, 3FE66, 3FE60, 3FE5A, 3FE54, 3FE4E, 3FE48, 3FE42, 3FE3C, 3FE35, 3FE2F, 3FE29, 3FE23, 3FE1D, 3FE17, 3FE10, 3FE0A, 3FE04, 3FDFE, 3FDF7, 3FDF1, 3FDEA, 3FDE4, 3FDDE, 3FDD7, 3FDD1, 3FDCA, 3FDC4, 3FDBD, 3FDB7, 3FDB0, 3FDAA, 3FDA3, 3FD9C, 3FD96, 3FD8F, 3FD88, 3FD82, 3FD7B, 3FD74, 3FD6D, 3FD67, 3FD60, 3FD59, 3FD52, 3FD4B, 3FD44, 3FD3D, 3FD36, 3FD2F, 3FD28, 3FD21, 3FD1A, 3FD13, 3FD0C, 3FD04, 3FCFD, 3FCF6, 3FCEF, 3FCE7, 3FCE0, 3FCD9, 3FCD1, 3FCCA, 3FCC2, 3FCBB, 3FCB4, 3FCAC, 3FCA4, 3FC9D, 3FC95, 3FC8E, 3FC86, 3FC7E, 3FC77, 3FC6F, 3FC67, 3FC5F, 3FC57, 3FC50, 3FC48, 3FC40, 3FC38, 3FC30, 3FC28, 3FC20, 3FC18, 3FC0F, 3FC07, 3FBFF, 3FBF7, 3FBEF, 3FBE6, 3FBDE, 3FBD6, 3FBCD, 3FBC5, 3FBBD, 3FBB4, 3FBAC, 3FBA3, 3FB9A, 3FB92, 3FB89, 3FB81, 3FB78, 3FB6F, 3FB66, 3FB5E, 3FB55, 3FB4C, 3FB43, 3FB3A, 3FB31, 3FB28, 3FB1F, 3FB16, 3FB0D, 3FB04, 3FAFA, 3FAF1, 3FAE8, 3FADF, 3FAD5, 3FACC, 3FAC3, 3FAB9, 3FAB0, 3FAA6, 3FA9D, 3FA93, 3FA89, 3FA80, 3FA76, 3FA6C, 3FA63, 3FA59, 3FA4F, 3FA45, 3FA3B, 3FA31, 3FA27, 3FA1D, 3FA13, 3FA09, 3F9FF, 3F9F5, 3F9EB, 3F9E0, 3F9D6, 3F9CC, 3F9C1, 3F9B7, 3F9AD, 3F9A2, 3F998, 3F98D, 3F982, 3F978, 3F96D, 3F962, 3F958, 3F94D, 3F942, 3F937, 3F92C, 3F921, 3F916, 3F90B, 3F900, 3F8F5, 3F8EA, 3F8DF, 3F8D4, 3F8C8, 3F8BD, 3F8B2, 3F8A6, 3F89B, 3F890, 3F884, 3F879, 3F86D, 3F861, 3F856, 3F84A, 3F83E, 3F833, 3F827, 3F81B, 3F80F, 3F803, 3F7F7, 3F7EB, 3F7DF, 3F7D3, 3F7C7, 3F7BB, 3F7AF, 3F7A2, 3F796, 3F78A, 3F77D, 3F771, 3F765, 3F758, 3F74C, 3F73F, 3F733, 3F726, 3F719, 3F70C, 3F700, 3F6F3, 3F6E6, 3F6D9, 3F6CC, 3F6BF, 3F6B2, 3F6A5, 3F698, 3F68B, 3F67E, 3F671, 3F664, 3F656, 3F649, 3F63C, 3F62E, 3F621, 3F613, 3F606, 3F5F8, 3F5EB, 3F5DD, 3F5D0, 3F5C2, 3F5B4, 3F5A6, 3F599, 3F58B, 3F57D, 3F56F, 3F561, 3F553, 3F545, 3F537, 3F529, 3F51B, 3F50C, 3F4FE, 3F4F0, 3F4E2, 3F4D3, 3F4C5, 3F4B6, 3F4A8, 3F499, 3F48B, 3F47C, 3F46E, 3F45F, 3F450, 3F442, 3F433, 3F424, 3F415, 3F407, 3F3F8, 3F3E9, 3F3DA, 3F3CB, 3F3BC, 3F3AD, 3F39E, 3F38E, 3F37F, 3F370, 3F361, 3F351, 3F342, 3F333, 3F323, 3F314, 3F305, 3F2F5, 3F2E6, 3F2D6, 3F2C6, 3F2B7, 3F2A7, 3F297, 3F288, 3F278, 3F268, 3F258, 3F249, 3F239, 3F229, 3F219, 3F209, 3F1F9, 3F1E9, 3F1D9, 3F1C9, 3F1B9, 3F1A8, 3F198, 3F188, 3F178, 3F167, 3F157, 3F147, 3F136, 3F126, 3F116, 3F105, 3F0F5, 3F0E4, 3F0D4, 3F0C3, 3F0B2, 3F0A2, 3F091, 3F081, 3F070, 3F05F, 3F04E, 3F03E, 3F02D, 3F01C, 3F00B, 3EFFA, 3EFE9, 3EFD8, 3EFC7, 3EFB6, 3EFA5, 3EF94, 3EF83, 3EF72, 3EF61, 3EF50, 3EF3F, 3EF2E, 3EF1D, 3EF0B, 3EEFA, 3EEE9, 3EED8, 3EEC6, 3EEB5, 3EEA4, 3EE92, 3EE81, 3EE70, 3EE5E, 3EE4D, 3EE3B, 3EE2A, 3EE19, 3EE07, 3EDF6, 3EDE4, 3EDD3, 3EDC1, 3EDAF, 3ED9E, 3ED8C, 3ED7B, 3ED69, 3ED57, 3ED46, 3ED34, 3ED22, 3ED11, 3ECFF, 3ECED, 3ECDB, 3ECCA, 3ECB8, 3ECA6, 3EC94, 3EC83, 3EC71, 3EC5F, 3EC4D, 3EC3B, 3EC2A, 3EC18, 3EC06, 3EBF4, 3EBE2, 3EBD0, 3EBBE, 3EBAD, 3EB9B, 3EB89, 3EB77, 3EB65, 3EB53, 3EB41, 3EB2F, 3EB1D, 3EB0B, 3EAF9, 3EAE8, 3EAD6, 3EAC4, 3EAB2, 3EAA0, 3EA8E, 3EA7C, 3EA6A, 3EA58, 3EA46, 3EA34, 3EA22, 3EA10, 3E9FE, 3E9ED, 3E9DB, 3E9C9, 3E9B7, 3E9A5, 3E993, 3E981, 3E96F, 3E95D, 3E94C, 3E93A, 3E928, 3E916, 3E904, 3E8F2, 3E8E1, 3E8CF, 3E8BD, 3E8AB, 3E89A, 3E888, 3E876, 3E864, 3E853, 3E841, 3E82F, 3E81E, 3E80C, 3E7FA, 3E7E9, 3E7D7, 3E7C5, 3E7B4, 3E7A2, 3E791, 3E77F, 3E76E, 3E75C, 3E74B, 3E739, 3E728, 3E717, 3E705, 3E6F4, 3E6E3, 3E6D1, 3E6C0, 3E6AF, 3E69E, 3E68C, 3E67B, 3E66A, 3E659, 3E648, 3E637, 3E626, 3E615, 3E604, 3E5F3, 3E5E2, 3E5D1, 3E5C0, 3E5B0, 3E59F, 3E58E, 3E57D, 3E56D, 3E55C, 3E54B, 3E53B, 3E52A, 3E51A, 3E509, 3E4F9, 3E4E9, 3E4D8, 3E4C8, 3E4B8, 3E4A8, 3E497, 3E487, 3E477, 3E467, 3E457, 3E447, 3E437, 3E427, 3E418, 3E408, 3E3F8, 3E3E9, 3E3D9, 3E3C9, 3E3BA, 3E3AA, 3E39B, 3E38C, 3E37C, 3E36D, 3E35E, 3E34F, 3E340, 3E330, 3E321, 3E313, 3E304, 3E2F5, 3E2E6, 3E2D7, 3E2C9, 3E2BA, 3E2AC, 3E29D, 3E28F, 3E280, 3E272, 3E264, 3E256, 3E248, 3E23A, 3E22C, 3E21E, 3E210, 3E202, 3E1F5, 3E1E7, 3E1D9, 3E1CC, 3E1BF, 3E1B1, 3E1A4, 3E197, 3E18A, 3E17D, 3E170, 3E163, 3E156, 3E149, 3E13D, 3E130, 3E123, 3E117, 3E10B, 3E0FE, 3E0F2, 3E0E6, 3E0DA, 3E0CE, 3E0C2, 3E0B7, 3E0AB, 3E09F, 3E094, 3E088, 3E07D, 3E072, 3E067, 3E05C, 3E051, 3E046, 3E03B, 3E030, 3E026, 3E01B, 3E011, 3E006, 3DFFC, 3DFF2, 3DFE8, 3DFDE, 3DFD4, 3DFCA, 3DFC1, 3DFB7, 3DFAE, 3DFA4, 3DF9B, 3DF92, 3DF89, 3DF80, 3DF77, 3DF6E, 3DF66, 3DF5D, 3DF55, 3DF4D, 3DF44, 3DF3C, 3DF34, 3DF2D, 3DF25, 3DF1D, 3DF16, 3DF0E, 3DF07, 3DF00, 3DEF9, 3DEF2, 3DEEB, 3DEE4, 3DEDE, 3DED7, 3DED1, 3DECB, 3DEC5, 3DEBF, 3DEB9, 3DEB3, 3DEAD, 3DEA8, 3DEA3, 3DE9D, 3DE98, 3DE93, 3DE8E, 3DE8A, 3DE85, 3DE81, 3DE7C, 3DE78, 3DE74, 3DE70, 3DE6C, 3DE69, 3DE65, 3DE62, 3DE5F, 3DE5B, 3DE58, 3DE56, 3DE53, 3DE50, 3DE4E, 3DE4C, 3DE4A, 3DE48, 3DE46, 3DE44, 3DE42, 3DE41, 3DE40, 3DE3F, 3DE3E, 3DE3D, 3DE3C, 3DE3C, 3DE3B, 3DE3B, 3DE3B, 3DE3B, 3DE3C, 3DE3C, 3DE3D, 3DE3D, 3DE3E, 3DE3F, 3DE40, 3DE42, 3DE43, 3DE45, 3DE47, 3DE49, 3DE4B, 3DE4D, 3DE50, 3DE52, 3DE55, 3DE58, 3DE5B, 3DE5F, 3DE62, 3DE66, 3DE6A, 3DE6E, 3DE72, 3DE76, 3DE7B, 3DE7F, 3DE84, 3DE89, 3DE8E, 3DE94, 3DE99, 3DE9F, 3DEA5, 3DEAB, 3DEB1, 3DEB8, 3DEBF, 3DEC5, 3DECC, 3DED4, 3DEDB, 3DEE3, 3DEEA, 3DEF2, 3DEFA, 3DF03, 3DF0B, 3DF14, 3DF1D, 3DF26, 3DF2F, 3DF39, 3DF42, 3DF4C, 3DF56, 3DF60, 3DF6B, 3DF75, 3DF80, 3DF8B, 3DF96, 3DFA2, 3DFAD, 3DFB9, 3DFC5, 3DFD1, 3DFDE, 3DFEA, 3DFF7, 3E004, 3E012, 3E01F, 3E02D, 3E03A, 3E049, 3E057, 3E065, 3E074, 3E083, 3E092, 3E0A1, 3E0B1, 3E0C1, 3E0D1, 3E0E1, 3E0F1, 3E102, 3E113, 3E124, 3E135, 3E146, 3E158, 3E16A, 3E17C, 3E18F, 3E1A1, 3E1B4, 3E1C7, 3E1DA, 3E1EE, 3E202, 3E215, 3E22A, 3E23E, 3E253, 3E268, 3E27D, 3E292, 3E2A7, 3E2BD, 3E2D3, 3E2EA, 3E300, 3E317, 3E32E, 3E345, 3E35C, 3E374, 3E38C, 3E3A4, 3E3BC, 3E3D5, 3E3EE, 3E407, 3E420, 3E43A, 3E454, 3E46E, 3E488, 3E4A3, 3E4BD, 3E4D8, 3E4F4, 3E50F, 3E52B, 3E547, 3E563, 3E580, 3E59D, 3E5BA, 3E5D7, 3E5F4, 3E612, 3E630, 3E64F, 3E66D, 3E68C, 3E6AB, 3E6CA, 3E6EA, 3E70A, 3E72A, 3E74A, 3E76B, 3E78C, 3E7AD, 3E7CE, 3E7F0, 3E812, 3E834, 3E856, 3E879, 3E89C, 3E8BF, 3E8E3, 3E907, 3E92B, 3E94F, 3E973, 3E998, 3E9BD, 3E9E3, 3EA08, 3EA2E, 3EA55, 3EA7B, 3EAA2, 3EAC9, 3EAF0, 3EB18, 3EB3F, 3EB67, 3EB90, 3EBB8, 3EBE1, 3EC0B, 3EC34, 3EC5E, 3EC88, 3ECB2, 3ECDD, 3ED08, 3ED33, 3ED5E, 3ED8A, 3EDB6, 3EDE2, 3EE0F, 3EE3C, 3EE69, 3EE96, 3EEC4, 3EEF2, 3EF20, 3EF4F, 3EF7E, 3EFAD, 3EFDC, 3F00C, 3F03C, 3F06C, 3F09D, 3F0CE, 3F0FF, 3F131, 3F162, 3F194, 3F1C7, 3F1F9, 3F22C, 3F260, 3F293, 3F2C7, 3F2FB, 3F32F, 3F364, 3F399, 3F3CE, 3F404, 3F43A, 3F470, 3F4A7, 3F4DD, 3F514, 3F54C, 3F584, 3F5BC, 3F5F4, 3F62C, 3F665, 3F69F, 3F6D8, 3F712, 3F74C, 3F786, 3F7C1, 3F7FC, 3F837, 3F873, 3F8AF, 3F8EB, 3F928, 3F965, 3F9A2, 3F9DF, 3FA1D, 3FA5B, 3FA9A, 3FAD8, 3FB17, 3FB57, 3FB96, 3FBD6, 3FC17, 3FC57, 3FC98, 3FCD9, 3FD1B, 3FD5D, 3FD9F, 3FDE1, 3FE24, 3FE67, 3FEAA, 3FEEE, 3FF32, 3FF76, 3FFBB;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_6f5b216e349e04e0',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '17375e1b571d43c4b5afdbf435c98e01',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_6f5b216e349e04e0',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 0, 45, 8B, D1, 117, 15E, 1A4, 1EC, 233, 27B, 2C3, 30B, 354, 39D, 3E7, 430, 47B, 4C5, 510, 55B, 5A6, 5F2, 63E, 68A, 6D6, 723, 771, 7BE, 80C, 85A, 8A9, 8F8, 947, 996, 9E6, A36, A87, AD8, B29, B7A, BCC, C1E, C70, CC3, D16, D6A, DBD, E11, E66, EBA, F0F, F65, FBA, 1010, 1067, 10BD, 1114, 116C, 11C3, 121B, 1274, 12CC, 1325, 137E, 13D8, 1432, 148C, 14E7, 1541, 159D, 15F8, 1654, 16B0, 170D, 176A, 17C7, 1824, 1882, 18E0, 193F, 199E, 19FD, 1A5C, 1ABC, 1B1C, 1B7C, 1BDD, 1C3E, 1CA0, 1D01, 1D63, 1DC6, 1E29, 1E8C, 1EEF, 1F53, 1FB7, 201B, 2080, 20E5, 214A, 21B0, 2216, 227C, 22E3, 234A, 23B1, 2418, 2480, 24E9, 2551, 25BA, 2623, 268D, 26F7, 2761, 27CC, 2836, 28A2, 290D, 2979, 29E5, 2A52, 2ABE, 2B2B, 2B99, 2C07, 2C75, 2CE3, 2D52, 2DC1, 2E30, 2EA0, 2F10, 2F80, 2FF1, 3062, 30D3, 3145, 31B7, 3229, 329C, 330E, 3382, 33F5, 3469, 34DD, 3552, 35C6, 363C, 36B1, 3727, 379D, 3813, 388A, 3901, 3978, 39F0, 3A68, 3AE0, 3B59, 3BD2, 3C4B, 3CC4, 3D3E, 3DB8, 3E33, 3EAE, 3F29, 3FA4, 4020, 409C, 4118, 4195, 4212, 428F, 430D, 438A, 4409, 4487, 4506, 4585, 4604, 4684, 4704, 4784, 4805, 4886, 4907, 4989, 4A0A, 4A8D, 4B0F, 4B92, 4C15, 4C98, 4D1C, 4DA0, 4E24, 4EA8, 4F2D, 4FB2, 5038, 50BE, 5144, 51CA, 5251, 52D7, 535F, 53E6, 546E, 54F6, 557E, 5607, 5690, 5719, 57A3, 582C, 58B7, 5941, 59CC, 5A57, 5AE2, 5B6D, 5BF9, 5C85, 5D12, 5D9E, 5E2B, 5EB9, 5F46, 5FD4, 6062, 60F0, 617F, 620E, 629D, 632C, 63BC, 644C, 64DD, 656D, 65FE, 668F, 6720, 67B2, 6844, 68D6, 6969, 69FB, 6A8E, 6B22, 6BB5, 6C49, 6CDD, 6D71, 6E06, 6E9B, 6F30, 6FC5, 705B, 70F1, 7187, 721E, 72B4, 734B, 73E2, 747A, 7512, 75A9, 7642, 76DA, 7773, 780C, 78A5, 793F, 79D8, 7A72, 7B0C, 7BA7, 7C42, 7CDD, 7D78, 7E13, 7EAF, 7F4B, 7FE7, 8083, 8120, 81BD, 825A, 82F7, 8395, 8433, 84D1, 856F, 860E, 86AC, 874B, 87EB, 888A, 892A, 89CA, 8A6A, 8B0A, 8BAB, 8C4C, 8CED, 8D8E, 8E2F, 8ED1, 8F73, 9015, 90B7, 915A, 91FD, 92A0, 9343, 93E6, 948A, 952E, 95D2, 9676, 971A, 97BF, 9864, 9909, 99AE, 9A54, 9AF9, 9B9F, 9C45, 9CEC, 9D92, 9E39, 9EE0, 9F87, A02E, A0D5, A17D, A225, A2CD, A375, A41E, A4C6, A56F, A618, A6C1, A76A, A814, A8BD, A967, AA11, AABC, AB66, AC10, ACBB, AD66, AE11, AEBC, AF68, B013, B0BF, B16B, B217, B2C3, B370, B41C, B4C9, B576, B623, B6D0, B77E, B82B, B8D9, B987, BA35, BAE3, BB91, BC3F, BCEE, BD9D, BE4B, BEFA, BFAA, C059, C108, C1B8, C267, C317, C3C7, C477, C528, C5D8, C688, C739, C7EA, C89B, C94C, C9FD, CAAE, CB5F, CC11, CCC2, CD74, CE26, CED8, CF8A, D03C, D0EE, D1A1, D253, D306, D3B9, D46B, D51E, D5D1, D684, D738, D7EB, D89E, D952, DA06, DAB9, DB6D, DC21, DCD5, DD89, DE3D, DEF2, DFA6, E05A, E10F, E1C3, E278, E32D, E3E2, E496, E54B, E600, E6B6, E76B, E820, E8D5, E98B, EA40, EAF6, EBAB, EC61, ED17, EDCC, EE82, EF38, EFEE, F0A4, F15A, F210, F2C6, F37C, F432, F4E9, F59F, F655, F70C, F7C2, F879, F92F, F9E6, FA9C, FB53, FC0A, FCC0, FD77, FE2E, FEE4, FF9B, 10052, 10109, 101C0, 10276, 1032D, 103E4, 1049B, 10552, 10609, 106C0, 10777, 1082E, 108E5, 1099C, 10A53, 10B0A, 10BC1, 10C77, 10D2E, 10DE5, 10E9C, 10F53, 1100A, 110C1, 11178, 1122F, 112E6, 1139D, 11454, 1150A, 115C1, 11678, 1172F, 117E6, 1189C, 11953, 11A0A, 11AC0, 11B77, 11C2D, 11CE4, 11D9B, 11E51, 11F07, 11FBE, 12074, 1212A, 121E1, 12297, 1234D, 12403, 124B9, 1256F, 12625, 126DB, 12791, 12847, 128FC, 129B2, 12A68, 12B1D, 12BD3, 12C88, 12D3E, 12DF3, 12EA8, 12F5D, 13012, 130C7, 1317C, 13231, 132E6, 1339A, 1344F, 13503, 135B8, 1366C, 13720, 137D5, 13889, 1393D, 139F0, 13AA4, 13B58, 13C0C, 13CBF, 13D72, 13E26, 13ED9, 13F8C, 1403F, 140F2, 141A4, 14257, 14309, 143BC, 1446E, 14520, 145D2, 14684, 14736, 147E8, 14899, 1494B, 149FC, 14AAD, 14B5E, 14C0F, 14CC0, 14D70, 14E21, 14ED1, 14F81, 15031, 150E1, 15191, 15241, 152F0, 153A0, 1544F, 154FE, 155AD, 1565B, 1570A, 157B8, 15866, 15915, 159C2, 15A70, 15B1E, 15BCB, 15C78, 15D25, 15DD2, 15E7F, 15F2C, 15FD8, 16084, 16130, 161DC, 16288, 16333, 163DE, 1648A, 16534, 165DF, 1668A, 16734, 167DE, 16888, 16932, 169DB, 16A85, 16B2E, 16BD7, 16C80, 16D28, 16DD0, 16E79, 16F21, 16FC8, 17070, 17117, 171BE, 17265, 1730B, 173B2, 17458, 174FE, 175A4, 17649, 176EE, 17794, 17838, 178DD, 17981, 17A25, 17AC9, 17B6D, 17C10, 17CB3, 17D56, 17DF9, 17E9B, 17F3E, 17FE0, 18081, 18123, 181C4, 18265, 18305, 183A6, 18446, 184E6, 18586, 18625, 186C4, 18763, 18801, 188A0, 1893E, 189DC, 18A79, 18B16, 18BB3, 18C50, 18CEC, 18D88, 18E24, 18EC0, 18F5B, 18FF6, 19091, 1912B, 191C5, 1925F, 192F9, 19392, 1942B, 194C4, 1955C, 195F4, 1968C, 19723, 197BA, 19851, 198E8, 1997E, 19A14, 19AAA, 19B3F, 19BD4, 19C69, 19CFD, 19D91, 19E25, 19EB8, 19F4B, 19FDE, 1A071, 1A103, 1A194, 1A226, 1A2B7, 1A348, 1A3D8, 1A469, 1A4F8, 1A588, 1A617, 1A6A6, 1A734, 1A7C3, 1A850, 1A8DE, 1A96B, 1A9F8, 1AA84, 1AB10, 1AB9C, 1AC27, 1ACB2, 1AD3D, 1ADC7, 1AE51, 1AEDB, 1AF64, 1AFED, 1B076, 1B0FE, 1B186, 1B20D, 1B294, 1B31B, 1B3A1, 1B427, 1B4AD, 1B532, 1B5B7, 1B63B, 1B6BF, 1B743, 1B7C7, 1B84A, 1B8CC, 1B94E, 1B9D0, 1BA52, 1BAD3, 1BB53, 1BBD4, 1BC54, 1BCD3, 1BD52, 1BDD1, 1BE4F, 1BECD, 1BF4B, 1BFC8, 1C045, 1C0C1, 1C13D, 1C1B9, 1C234, 1C2AF, 1C329, 1C3A3, 1C41C, 1C495, 1C50E, 1C586, 1C5FE, 1C676, 1C6ED, 1C764, 1C7DA, 1C850, 1C8C5, 1C93A, 1C9AF, 1CA23, 1CA97, 1CB0A, 1CB7D, 1CBEF, 1CC61, 1CCD3, 1CD44, 1CDB5, 1CE25, 1CE95, 1CF04, 1CF73, 1CFE2, 1D050, 1D0BE, 1D12B, 1D198, 1D204, 1D270, 1D2DC, 1D347, 1D3B1, 1D41B, 1D485, 1D4EE, 1D557, 1D5C0, 1D628, 1D68F, 1D6F6, 1D75D, 1D7C3, 1D828, 1D88E, 1D8F2, 1D957, 1D9BA, 1DA1E, 1DA81, 1DAE3, 1DB45, 1DBA7, 1DC08, 1DC68, 1DCC8, 1DD28, 1DD87, 1DDE6, 1DE44, 1DEA2, 1DEFF, 1DF5C, 1DFB9, 1E014, 1E070, 1E0CB, 1E125, 1E17F, 1E1D9, 1E232, 1E28A, 1E2E2, 1E33A, 1E391, 1E3E8, 1E43E, 1E494, 1E4E9, 1E53D, 1E592, 1E5E5, 1E638, 1E68B, 1E6DD, 1E72F, 1E780, 1E7D1, 1E821, 1E871, 1E8C0, 1E90F, 1E95D, 1E9AB, 1E9F9, 1EA45, 1EA92, 1EADD, 1EB29, 1EB73, 1EBBE, 1EC07, 1EC51, 1EC99, 1ECE2, 1ED29, 1ED71, 1EDB7, 1EDFE, 1EE43, 1EE89, 1EECD, 1EF11, 1EF55, 1EF98, 1EFDB, 1F01D, 1F05F, 1F0A0, 1F0E0, 1F121, 1F160, 1F19F, 1F1DE, 1F21C, 1F259, 1F296, 1F2D3, 1F30E, 1F34A, 1F385, 1F3BF, 1F3F9, 1F432, 1F46B, 1F4A3, 1F4DB, 1F512, 1F549, 1F57F, 1F5B5, 1F5EA, 1F61E, 1F652, 1F686, 1F6B9, 1F6EB, 1F71D, 1F74F, 1F780, 1F7B0, 1F7E0, 1F80F, 1F83E, 1F86C, 1F89A, 1F8C7, 1F8F3, 1F91F, 1F94B, 1F976, 1F9A0, 1F9CA, 1F9F4, 1FA1D, 1FA45, 1FA6D, 1FA94, 1FABA, 1FAE1, 1FB06, 1FB2B, 1FB50, 1FB74, 1FB97, 1FBBA, 1FBDC, 1FBFE, 1FC20, 1FC40, 1FC60, 1FC80, 1FC9F, 1FCBE, 1FCDC, 1FCF9, 1FD16, 1FD32, 1FD4E, 1FD69, 1FD84, 1FD9E, 1FDB8, 1FDD1, 1FDEA, 1FE02, 1FE19, 1FE30, 1FE46, 1FE5C, 1FE71, 1FE86, 1FE9A, 1FEAE, 1FEC1, 1FED3, 1FEE5, 1FEF7, 1FF07, 1FF18, 1FF27, 1FF37, 1FF45, 1FF53, 1FF61, 1FF6E, 1FF7A, 1FF86, 1FF92, 1FF9C, 1FFA6, 1FFB0, 1FFB9, 1FFC2, 1FFCA, 1FFD1, 1FFD8, 1FFDF, 1FFE4, 1FFEA, 1FFEE, 1FFF2, 1FFF6, 1FFF9, 1FFFC, 1FFFE, 1FFFF, 1FFFF;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_5559e1c25418f22a',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '6415c3edffae904a0edf6c339e5bf5dc',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_5559e1c25418f22a',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 1FFFF, 1FFFF, 1FFFF, 1FFFD, 1FFFC, 1FFF9, 1FFF6, 1FFF2, 1FFEE, 1FFEA, 1FFE4, 1FFDE, 1FFD8, 1FFD1, 1FFCA, 1FFC2, 1FFB9, 1FFB0, 1FFA6, 1FF9C, 1FF91, 1FF86, 1FF7A, 1FF6E, 1FF61, 1FF53, 1FF45, 1FF36, 1FF27, 1FF17, 1FF07, 1FEF6, 1FEE5, 1FED3, 1FEC0, 1FEAD, 1FE9A, 1FE86, 1FE71, 1FE5C, 1FE46, 1FE30, 1FE19, 1FE01, 1FDE9, 1FDD1, 1FDB8, 1FD9E, 1FD84, 1FD69, 1FD4E, 1FD32, 1FD16, 1FCF9, 1FCDB, 1FCBD, 1FC9F, 1FC80, 1FC60, 1FC40, 1FC1F, 1FBFE, 1FBDC, 1FBBA, 1FB97, 1FB73, 1FB4F, 1FB2B, 1FB06, 1FAE0, 1FABA, 1FA93, 1FA6C, 1FA44, 1FA1C, 1F9F3, 1F9CA, 1F9A0, 1F975, 1F94A, 1F91F, 1F8F3, 1F8C6, 1F899, 1F86B, 1F83D, 1F80E, 1F7DF, 1F7AF, 1F77F, 1F74E, 1F71D, 1F6EB, 1F6B8, 1F685, 1F652, 1F61E, 1F5E9, 1F5B4, 1F57E, 1F548, 1F511, 1F4DA, 1F4A2, 1F46A, 1F431, 1F3F8, 1F3BE, 1F384, 1F349, 1F30E, 1F2D2, 1F295, 1F258, 1F21B, 1F1DD, 1F19E, 1F15F, 1F11F, 1F0DF, 1F09F, 1F05E, 1F01C, 1EFDA, 1EF97, 1EF54, 1EF10, 1EECC, 1EE88, 1EE42, 1EDFD, 1EDB6, 1ED70, 1ED28, 1ECE1, 1EC98, 1EC50, 1EC06, 1EBBC, 1EB72, 1EB27, 1EADC, 1EA90, 1EA44, 1E9F7, 1E9AA, 1E95C, 1E90E, 1E8BF, 1E870, 1E820, 1E7D0, 1E77F, 1E72E, 1E6DC, 1E68A, 1E637, 1E5E4, 1E590, 1E53C, 1E4E7, 1E492, 1E43D, 1E3E6, 1E390, 1E339, 1E2E1, 1E289, 1E230, 1E1D7, 1E17E, 1E124, 1E0C9, 1E06E, 1E013, 1DFB7, 1DF5B, 1DEFE, 1DEA1, 1DE43, 1DDE5, 1DD86, 1DD27, 1DCC7, 1DC67, 1DC06, 1DBA5, 1DB44, 1DAE2, 1DA7F, 1DA1C, 1D9B9, 1D955, 1D8F1, 1D88C, 1D827, 1D7C1, 1D75B, 1D6F4, 1D68D, 1D626, 1D5BE, 1D556, 1D4ED, 1D483, 1D41A, 1D3B0, 1D345, 1D2DA, 1D26E, 1D202, 1D196, 1D129, 1D0BC, 1D04E, 1CFE0, 1CF72, 1CF03, 1CE93, 1CE23, 1CDB3, 1CD42, 1CCD1, 1CC5F, 1CBED, 1CB7B, 1CB08, 1CA95, 1CA21, 1C9AD, 1C938, 1C8C3, 1C84E, 1C7D8, 1C762, 1C6EB, 1C674, 1C5FD, 1C585, 1C50C, 1C494, 1C41A, 1C3A1, 1C327, 1C2AD, 1C232, 1C1B7, 1C13B, 1C0BF, 1C043, 1BFC6, 1BF49, 1BECB, 1BE4D, 1BDCF, 1BD50, 1BCD1, 1BC52, 1BBD2, 1BB51, 1BAD1, 1BA50, 1B9CE, 1B94C, 1B8CA, 1B847, 1B7C4, 1B741, 1B6BD, 1B639, 1B5B5, 1B530, 1B4AB, 1B425, 1B39F, 1B319, 1B292, 1B20B, 1B183, 1B0FC, 1B073, 1AFEB, 1AF62, 1AED9, 1AE4F, 1ADC5, 1AD3B, 1ACB0, 1AC25, 1AB9A, 1AB0E, 1AA82, 1A9F6, 1A969, 1A8DC, 1A84E, 1A7C0, 1A732, 1A6A4, 1A615, 1A586, 1A4F6, 1A466, 1A3D6, 1A346, 1A2B5, 1A224, 1A192, 1A100, 1A06E, 19FDC, 19F49, 19EB6, 19E22, 19D8F, 19CFB, 19C66, 19BD2, 19B3D, 19AA7, 19A12, 1997C, 198E5, 1984F, 197B8, 19721, 19689, 195F2, 1955A, 194C1, 19429, 19390, 192F6, 1925D, 191C3, 19129, 1908E, 18FF4, 18F59, 18EBD, 18E22, 18D86, 18CEA, 18C4E, 18BB1, 18B14, 18A77, 189D9, 1893B, 1889D, 187FF, 18760, 186C2, 18622, 18583, 184E3, 18444, 183A3, 18303, 18262, 181C1, 18120, 1807F, 17FDD, 17F3B, 17E99, 17DF7, 17D54, 17CB1, 17C0E, 17B6A, 17AC7, 17A23, 1797F, 178DA, 17836, 17791, 176EC, 17647, 175A1, 174FB, 17456, 173AF, 17309, 17262, 171BC, 17114, 1706D, 16FC6, 16F1E, 16E76, 16DCE, 16D26, 16C7D, 16BD4, 16B2B, 16A82, 169D9, 1692F, 16886, 167DC, 16732, 16687, 165DD, 16532, 16487, 163DC, 16331, 16285, 161D9, 1612E, 16082, 15FD5, 15F29, 15E7D, 15DD0, 15D23, 15C76, 15BC9, 15B1B, 15A6E, 159C0, 15912, 15864, 157B6, 15707, 15659, 155AA, 154FB, 1544C, 1539D, 152EE, 1523E, 1518F, 150DF, 1502F, 14F7F, 14ECF, 14E1E, 14D6E, 14CBD, 14C0C, 14B5B, 14AAA, 149F9, 14948, 14897, 147E5, 14733, 14682, 145D0, 1451E, 1446C, 143B9, 14307, 14254, 141A2, 140EF, 1403C, 13F89, 13ED6, 13E23, 13D70, 13CBC, 13C09, 13B55, 13AA2, 139EE, 1393A, 13886, 137D2, 1371E, 1366A, 135B5, 13501, 1344C, 13398, 132E3, 1322E, 1317A, 130C5, 13010, 12F5B, 12EA5, 12DF0, 12D3B, 12C86, 12BD0, 12B1B, 12A65, 129B0, 128FA, 12844, 1278E, 126D9, 12623, 1256D, 124B7, 12401, 1234A, 12294, 121DE, 12128, 12072, 11FBB, 11F05, 11E4E, 11D98, 11CE1, 11C2B, 11B74, 11ABE, 11A07, 11950, 1189A, 117E3, 1172C, 11675, 115BF, 11508, 11451, 1139A, 112E3, 1122C, 11175, 110BF, 11008, 10F51, 10E9A, 10DE3, 10D2C, 10C75, 10BBE, 10B07, 10A50, 10999, 108E2, 1082B, 10774, 106BD, 10606, 1054F, 10499, 103E2, 1032B, 10274, 101BD, 10106, 1004F, FF99, FEE2, FE2B, FD74, FCBE, FC07, FB50, FA9A, F9E3, F92D, F876, F7C0, F709, F653, F59D, F4E6, F430, F37A, F2C4, F20D, F157, F0A1, EFEB, EF35, EE80, EDCA, ED14, EC5E, EBA9, EAF3, EA3E, E988, E8D3, E81E, E768, E6B3, E5FE, E549, E494, E3DF, E32A, E276, E1C1, E10C, E058, DFA3, DEEF, DE3B, DD87, DCD3, DC1F, DB6B, DAB7, DA03, D950, D89C, D7E9, D735, D682, D5CF, D51C, D469, D3B6, D304, D251, D19E, D0EC, D03A, CF88, CED5, CE24, CD72, CCC0, CC0E, CB5D, CAAC, C9FA, C949, C898, C7E7, C737, C686, C5D6, C525, C475, C3C5, C315, C265, C1B5, C106, C057, BFA7, BEF8, BE49, BD9A, BCEC, BC3D, BB8F, BAE0, BA32, B984, B8D7, B829, B77B, B6CE, B621, B574, B4C7, B41A, B36E, B2C1, B215, B169, B0BD, B011, AF66, AEBA, AE0F, AD64, ACB9, AC0E, AB64, AAB9, AA0F, A965, A8BB, A812, A768, A6BF, A616, A56D, A4C4, A41B, A373, A2CB, A223, A17B, A0D3, A02C, 9F85, 9EDE, 9E37, 9D90, 9CEA, 9C43, 9B9D, 9AF7, 9A52, 99AC, 9907, 9862, 97BD, 9718, 9674, 95D0, 952C, 9488, 93E4, 9341, 929E, 91FB, 9158, 90B5, 9013, 8F71, 8ECF, 8E2D, 8D8C, 8CEB, 8C4A, 8BA9, 8B08, 8A68, 89C8, 8928, 8888, 87E9, 874A, 86AB, 860C, 856D, 84CF, 8431, 8393, 82F6, 8258, 81BB, 811E, 8082, 7FE5, 7F49, 7EAD, 7E11, 7D76, 7CDB, 7C40, 7BA5, 7B0B, 7A71, 79D7, 793D, 78A3, 780A, 7771, 76D8, 7640, 75A8, 7510, 7478, 73E1, 734A, 72B3, 721C, 7185, 70EF, 7059, 6FC4, 6F2E, 6E99, 6E04, 6D70, 6CDB, 6C47, 6BB4, 6B20, 6A8D, 69FA, 6967, 68D5, 6842, 67B1, 671F, 668E, 65FC, 656C, 64DB, 644B, 63BB, 632B, 629C, 620C, 617D, 60EF, 6060, 5FD2, 5F45, 5EB7, 5E2A, 5D9D, 5D10, 5C84, 5BF8, 5B6C, 5AE0, 5A55, 59CA, 5940, 58B5, 582B, 57A1, 5718, 568F, 5606, 557D, 54F5, 546D, 53E5, 535D, 52D6, 524F, 51C9, 5142, 50BC, 5037, 4FB1, 4F2C, 4EA7, 4E23, 4D9E, 4D1B, 4C97, 4C14, 4B91, 4B0E, 4A8B, 4A09, 4987, 4906, 4885, 4804, 4783, 4703, 4683, 4603, 4584, 4505, 4486, 4407, 4389, 430B, 428E, 4211, 4194, 4117, 409B, 401F, 3FA3, 3F28, 3EAD, 3E32, 3DB7, 3D3D, 3CC3, 3C4A, 3BD1, 3B58, 3ADF, 3A67, 39EF, 3977, 3900, 3889, 3812, 379C, 3726, 36B0, 363B, 35C6, 3551, 34DC, 3468, 33F4, 3381, 330E, 329B, 3228, 31B6, 3144, 30D2, 3061, 2FF0, 2F7F, 2F0F, 2E9F, 2E2F, 2DC0, 2D51, 2CE2, 2C74, 2C06, 2B98, 2B2B, 2ABE, 2A51, 29E4, 2978, 290C, 28A1, 2836, 27CB, 2760, 26F6, 268C, 2623, 25B9, 2551, 24E8, 2480, 2418, 23B0, 2349, 22E2, 227B, 2215, 21AF, 2149, 20E4, 207F, 201A, 1FB6, 1F52, 1EEE, 1E8B, 1E28, 1DC5, 1D63, 1D01, 1C9F, 1C3E, 1BDD, 1B7C, 1B1B, 1ABB, 1A5C, 19FC, 199D, 193E, 18E0, 1882, 1824, 17C6, 1769, 170C, 16B0, 1654, 15F8, 159C, 1541, 14E6, 148C, 1431, 13D8, 137E, 1325, 12CC, 1273, 121B, 11C3, 116B, 1114, 10BD, 1066, 1010, FBA, F65, F0F, EBA, E66, E11, DBD, D69, D16, CC3, C70, C1E, BCC, B7A, B29, AD7, A87, A36, 9E6, 996, 947, 8F7, 8A9, 85A, 80C, 7BE, 770, 723, 6D6, 68A, 63D, 5F1, 5A6, 55A, 50F, 4C5, 47A, 430, 3E7, 39D, 354, 30B, 2C3, 27B, 233, 1EC, 1A4, 15E, 117, D1, 8B, 45;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_ea91f7204eef1264',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '681aa3e9e0cb13c94479201f1baa603b',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_ea91f7204eef1264',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 0, 3FFBB, 3FF76, 3FF32, 3FEEE, 3FEAA, 3FE67, 3FE24, 3FDE1, 3FD9F, 3FD5D, 3FD1B, 3FCD9, 3FC98, 3FC57, 3FC17, 3FBD6, 3FB96, 3FB57, 3FB17, 3FAD8, 3FA9A, 3FA5B, 3FA1D, 3F9DF, 3F9A2, 3F965, 3F928, 3F8EB, 3F8AF, 3F873, 3F838, 3F7FC, 3F7C1, 3F787, 3F74C, 3F712, 3F6D8, 3F69F, 3F666, 3F62D, 3F5F4, 3F5BC, 3F584, 3F54C, 3F515, 3F4DE, 3F4A7, 3F470, 3F43A, 3F404, 3F3CF, 3F399, 3F364, 3F330, 3F2FB, 3F2C7, 3F293, 3F260, 3F22D, 3F1FA, 3F1C7, 3F195, 3F163, 3F131, 3F0FF, 3F0CE, 3F09D, 3F06D, 3F03C, 3F00C, 3EFDD, 3EFAD, 3EF7E, 3EF4F, 3EF21, 3EEF2, 3EEC4, 3EE97, 3EE69, 3EE3C, 3EE0F, 3EDE3, 3EDB7, 3ED8B, 3ED5F, 3ED33, 3ED08, 3ECDD, 3ECB3, 3EC88, 3EC5E, 3EC35, 3EC0B, 3EBE2, 3EBB9, 3EB90, 3EB68, 3EB40, 3EB18, 3EAF0, 3EAC9, 3EAA2, 3EA7B, 3EA55, 3EA2F, 3EA09, 3E9E3, 3E9BE, 3E999, 3E974, 3E94F, 3E92B, 3E907, 3E8E3, 3E8C0, 3E89D, 3E87A, 3E857, 3E835, 3E812, 3E7F0, 3E7CF, 3E7AD, 3E78C, 3E76B, 3E74B, 3E72A, 3E70A, 3E6EB, 3E6CB, 3E6AC, 3E68D, 3E66E, 3E64F, 3E631, 3E613, 3E5F5, 3E5D8, 3E5BA, 3E59D, 3E581, 3E564, 3E548, 3E52C, 3E510, 3E4F4, 3E4D9, 3E4BE, 3E4A3, 3E489, 3E46E, 3E454, 3E43B, 3E421, 3E408, 3E3EF, 3E3D6, 3E3BD, 3E3A5, 3E38D, 3E375, 3E35D, 3E346, 3E32E, 3E317, 3E301, 3E2EA, 3E2D4, 3E2BE, 3E2A8, 3E293, 3E27D, 3E268, 3E253, 3E23F, 3E22A, 3E216, 3E202, 3E1EF, 3E1DB, 3E1C8, 3E1B5, 3E1A2, 3E18F, 3E17D, 3E16B, 3E159, 3E147, 3E136, 3E125, 3E113, 3E103, 3E0F2, 3E0E2, 3E0D1, 3E0C1, 3E0B2, 3E0A2, 3E093, 3E084, 3E075, 3E066, 3E058, 3E049, 3E03B, 3E02D, 3E020, 3E012, 3E005, 3DFF8, 3DFEB, 3DFDF, 3DFD2, 3DFC6, 3DFBA, 3DFAE, 3DFA3, 3DF97, 3DF8C, 3DF81, 3DF76, 3DF6C, 3DF61, 3DF57, 3DF4D, 3DF43, 3DF39, 3DF30, 3DF27, 3DF1E, 3DF15, 3DF0C, 3DF04, 3DEFB, 3DEF3, 3DEEB, 3DEE3, 3DEDC, 3DED5, 3DECD, 3DEC6, 3DEC0, 3DEB9, 3DEB2, 3DEAC, 3DEA6, 3DEA0, 3DE9A, 3DE95, 3DE8F, 3DE8A, 3DE85, 3DE80, 3DE7C, 3DE77, 3DE73, 3DE6F, 3DE6B, 3DE67, 3DE63, 3DE60, 3DE5C, 3DE59, 3DE56, 3DE53, 3DE51, 3DE4E, 3DE4C, 3DE4A, 3DE48, 3DE46, 3DE44, 3DE43, 3DE41, 3DE40, 3DE3F, 3DE3E, 3DE3E, 3DE3D, 3DE3D, 3DE3C, 3DE3C, 3DE3C, 3DE3C, 3DE3D, 3DE3D, 3DE3E, 3DE3F, 3DE40, 3DE41, 3DE42, 3DE44, 3DE45, 3DE47, 3DE49, 3DE4B, 3DE4D, 3DE4F, 3DE51, 3DE54, 3DE57, 3DE59, 3DE5C, 3DE60, 3DE63, 3DE66, 3DE6A, 3DE6D, 3DE71, 3DE75, 3DE79, 3DE7D, 3DE82, 3DE86, 3DE8B, 3DE8F, 3DE94, 3DE99, 3DE9E, 3DEA4, 3DEA9, 3DEAE, 3DEB4, 3DEBA, 3DEC0, 3DEC6, 3DECC, 3DED2, 3DED8, 3DEDF, 3DEE5, 3DEEC, 3DEF3, 3DEFA, 3DF01, 3DF08, 3DF0F, 3DF17, 3DF1E, 3DF26, 3DF2E, 3DF35, 3DF3D, 3DF45, 3DF4E, 3DF56, 3DF5E, 3DF67, 3DF6F, 3DF78, 3DF81, 3DF8A, 3DF93, 3DF9C, 3DFA5, 3DFAF, 3DFB8, 3DFC2, 3DFCB, 3DFD5, 3DFDF, 3DFE9, 3DFF3, 3DFFD, 3E007, 3E012, 3E01C, 3E027, 3E031, 3E03C, 3E047, 3E052, 3E05D, 3E068, 3E073, 3E07E, 3E089, 3E095, 3E0A0, 3E0AC, 3E0B8, 3E0C3, 3E0CF, 3E0DB, 3E0E7, 3E0F3, 3E0FF, 3E10C, 3E118, 3E125, 3E131, 3E13E, 3E14A, 3E157, 3E164, 3E171, 3E17E, 3E18B, 3E198, 3E1A5, 3E1B2, 3E1C0, 3E1CD, 3E1DA, 3E1E8, 3E1F6, 3E203, 3E211, 3E21F, 3E22D, 3E23B, 3E249, 3E257, 3E265, 3E273, 3E281, 3E290, 3E29E, 3E2AD, 3E2BB, 3E2CA, 3E2D8, 3E2E7, 3E2F6, 3E305, 3E314, 3E322, 3E331, 3E341, 3E350, 3E35F, 3E36E, 3E37D, 3E38D, 3E39C, 3E3AB, 3E3BB, 3E3CA, 3E3DA, 3E3EA, 3E3F9, 3E409, 3E419, 3E428, 3E438, 3E448, 3E458, 3E468, 3E478, 3E488, 3E498, 3E4A9, 3E4B9, 3E4C9, 3E4D9, 3E4EA, 3E4FA, 3E50A, 3E51B, 3E52B, 3E53C, 3E54C, 3E55D, 3E56E, 3E57E, 3E58F, 3E5A0, 3E5B1, 3E5C1, 3E5D2, 3E5E3, 3E5F4, 3E605, 3E616, 3E627, 3E638, 3E649, 3E65A, 3E66B, 3E67C, 3E68D, 3E69F, 3E6B0, 3E6C1, 3E6D2, 3E6E4, 3E6F5, 3E706, 3E718, 3E729, 3E73A, 3E74C, 3E75D, 3E76F, 3E780, 3E792, 3E7A3, 3E7B5, 3E7C6, 3E7D8, 3E7EA, 3E7FB, 3E80D, 3E81E, 3E830, 3E842, 3E853, 3E865, 3E877, 3E889, 3E89A, 3E8AC, 3E8BE, 3E8D0, 3E8E2, 3E8F3, 3E905, 3E917, 3E929, 3E93B, 3E94C, 3E95E, 3E970, 3E982, 3E994, 3E9A6, 3E9B8, 3E9CA, 3E9DC, 3E9ED, 3E9FF, 3EA11, 3EA23, 3EA35, 3EA47, 3EA59, 3EA6B, 3EA7D, 3EA8F, 3EAA1, 3EAB3, 3EAC4, 3EAD6, 3EAE8, 3EAFA, 3EB0C, 3EB1E, 3EB30, 3EB42, 3EB54, 3EB66, 3EB78, 3EB8A, 3EB9B, 3EBAD, 3EBBF, 3EBD1, 3EBE3, 3EBF5, 3EC07, 3EC18, 3EC2A, 3EC3C, 3EC4E, 3EC60, 3EC72, 3EC83, 3EC95, 3ECA7, 3ECB9, 3ECCA, 3ECDC, 3ECEE, 3ED00, 3ED11, 3ED23, 3ED35, 3ED46, 3ED58, 3ED6A, 3ED7B, 3ED8D, 3ED9F, 3EDB0, 3EDC2, 3EDD3, 3EDE5, 3EDF6, 3EE08, 3EE19, 3EE2B, 3EE3C, 3EE4E, 3EE5F, 3EE70, 3EE82, 3EE93, 3EEA5, 3EEB6, 3EEC7, 3EED8, 3EEEA, 3EEFB, 3EF0C, 3EF1D, 3EF2E, 3EF40, 3EF51, 3EF62, 3EF73, 3EF84, 3EF95, 3EFA6, 3EFB7, 3EFC8, 3EFD9, 3EFEA, 3EFFB, 3F00C, 3F01D, 3F02D, 3F03E, 3F04F, 3F060, 3F070, 3F081, 3F092, 3F0A2, 3F0B3, 3F0C4, 3F0D4, 3F0E5, 3F0F5, 3F106, 3F116, 3F127, 3F137, 3F147, 3F158, 3F168, 3F178, 3F189, 3F199, 3F1A9, 3F1B9, 3F1C9, 3F1D9, 3F1E9, 3F1F9, 3F209, 3F219, 3F229, 3F239, 3F249, 3F259, 3F269, 3F279, 3F288, 3F298, 3F2A8, 3F2B7, 3F2C7, 3F2D7, 3F2E6, 3F2F6, 3F305, 3F315, 3F324, 3F333, 3F343, 3F352, 3F361, 3F371, 3F380, 3F38F, 3F39E, 3F3AD, 3F3BC, 3F3CB, 3F3DA, 3F3E9, 3F3F8, 3F407, 3F416, 3F425, 3F433, 3F442, 3F451, 3F460, 3F46E, 3F47D, 3F48B, 3F49A, 3F4A8, 3F4B7, 3F4C5, 3F4D4, 3F4E2, 3F4F0, 3F4FF, 3F50D, 3F51B, 3F529, 3F537, 3F545, 3F553, 3F561, 3F56F, 3F57D, 3F58B, 3F599, 3F5A7, 3F5B5, 3F5C2, 3F5D0, 3F5DE, 3F5EB, 3F5F9, 3F606, 3F614, 3F621, 3F62F, 3F63C, 3F649, 3F657, 3F664, 3F671, 3F67E, 3F68C, 3F699, 3F6A6, 3F6B3, 3F6C0, 3F6CD, 3F6DA, 3F6E6, 3F6F3, 3F700, 3F70D, 3F71A, 3F726, 3F733, 3F73F, 3F74C, 3F758, 3F765, 3F771, 3F77E, 3F78A, 3F796, 3F7A3, 3F7AF, 3F7BB, 3F7C7, 3F7D3, 3F7E0, 3F7EC, 3F7F8, 3F804, 3F80F, 3F81B, 3F827, 3F833, 3F83F, 3F84A, 3F856, 3F862, 3F86D, 3F879, 3F884, 3F890, 3F89B, 3F8A7, 3F8B2, 3F8BD, 3F8C9, 3F8D4, 3F8DF, 3F8EA, 3F8F5, 3F901, 3F90C, 3F917, 3F922, 3F92D, 3F937, 3F942, 3F94D, 3F958, 3F963, 3F96D, 3F978, 3F983, 3F98D, 3F998, 3F9A2, 3F9AD, 3F9B7, 3F9C2, 3F9CC, 3F9D6, 3F9E1, 3F9EB, 3F9F5, 3F9FF, 3FA09, 3FA13, 3FA1D, 3FA27, 3FA31, 3FA3B, 3FA45, 3FA4F, 3FA59, 3FA63, 3FA6D, 3FA76, 3FA80, 3FA8A, 3FA93, 3FA9D, 3FAA6, 3FAB0, 3FAB9, 3FAC3, 3FACC, 3FAD5, 3FADF, 3FAE8, 3FAF1, 3FAFB, 3FB04, 3FB0D, 3FB16, 3FB1F, 3FB28, 3FB31, 3FB3A, 3FB43, 3FB4C, 3FB55, 3FB5E, 3FB66, 3FB6F, 3FB78, 3FB81, 3FB89, 3FB92, 3FB9B, 3FBA3, 3FBAC, 3FBB4, 3FBBD, 3FBC5, 3FBCE, 3FBD6, 3FBDE, 3FBE7, 3FBEF, 3FBF7, 3FBFF, 3FC07, 3FC10, 3FC18, 3FC20, 3FC28, 3FC30, 3FC38, 3FC40, 3FC48, 3FC50, 3FC57, 3FC5F, 3FC67, 3FC6F, 3FC77, 3FC7E, 3FC86, 3FC8E, 3FC95, 3FC9D, 3FCA5, 3FCAC, 3FCB4, 3FCBB, 3FCC3, 3FCCA, 3FCD1, 3FCD9, 3FCE0, 3FCE7, 3FCEF, 3FCF6, 3FCFD, 3FD04, 3FD0C, 3FD13, 3FD1A, 3FD21, 3FD28, 3FD2F, 3FD36, 3FD3D, 3FD44, 3FD4B, 3FD52, 3FD59, 3FD60, 3FD67, 3FD6D, 3FD74, 3FD7B, 3FD82, 3FD88, 3FD8F, 3FD96, 3FD9C, 3FDA3, 3FDAA, 3FDB0, 3FDB7, 3FDBD, 3FDC4, 3FDCA, 3FDD1, 3FDD7, 3FDDE, 3FDE4, 3FDEB, 3FDF1, 3FDF7, 3FDFE, 3FE04, 3FE0A, 3FE10, 3FE17, 3FE1D, 3FE23, 3FE29, 3FE2F, 3FE35, 3FE3C, 3FE42, 3FE48, 3FE4E, 3FE54, 3FE5A, 3FE60, 3FE66, 3FE6C, 3FE72, 3FE78, 3FE7E, 3FE84, 3FE89, 3FE8F, 3FE95, 3FE9B, 3FEA1, 3FEA7, 3FEAC, 3FEB2, 3FEB8, 3FEBE, 3FEC3, 3FEC9, 3FECF, 3FED4, 3FEDA, 3FEE0, 3FEE5, 3FEEB, 3FEF1, 3FEF6, 3FEFC, 3FF01, 3FF07, 3FF0C, 3FF12, 3FF17, 3FF1D, 3FF22, 3FF28, 3FF2D, 3FF33, 3FF38, 3FF3E, 3FF43, 3FF49, 3FF4E, 3FF53, 3FF59, 3FF5E, 3FF63, 3FF69, 3FF6E, 3FF73, 3FF79, 3FF7E, 3FF83, 3FF89, 3FF8E, 3FF93, 3FF98, 3FF9E, 3FFA3, 3FFA8, 3FFAD, 3FFB3, 3FFB8, 3FFBD, 3FFC2, 3FFC7, 3FFCD, 3FFD2, 3FFD7, 3FFDC, 3FFE1, 3FFE6, 3FFEB, 3FFF1, 3FFF6, 3FFFB;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_986c366aae4be05d',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '71a9ffab5329af6e3b094e2bf26fb863',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_986c366aae4be05d',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 0, 3FFFB, 3FFF5, 3FFF0, 3FFEB, 3FFE6, 3FFE1, 3FFDC, 3FFD7, 3FFD1, 3FFCC, 3FFC7, 3FFC2, 3FFBD, 3FFB7, 3FFB2, 3FFAD, 3FFA8, 3FFA3, 3FF9D, 3FF98, 3FF93, 3FF8E, 3FF88, 3FF83, 3FF7E, 3FF78, 3FF73, 3FF6E, 3FF68, 3FF63, 3FF5E, 3FF58, 3FF53, 3FF4E, 3FF48, 3FF43, 3FF3D, 3FF38, 3FF32, 3FF2D, 3FF28, 3FF22, 3FF1D, 3FF17, 3FF12, 3FF0C, 3FF07, 3FF01, 3FEFB, 3FEF6, 3FEF0, 3FEEB, 3FEE5, 3FEDF, 3FEDA, 3FED4, 3FECE, 3FEC9, 3FEC3, 3FEBD, 3FEB8, 3FEB2, 3FEAC, 3FEA6, 3FEA0, 3FE9B, 3FE95, 3FE8F, 3FE89, 3FE83, 3FE7D, 3FE77, 3FE71, 3FE6B, 3FE66, 3FE60, 3FE5A, 3FE53, 3FE4D, 3FE47, 3FE41, 3FE3B, 3FE35, 3FE2F, 3FE29, 3FE23, 3FE1C, 3FE16, 3FE10, 3FE0A, 3FE03, 3FDFD, 3FDF7, 3FDF0, 3FDEA, 3FDE4, 3FDDD, 3FDD7, 3FDD0, 3FDCA, 3FDC3, 3FDBD, 3FDB6, 3FDB0, 3FDA9, 3FDA3, 3FD9C, 3FD95, 3FD8F, 3FD88, 3FD81, 3FD7A, 3FD74, 3FD6D, 3FD66, 3FD5F, 3FD58, 3FD51, 3FD4B, 3FD44, 3FD3D, 3FD36, 3FD2F, 3FD28, 3FD20, 3FD19, 3FD12, 3FD0B, 3FD04, 3FCFD, 3FCF5, 3FCEE, 3FCE7, 3FCE0, 3FCD8, 3FCD1, 3FCC9, 3FCC2, 3FCBB, 3FCB3, 3FCAC, 3FCA4, 3FC9C, 3FC95, 3FC8D, 3FC86, 3FC7E, 3FC76, 3FC6E, 3FC67, 3FC5F, 3FC57, 3FC4F, 3FC47, 3FC3F, 3FC37, 3FC2F, 3FC27, 3FC1F, 3FC17, 3FC0F, 3FC07, 3FBFF, 3FBF6, 3FBEE, 3FBE6, 3FBDE, 3FBD5, 3FBCD, 3FBC4, 3FBBC, 3FBB4, 3FBAB, 3FBA2, 3FB9A, 3FB91, 3FB89, 3FB80, 3FB77, 3FB6F, 3FB66, 3FB5D, 3FB54, 3FB4B, 3FB42, 3FB39, 3FB30, 3FB27, 3FB1E, 3FB15, 3FB0C, 3FB03, 3FAFA, 3FAF1, 3FAE7, 3FADE, 3FAD5, 3FACB, 3FAC2, 3FAB9, 3FAAF, 3FAA6, 3FA9C, 3FA92, 3FA89, 3FA7F, 3FA75, 3FA6C, 3FA62, 3FA58, 3FA4E, 3FA44, 3FA3B, 3FA31, 3FA27, 3FA1D, 3FA13, 3FA08, 3F9FE, 3F9F4, 3F9EA, 3F9E0, 3F9D5, 3F9CB, 3F9C1, 3F9B6, 3F9AC, 3F9A1, 3F997, 3F98C, 3F982, 3F977, 3F96C, 3F962, 3F957, 3F94C, 3F941, 3F936, 3F92C, 3F921, 3F916, 3F90B, 3F900, 3F8F5, 3F8E9, 3F8DE, 3F8D3, 3F8C8, 3F8BC, 3F8B1, 3F8A6, 3F89A, 3F88F, 3F883, 3F878, 3F86C, 3F861, 3F855, 3F849, 3F83E, 3F832, 3F826, 3F81A, 3F80E, 3F802, 3F7F6, 3F7EA, 3F7DE, 3F7D2, 3F7C6, 3F7BA, 3F7AE, 3F7A2, 3F795, 3F789, 3F77D, 3F770, 3F764, 3F757, 3F74B, 3F73E, 3F732, 3F725, 3F718, 3F70C, 3F6FF, 3F6F2, 3F6E5, 3F6D8, 3F6CC, 3F6BF, 3F6B2, 3F6A5, 3F697, 3F68A, 3F67D, 3F670, 3F663, 3F656, 3F648, 3F63B, 3F62D, 3F620, 3F613, 3F605, 3F5F8, 3F5EA, 3F5DC, 3F5CF, 3F5C1, 3F5B3, 3F5A5, 3F598, 3F58A, 3F57C, 3F56E, 3F560, 3F552, 3F544, 3F536, 3F528, 3F51A, 3F50B, 3F4FD, 3F4EF, 3F4E1, 3F4D2, 3F4C4, 3F4B6, 3F4A7, 3F499, 3F48A, 3F47B, 3F46D, 3F45E, 3F450, 3F441, 3F432, 3F423, 3F414, 3F406, 3F3F7, 3F3E8, 3F3D9, 3F3CA, 3F3BB, 3F3AC, 3F39D, 3F38D, 3F37E, 3F36F, 3F360, 3F351, 3F341, 3F332, 3F322, 3F313, 3F304, 3F2F4, 3F2E5, 3F2D5, 3F2C5, 3F2B6, 3F2A6, 3F296, 3F287, 3F277, 3F267, 3F257, 3F248, 3F238, 3F228, 3F218, 3F208, 3F1F8, 3F1E8, 3F1D8, 3F1C8, 3F1B7, 3F1A7, 3F197, 3F187, 3F177, 3F166, 3F156, 3F146, 3F135, 3F125, 3F115, 3F104, 3F0F4, 3F0E3, 3F0D3, 3F0C2, 3F0B1, 3F0A1, 3F090, 3F07F, 3F06F, 3F05E, 3F04D, 3F03D, 3F02C, 3F01B, 3F00A, 3EFF9, 3EFE8, 3EFD7, 3EFC6, 3EFB5, 3EFA4, 3EF93, 3EF82, 3EF71, 3EF60, 3EF4F, 3EF3E, 3EF2D, 3EF1C, 3EF0A, 3EEF9, 3EEE8, 3EED7, 3EEC5, 3EEB4, 3EEA3, 3EE91, 3EE80, 3EE6F, 3EE5D, 3EE4C, 3EE3A, 3EE29, 3EE17, 3EE06, 3EDF4, 3EDE3, 3EDD1, 3EDC0, 3EDAE, 3ED9D, 3ED8B, 3ED7A, 3ED68, 3ED56, 3ED45, 3ED33, 3ED21, 3ED10, 3ECFE, 3ECEC, 3ECDA, 3ECC9, 3ECB7, 3ECA5, 3EC93, 3EC82, 3EC70, 3EC5E, 3EC4C, 3EC3A, 3EC28, 3EC17, 3EC05, 3EBF3, 3EBE1, 3EBCF, 3EBBD, 3EBAB, 3EB9A, 3EB88, 3EB76, 3EB64, 3EB52, 3EB40, 3EB2E, 3EB1C, 3EB0A, 3EAF8, 3EAE6, 3EAD4, 3EAC3, 3EAB1, 3EA9F, 3EA8D, 3EA7B, 3EA69, 3EA57, 3EA45, 3EA33, 3EA21, 3EA0F, 3E9FD, 3E9EB, 3E9DA, 3E9C8, 3E9B6, 3E9A4, 3E992, 3E980, 3E96E, 3E95C, 3E94B, 3E939, 3E927, 3E915, 3E903, 3E8F1, 3E8E0, 3E8CE, 3E8BC, 3E8AA, 3E898, 3E887, 3E875, 3E863, 3E852, 3E840, 3E82E, 3E81C, 3E80B, 3E7F9, 3E7E8, 3E7D6, 3E7C4, 3E7B3, 3E7A1, 3E790, 3E77E, 3E76D, 3E75B, 3E74A, 3E738, 3E727, 3E716, 3E704, 3E6F3, 3E6E2, 3E6D0, 3E6BF, 3E6AE, 3E69D, 3E68B, 3E67A, 3E669, 3E658, 3E647, 3E636, 3E625, 3E614, 3E603, 3E5F2, 3E5E1, 3E5D0, 3E5BF, 3E5AF, 3E59E, 3E58D, 3E57C, 3E56C, 3E55B, 3E54A, 3E53A, 3E529, 3E519, 3E508, 3E4F8, 3E4E8, 3E4D7, 3E4C7, 3E4B7, 3E4A7, 3E496, 3E486, 3E476, 3E466, 3E456, 3E446, 3E436, 3E427, 3E417, 3E407, 3E3F7, 3E3E8, 3E3D8, 3E3C8, 3E3B9, 3E3A9, 3E39A, 3E38B, 3E37B, 3E36C, 3E35D, 3E34E, 3E33F, 3E330, 3E321, 3E312, 3E303, 3E2F4, 3E2E5, 3E2D6, 3E2C8, 3E2B9, 3E2AB, 3E29C, 3E28E, 3E280, 3E271, 3E263, 3E255, 3E247, 3E239, 3E22B, 3E21D, 3E20F, 3E201, 3E1F4, 3E1E6, 3E1D9, 3E1CB, 3E1BE, 3E1B0, 3E1A3, 3E196, 3E189, 3E17C, 3E16F, 3E162, 3E155, 3E148, 3E13C, 3E12F, 3E123, 3E116, 3E10A, 3E0FE, 3E0F2, 3E0E5, 3E0D9, 3E0CD, 3E0C2, 3E0B6, 3E0AA, 3E09F, 3E093, 3E088, 3E07C, 3E071, 3E066, 3E05B, 3E050, 3E045, 3E03A, 3E030, 3E025, 3E01A, 3E010, 3E006, 3DFFB, 3DFF1, 3DFE7, 3DFDD, 3DFD3, 3DFCA, 3DFC0, 3DFB7, 3DFAD, 3DFA4, 3DF9B, 3DF91, 3DF88, 3DF7F, 3DF77, 3DF6E, 3DF65, 3DF5D, 3DF54, 3DF4C, 3DF44, 3DF3C, 3DF34, 3DF2C, 3DF24, 3DF1D, 3DF15, 3DF0E, 3DF07, 3DEFF, 3DEF8, 3DEF1, 3DEEB, 3DEE4, 3DEDD, 3DED7, 3DED1, 3DECA, 3DEC4, 3DEBE, 3DEB8, 3DEB3, 3DEAD, 3DEA8, 3DEA2, 3DE9D, 3DE98, 3DE93, 3DE8E, 3DE89, 3DE85, 3DE80, 3DE7C, 3DE78, 3DE74, 3DE70, 3DE6C, 3DE68, 3DE65, 3DE62, 3DE5E, 3DE5B, 3DE58, 3DE55, 3DE53, 3DE50, 3DE4E, 3DE4C, 3DE49, 3DE47, 3DE46, 3DE44, 3DE42, 3DE41, 3DE40, 3DE3F, 3DE3E, 3DE3D, 3DE3C, 3DE3C, 3DE3B, 3DE3B, 3DE3B, 3DE3B, 3DE3C, 3DE3C, 3DE3D, 3DE3D, 3DE3E, 3DE3F, 3DE40, 3DE42, 3DE43, 3DE45, 3DE47, 3DE49, 3DE4B, 3DE4D, 3DE50, 3DE53, 3DE55, 3DE58, 3DE5C, 3DE5F, 3DE62, 3DE66, 3DE6A, 3DE6E, 3DE72, 3DE76, 3DE7B, 3DE80, 3DE84, 3DE8A, 3DE8F, 3DE94, 3DE9A, 3DEA0, 3DEA5, 3DEAC, 3DEB2, 3DEB8, 3DEBF, 3DEC6, 3DECD, 3DED4, 3DEDB, 3DEE3, 3DEEB, 3DEF3, 3DEFB, 3DF03, 3DF0C, 3DF14, 3DF1D, 3DF26, 3DF30, 3DF39, 3DF43, 3DF4D, 3DF57, 3DF61, 3DF6B, 3DF76, 3DF81, 3DF8C, 3DF97, 3DFA2, 3DFAE, 3DFBA, 3DFC6, 3DFD2, 3DFDF, 3DFEB, 3DFF8, 3E005, 3E012, 3E020, 3E02D, 3E03B, 3E049, 3E058, 3E066, 3E075, 3E084, 3E093, 3E0A2, 3E0B2, 3E0C2, 3E0D2, 3E0E2, 3E0F2, 3E103, 3E114, 3E125, 3E136, 3E148, 3E159, 3E16B, 3E17D, 3E190, 3E1A2, 3E1B5, 3E1C8, 3E1DC, 3E1EF, 3E203, 3E217, 3E22B, 3E23F, 3E254, 3E269, 3E27E, 3E293, 3E2A9, 3E2BF, 3E2D5, 3E2EB, 3E301, 3E318, 3E32F, 3E346, 3E35E, 3E375, 3E38D, 3E3A5, 3E3BE, 3E3D6, 3E3EF, 3E408, 3E422, 3E43B, 3E455, 3E46F, 3E48A, 3E4A4, 3E4BF, 3E4DA, 3E4F5, 3E511, 3E52D, 3E549, 3E565, 3E582, 3E59E, 3E5BB, 3E5D9, 3E5F6, 3E614, 3E632, 3E651, 3E66F, 3E68E, 3E6AD, 3E6CC, 3E6EC, 3E70C, 3E72C, 3E74C, 3E76D, 3E78E, 3E7AF, 3E7D0, 3E7F2, 3E814, 3E836, 3E859, 3E87B, 3E89E, 3E8C1, 3E8E5, 3E909, 3E92D, 3E951, 3E976, 3E99B, 3E9C0, 3E9E5, 3EA0B, 3EA31, 3EA57, 3EA7D, 3EAA4, 3EACB, 3EAF2, 3EB1A, 3EB42, 3EB6A, 3EB92, 3EBBB, 3EBE4, 3EC0D, 3EC37, 3EC61, 3EC8B, 3ECB5, 3ECE0, 3ED0A, 3ED36, 3ED61, 3ED8D, 3EDB9, 3EDE5, 3EE12, 3EE3F, 3EE6C, 3EE99, 3EEC7, 3EEF5, 3EF23, 3EF52, 3EF81, 3EFB0, 3EFDF, 3F00F, 3F03F, 3F06F, 3F0A0, 3F0D1, 3F102, 3F134, 3F165, 3F198, 3F1CA, 3F1FD, 3F22F, 3F263, 3F296, 3F2CA, 3F2FE, 3F333, 3F367, 3F39C, 3F3D2, 3F407, 3F43D, 3F473, 3F4AA, 3F4E1, 3F518, 3F54F, 3F587, 3F5BF, 3F5F7, 3F630, 3F669, 3F6A2, 3F6DC, 3F715, 3F750, 3F78A, 3F7C5, 3F800, 3F83B, 3F877, 3F8B3, 3F8EF, 3F92C, 3F968, 3F9A6, 3F9E3, 3FA21, 3FA5F, 3FA9E, 3FADC, 3FB1B, 3FB5B, 3FB9A, 3FBDA, 3FC1B, 3FC5B, 3FC9C, 3FCDD, 3FD1F, 3FD61, 3FDA3, 3FDE5, 3FE28, 3FE6B, 3FEAF, 3FEF2, 3FF36, 3FF7B, 3FFBF;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_2c0a2805649d3a36',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f4a86fd5009b16ffa426e631f3ff2e43',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_2c0a2805649d3a36',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 4, 4A, 8F, D5, 11B, 162, 1A9, 1F0, 238, 27F, 2C8, 310, 359, 3A2, 3EB, 435, 47F, 4CA, 514, 55F, 5AB, 5F6, 642, 68F, 6DB, 728, 775, 7C3, 811, 85F, 8AE, 8FD, 94C, 99B, 9EB, A3B, A8C, ADD, B2E, B7F, BD1, C23, C76, CC8, D1B, D6F, DC3, E17, E6B, EC0, F15, F6A, FC0, 1016, 106C, 10C3, 111A, 1171, 11C9, 1221, 1279, 12D2, 132B, 1384, 13DD, 1437, 1492, 14EC, 1547, 15A2, 15FE, 165A, 16B6, 1713, 176F, 17CD, 182A, 1888, 18E6, 1945, 19A3, 1A03, 1A62, 1AC2, 1B22, 1B82, 1BE3, 1C44, 1CA6, 1D08, 1D6A, 1DCC, 1E2F, 1E92, 1EF5, 1F59, 1FBD, 2021, 2086, 20EB, 2150, 21B6, 221C, 2282, 22E9, 2350, 23B7, 241F, 2487, 24EF, 2558, 25C1, 262A, 2694, 26FD, 2768, 27D2, 283D, 28A8, 2914, 2980, 29EC, 2A58, 2AC5, 2B32, 2BA0, 2C0E, 2C7C, 2CEA, 2D59, 2DC8, 2E37, 2EA7, 2F17, 2F87, 2FF8, 3069, 30DA, 314C, 31BE, 3230, 32A3, 3316, 3389, 33FC, 3470, 34E4, 3559, 35CE, 3643, 36B8, 372E, 37A4, 381B, 3891, 3908, 3980, 39F7, 3A6F, 3AE8, 3B60, 3BD9, 3C52, 3CCC, 3D46, 3DC0, 3E3A, 3EB5, 3F30, 3FAC, 4028, 40A4, 4120, 419D, 421A, 4297, 4314, 4392, 4410, 448F, 450E, 458D, 460C, 468C, 470C, 478C, 480D, 488E, 490F, 4991, 4A13, 4A95, 4B17, 4B9A, 4C1D, 4CA0, 4D24, 4DA8, 4E2C, 4EB1, 4F36, 4FBB, 5040, 50C6, 514C, 51D2, 5259, 52E0, 5367, 53EF, 5476, 54FE, 5587, 5610, 5698, 5722, 57AB, 5835, 58BF, 594A, 59D4, 5A5F, 5AEB, 5B76, 5C02, 5C8E, 5D1A, 5DA7, 5E34, 5EC1, 5F4F, 5FDD, 606B, 60F9, 6188, 6217, 62A6, 6335, 63C5, 6455, 64E6, 6576, 6607, 6698, 672A, 67BB, 684D, 68DF, 6972, 6A05, 6A98, 6B2B, 6BBE, 6C52, 6CE6, 6D7B, 6E0F, 6EA4, 6F39, 6FCF, 7064, 70FA, 7191, 7227, 72BE, 7355, 73EC, 7483, 751B, 75B3, 764B, 76E4, 777C, 7815, 78AF, 7948, 79E2, 7A7C, 7B16, 7BB1, 7C4B, 7CE6, 7D82, 7E1D, 7EB9, 7F55, 7FF1, 808D, 812A, 81C7, 8264, 8301, 839F, 843D, 84DB, 8579, 8618, 86B6, 8755, 87F5, 8894, 8934, 89D4, 8A74, 8B14, 8BB5, 8C56, 8CF7, 8D98, 8E39, 8EDB, 8F7D, 901F, 90C2, 9164, 9207, 92AA, 934D, 93F0, 9494, 9538, 95DC, 9680, 9725, 97C9, 986E, 9913, 99B9, 9A5E, 9B04, 9BAA, 9C50, 9CF6, 9D9D, 9E43, 9EEA, 9F91, A039, A0E0, A188, A22F, A2D7, A380, A428, A4D1, A579, A622, A6CC, A775, A81E, A8C8, A972, AA1C, AAC6, AB71, AC1B, ACC6, AD71, AE1C, AEC7, AF73, B01E, B0CA, B176, B222, B2CE, B37B, B427, B4D4, B581, B62E, B6DB, B788, B836, B8E4, B991, BA3F, BAEE, BB9C, BC4A, BCF9, BDA7, BE56, BF05, BFB4, C064, C113, C1C3, C272, C322, C3D2, C482, C533, C5E3, C693, C744, C7F5, C8A6, C957, CA08, CAB9, CB6A, CC1C, CCCD, CD7F, CE31, CEE3, CF95, D047, D0FA, D1AC, D25E, D311, D3C4, D477, D52A, D5DD, D690, D743, D7F6, D8AA, D95D, DA11, DAC5, DB78, DC2C, DCE0, DD94, DE49, DEFD, DFB1, E066, E11A, E1CF, E283, E338, E3ED, E4A2, E557, E60C, E6C1, E776, E82B, E8E1, E996, EA4B, EB01, EBB7, EC6C, ED22, EDD8, EE8D, EF43, EFF9, F0AF, F165, F21B, F2D1, F388, F43E, F4F4, F5AA, F661, F717, F7CE, F884, F93B, F9F1, FAA8, FB5E, FC15, FCCC, FD82, FE39, FEF0, FFA7, 1005D, 10114, 101CB, 10282, 10339, 103F0, 104A6, 1055D, 10614, 106CB, 10782, 10839, 108F0, 109A7, 10A5E, 10B15, 10BCC, 10C83, 10D3A, 10DF1, 10EA8, 10F5F, 11016, 110CD, 11184, 1123A, 112F1, 113A8, 1145F, 11516, 115CD, 11683, 1173A, 117F1, 118A8, 1195E, 11A15, 11ACC, 11B82, 11C39, 11CEF, 11DA6, 11E5C, 11F13, 11FC9, 12080, 12136, 121EC, 122A2, 12358, 1240F, 124C5, 1257B, 12631, 126E6, 1279C, 12852, 12908, 129BE, 12A73, 12B29, 12BDE, 12C94, 12D49, 12DFE, 12EB3, 12F68, 1301E, 130D3, 13187, 1323C, 132F1, 133A6, 1345A, 1350F, 135C3, 13677, 1372C, 137E0, 13894, 13948, 139FC, 13AAF, 13B63, 13C17, 13CCA, 13D7E, 13E31, 13EE4, 13F97, 1404A, 140FD, 141B0, 14262, 14315, 143C7, 14479, 1452B, 145DD, 1468F, 14741, 147F3, 148A4, 14956, 14A07, 14AB8, 14B69, 14C1A, 14CCB, 14D7B, 14E2C, 14EDC, 14F8C, 1503C, 150EC, 1519C, 1524C, 152FB, 153AA, 1545A, 15509, 155B7, 15666, 15715, 157C3, 15871, 1591F, 159CD, 15A7B, 15B29, 15BD6, 15C83, 15D30, 15DDD, 15E8A, 15F36, 15FE3, 1608F, 1613B, 161E7, 16292, 1633E, 163E9, 16494, 1653F, 165EA, 16694, 1673F, 167E9, 16893, 1693D, 169E6, 16A8F, 16B39, 16BE1, 16C8A, 16D33, 16DDB, 16E83, 16F2B, 16FD3, 1707A, 17121, 171C8, 1726F, 17316, 173BC, 17462, 17508, 175AE, 17654, 176F9, 1779E, 17843, 178E7, 1798C, 17A30, 17AD3, 17B77, 17C1A, 17CBE, 17D61, 17E03, 17EA6, 17F48, 17FEA, 1808B, 1812D, 181CE, 1826F, 1830F, 183B0, 18450, 184F0, 18590, 1862F, 186CE, 1876D, 1880B, 188AA, 18948, 189E5, 18A83, 18B20, 18BBD, 18C5A, 18CF6, 18D92, 18E2E, 18ECA, 18F65, 19000, 1909A, 19135, 191CF, 19269, 19302, 1939C, 19434, 194CD, 19565, 195FD, 19695, 1972D, 197C4, 1985B, 198F1, 19987, 19A1D, 19AB3, 19B48, 19BDD, 19C72, 19D06, 19D9A, 19E2E, 19EC1, 19F54, 19FE7, 1A07A, 1A10C, 1A19E, 1A22F, 1A2C0, 1A351, 1A3E1, 1A472, 1A501, 1A591, 1A620, 1A6AF, 1A73D, 1A7CB, 1A859, 1A8E7, 1A974, 1AA00, 1AA8D, 1AB19, 1ABA5, 1AC30, 1ACBB, 1AD46, 1ADD0, 1AE5A, 1AEE4, 1AF6D, 1AFF6, 1B07E, 1B106, 1B18E, 1B215, 1B29D, 1B323, 1B3AA, 1B42F, 1B4B5, 1B53A, 1B5BF, 1B644, 1B6C8, 1B74B, 1B7CF, 1B852, 1B8D4, 1B956, 1B9D8, 1BA5A, 1BADB, 1BB5B, 1BBDC, 1BC5C, 1BCDB, 1BD5A, 1BDD9, 1BE57, 1BED5, 1BF53, 1BFD0, 1C04D, 1C0C9, 1C145, 1C1C0, 1C23B, 1C2B6, 1C330, 1C3AA, 1C424, 1C49D, 1C516, 1C58E, 1C606, 1C67D, 1C6F4, 1C76B, 1C7E1, 1C857, 1C8CC, 1C941, 1C9B6, 1CA2A, 1CA9E, 1CB11, 1CB84, 1CBF6, 1CC68, 1CCDA, 1CD4B, 1CDBC, 1CE2C, 1CE9C, 1CF0B, 1CF7A, 1CFE9, 1D057, 1D0C5, 1D132, 1D19F, 1D20B, 1D277, 1D2E2, 1D34D, 1D3B8, 1D422, 1D48C, 1D4F5, 1D55E, 1D5C6, 1D62E, 1D695, 1D6FC, 1D763, 1D7C9, 1D82F, 1D894, 1D8F9, 1D95D, 1D9C1, 1DA24, 1DA87, 1DAE9, 1DB4B, 1DBAD, 1DC0E, 1DC6E, 1DCCE, 1DD2E, 1DD8D, 1DDEC, 1DE4A, 1DEA8, 1DF05, 1DF62, 1DFBE, 1E01A, 1E076, 1E0D1, 1E12B, 1E185, 1E1DE, 1E237, 1E290, 1E2E8, 1E33F, 1E397, 1E3ED, 1E443, 1E499, 1E4EE, 1E543, 1E597, 1E5EA, 1E63E, 1E690, 1E6E3, 1E734, 1E785, 1E7D6, 1E826, 1E876, 1E8C5, 1E914, 1E962, 1E9B0, 1E9FD, 1EA4A, 1EA96, 1EAE2, 1EB2D, 1EB78, 1EBC2, 1EC0C, 1EC55, 1EC9E, 1ECE6, 1ED2E, 1ED75, 1EDBC, 1EE02, 1EE48, 1EE8D, 1EED2, 1EF16, 1EF59, 1EF9D, 1EFDF, 1F021, 1F063, 1F0A4, 1F0E4, 1F124, 1F164, 1F1A3, 1F1E2, 1F21F, 1F25D, 1F29A, 1F2D6, 1F312, 1F34E, 1F388, 1F3C3, 1F3FD, 1F436, 1F46F, 1F4A7, 1F4DF, 1F516, 1F54C, 1F582, 1F5B8, 1F5ED, 1F622, 1F656, 1F689, 1F6BC, 1F6EF, 1F720, 1F752, 1F783, 1F7B3, 1F7E3, 1F812, 1F841, 1F86F, 1F89D, 1F8CA, 1F8F6, 1F922, 1F94E, 1F979, 1F9A3, 1F9CD, 1F9F6, 1FA1F, 1FA47, 1FA6F, 1FA96, 1FABD, 1FAE3, 1FB09, 1FB2E, 1FB52, 1FB76, 1FB99, 1FBBC, 1FBDF, 1FC00, 1FC22, 1FC42, 1FC62, 1FC82, 1FCA1, 1FCC0, 1FCDE, 1FCFB, 1FD18, 1FD34, 1FD50, 1FD6B, 1FD86, 1FDA0, 1FDBA, 1FDD3, 1FDEB, 1FE03, 1FE1A, 1FE31, 1FE48, 1FE5D, 1FE73, 1FE87, 1FE9B, 1FEAF, 1FEC2, 1FED4, 1FEE6, 1FEF8, 1FF08, 1FF19, 1FF28, 1FF38, 1FF46, 1FF54, 1FF62, 1FF6F, 1FF7B, 1FF87, 1FF92, 1FF9D, 1FFA7, 1FFB1, 1FFBA, 1FFC2, 1FFCA, 1FFD2, 1FFD9, 1FFDF, 1FFE5, 1FFEA, 1FFEF, 1FFF3, 1FFF6, 1FFF9, 1FFFC, 1FFFE, 1FFFF, 1FFFF;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_866d29fad7879883',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '09ce260340862306a94764017cf2ef5f',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_866d29fad7879883',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 1FFFF, 1FFFF, 1FFFF, 1FFFD, 1FFFB, 1FFF9, 1FFF6, 1FFF2, 1FFEE, 1FFE9, 1FFE4, 1FFDE, 1FFD8, 1FFD1, 1FFC9, 1FFC1, 1FFB9, 1FFAF, 1FFA6, 1FF9B, 1FF91, 1FF85, 1FF79, 1FF6D, 1FF60, 1FF52, 1FF44, 1FF35, 1FF26, 1FF16, 1FF06, 1FEF5, 1FEE4, 1FED2, 1FEBF, 1FEAC, 1FE99, 1FE84, 1FE70, 1FE5A, 1FE45, 1FE2E, 1FE17, 1FE00, 1FDE8, 1FDCF, 1FDB6, 1FD9C, 1FD82, 1FD67, 1FD4C, 1FD30, 1FD14, 1FCF7, 1FCD9, 1FCBB, 1FC9D, 1FC7E, 1FC5E, 1FC3E, 1FC1D, 1FBFC, 1FBDA, 1FBB7, 1FB94, 1FB71, 1FB4D, 1FB28, 1FB03, 1FADE, 1FAB7, 1FA91, 1FA69, 1FA42, 1FA19, 1F9F0, 1F9C7, 1F99D, 1F973, 1F948, 1F91C, 1F8F0, 1F8C3, 1F896, 1F868, 1F83A, 1F80B, 1F7DC, 1F7AC, 1F77C, 1F74B, 1F719, 1F6E8, 1F6B5, 1F682, 1F64E, 1F61A, 1F5E6, 1F5B1, 1F57B, 1F545, 1F50E, 1F4D7, 1F49F, 1F467, 1F42E, 1F3F4, 1F3BB, 1F380, 1F345, 1F30A, 1F2CE, 1F291, 1F254, 1F217, 1F1D9, 1F19A, 1F15B, 1F11B, 1F0DB, 1F09B, 1F05A, 1F018, 1EFD6, 1EF93, 1EF50, 1EF0C, 1EEC8, 1EE83, 1EE3E, 1EDF8, 1EDB2, 1ED6B, 1ED24, 1ECDC, 1EC94, 1EC4B, 1EC02, 1EBB8, 1EB6E, 1EB23, 1EAD7, 1EA8C, 1EA3F, 1E9F2, 1E9A5, 1E957, 1E909, 1E8BA, 1E86B, 1E81B, 1E7CB, 1E77A, 1E729, 1E6D7, 1E685, 1E632, 1E5DF, 1E58B, 1E537, 1E4E2, 1E48D, 1E437, 1E3E1, 1E38A, 1E333, 1E2DC, 1E283, 1E22B, 1E1D2, 1E178, 1E11E, 1E0C4, 1E069, 1E00D, 1DFB1, 1DF55, 1DEF8, 1DE9B, 1DE3D, 1DDDF, 1DD80, 1DD21, 1DCC1, 1DC61, 1DC00, 1DB9F, 1DB3E, 1DADB, 1DA79, 1DA16, 1D9B3, 1D94F, 1D8EA, 1D886, 1D820, 1D7BB, 1D755, 1D6EE, 1D687, 1D61F, 1D5B7, 1D54F, 1D4E6, 1D47D, 1D413, 1D3A9, 1D33E, 1D2D3, 1D268, 1D1FC, 1D18F, 1D122, 1D0B5, 1D047, 1CFD9, 1CF6B, 1CEFC, 1CE8C, 1CE1C, 1CDAC, 1CD3B, 1CCCA, 1CC58, 1CBE6, 1CB74, 1CB01, 1CA8D, 1CA1A, 1C9A6, 1C931, 1C8BC, 1C846, 1C7D1, 1C75A, 1C6E4, 1C66D, 1C5F5, 1C57D, 1C505, 1C48C, 1C413, 1C399, 1C31F, 1C2A5, 1C22A, 1C1AF, 1C133, 1C0B7, 1C03B, 1BFBE, 1BF41, 1BEC3, 1BE45, 1BDC7, 1BD48, 1BCC9, 1BC4A, 1BBCA, 1BB49, 1BAC9, 1BA48, 1B9C6, 1B944, 1B8C2, 1B83F, 1B7BC, 1B739, 1B6B5, 1B631, 1B5AC, 1B528, 1B4A2, 1B41D, 1B397, 1B310, 1B28A, 1B202, 1B17B, 1B0F3, 1B06B, 1AFE2, 1AF59, 1AED0, 1AE47, 1ADBD, 1AD32, 1ACA8, 1AC1C, 1AB91, 1AB05, 1AA79, 1A9ED, 1A960, 1A8D3, 1A845, 1A7B7, 1A729, 1A69B, 1A60C, 1A57D, 1A4ED, 1A45D, 1A3CD, 1A33D, 1A2AC, 1A21B, 1A189, 1A0F7, 1A065, 19FD3, 19F40, 19EAD, 19E19, 19D86, 19CF1, 19C5D, 19BC8, 19B33, 19A9E, 19A08, 19972, 198DC, 19845, 197AF, 19717, 19680, 195E8, 19550, 194B8, 1941F, 19386, 192ED, 19253, 191B9, 1911F, 19085, 18FEA, 18F4F, 18EB4, 18E18, 18D7C, 18CE0, 18C44, 18BA7, 18B0A, 18A6D, 189CF, 18932, 18893, 187F5, 18757, 186B8, 18619, 18579, 184D9, 1843A, 18399, 182F9, 18258, 181B7, 18116, 18075, 17FD3, 17F31, 17E8F, 17DEC, 17D4A, 17CA7, 17C04, 17B60, 17ABD, 17A19, 17975, 178D0, 1782C, 17787, 176E2, 1763C, 17597, 174F1, 1744B, 173A5, 172FF, 17258, 171B1, 1710A, 17063, 16FBB, 16F14, 16E6C, 16DC3, 16D1B, 16C73, 16BCA, 16B21, 16A78, 169CE, 16925, 1687B, 167D1, 16727, 1667D, 165D2, 16527, 1647C, 163D1, 16326, 1627A, 161CF, 16123, 16077, 15FCB, 15F1E, 15E72, 15DC5, 15D18, 15C6B, 15BBE, 15B10, 15A63, 159B5, 15907, 15859, 157AB, 156FC, 1564E, 1559F, 154F0, 15441, 15392, 152E3, 15233, 15184, 150D4, 15024, 14F74, 14EC4, 14E13, 14D63, 14CB2, 14C01, 14B50, 14A9F, 149EE, 1493D, 1488C, 147DA, 14728, 14677, 145C5, 14513, 14460, 143AE, 142FC, 14249, 14197, 140E4, 14031, 13F7E, 13ECB, 13E18, 13D65, 13CB1, 13BFE, 13B4A, 13A96, 139E3, 1392F, 1387B, 137C7, 13713, 1365E, 135AA, 134F6, 13441, 1338C, 132D8, 13223, 1316E, 130B9, 13004, 12F4F, 12E9A, 12DE5, 12D30, 12C7A, 12BC5, 12B0F, 12A5A, 129A4, 128EF, 12839, 12783, 126CD, 12617, 12561, 124AB, 123F5, 1233F, 12289, 121D3, 1211C, 12066, 11FB0, 11EF9, 11E43, 11D8C, 11CD6, 11C1F, 11B69, 11AB2, 119FC, 11945, 1188E, 117D8, 11721, 1166A, 115B3, 114FC, 11446, 1138F, 112D8, 11221, 1116A, 110B3, 10FFC, 10F45, 10E8E, 10DD7, 10D20, 10C69, 10BB3, 10AFC, 10A45, 1098E, 108D7, 10820, 10769, 106B2, 105FB, 10544, 1048D, 103D6, 1031F, 10268, 101B2, 100FB, 10044, FF8D, FED6, FE20, FD69, FCB2, FBFC, FB45, FA8E, F9D8, F921, F86B, F7B4, F6FE, F647, F591, F4DB, F425, F36E, F2B8, F202, F14C, F096, EFE0, EF2A, EE74, EDBE, ED09, EC53, EB9D, EAE8, EA32, E97D, E8C8, E812, E75D, E6A8, E5F3, E53E, E489, E3D4, E31F, E26A, E1B6, E101, E04D, DF98, DEE4, DE30, DD7B, DCC7, DC13, DB60, DAAC, D9F8, D944, D891, D7DD, D72A, D677, D5C4, D511, D45E, D3AB, D2F8, D246, D193, D0E1, D02F, CF7C, CECA, CE18, CD67, CCB5, CC03, CB52, CAA1, C9EF, C93E, C88D, C7DC, C72C, C67B, C5CB, C51A, C46A, C3BA, C30A, C25A, C1AB, C0FB, C04C, BF9C, BEED, BE3E, BD8F, BCE1, BC32, BB84, BAD6, BA27, B979, B8CC, B81E, B771, B6C3, B616, B569, B4BC, B40F, B363, B2B6, B20A, B15E, B0B2, B007, AF5B, AEB0, AE04, AD59, ACAE, AC04, AB59, AAAF, AA05, A95B, A8B1, A807, A75E, A6B4, A60B, A562, A4BA, A411, A369, A2C0, A218, A171, A0C9, A022, 9F7A, 9ED3, 9E2C, 9D86, 9CDF, 9C39, 9B93, 9AED, 9A47, 99A2, 98FD, 9858, 97B3, 970E, 966A, 95C6, 9522, 947E, 93DA, 9337, 9294, 91F1, 914E, 90AB, 9009, 8F67, 8EC5, 8E23, 8D82, 8CE1, 8C40, 8B9F, 8AFE, 8A5E, 89BE, 891E, 887E, 87DF, 8740, 86A1, 8602, 8563, 84C5, 8427, 8389, 82EC, 824E, 81B1, 8114, 8078, 7FDB, 7F3F, 7EA3, 7E08, 7D6C, 7CD1, 7C36, 7B9C, 7B01, 7A67, 79CD, 7933, 789A, 7801, 7768, 76CF, 7636, 759E, 7506, 746F, 73D7, 7340, 72A9, 7212, 717C, 70E6, 7050, 6FBA, 6F25, 6E90, 6DFB, 6D67, 6CD2, 6C3E, 6BAA, 6B17, 6A84, 69F1, 695E, 68CB, 6839, 67A7, 6716, 6684, 65F3, 6563, 64D2, 6442, 63B2, 6322, 6293, 6203, 6175, 60E6, 6058, 5FCA, 5F3C, 5EAE, 5E21, 5D94, 5D07, 5C7B, 5BEF, 5B63, 5AD8, 5A4D, 59C2, 5937, 58AD, 5822, 5799, 570F, 5686, 55FD, 5574, 54EC, 5464, 53DC, 5355, 52CE, 5247, 51C0, 513A, 50B4, 502E, 4FA9, 4F24, 4E9F, 4E1A, 4D96, 4D12, 4C8F, 4C0B, 4B88, 4B06, 4A83, 4A01, 497F, 48FE, 487D, 47FC, 477B, 46FB, 467B, 45FB, 457C, 44FD, 447E, 4400, 4381, 4304, 4286, 4209, 418C, 410F, 4093, 4017, 3F9B, 3F20, 3EA5, 3E2A, 3DB0, 3D36, 3CBC, 3C42, 3BC9, 3B50, 3AD8, 3A5F, 39E7, 3970, 38F9, 3882, 380B, 3795, 371E, 36A9, 3633, 35BE, 3549, 34D5, 3461, 33ED, 337A, 3306, 3294, 3221, 31AF, 313D, 30CB, 305A, 2FE9, 2F78, 2F08, 2E98, 2E28, 2DB9, 2D4A, 2CDB, 2C6D, 2BFF, 2B91, 2B24, 2AB7, 2A4A, 29DE, 2971, 2906, 289A, 282F, 27C4, 275A, 26F0, 2686, 261C, 25B3, 254A, 24E1, 2479, 2411, 23AA, 2343, 22DC, 2275, 220F, 21A9, 2143, 20DE, 2079, 2014, 1FB0, 1F4C, 1EE8, 1E85, 1E22, 1DBF, 1D5D, 1CFB, 1C99, 1C38, 1BD7, 1B76, 1B15, 1AB5, 1A56, 19F6, 1997, 1938, 18DA, 187C, 181E, 17C0, 1763, 1707, 16AA, 164E, 15F2, 1597, 153B, 14E1, 1486, 142C, 13D2, 1378, 131F, 12C6, 126E, 1215, 11BD, 1166, 110F, 10B8, 1061, 100B, FB5, F5F, F0A, EB5, E60, E0C, DB8, D64, D11, CBE, C6B, C19, BC7, B75, B23, AD2, A82, A31, 9E1, 991, 942, 8F3, 8A4, 855, 807, 7B9, 76C, 71E, 6D1, 685, 639, 5ED, 5A1, 556, 50B, 4C0, 476, 42C, 3E2, 399, 350, 307, 2BE, 276, 22F, 1E7, 1A0, 159, 113, CC, 87, 41;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_50631a4fdbedee3a',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '30e744221e3be240c40c0197df30d061',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_50631a4fdbedee3a',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFFC, 3FFB7, 3FF72, 3FF2E, 3FEEA, 3FEA6, 3FE63, 3FE20, 3FDDD, 3FD9B, 3FD58, 3FD17, 3FCD5, 3FC94, 3FC53, 3FC13, 3FBD2, 3FB92, 3FB53, 3FB13, 3FAD4, 3FA96, 3FA57, 3FA19, 3F9DC, 3F99E, 3F961, 3F924, 3F8E8, 3F8AB, 3F86F, 3F834, 3F7F9, 3F7BE, 3F783, 3F748, 3F70E, 3F6D5, 3F69B, 3F662, 3F629, 3F5F1, 3F5B8, 3F580, 3F549, 3F511, 3F4DA, 3F4A3, 3F46D, 3F437, 3F401, 3F3CB, 3F396, 3F361, 3F32C, 3F2F8, 3F2C4, 3F290, 3F25D, 3F229, 3F1F7, 3F1C4, 3F192, 3F160, 3F12E, 3F0FC, 3F0CB, 3F09A, 3F06A, 3F039, 3F009, 3EFDA, 3EFAA, 3EF7B, 3EF4C, 3EF1E, 3EEF0, 3EEC2, 3EE94, 3EE67, 3EE39, 3EE0D, 3EDE0, 3EDB4, 3ED88, 3ED5C, 3ED31, 3ED05, 3ECDB, 3ECB0, 3EC86, 3EC5C, 3EC32, 3EC09, 3EBDF, 3EBB6, 3EB8E, 3EB65, 3EB3D, 3EB16, 3EAEE, 3EAC7, 3EAA0, 3EA79, 3EA53, 3EA2C, 3EA07, 3E9E1, 3E9BC, 3E997, 3E972, 3E94D, 3E929, 3E905, 3E8E1, 3E8BE, 3E89A, 3E877, 3E855, 3E832, 3E810, 3E7EE, 3E7CD, 3E7AB, 3E78A, 3E769, 3E749, 3E728, 3E708, 3E6E9, 3E6C9, 3E6AA, 3E68B, 3E66C, 3E64D, 3E62F, 3E611, 3E5F3, 3E5D6, 3E5B8, 3E59B, 3E57F, 3E562, 3E546, 3E52A, 3E50E, 3E4F3, 3E4D7, 3E4BC, 3E4A2, 3E487, 3E46D, 3E453, 3E439, 3E41F, 3E406, 3E3ED, 3E3D4, 3E3BC, 3E3A3, 3E38B, 3E373, 3E35C, 3E344, 3E32D, 3E316, 3E2FF, 3E2E9, 3E2D3, 3E2BD, 3E2A7, 3E291, 3E27C, 3E267, 3E252, 3E23E, 3E229, 3E215, 3E201, 3E1ED, 3E1DA, 3E1C7, 3E1B4, 3E1A1, 3E18E, 3E17C, 3E16A, 3E158, 3E146, 3E135, 3E123, 3E112, 3E102, 3E0F1, 3E0E1, 3E0D0, 3E0C0, 3E0B1, 3E0A1, 3E092, 3E083, 3E074, 3E065, 3E057, 3E049, 3E03A, 3E02D, 3E01F, 3E012, 3E004, 3DFF7, 3DFEB, 3DFDE, 3DFD2, 3DFC5, 3DFB9, 3DFAE, 3DFA2, 3DF97, 3DF8B, 3DF80, 3DF76, 3DF6B, 3DF61, 3DF56, 3DF4C, 3DF42, 3DF39, 3DF2F, 3DF26, 3DF1D, 3DF14, 3DF0C, 3DF03, 3DEFB, 3DEF3, 3DEEB, 3DEE3, 3DEDB, 3DED4, 3DECD, 3DEC6, 3DEBF, 3DEB8, 3DEB2, 3DEAC, 3DEA6, 3DEA0, 3DE9A, 3DE94, 3DE8F, 3DE8A, 3DE85, 3DE80, 3DE7B, 3DE77, 3DE72, 3DE6E, 3DE6A, 3DE67, 3DE63, 3DE5F, 3DE5C, 3DE59, 3DE56, 3DE53, 3DE51, 3DE4E, 3DE4C, 3DE4A, 3DE48, 3DE46, 3DE44, 3DE43, 3DE41, 3DE40, 3DE3F, 3DE3E, 3DE3D, 3DE3D, 3DE3D, 3DE3C, 3DE3C, 3DE3C, 3DE3C, 3DE3D, 3DE3D, 3DE3E, 3DE3F, 3DE40, 3DE41, 3DE42, 3DE44, 3DE45, 3DE47, 3DE49, 3DE4B, 3DE4D, 3DE4F, 3DE52, 3DE54, 3DE57, 3DE5A, 3DE5D, 3DE60, 3DE63, 3DE66, 3DE6A, 3DE6E, 3DE71, 3DE75, 3DE79, 3DE7E, 3DE82, 3DE86, 3DE8B, 3DE90, 3DE95, 3DE9A, 3DE9F, 3DEA4, 3DEA9, 3DEAF, 3DEB4, 3DEBA, 3DEC0, 3DEC6, 3DECC, 3DED2, 3DED9, 3DEDF, 3DEE6, 3DEEC, 3DEF3, 3DEFA, 3DF01, 3DF08, 3DF10, 3DF17, 3DF1F, 3DF26, 3DF2E, 3DF36, 3DF3E, 3DF46, 3DF4E, 3DF56, 3DF5F, 3DF67, 3DF70, 3DF79, 3DF82, 3DF8B, 3DF94, 3DF9D, 3DFA6, 3DFAF, 3DFB9, 3DFC2, 3DFCC, 3DFD6, 3DFE0, 3DFEA, 3DFF4, 3DFFE, 3E008, 3E012, 3E01D, 3E027, 3E032, 3E03D, 3E047, 3E052, 3E05D, 3E068, 3E074, 3E07F, 3E08A, 3E096, 3E0A1, 3E0AD, 3E0B8, 3E0C4, 3E0D0, 3E0DC, 3E0E8, 3E0F4, 3E100, 3E10D, 3E119, 3E125, 3E132, 3E13E, 3E14B, 3E158, 3E165, 3E171, 3E17E, 3E18C, 3E199, 3E1A6, 3E1B3, 3E1C0, 3E1CE, 3E1DB, 3E1E9, 3E1F6, 3E204, 3E212, 3E220, 3E22E, 3E23C, 3E24A, 3E258, 3E266, 3E274, 3E282, 3E291, 3E29F, 3E2AE, 3E2BC, 3E2CB, 3E2D9, 3E2E8, 3E2F7, 3E306, 3E314, 3E323, 3E332, 3E341, 3E351, 3E360, 3E36F, 3E37E, 3E38E, 3E39D, 3E3AC, 3E3BC, 3E3CB, 3E3DB, 3E3EA, 3E3FA, 3E40A, 3E41A, 3E429, 3E439, 3E449, 3E459, 3E469, 3E479, 3E489, 3E499, 3E4AA, 3E4BA, 3E4CA, 3E4DA, 3E4EB, 3E4FB, 3E50B, 3E51C, 3E52C, 3E53D, 3E54D, 3E55E, 3E56F, 3E57F, 3E590, 3E5A1, 3E5B2, 3E5C2, 3E5D3, 3E5E4, 3E5F5, 3E606, 3E617, 3E628, 3E639, 3E64A, 3E65B, 3E66C, 3E67D, 3E68E, 3E6A0, 3E6B1, 3E6C2, 3E6D3, 3E6E5, 3E6F6, 3E707, 3E719, 3E72A, 3E73B, 3E74D, 3E75E, 3E770, 3E781, 3E793, 3E7A4, 3E7B6, 3E7C7, 3E7D9, 3E7EB, 3E7FC, 3E80E, 3E820, 3E831, 3E843, 3E855, 3E866, 3E878, 3E88A, 3E89C, 3E8AD, 3E8BF, 3E8D1, 3E8E3, 3E8F4, 3E906, 3E918, 3E92A, 3E93C, 3E94E, 3E95F, 3E971, 3E983, 3E995, 3E9A7, 3E9B9, 3E9CB, 3E9DD, 3E9EF, 3EA00, 3EA12, 3EA24, 3EA36, 3EA48, 3EA5A, 3EA6C, 3EA7E, 3EA90, 3EAA2, 3EAB4, 3EAC6, 3EAD8, 3EAE9, 3EAFB, 3EB0D, 3EB1F, 3EB31, 3EB43, 3EB55, 3EB67, 3EB79, 3EB8B, 3EB9D, 3EBAE, 3EBC0, 3EBD2, 3EBE4, 3EBF6, 3EC08, 3EC1A, 3EC2B, 3EC3D, 3EC4F, 3EC61, 3EC73, 3EC85, 3EC96, 3ECA8, 3ECBA, 3ECCC, 3ECDD, 3ECEF, 3ED01, 3ED12, 3ED24, 3ED36, 3ED48, 3ED59, 3ED6B, 3ED7C, 3ED8E, 3EDA0, 3EDB1, 3EDC3, 3EDD4, 3EDE6, 3EDF7, 3EE09, 3EE1A, 3EE2C, 3EE3D, 3EE4F, 3EE60, 3EE72, 3EE83, 3EE94, 3EEA6, 3EEB7, 3EEC8, 3EED9, 3EEEB, 3EEFC, 3EF0D, 3EF1E, 3EF30, 3EF41, 3EF52, 3EF63, 3EF74, 3EF85, 3EF96, 3EFA7, 3EFB8, 3EFC9, 3EFDA, 3EFEB, 3EFFC, 3F00D, 3F01E, 3F02E, 3F03F, 3F050, 3F061, 3F071, 3F082, 3F093, 3F0A3, 3F0B4, 3F0C5, 3F0D5, 3F0E6, 3F0F6, 3F107, 3F117, 3F128, 3F138, 3F148, 3F159, 3F169, 3F179, 3F18A, 3F19A, 3F1AA, 3F1BA, 3F1CA, 3F1DA, 3F1EA, 3F1FA, 3F20A, 3F21A, 3F22A, 3F23A, 3F24A, 3F25A, 3F26A, 3F27A, 3F289, 3F299, 3F2A9, 3F2B8, 3F2C8, 3F2D8, 3F2E7, 3F2F7, 3F306, 3F316, 3F325, 3F334, 3F344, 3F353, 3F362, 3F371, 3F381, 3F390, 3F39F, 3F3AE, 3F3BD, 3F3CC, 3F3DB, 3F3EA, 3F3F9, 3F408, 3F417, 3F426, 3F434, 3F443, 3F452, 3F461, 3F46F, 3F47E, 3F48C, 3F49B, 3F4A9, 3F4B8, 3F4C6, 3F4D5, 3F4E3, 3F4F1, 3F4FF, 3F50E, 3F51C, 3F52A, 3F538, 3F546, 3F554, 3F562, 3F570, 3F57E, 3F58C, 3F59A, 3F5A8, 3F5B5, 3F5C3, 3F5D1, 3F5DE, 3F5EC, 3F5FA, 3F607, 3F615, 3F622, 3F630, 3F63D, 3F64A, 3F658, 3F665, 3F672, 3F67F, 3F68C, 3F699, 3F6A7, 3F6B4, 3F6C1, 3F6CD, 3F6DA, 3F6E7, 3F6F4, 3F701, 3F70E, 3F71A, 3F727, 3F734, 3F740, 3F74D, 3F759, 3F766, 3F772, 3F77F, 3F78B, 3F797, 3F7A4, 3F7B0, 3F7BC, 3F7C8, 3F7D4, 3F7E0, 3F7EC, 3F7F8, 3F804, 3F810, 3F81C, 3F828, 3F834, 3F83F, 3F84B, 3F857, 3F862, 3F86E, 3F87A, 3F885, 3F891, 3F89C, 3F8A7, 3F8B3, 3F8BE, 3F8C9, 3F8D5, 3F8E0, 3F8EB, 3F8F6, 3F901, 3F90C, 3F917, 3F922, 3F92D, 3F938, 3F943, 3F94E, 3F959, 3F963, 3F96E, 3F979, 3F983, 3F98E, 3F998, 3F9A3, 3F9AD, 3F9B8, 3F9C2, 3F9CD, 3F9D7, 3F9E1, 3F9EB, 3F9F6, 3FA00, 3FA0A, 3FA14, 3FA1E, 3FA28, 3FA32, 3FA3C, 3FA46, 3FA50, 3FA5A, 3FA63, 3FA6D, 3FA77, 3FA81, 3FA8A, 3FA94, 3FA9D, 3FAA7, 3FAB0, 3FABA, 3FAC3, 3FACD, 3FAD6, 3FADF, 3FAE9, 3FAF2, 3FAFB, 3FB04, 3FB0D, 3FB17, 3FB20, 3FB29, 3FB32, 3FB3B, 3FB44, 3FB4D, 3FB55, 3FB5E, 3FB67, 3FB70, 3FB79, 3FB81, 3FB8A, 3FB93, 3FB9B, 3FBA4, 3FBAC, 3FBB5, 3FBBD, 3FBC6, 3FBCE, 3FBD6, 3FBDF, 3FBE7, 3FBEF, 3FBF8, 3FC00, 3FC08, 3FC10, 3FC18, 3FC20, 3FC28, 3FC30, 3FC38, 3FC40, 3FC48, 3FC50, 3FC58, 3FC60, 3FC68, 3FC6F, 3FC77, 3FC7F, 3FC87, 3FC8E, 3FC96, 3FC9D, 3FCA5, 3FCAD, 3FCB4, 3FCBC, 3FCC3, 3FCCA, 3FCD2, 3FCD9, 3FCE1, 3FCE8, 3FCEF, 3FCF6, 3FCFE, 3FD05, 3FD0C, 3FD13, 3FD1A, 3FD21, 3FD28, 3FD30, 3FD37, 3FD3E, 3FD45, 3FD4B, 3FD52, 3FD59, 3FD60, 3FD67, 3FD6E, 3FD75, 3FD7B, 3FD82, 3FD89, 3FD90, 3FD96, 3FD9D, 3FDA4, 3FDAA, 3FDB1, 3FDB7, 3FDBE, 3FDC4, 3FDCB, 3FDD1, 3FDD8, 3FDDE, 3FDE5, 3FDEB, 3FDF1, 3FDF8, 3FDFE, 3FE04, 3FE0B, 3FE11, 3FE17, 3FE1D, 3FE23, 3FE2A, 3FE30, 3FE36, 3FE3C, 3FE42, 3FE48, 3FE4E, 3FE54, 3FE5A, 3FE60, 3FE66, 3FE6C, 3FE72, 3FE78, 3FE7E, 3FE84, 3FE8A, 3FE90, 3FE96, 3FE9B, 3FEA1, 3FEA7, 3FEAD, 3FEB3, 3FEB8, 3FEBE, 3FEC4, 3FEC9, 3FECF, 3FED5, 3FEDA, 3FEE0, 3FEE6, 3FEEB, 3FEF1, 3FEF7, 3FEFC, 3FF02, 3FF07, 3FF0D, 3FF12, 3FF18, 3FF1D, 3FF23, 3FF28, 3FF2E, 3FF33, 3FF39, 3FF3E, 3FF43, 3FF49, 3FF4E, 3FF54, 3FF59, 3FF5E, 3FF64, 3FF69, 3FF6E, 3FF74, 3FF79, 3FF7E, 3FF84, 3FF89, 3FF8E, 3FF93, 3FF99, 3FF9E, 3FFA3, 3FFA8, 3FFAE, 3FFB3, 3FFB8, 3FFBD, 3FFC2, 3FFC8, 3FFCD, 3FFD2, 3FFD7, 3FFDC, 3FFE2, 3FFE7, 3FFEC, 3FFF1, 3FFF6, 3FFFB;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_9212f4270c490d42',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '608b680913bc1ae1b689d92a54646d75',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_9212f4270c490d42',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFFF, 3FFFA, 3FFF5, 3FFF0, 3FFEB, 3FFE6, 3FFE1, 3FFDB, 3FFD6, 3FFD1, 3FFCC, 3FFC7, 3FFC2, 3FFBC, 3FFB7, 3FFB2, 3FFAD, 3FFA7, 3FFA2, 3FF9D, 3FF98, 3FF92, 3FF8D, 3FF88, 3FF83, 3FF7D, 3FF78, 3FF73, 3FF6D, 3FF68, 3FF63, 3FF5D, 3FF58, 3FF53, 3FF4D, 3FF48, 3FF42, 3FF3D, 3FF38, 3FF32, 3FF2D, 3FF27, 3FF22, 3FF1C, 3FF17, 3FF11, 3FF0C, 3FF06, 3FF01, 3FEFB, 3FEF6, 3FEF0, 3FEEA, 3FEE5, 3FEDF, 3FED9, 3FED4, 3FECE, 3FEC8, 3FEC3, 3FEBD, 3FEB7, 3FEB1, 3FEAC, 3FEA6, 3FEA0, 3FE9A, 3FE94, 3FE8F, 3FE89, 3FE83, 3FE7D, 3FE77, 3FE71, 3FE6B, 3FE65, 3FE5F, 3FE59, 3FE53, 3FE4D, 3FE47, 3FE41, 3FE3B, 3FE35, 3FE2F, 3FE28, 3FE22, 3FE1C, 3FE16, 3FE10, 3FE09, 3FE03, 3FDFD, 3FDF6, 3FDF0, 3FDEA, 3FDE3, 3FDDD, 3FDD6, 3FDD0, 3FDCA, 3FDC3, 3FDBD, 3FDB6, 3FDAF, 3FDA9, 3FDA2, 3FD9C, 3FD95, 3FD8E, 3FD88, 3FD81, 3FD7A, 3FD73, 3FD6C, 3FD66, 3FD5F, 3FD58, 3FD51, 3FD4A, 3FD43, 3FD3C, 3FD35, 3FD2E, 3FD27, 3FD20, 3FD19, 3FD12, 3FD0B, 3FD03, 3FCFC, 3FCF5, 3FCEE, 3FCE6, 3FCDF, 3FCD8, 3FCD0, 3FCC9, 3FCC2, 3FCBA, 3FCB3, 3FCAB, 3FCA4, 3FC9C, 3FC94, 3FC8D, 3FC85, 3FC7D, 3FC76, 3FC6E, 3FC66, 3FC5E, 3FC56, 3FC4F, 3FC47, 3FC3F, 3FC37, 3FC2F, 3FC27, 3FC1F, 3FC17, 3FC0E, 3FC06, 3FBFE, 3FBF6, 3FBEE, 3FBE5, 3FBDD, 3FBD5, 3FBCC, 3FBC4, 3FBBB, 3FBB3, 3FBAB, 3FBA2, 3FB99, 3FB91, 3FB88, 3FB7F, 3FB77, 3FB6E, 3FB65, 3FB5C, 3FB54, 3FB4B, 3FB42, 3FB39, 3FB30, 3FB27, 3FB1E, 3FB15, 3FB0C, 3FB02, 3FAF9, 3FAF0, 3FAE7, 3FADD, 3FAD4, 3FACB, 3FAC1, 3FAB8, 3FAAE, 3FAA5, 3FA9B, 3FA92, 3FA88, 3FA7F, 3FA75, 3FA6B, 3FA61, 3FA58, 3FA4E, 3FA44, 3FA3A, 3FA30, 3FA26, 3FA1C, 3FA12, 3FA08, 3F9FE, 3F9F3, 3F9E9, 3F9DF, 3F9D5, 3F9CA, 3F9C0, 3F9B6, 3F9AB, 3F9A1, 3F996, 3F98C, 3F981, 3F976, 3F96C, 3F961, 3F956, 3F94C, 3F941, 3F936, 3F92B, 3F920, 3F915, 3F90A, 3F8FF, 3F8F4, 3F8E9, 3F8DE, 3F8D2, 3F8C7, 3F8BC, 3F8B0, 3F8A5, 3F89A, 3F88E, 3F883, 3F877, 3F86C, 3F860, 3F854, 3F849, 3F83D, 3F831, 3F825, 3F81A, 3F80E, 3F802, 3F7F6, 3F7EA, 3F7DE, 3F7D2, 3F7C5, 3F7B9, 3F7AD, 3F7A1, 3F795, 3F788, 3F77C, 3F770, 3F763, 3F757, 3F74A, 3F73E, 3F731, 3F724, 3F718, 3F70B, 3F6FE, 3F6F1, 3F6E4, 3F6D8, 3F6CB, 3F6BE, 3F6B1, 3F6A4, 3F697, 3F68A, 3F67C, 3F66F, 3F662, 3F655, 3F647, 3F63A, 3F62D, 3F61F, 3F612, 3F604, 3F5F7, 3F5E9, 3F5DC, 3F5CE, 3F5C0, 3F5B2, 3F5A5, 3F597, 3F589, 3F57B, 3F56D, 3F55F, 3F551, 3F543, 3F535, 3F527, 3F519, 3F50B, 3F4FC, 3F4EE, 3F4E0, 3F4D1, 3F4C3, 3F4B5, 3F4A6, 3F498, 3F489, 3F47B, 3F46C, 3F45D, 3F44F, 3F440, 3F431, 3F422, 3F414, 3F405, 3F3F6, 3F3E7, 3F3D8, 3F3C9, 3F3BA, 3F3AB, 3F39C, 3F38D, 3F37D, 3F36E, 3F35F, 3F350, 3F340, 3F331, 3F322, 3F312, 3F303, 3F2F3, 3F2E4, 3F2D4, 3F2C4, 3F2B5, 3F2A5, 3F296, 3F286, 3F276, 3F266, 3F256, 3F247, 3F237, 3F227, 3F217, 3F207, 3F1F7, 3F1E7, 3F1D7, 3F1C7, 3F1B6, 3F1A6, 3F196, 3F186, 3F176, 3F165, 3F155, 3F145, 3F134, 3F124, 3F114, 3F103, 3F0F3, 3F0E2, 3F0D2, 3F0C1, 3F0B0, 3F0A0, 3F08F, 3F07E, 3F06E, 3F05D, 3F04C, 3F03B, 3F02B, 3F01A, 3F009, 3EFF8, 3EFE7, 3EFD6, 3EFC5, 3EFB4, 3EFA3, 3EF92, 3EF81, 3EF70, 3EF5F, 3EF4E, 3EF3D, 3EF2C, 3EF1B, 3EF09, 3EEF8, 3EEE7, 3EED6, 3EEC4, 3EEB3, 3EEA2, 3EE90, 3EE7F, 3EE6E, 3EE5C, 3EE4B, 3EE39, 3EE28, 3EE16, 3EE05, 3EDF3, 3EDE2, 3EDD0, 3EDBF, 3EDAD, 3ED9C, 3ED8A, 3ED78, 3ED67, 3ED55, 3ED43, 3ED32, 3ED20, 3ED0E, 3ECFD, 3ECEB, 3ECD9, 3ECC8, 3ECB6, 3ECA4, 3EC92, 3EC80, 3EC6F, 3EC5D, 3EC4B, 3EC39, 3EC27, 3EC15, 3EC04, 3EBF2, 3EBE0, 3EBCE, 3EBBC, 3EBAA, 3EB98, 3EB87, 3EB75, 3EB63, 3EB51, 3EB3F, 3EB2D, 3EB1B, 3EB09, 3EAF7, 3EAE5, 3EAD3, 3EAC1, 3EAAF, 3EA9E, 3EA8C, 3EA7A, 3EA68, 3EA56, 3EA44, 3EA32, 3EA20, 3EA0E, 3E9FC, 3E9EA, 3E9D8, 3E9C7, 3E9B5, 3E9A3, 3E991, 3E97F, 3E96D, 3E95B, 3E949, 3E938, 3E926, 3E914, 3E902, 3E8F0, 3E8DE, 3E8CD, 3E8BB, 3E8A9, 3E897, 3E886, 3E874, 3E862, 3E850, 3E83F, 3E82D, 3E81B, 3E80A, 3E7F8, 3E7E6, 3E7D5, 3E7C3, 3E7B2, 3E7A0, 3E78F, 3E77D, 3E76C, 3E75A, 3E749, 3E737, 3E726, 3E715, 3E703, 3E6F2, 3E6E1, 3E6CF, 3E6BE, 3E6AD, 3E69C, 3E68A, 3E679, 3E668, 3E657, 3E646, 3E635, 3E624, 3E613, 3E602, 3E5F1, 3E5E0, 3E5CF, 3E5BE, 3E5AE, 3E59D, 3E58C, 3E57B, 3E56B, 3E55A, 3E549, 3E539, 3E528, 3E518, 3E507, 3E4F7, 3E4E7, 3E4D6, 3E4C6, 3E4B6, 3E4A6, 3E495, 3E485, 3E475, 3E465, 3E455, 3E445, 3E435, 3E426, 3E416, 3E406, 3E3F6, 3E3E7, 3E3D7, 3E3C7, 3E3B8, 3E3A8, 3E399, 3E38A, 3E37A, 3E36B, 3E35C, 3E34D, 3E33E, 3E32F, 3E320, 3E311, 3E302, 3E2F3, 3E2E4, 3E2D6, 3E2C7, 3E2B8, 3E2AA, 3E29B, 3E28D, 3E27F, 3E270, 3E262, 3E254, 3E246, 3E238, 3E22A, 3E21C, 3E20E, 3E201, 3E1F3, 3E1E5, 3E1D8, 3E1CA, 3E1BD, 3E1B0, 3E1A2, 3E195, 3E188, 3E17B, 3E16E, 3E161, 3E154, 3E148, 3E13B, 3E12E, 3E122, 3E116, 3E109, 3E0FD, 3E0F1, 3E0E5, 3E0D9, 3E0CD, 3E0C1, 3E0B5, 3E0A9, 3E09E, 3E092, 3E087, 3E07C, 3E070, 3E065, 3E05A, 3E04F, 3E044, 3E03A, 3E02F, 3E024, 3E01A, 3E00F, 3E005, 3DFFB, 3DFF1, 3DFE7, 3DFDD, 3DFD3, 3DFC9, 3DFBF, 3DFB6, 3DFAD, 3DFA3, 3DF9A, 3DF91, 3DF88, 3DF7F, 3DF76, 3DF6D, 3DF65, 3DF5C, 3DF54, 3DF4C, 3DF43, 3DF3B, 3DF33, 3DF2C, 3DF24, 3DF1C, 3DF15, 3DF0D, 3DF06, 3DEFF, 3DEF8, 3DEF1, 3DEEA, 3DEE3, 3DEDD, 3DED6, 3DED0, 3DECA, 3DEC4, 3DEBE, 3DEB8, 3DEB2, 3DEAD, 3DEA7, 3DEA2, 3DE9D, 3DE98, 3DE93, 3DE8E, 3DE89, 3DE85, 3DE80, 3DE7C, 3DE78, 3DE74, 3DE70, 3DE6C, 3DE68, 3DE65, 3DE61, 3DE5E, 3DE5B, 3DE58, 3DE55, 3DE53, 3DE50, 3DE4E, 3DE4B, 3DE49, 3DE47, 3DE46, 3DE44, 3DE42, 3DE41, 3DE40, 3DE3F, 3DE3E, 3DE3D, 3DE3C, 3DE3C, 3DE3B, 3DE3B, 3DE3B, 3DE3B, 3DE3C, 3DE3C, 3DE3D, 3DE3D, 3DE3E, 3DE3F, 3DE41, 3DE42, 3DE43, 3DE45, 3DE47, 3DE49, 3DE4B, 3DE4E, 3DE50, 3DE53, 3DE56, 3DE59, 3DE5C, 3DE5F, 3DE63, 3DE66, 3DE6A, 3DE6E, 3DE72, 3DE77, 3DE7B, 3DE80, 3DE85, 3DE8A, 3DE8F, 3DE95, 3DE9A, 3DEA0, 3DEA6, 3DEAC, 3DEB2, 3DEB9, 3DEBF, 3DEC6, 3DECD, 3DED5, 3DEDC, 3DEE4, 3DEEB, 3DEF3, 3DEFB, 3DF04, 3DF0C, 3DF15, 3DF1E, 3DF27, 3DF30, 3DF3A, 3DF43, 3DF4D, 3DF57, 3DF62, 3DF6C, 3DF77, 3DF81, 3DF8D, 3DF98, 3DFA3, 3DFAF, 3DFBB, 3DFC7, 3DFD3, 3DFDF, 3DFEC, 3DFF9, 3E006, 3E013, 3E021, 3E02E, 3E03C, 3E04A, 3E059, 3E067, 3E076, 3E085, 3E094, 3E0A3, 3E0B3, 3E0C3, 3E0D3, 3E0E3, 3E0F3, 3E104, 3E115, 3E126, 3E137, 3E149, 3E15A, 3E16C, 3E17F, 3E191, 3E1A4, 3E1B6, 3E1C9, 3E1DD, 3E1F0, 3E204, 3E218, 3E22C, 3E241, 3E255, 3E26A, 3E27F, 3E295, 3E2AA, 3E2C0, 3E2D6, 3E2EC, 3E303, 3E31A, 3E331, 3E348, 3E35F, 3E377, 3E38F, 3E3A7, 3E3BF, 3E3D8, 3E3F1, 3E40A, 3E423, 3E43D, 3E457, 3E471, 3E48B, 3E4A6, 3E4C1, 3E4DC, 3E4F7, 3E513, 3E52E, 3E54B, 3E567, 3E583, 3E5A0, 3E5BD, 3E5DB, 3E5F8, 3E616, 3E634, 3E652, 3E671, 3E690, 3E6AF, 3E6CE, 3E6EE, 3E70E, 3E72E, 3E74E, 3E76F, 3E790, 3E7B1, 3E7D2, 3E7F4, 3E816, 3E838, 3E85B, 3E87D, 3E8A0, 3E8C4, 3E8E7, 3E90B, 3E92F, 3E953, 3E978, 3E99D, 3E9C2, 3E9E7, 3EA0D, 3EA33, 3EA59, 3EA80, 3EAA7, 3EACE, 3EAF5, 3EB1D, 3EB44, 3EB6C, 3EB95, 3EBBE, 3EBE7, 3EC10, 3EC39, 3EC63, 3EC8D, 3ECB8, 3ECE2, 3ED0D, 3ED38, 3ED64, 3ED90, 3EDBC, 3EDE8, 3EE15, 3EE41, 3EE6F, 3EE9C, 3EECA, 3EEF8, 3EF26, 3EF55, 3EF84, 3EFB3, 3EFE2, 3F012, 3F042, 3F072, 3F0A3, 3F0D4, 3F105, 3F137, 3F169, 3F19B, 3F1CD, 3F200, 3F233, 3F266, 3F299, 3F2CD, 3F302, 3F336, 3F36B, 3F3A0, 3F3D5, 3F40B, 3F441, 3F477, 3F4AD, 3F4E4, 3F51B, 3F553, 3F58B, 3F5C3, 3F5FB, 3F634, 3F66C, 3F6A6, 3F6DF, 3F719, 3F753, 3F78E, 3F7C8, 3F803, 3F83F, 3F87B, 3F8B7, 3F8F3, 3F92F, 3F96C, 3F9AA, 3F9E7, 3FA25, 3FA63, 3FAA1, 3FAE0, 3FB1F, 3FB5F, 3FB9E, 3FBDE, 3FC1F, 3FC5F, 3FCA0, 3FCE1, 3FD23, 3FD65, 3FDA7, 3FDE9, 3FE2C, 3FE6F, 3FEB3, 3FEF7, 3FF3B, 3FF7F, 3FFC4;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_fc259590348866de',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '871af3b7c93b3df95d3d911cc275d1ac',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_fc259590348866de',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 9, 4E, 94, DA, 120, 166, 1AD, 1F5, 23C, 284, 2CC, 315, 35D, 3A7, 3F0, 43A, 484, 4CE, 519, 564, 5AF, 5FB, 647, 693, 6E0, 72D, 77A, 7C8, 816, 864, 8B3, 902, 951, 9A0, 9F0, A40, A91, AE2, B33, B84, BD6, C28, C7B, CCE, D21, D74, DC8, E1C, E70, EC5, F1A, F70, FC5, 101B, 1072, 10C8, 111F, 1177, 11CE, 1226, 127F, 12D7, 1330, 1389, 13E3, 143D, 1497, 14F2, 154D, 15A8, 1604, 1660, 16BC, 1718, 1775, 17D2, 1830, 188E, 18EC, 194B, 19A9, 1A09, 1A68, 1AC8, 1B28, 1B88, 1BE9, 1C4A, 1CAC, 1D0E, 1D70, 1DD2, 1E35, 1E98, 1EFB, 1F5F, 1FC3, 2028, 208C, 20F1, 2157, 21BC, 2222, 2289, 22F0, 2357, 23BE, 2425, 248D, 24F6, 255E, 25C7, 2631, 269A, 2704, 276E, 27D9, 2844, 28AF, 291B, 2986, 29F3, 2A5F, 2ACC, 2B39, 2BA7, 2C14, 2C83, 2CF1, 2D60, 2DCF, 2E3E, 2EAE, 2F1E, 2F8E, 2FFF, 3070, 30E1, 3153, 31C5, 3237, 32AA, 331D, 3390, 3404, 3478, 34EC, 3560, 35D5, 364A, 36C0, 3736, 37AC, 3822, 3899, 3910, 3987, 39FF, 3A77, 3AEF, 3B68, 3BE1, 3C5A, 3CD4, 3D4D, 3DC8, 3E42, 3EBD, 3F38, 3FB4, 402F, 40AB, 4128, 41A4, 4221, 429F, 431C, 439A, 4418, 4497, 4516, 4595, 4614, 4694, 4714, 4794, 4815, 4896, 4917, 4999, 4A1B, 4A9D, 4B1F, 4BA2, 4C25, 4CA9, 4D2C, 4DB0, 4E35, 4EB9, 4F3E, 4FC3, 5049, 50CE, 5154, 51DB, 5261, 52E8, 5370, 53F7, 547F, 5507, 558F, 5618, 56A1, 572A, 57B4, 583E, 58C8, 5952, 59DD, 5A68, 5AF3, 5B7F, 5C0B, 5C97, 5D23, 5DB0, 5E3D, 5ECA, 5F58, 5FE6, 6074, 6102, 6191, 6220, 62AF, 633E, 63CE, 645E, 64EF, 657F, 6610, 66A1, 6733, 67C4, 6856, 68E8, 697B, 6A0E, 6AA1, 6B34, 6BC8, 6C5C, 6CF0, 6D84, 6E19, 6EAE, 6F43, 6FD8, 706E, 7104, 719A, 7230, 72C7, 735E, 73F5, 748D, 7525, 75BC, 7655, 76ED, 7786, 781F, 78B8, 7952, 79EC, 7A86, 7B20, 7BBA, 7C55, 7CF0, 7D8B, 7E27, 7EC2, 7F5E, 7FFB, 8097, 8134, 81D1, 826E, 830B, 83A9, 8447, 84E5, 8583, 8622, 86C0, 875F, 87FF, 889E, 893E, 89DE, 8A7E, 8B1E, 8BBF, 8C60, 8D01, 8DA2, 8E44, 8EE5, 8F87, 9029, 90CC, 916E, 9211, 92B4, 9357, 93FB, 949E, 9542, 95E6, 968B, 972F, 97D4, 9879, 991E, 99C3, 9A69, 9B0E, 9BB4, 9C5A, 9D01, 9DA7, 9E4E, 9EF5, 9F9C, A043, A0EA, A192, A23A, A2E2, A38A, A433, A4DB, A584, A62D, A6D6, A77F, A829, A8D3, A97D, AA27, AAD1, AB7B, AC26, ACD1, AD7B, AE27, AED2, AF7D, B029, B0D5, B181, B22D, B2D9, B385, B432, B4DF, B58C, B639, B6E6, B793, B841, B8EE, B99C, BA4A, BAF8, BBA7, BC55, BD04, BDB2, BE61, BF10, BFBF, C06F, C11E, C1CE, C27D, C32D, C3DD, C48D, C53E, C5EE, C69E, C74F, C800, C8B1, C962, CA13, CAC4, CB75, CC27, CCD9, CD8A, CE3C, CEEE, CFA0, D052, D105, D1B7, D26A, D31C, D3CF, D482, D535, D5E8, D69B, D74E, D801, D8B5, D968, DA1C, DAD0, DB84, DC38, DCEC, DDA0, DE54, DF08, DFBC, E071, E125, E1DA, E28F, E343, E3F8, E4AD, E562, E617, E6CC, E781, E837, E8EC, E9A1, EA57, EB0C, EBC2, EC78, ED2D, EDE3, EE99, EF4F, F005, F0BB, F171, F227, F2DD, F393, F449, F500, F5B6, F66C, F723, F7D9, F88F, F946, F9FD, FAB3, FB6A, FC20, FCD7, FD8E, FE44, FEFB, FFB2, 10069, 10120, 101D6, 1028D, 10344, 103FB, 104B2, 10569, 10620, 106D7, 1078E, 10845, 108FC, 109B3, 10A69, 10B20, 10BD7, 10C8E, 10D45, 10DFC, 10EB3, 10F6A, 11021, 110D8, 1118F, 11246, 112FD, 113B4, 1146A, 11521, 115D8, 1168F, 11746, 117FC, 118B3, 1196A, 11A20, 11AD7, 11B8E, 11C44, 11CFB, 11DB1, 11E68, 11F1E, 11FD5, 1208B, 12141, 121F7, 122AE, 12364, 1241A, 124D0, 12586, 1263C, 126F2, 127A8, 1285D, 12913, 129C9, 12A7E, 12B34, 12BE9, 12C9F, 12D54, 12E09, 12EBF, 12F74, 13029, 130DE, 13193, 13248, 132FC, 133B1, 13466, 1351A, 135CE, 13683, 13737, 137EB, 1389F, 13953, 13A07, 13ABB, 13B6E, 13C22, 13CD5, 13D89, 13E3C, 13EEF, 13FA2, 14055, 14108, 141BB, 1426D, 14320, 143D2, 14484, 14537, 145E9, 1469A, 1474C, 147FE, 148AF, 14961, 14A12, 14AC3, 14B74, 14C25, 14CD6, 14D86, 14E37, 14EE7, 14F97, 15047, 150F7, 151A7, 15257, 15306, 153B5, 15465, 15514, 155C2, 15671, 15720, 157CE, 1587C, 1592A, 159D8, 15A86, 15B33, 15BE1, 15C8E, 15D3B, 15DE8, 15E95, 15F41, 15FEE, 1609A, 16146, 161F2, 1629D, 16349, 163F4, 1649F, 1654A, 165F5, 1669F, 16749, 167F3, 1689D, 16947, 169F1, 16A9A, 16B43, 16BEC, 16C95, 16D3D, 16DE6, 16E8E, 16F35, 16FDD, 17085, 1712C, 171D3, 1727A, 17320, 173C7, 1746D, 17513, 175B8, 1765E, 17703, 177A8, 1784D, 178F1, 17996, 17A3A, 17ADE, 17B81, 17C25, 17CC8, 17D6B, 17E0D, 17EB0, 17F52, 17FF4, 18095, 18137, 181D8, 18279, 1831A, 183BA, 1845A, 184FA, 18599, 18639, 186D8, 18777, 18815, 188B4, 18952, 189EF, 18A8D, 18B2A, 18BC7, 18C63, 18D00, 18D9C, 18E38, 18ED3, 18F6E, 19009, 190A4, 1913E, 191D9, 19272, 1930C, 193A5, 1943E, 194D7, 1956F, 19607, 1969F, 19736, 197CD, 19864, 198FB, 19991, 19A27, 19ABC, 19B52, 19BE7, 19C7B, 19D0F, 19DA4, 19E37, 19ECB, 19F5E, 19FF0, 1A083, 1A115, 1A1A7, 1A238, 1A2C9, 1A35A, 1A3EA, 1A47B, 1A50A, 1A59A, 1A629, 1A6B8, 1A746, 1A7D4, 1A862, 1A8EF, 1A97D, 1AA09, 1AA96, 1AB22, 1ABAD, 1AC39, 1ACC4, 1AD4E, 1ADD9, 1AE63, 1AEEC, 1AF75, 1AFFE, 1B087, 1B10F, 1B197, 1B21E, 1B2A5, 1B32C, 1B3B2, 1B438, 1B4BD, 1B543, 1B5C7, 1B64C, 1B6D0, 1B754, 1B7D7, 1B85A, 1B8DC, 1B95F, 1B9E0, 1BA62, 1BAE3, 1BB63, 1BBE4, 1BC64, 1BCE3, 1BD62, 1BDE1, 1BE5F, 1BEDD, 1BF5A, 1BFD8, 1C054, 1C0D1, 1C14D, 1C1C8, 1C243, 1C2BE, 1C338, 1C3B2, 1C42B, 1C4A5, 1C51D, 1C596, 1C60D, 1C685, 1C6FC, 1C772, 1C7E9, 1C85E, 1C8D4, 1C949, 1C9BD, 1CA31, 1CAA5, 1CB18, 1CB8B, 1CBFD, 1CC6F, 1CCE1, 1CD52, 1CDC3, 1CE33, 1CEA3, 1CF12, 1CF81, 1CFF0, 1D05E, 1D0CB, 1D139, 1D1A5, 1D212, 1D27E, 1D2E9, 1D354, 1D3BF, 1D429, 1D492, 1D4FC, 1D564, 1D5CD, 1D635, 1D69C, 1D703, 1D769, 1D7CF, 1D835, 1D89A, 1D8FF, 1D963, 1D9C7, 1DA2A, 1DA8D, 1DAEF, 1DB51, 1DBB3, 1DC14, 1DC74, 1DCD4, 1DD34, 1DD93, 1DDF2, 1DE50, 1DEAE, 1DF0B, 1DF68, 1DFC4, 1E020, 1E07B, 1E0D6, 1E131, 1E18B, 1E1E4, 1E23D, 1E295, 1E2ED, 1E345, 1E39C, 1E3F3, 1E449, 1E49E, 1E4F3, 1E548, 1E59C, 1E5F0, 1E643, 1E695, 1E6E8, 1E739, 1E78A, 1E7DB, 1E82B, 1E87B, 1E8CA, 1E919, 1E967, 1E9B5, 1EA02, 1EA4F, 1EA9B, 1EAE7, 1EB32, 1EB7D, 1EBC7, 1EC11, 1EC5A, 1ECA3, 1ECEB, 1ED32, 1ED7A, 1EDC0, 1EE06, 1EE4C, 1EE91, 1EED6, 1EF1A, 1EF5E, 1EFA1, 1EFE3, 1F025, 1F067, 1F0A8, 1F0E8, 1F128, 1F168, 1F1A7, 1F1E5, 1F223, 1F261, 1F29E, 1F2DA, 1F316, 1F351, 1F38C, 1F3C6, 1F400, 1F439, 1F472, 1F4AA, 1F4E2, 1F519, 1F550, 1F586, 1F5BB, 1F5F0, 1F625, 1F659, 1F68C, 1F6BF, 1F6F2, 1F724, 1F755, 1F786, 1F7B6, 1F7E6, 1F815, 1F844, 1F872, 1F89F, 1F8CC, 1F8F9, 1F925, 1F950, 1F97B, 1F9A6, 1F9D0, 1F9F9, 1FA22, 1FA4A, 1FA72, 1FA99, 1FABF, 1FAE5, 1FB0B, 1FB30, 1FB54, 1FB78, 1FB9C, 1FBBE, 1FBE1, 1FC02, 1FC24, 1FC44, 1FC64, 1FC84, 1FCA3, 1FCC1, 1FCDF, 1FCFD, 1FD1A, 1FD36, 1FD52, 1FD6D, 1FD88, 1FDA2, 1FDBB, 1FDD4, 1FDED, 1FE05, 1FE1C, 1FE33, 1FE49, 1FE5F, 1FE74, 1FE89, 1FE9D, 1FEB0, 1FEC3, 1FED6, 1FEE7, 1FEF9, 1FF09, 1FF1A, 1FF29, 1FF38, 1FF47, 1FF55, 1FF63, 1FF6F, 1FF7C, 1FF88, 1FF93, 1FF9E, 1FFA8, 1FFB1, 1FFBA, 1FFC3, 1FFCB, 1FFD2, 1FFD9, 1FFDF, 1FFE5, 1FFEA, 1FFEF, 1FFF3, 1FFF6, 1FFF9, 1FFFC, 1FFFE, 1FFFF, 1FFFF;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_7d5e3739feda21ba',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f94389a583dd4a05e3f0120dd99a8f15',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_7d5e3739feda21ba',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 1FFFF, 1FFFF, 1FFFF, 1FFFD, 1FFFB, 1FFF9, 1FFF6, 1FFF2, 1FFEE, 1FFE9, 1FFE4, 1FFDE, 1FFD7, 1FFD0, 1FFC9, 1FFC1, 1FFB8, 1FFAF, 1FFA5, 1FF9B, 1FF90, 1FF85, 1FF79, 1FF6C, 1FF5F, 1FF51, 1FF43, 1FF35, 1FF25, 1FF15, 1FF05, 1FEF4, 1FEE3, 1FED1, 1FEBE, 1FEAB, 1FE97, 1FE83, 1FE6E, 1FE59, 1FE43, 1FE2D, 1FE16, 1FDFE, 1FDE6, 1FDCE, 1FDB4, 1FD9B, 1FD80, 1FD66, 1FD4A, 1FD2E, 1FD12, 1FCF5, 1FCD7, 1FCB9, 1FC9B, 1FC7C, 1FC5C, 1FC3C, 1FC1B, 1FBFA, 1FBD8, 1FBB5, 1FB92, 1FB6F, 1FB4B, 1FB26, 1FB01, 1FADB, 1FAB5, 1FA8E, 1FA67, 1FA3F, 1FA17, 1F9EE, 1F9C4, 1F99A, 1F970, 1F945, 1F919, 1F8ED, 1F8C0, 1F893, 1F866, 1F837, 1F808, 1F7D9, 1F7A9, 1F779, 1F748, 1F716, 1F6E4, 1F6B2, 1F67F, 1F64B, 1F617, 1F5E2, 1F5AD, 1F578, 1F541, 1F50B, 1F4D3, 1F49B, 1F463, 1F42A, 1F3F1, 1F3B7, 1F37C, 1F342, 1F306, 1F2CA, 1F28E, 1F250, 1F213, 1F1D5, 1F196, 1F157, 1F118, 1F0D7, 1F097, 1F056, 1F014, 1EFD2, 1EF8F, 1EF4C, 1EF08, 1EEC4, 1EE7F, 1EE3A, 1EDF4, 1EDAE, 1ED67, 1ED1F, 1ECD8, 1EC8F, 1EC46, 1EBFD, 1EBB3, 1EB69, 1EB1E, 1EAD3, 1EA87, 1EA3B, 1E9EE, 1E9A0, 1E952, 1E904, 1E8B5, 1E866, 1E816, 1E7C6, 1E775, 1E724, 1E6D2, 1E680, 1E62D, 1E5D9, 1E586, 1E531, 1E4DD, 1E487, 1E432, 1E3DC, 1E385, 1E32E, 1E2D6, 1E27E, 1E225, 1E1CC, 1E173, 1E119, 1E0BE, 1E063, 1E008, 1DFAC, 1DF4F, 1DEF2, 1DE95, 1DE37, 1DDD9, 1DD7A, 1DD1B, 1DCBB, 1DC5B, 1DBFA, 1DB99, 1DB37, 1DAD5, 1DA73, 1DA10, 1D9AC, 1D949, 1D8E4, 1D87F, 1D81A, 1D7B4, 1D74E, 1D6E8, 1D680, 1D619, 1D5B1, 1D549, 1D4E0, 1D476, 1D40D, 1D3A2, 1D338, 1D2CC, 1D261, 1D1F5, 1D188, 1D11C, 1D0AE, 1D041, 1CFD2, 1CF64, 1CEF5, 1CE85, 1CE15, 1CDA5, 1CD34, 1CCC3, 1CC51, 1CBDF, 1CB6D, 1CAFA, 1CA86, 1CA12, 1C99E, 1C92A, 1C8B5, 1C83F, 1C7C9, 1C753, 1C6DC, 1C665, 1C5EE, 1C576, 1C4FD, 1C484, 1C40B, 1C392, 1C318, 1C29D, 1C222, 1C1A7, 1C12C, 1C0B0, 1C033, 1BFB6, 1BF39, 1BEBC, 1BE3E, 1BDBF, 1BD40, 1BCC1, 1BC42, 1BBC2, 1BB41, 1BAC1, 1BA3F, 1B9BE, 1B93C, 1B8BA, 1B837, 1B7B4, 1B731, 1B6AD, 1B629, 1B5A4, 1B51F, 1B49A, 1B414, 1B38E, 1B308, 1B281, 1B1FA, 1B173, 1B0EB, 1B062, 1AFDA, 1AF51, 1AEC8, 1AE3E, 1ADB4, 1AD2A, 1AC9F, 1AC14, 1AB88, 1AAFD, 1AA70, 1A9E4, 1A957, 1A8CA, 1A83C, 1A7AF, 1A720, 1A692, 1A603, 1A574, 1A4E4, 1A454, 1A3C4, 1A334, 1A2A3, 1A212, 1A180, 1A0EE, 1A05C, 19FC9, 19F37, 19EA4, 19E10, 19D7C, 19CE8, 19C54, 19BBF, 19B2A, 19A95, 199FF, 19969, 198D3, 1983C, 197A5, 1970E, 19676, 195DF, 19547, 194AE, 19415, 1937C, 192E3, 1924A, 191B0, 19116, 1907B, 18FE0, 18F45, 18EAA, 18E0E, 18D73, 18CD6, 18C3A, 18B9D, 18B00, 18A63, 189C5, 18928, 1888A, 187EB, 1874D, 186AE, 1860F, 1856F, 184D0, 18430, 1838F, 182EF, 1824E, 181AD, 1810C, 1806B, 17FC9, 17F27, 17E85, 17DE2, 17D40, 17C9D, 17BF9, 17B56, 17AB2, 17A0E, 1796A, 178C6, 17821, 1777C, 176D7, 17632, 1758D, 174E7, 17441, 1739B, 172F4, 1724E, 171A7, 17100, 17058, 16FB1, 16F09, 16E61, 16DB9, 16D11, 16C68, 16BBF, 16B16, 16A6D, 169C4, 1691A, 16870, 167C6, 1671C, 16672, 165C7, 1651D, 16472, 163C7, 1631B, 16270, 161C4, 16118, 1606C, 15FC0, 15F14, 15E67, 15DBA, 15D0D, 15C60, 15BB3, 15B05, 15A58, 159AA, 158FC, 1584E, 157A0, 156F1, 15643, 15594, 154E5, 15436, 15387, 152D8, 15228, 15179, 150C9, 15019, 14F69, 14EB9, 14E08, 14D58, 14CA7, 14BF6, 14B45, 14A94, 149E3, 14932, 14880, 147CF, 1471D, 1466B, 145B9, 14507, 14455, 143A3, 142F1, 1423E, 1418B, 140D9, 14026, 13F73, 13EC0, 13E0D, 13D59, 13CA6, 13BF2, 13B3F, 13A8B, 139D7, 13923, 13870, 137BB, 13707, 13653, 1359F, 134EA, 13436, 13381, 132CC, 13218, 13163, 130AE, 12FF9, 12F44, 12E8F, 12DDA, 12D24, 12C6F, 12BB9, 12B04, 12A4E, 12999, 128E3, 1282D, 12778, 126C2, 1260C, 12556, 124A0, 123EA, 12334, 1227E, 121C7, 12111, 1205B, 11FA4, 11EEE, 11E38, 11D81, 11CCB, 11C14, 11B5D, 11AA7, 119F0, 1193A, 11883, 117CC, 11715, 1165F, 115A8, 114F1, 1143A, 11383, 112CC, 11216, 1115F, 110A8, 10FF1, 10F3A, 10E83, 10DCC, 10D15, 10C5E, 10BA7, 10AF0, 10A39, 10982, 108CB, 10814, 1075D, 106A6, 105EF, 10539, 10482, 103CB, 10314, 1025D, 101A6, 100EF, 10039, FF82, FECB, FE14, FD5E, FCA7, FBF0, FB3A, FA83, F9CC, F916, F85F, F7A9, F6F2, F63C, F586, F4CF, F419, F363, F2AD, F1F7, F141, F08B, EFD5, EF1F, EE69, EDB3, ECFD, EC48, EB92, EADC, EA27, E972, E8BC, E807, E752, E69C, E5E7, E532, E47D, E3C9, E314, E25F, E1AA, E0F6, E041, DF8D, DED9, DE24, DD70, DCBC, DC08, DB54, DAA0, D9ED, D939, D886, D7D2, D71F, D66C, D5B9, D506, D453, D3A0, D2ED, D23B, D188, D0D6, D023, CF71, CEBF, CE0D, CD5C, CCAA, CBF8, CB47, CA95, C9E4, C933, C882, C7D1, C721, C670, C5C0, C50F, C45F, C3AF, C2FF, C24F, C1A0, C0F0, C041, BF91, BEE2, BE33, BD84, BCD6, BC27, BB79, BACB, BA1D, B96F, B8C1, B813, B766, B6B8, B60B, B55E, B4B1, B405, B358, B2AC, B1FF, B153, B0A8, AFFC, AF50, AEA5, ADFA, AD4F, ACA4, ABF9, AB4F, AAA4, A9FA, A950, A8A6, A7FC, A753, A6AA, A601, A558, A4AF, A406, A35E, A2B6, A20E, A166, A0BF, A017, 9F70, 9EC9, 9E22, 9D7B, 9CD5, 9C2F, 9B89, 9AE3, 9A3D, 9998, 98F2, 984D, 97A9, 9704, 965F, 95BB, 9517, 9473, 93D0, 932D, 9289, 91E6, 9144, 90A1, 8FFF, 8F5D, 8EBB, 8E19, 8D78, 8CD7, 8C36, 8B95, 8AF4, 8A54, 89B4, 8914, 8874, 87D5, 8736, 8697, 85F8, 855A, 84BB, 841D, 8380, 82E2, 8245, 81A8, 810B, 806E, 7FD2, 7F36, 7E9A, 7DFE, 7D63, 7CC7, 7C2D, 7B92, 7AF7, 7A5D, 79C3, 792A, 7890, 77F7, 775E, 76C5, 762D, 7595, 74FD, 7465, 73CE, 7337, 72A0, 7209, 7173, 70DD, 7047, 6FB1, 6F1C, 6E87, 6DF2, 6D5D, 6CC9, 6C35, 6BA1, 6B0E, 6A7A, 69E7, 6955, 68C2, 6830, 679E, 670D, 667B, 65EA, 6559, 64C9, 6439, 63A9, 6319, 628A, 61FA, 616C, 60DD, 604F, 5FC1, 5F33, 5EA5, 5E18, 5D8B, 5CFF, 5C72, 5BE6, 5B5B, 5ACF, 5A44, 59B9, 592E, 58A4, 581A, 5790, 5707, 567D, 55F5, 556C, 54E4, 545C, 53D4, 534C, 52C5, 523E, 51B8, 5132, 50AC, 5026, 4FA1, 4F1B, 4E97, 4E12, 4D8E, 4D0A, 4C86, 4C03, 4B80, 4AFE, 4A7B, 49F9, 4977, 48F6, 4875, 47F4, 4773, 46F3, 4673, 45F3, 4574, 44F5, 4476, 43F8, 437A, 42FC, 427E, 4201, 4184, 4107, 408B, 400F, 3F94, 3F18, 3E9D, 3E22, 3DA8, 3D2E, 3CB4, 3C3B, 3BC2, 3B49, 3AD0, 3A58, 39E0, 3968, 38F1, 387A, 3803, 378D, 3717, 36A1, 362C, 35B7, 3542, 34CE, 345A, 33E6, 3372, 32FF, 328C, 321A, 31A8, 3136, 30C4, 3053, 2FE2, 2F71, 2F01, 2E91, 2E22, 2DB2, 2D43, 2CD5, 2C66, 2BF8, 2B8A, 2B1D, 2AB0, 2A43, 29D7, 296B, 28FF, 2893, 2828, 27BE, 2753, 26E9, 267F, 2616, 25AC, 2544, 24DB, 2473, 240B, 23A3, 233C, 22D5, 226F, 2208, 21A2, 213D, 20D8, 2073, 200E, 1FAA, 1F46, 1EE2, 1E7F, 1E1C, 1DB9, 1D57, 1CF5, 1C93, 1C32, 1BD1, 1B70, 1B0F, 1AAF, 1A50, 19F0, 1991, 1932, 18D4, 1876, 1818, 17BB, 175E, 1701, 16A4, 1648, 15EC, 1591, 1536, 14DB, 1480, 1426, 13CC, 1373, 131A, 12C1, 1268, 1210, 11B8, 1160, 1109, 10B2, 105C, 1005, FAF, F5A, F05, EB0, E5B, E07, DB3, D5F, D0C, CB9, C66, C14, BC1, B70, B1E, ACD, A7D, A2C, 9DC, 98C, 93D, 8EE, 89F, 850, 802, 7B4, 767, 71A, 6CD, 680, 634, 5E8, 59C, 551, 506, 4BB, 471, 427, 3DD, 394, 34B, 302, 2BA, 272, 22A, 1E3, 19C, 155, 10E, C8, 82, 3D;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_3e42de61f6cb9950',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '6f2438e8ccb426af0f81f59c481c8c2f',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_3e42de61f6cb9950',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFF7, 3FFB2, 3FF6E, 3FF2A, 3FEE6, 3FEA2, 3FE5F, 3FE1C, 3FDD9, 3FD96, 3FD54, 3FD13, 3FCD1, 3FC90, 3FC4F, 3FC0F, 3FBCE, 3FB8E, 3FB4F, 3FB10, 3FAD1, 3FA92, 3FA54, 3FA15, 3F9D8, 3F99A, 3F95D, 3F920, 3F8E4, 3F8A8, 3F86C, 3F830, 3F7F5, 3F7BA, 3F77F, 3F745, 3F70B, 3F6D1, 3F698, 3F65E, 3F626, 3F5ED, 3F5B5, 3F57D, 3F545, 3F50E, 3F4D7, 3F4A0, 3F46A, 3F433, 3F3FE, 3F3C8, 3F393, 3F35E, 3F329, 3F2F5, 3F2C1, 3F28D, 3F259, 3F226, 3F1F3, 3F1C1, 3F18E, 3F15C, 3F12B, 3F0F9, 3F0C8, 3F097, 3F067, 3F036, 3F007, 3EFD7, 3EFA7, 3EF78, 3EF49, 3EF1B, 3EEED, 3EEBF, 3EE91, 3EE64, 3EE37, 3EE0A, 3EDDD, 3EDB1, 3ED85, 3ED59, 3ED2E, 3ED03, 3ECD8, 3ECAD, 3EC83, 3EC59, 3EC2F, 3EC06, 3EBDD, 3EBB4, 3EB8B, 3EB63, 3EB3B, 3EB13, 3EAEC, 3EAC4, 3EA9D, 3EA77, 3EA50, 3EA2A, 3EA04, 3E9DF, 3E9B9, 3E994, 3E96F, 3E94B, 3E927, 3E903, 3E8DF, 3E8BB, 3E898, 3E875, 3E853, 3E830, 3E80E, 3E7EC, 3E7CB, 3E7A9, 3E788, 3E767, 3E747, 3E726, 3E706, 3E6E7, 3E6C7, 3E6A8, 3E689, 3E66A, 3E64B, 3E62D, 3E60F, 3E5F1, 3E5D4, 3E5B7, 3E59A, 3E57D, 3E560, 3E544, 3E528, 3E50C, 3E4F1, 3E4D6, 3E4BB, 3E4A0, 3E485, 3E46B, 3E451, 3E437, 3E41E, 3E404, 3E3EB, 3E3D3, 3E3BA, 3E3A2, 3E38A, 3E372, 3E35A, 3E343, 3E32C, 3E315, 3E2FE, 3E2E7, 3E2D1, 3E2BB, 3E2A6, 3E290, 3E27B, 3E266, 3E251, 3E23C, 3E228, 3E214, 3E200, 3E1EC, 3E1D9, 3E1C5, 3E1B2, 3E1A0, 3E18D, 3E17B, 3E169, 3E157, 3E145, 3E134, 3E122, 3E111, 3E101, 3E0F0, 3E0E0, 3E0CF, 3E0C0, 3E0B0, 3E0A0, 3E091, 3E082, 3E073, 3E064, 3E056, 3E048, 3E03A, 3E02C, 3E01E, 3E011, 3E004, 3DFF7, 3DFEA, 3DFDD, 3DFD1, 3DFC5, 3DFB9, 3DFAD, 3DFA1, 3DF96, 3DF8B, 3DF80, 3DF75, 3DF6A, 3DF60, 3DF56, 3DF4C, 3DF42, 3DF38, 3DF2F, 3DF26, 3DF1D, 3DF14, 3DF0B, 3DF03, 3DEFA, 3DEF2, 3DEEA, 3DEE3, 3DEDB, 3DED4, 3DECC, 3DEC5, 3DEBF, 3DEB8, 3DEB2, 3DEAB, 3DEA5, 3DE9F, 3DE9A, 3DE94, 3DE8F, 3DE8A, 3DE85, 3DE80, 3DE7B, 3DE77, 3DE72, 3DE6E, 3DE6A, 3DE66, 3DE63, 3DE5F, 3DE5C, 3DE59, 3DE56, 3DE53, 3DE50, 3DE4E, 3DE4C, 3DE49, 3DE47, 3DE46, 3DE44, 3DE43, 3DE41, 3DE40, 3DE3F, 3DE3E, 3DE3D, 3DE3D, 3DE3C, 3DE3C, 3DE3C, 3DE3C, 3DE3C, 3DE3D, 3DE3D, 3DE3E, 3DE3F, 3DE40, 3DE41, 3DE42, 3DE44, 3DE45, 3DE47, 3DE49, 3DE4B, 3DE4D, 3DE4F, 3DE52, 3DE54, 3DE57, 3DE5A, 3DE5D, 3DE60, 3DE63, 3DE67, 3DE6A, 3DE6E, 3DE72, 3DE76, 3DE7A, 3DE7E, 3DE82, 3DE87, 3DE8B, 3DE90, 3DE95, 3DE9A, 3DE9F, 3DEA4, 3DEAA, 3DEAF, 3DEB5, 3DEBB, 3DEC0, 3DEC6, 3DECC, 3DED3, 3DED9, 3DEE0, 3DEE6, 3DEED, 3DEF4, 3DEFB, 3DF02, 3DF09, 3DF10, 3DF18, 3DF1F, 3DF27, 3DF2F, 3DF36, 3DF3E, 3DF46, 3DF4F, 3DF57, 3DF5F, 3DF68, 3DF71, 3DF79, 3DF82, 3DF8B, 3DF94, 3DF9D, 3DFA7, 3DFB0, 3DFB9, 3DFC3, 3DFCD, 3DFD6, 3DFE0, 3DFEA, 3DFF4, 3DFFE, 3E009, 3E013, 3E01D, 3E028, 3E033, 3E03D, 3E048, 3E053, 3E05E, 3E069, 3E074, 3E07F, 3E08B, 3E096, 3E0A2, 3E0AD, 3E0B9, 3E0C5, 3E0D1, 3E0DD, 3E0E9, 3E0F5, 3E101, 3E10D, 3E11A, 3E126, 3E133, 3E13F, 3E14C, 3E159, 3E165, 3E172, 3E17F, 3E18C, 3E199, 3E1A7, 3E1B4, 3E1C1, 3E1CF, 3E1DC, 3E1EA, 3E1F7, 3E205, 3E213, 3E221, 3E22E, 3E23C, 3E24A, 3E259, 3E267, 3E275, 3E283, 3E292, 3E2A0, 3E2AE, 3E2BD, 3E2CC, 3E2DA, 3E2E9, 3E2F8, 3E307, 3E315, 3E324, 3E333, 3E342, 3E352, 3E361, 3E370, 3E37F, 3E38E, 3E39E, 3E3AD, 3E3BD, 3E3CC, 3E3DC, 3E3EB, 3E3FB, 3E40B, 3E41B, 3E42A, 3E43A, 3E44A, 3E45A, 3E46A, 3E47A, 3E48A, 3E49A, 3E4AB, 3E4BB, 3E4CB, 3E4DB, 3E4EC, 3E4FC, 3E50C, 3E51D, 3E52D, 3E53E, 3E54F, 3E55F, 3E570, 3E580, 3E591, 3E5A2, 3E5B3, 3E5C3, 3E5D4, 3E5E5, 3E5F6, 3E607, 3E618, 3E629, 3E63A, 3E64B, 3E65C, 3E66D, 3E67E, 3E690, 3E6A1, 3E6B2, 3E6C3, 3E6D4, 3E6E6, 3E6F7, 3E708, 3E71A, 3E72B, 3E73D, 3E74E, 3E75F, 3E771, 3E782, 3E794, 3E7A5, 3E7B7, 3E7C9, 3E7DA, 3E7EC, 3E7FD, 3E80F, 3E821, 3E832, 3E844, 3E856, 3E867, 3E879, 3E88B, 3E89D, 3E8AE, 3E8C0, 3E8D2, 3E8E4, 3E8F6, 3E907, 3E919, 3E92B, 3E93D, 3E94F, 3E961, 3E972, 3E984, 3E996, 3E9A8, 3E9BA, 3E9CC, 3E9DE, 3E9F0, 3EA02, 3EA13, 3EA25, 3EA37, 3EA49, 3EA5B, 3EA6D, 3EA7F, 3EA91, 3EAA3, 3EAB5, 3EAC7, 3EAD9, 3EAEB, 3EAFC, 3EB0E, 3EB20, 3EB32, 3EB44, 3EB56, 3EB68, 3EB7A, 3EB8C, 3EB9E, 3EBB0, 3EBC1, 3EBD3, 3EBE5, 3EBF7, 3EC09, 3EC1B, 3EC2D, 3EC3E, 3EC50, 3EC62, 3EC74, 3EC86, 3EC97, 3ECA9, 3ECBB, 3ECCD, 3ECDE, 3ECF0, 3ED02, 3ED14, 3ED25, 3ED37, 3ED49, 3ED5A, 3ED6C, 3ED7E, 3ED8F, 3EDA1, 3EDB2, 3EDC4, 3EDD5, 3EDE7, 3EDF8, 3EE0A, 3EE1B, 3EE2D, 3EE3E, 3EE50, 3EE61, 3EE73, 3EE84, 3EE95, 3EEA7, 3EEB8, 3EEC9, 3EEDB, 3EEEC, 3EEFD, 3EF0E, 3EF1F, 3EF31, 3EF42, 3EF53, 3EF64, 3EF75, 3EF86, 3EF97, 3EFA8, 3EFB9, 3EFCA, 3EFDB, 3EFEC, 3EFFD, 3F00E, 3F01F, 3F02F, 3F040, 3F051, 3F062, 3F073, 3F083, 3F094, 3F0A5, 3F0B5, 3F0C6, 3F0D6, 3F0E7, 3F0F7, 3F108, 3F118, 3F129, 3F139, 3F149, 3F15A, 3F16A, 3F17A, 3F18B, 3F19B, 3F1AB, 3F1BB, 3F1CB, 3F1DB, 3F1EB, 3F1FB, 3F20B, 3F21B, 3F22B, 3F23B, 3F24B, 3F25B, 3F26B, 3F27B, 3F28A, 3F29A, 3F2AA, 3F2B9, 3F2C9, 3F2D8, 3F2E8, 3F2F8, 3F307, 3F316, 3F326, 3F335, 3F345, 3F354, 3F363, 3F372, 3F382, 3F391, 3F3A0, 3F3AF, 3F3BE, 3F3CD, 3F3DC, 3F3EB, 3F3FA, 3F409, 3F418, 3F427, 3F435, 3F444, 3F453, 3F461, 3F470, 3F47F, 3F48D, 3F49C, 3F4AA, 3F4B9, 3F4C7, 3F4D5, 3F4E4, 3F4F2, 3F500, 3F50F, 3F51D, 3F52B, 3F539, 3F547, 3F555, 3F563, 3F571, 3F57F, 3F58D, 3F59B, 3F5A8, 3F5B6, 3F5C4, 3F5D2, 3F5DF, 3F5ED, 3F5FA, 3F608, 3F616, 3F623, 3F630, 3F63E, 3F64B, 3F658, 3F666, 3F673, 3F680, 3F68D, 3F69A, 3F6A7, 3F6B4, 3F6C1, 3F6CE, 3F6DB, 3F6E8, 3F6F5, 3F702, 3F70E, 3F71B, 3F728, 3F734, 3F741, 3F74E, 3F75A, 3F767, 3F773, 3F77F, 3F78C, 3F798, 3F7A4, 3F7B0, 3F7BD, 3F7C9, 3F7D5, 3F7E1, 3F7ED, 3F7F9, 3F805, 3F811, 3F81D, 3F829, 3F834, 3F840, 3F84C, 3F858, 3F863, 3F86F, 3F87A, 3F886, 3F891, 3F89D, 3F8A8, 3F8B4, 3F8BF, 3F8CA, 3F8D5, 3F8E1, 3F8EC, 3F8F7, 3F902, 3F90D, 3F918, 3F923, 3F92E, 3F939, 3F944, 3F94E, 3F959, 3F964, 3F96F, 3F979, 3F984, 3F98F, 3F999, 3F9A4, 3F9AE, 3F9B8, 3F9C3, 3F9CD, 3F9D8, 3F9E2, 3F9EC, 3F9F6, 3FA00, 3FA0B, 3FA15, 3FA1F, 3FA29, 3FA33, 3FA3D, 3FA47, 3FA50, 3FA5A, 3FA64, 3FA6E, 3FA77, 3FA81, 3FA8B, 3FA94, 3FA9E, 3FAA8, 3FAB1, 3FABA, 3FAC4, 3FACD, 3FAD7, 3FAE0, 3FAE9, 3FAF3, 3FAFC, 3FB05, 3FB0E, 3FB17, 3FB20, 3FB29, 3FB32, 3FB3B, 3FB44, 3FB4D, 3FB56, 3FB5F, 3FB68, 3FB70, 3FB79, 3FB82, 3FB8A, 3FB93, 3FB9C, 3FBA4, 3FBAD, 3FBB5, 3FBBE, 3FBC6, 3FBCF, 3FBD7, 3FBDF, 3FBE8, 3FBF0, 3FBF8, 3FC00, 3FC08, 3FC11, 3FC19, 3FC21, 3FC29, 3FC31, 3FC39, 3FC41, 3FC49, 3FC51, 3FC58, 3FC60, 3FC68, 3FC70, 3FC78, 3FC7F, 3FC87, 3FC8F, 3FC96, 3FC9E, 3FCA5, 3FCAD, 3FCB5, 3FCBC, 3FCC3, 3FCCB, 3FCD2, 3FCDA, 3FCE1, 3FCE8, 3FCF0, 3FCF7, 3FCFE, 3FD05, 3FD0C, 3FD14, 3FD1B, 3FD22, 3FD29, 3FD30, 3FD37, 3FD3E, 3FD45, 3FD4C, 3FD53, 3FD5A, 3FD61, 3FD67, 3FD6E, 3FD75, 3FD7C, 3FD83, 3FD89, 3FD90, 3FD97, 3FD9D, 3FDA4, 3FDAB, 3FDB1, 3FDB8, 3FDBE, 3FDC5, 3FDCB, 3FDD2, 3FDD8, 3FDDF, 3FDE5, 3FDEB, 3FDF2, 3FDF8, 3FDFE, 3FE05, 3FE0B, 3FE11, 3FE17, 3FE1E, 3FE24, 3FE2A, 3FE30, 3FE36, 3FE3C, 3FE42, 3FE49, 3FE4F, 3FE55, 3FE5B, 3FE61, 3FE67, 3FE6D, 3FE73, 3FE79, 3FE7E, 3FE84, 3FE8A, 3FE90, 3FE96, 3FE9C, 3FEA2, 3FEA7, 3FEAD, 3FEB3, 3FEB9, 3FEBE, 3FEC4, 3FECA, 3FECF, 3FED5, 3FEDB, 3FEE0, 3FEE6, 3FEEC, 3FEF1, 3FEF7, 3FEFC, 3FF02, 3FF08, 3FF0D, 3FF13, 3FF18, 3FF1E, 3FF23, 3FF29, 3FF2E, 3FF34, 3FF39, 3FF3E, 3FF44, 3FF49, 3FF4F, 3FF54, 3FF59, 3FF5F, 3FF64, 3FF69, 3FF6F, 3FF74, 3FF79, 3FF7F, 3FF84, 3FF89, 3FF8F, 3FF94, 3FF99, 3FF9E, 3FFA4, 3FFA9, 3FFAE, 3FFB3, 3FFB8, 3FFBE, 3FFC3, 3FFC8, 3FFCD, 3FFD2, 3FFD8, 3FFDD, 3FFE2, 3FFE7, 3FFEC, 3FFF1, 3FFF6, 3FFFC;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_e1b46418f460c985',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '473090f3927f5044e14ed75df4cfd4f9',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_e1b46418f460c985',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFFF, 3FFFA, 3FFF5, 3FFF0, 3FFEB, 3FFE5, 3FFE0, 3FFDB, 3FFD6, 3FFD1, 3FFCC, 3FFC6, 3FFC1, 3FFBC, 3FFB7, 3FFB2, 3FFAC, 3FFA7, 3FFA2, 3FF9D, 3FF97, 3FF92, 3FF8D, 3FF88, 3FF82, 3FF7D, 3FF78, 3FF72, 3FF6D, 3FF68, 3FF62, 3FF5D, 3FF58, 3FF52, 3FF4D, 3FF48, 3FF42, 3FF3D, 3FF37, 3FF32, 3FF2C, 3FF27, 3FF21, 3FF1C, 3FF16, 3FF11, 3FF0B, 3FF06, 3FF00, 3FEFB, 3FEF5, 3FEF0, 3FEEA, 3FEE4, 3FEDF, 3FED9, 3FED3, 3FECE, 3FEC8, 3FEC2, 3FEBD, 3FEB7, 3FEB1, 3FEAB, 3FEA6, 3FEA0, 3FE9A, 3FE94, 3FE8E, 3FE88, 3FE82, 3FE7D, 3FE77, 3FE71, 3FE6B, 3FE65, 3FE5F, 3FE59, 3FE53, 3FE4D, 3FE47, 3FE41, 3FE3A, 3FE34, 3FE2E, 3FE28, 3FE22, 3FE1C, 3FE15, 3FE0F, 3FE09, 3FE03, 3FDFC, 3FDF6, 3FDF0, 3FDE9, 3FDE3, 3FDDC, 3FDD6, 3FDD0, 3FDC9, 3FDC3, 3FDBC, 3FDB6, 3FDAF, 3FDA8, 3FDA2, 3FD9B, 3FD95, 3FD8E, 3FD87, 3FD80, 3FD7A, 3FD73, 3FD6C, 3FD65, 3FD5E, 3FD57, 3FD51, 3FD4A, 3FD43, 3FD3C, 3FD35, 3FD2E, 3FD27, 3FD20, 3FD18, 3FD11, 3FD0A, 3FD03, 3FCFC, 3FCF5, 3FCED, 3FCE6, 3FCDF, 3FCD7, 3FCD0, 3FCC8, 3FCC1, 3FCBA, 3FCB2, 3FCAB, 3FCA3, 3FC9B, 3FC94, 3FC8C, 3FC85, 3FC7D, 3FC75, 3FC6D, 3FC66, 3FC5E, 3FC56, 3FC4E, 3FC46, 3FC3E, 3FC36, 3FC2E, 3FC26, 3FC1E, 3FC16, 3FC0E, 3FC06, 3FBFE, 3FBF5, 3FBED, 3FBE5, 3FBDD, 3FBD4, 3FBCC, 3FBC3, 3FBBB, 3FBB2, 3FBAA, 3FBA1, 3FB99, 3FB90, 3FB88, 3FB7F, 3FB76, 3FB6D, 3FB65, 3FB5C, 3FB53, 3FB4A, 3FB41, 3FB38, 3FB2F, 3FB26, 3FB1D, 3FB14, 3FB0B, 3FB02, 3FAF9, 3FAEF, 3FAE6, 3FADD, 3FAD4, 3FACA, 3FAC1, 3FAB7, 3FAAE, 3FAA4, 3FA9B, 3FA91, 3FA88, 3FA7E, 3FA74, 3FA6B, 3FA61, 3FA57, 3FA4D, 3FA43, 3FA39, 3FA2F, 3FA25, 3FA1B, 3FA11, 3FA07, 3F9FD, 3F9F3, 3F9E9, 3F9DE, 3F9D4, 3F9CA, 3F9BF, 3F9B5, 3F9AB, 3F9A0, 3F996, 3F98B, 3F980, 3F976, 3F96B, 3F960, 3F956, 3F94B, 3F940, 3F935, 3F92A, 3F91F, 3F914, 3F909, 3F8FE, 3F8F3, 3F8E8, 3F8DD, 3F8D2, 3F8C6, 3F8BB, 3F8B0, 3F8A4, 3F899, 3F88D, 3F882, 3F876, 3F86B, 3F85F, 3F854, 3F848, 3F83C, 3F830, 3F825, 3F819, 3F80D, 3F801, 3F7F5, 3F7E9, 3F7DD, 3F7D1, 3F7C5, 3F7B9, 3F7AC, 3F7A0, 3F794, 3F788, 3F77B, 3F76F, 3F762, 3F756, 3F749, 3F73D, 3F730, 3F723, 3F717, 3F70A, 3F6FD, 3F6F1, 3F6E4, 3F6D7, 3F6CA, 3F6BD, 3F6B0, 3F6A3, 3F696, 3F689, 3F67C, 3F66E, 3F661, 3F654, 3F647, 3F639, 3F62C, 3F61E, 3F611, 3F603, 3F5F6, 3F5E8, 3F5DB, 3F5CD, 3F5BF, 3F5B2, 3F5A4, 3F596, 3F588, 3F57A, 3F56C, 3F55E, 3F550, 3F542, 3F534, 3F526, 3F518, 3F50A, 3F4FB, 3F4ED, 3F4DF, 3F4D1, 3F4C2, 3F4B4, 3F4A5, 3F497, 3F488, 3F47A, 3F46B, 3F45C, 3F44E, 3F43F, 3F430, 3F421, 3F413, 3F404, 3F3F5, 3F3E6, 3F3D7, 3F3C8, 3F3B9, 3F3AA, 3F39B, 3F38C, 3F37C, 3F36D, 3F35E, 3F34F, 3F33F, 3F330, 3F321, 3F311, 3F302, 3F2F2, 3F2E3, 3F2D3, 3F2C3, 3F2B4, 3F2A4, 3F295, 3F285, 3F275, 3F265, 3F255, 3F246, 3F236, 3F226, 3F216, 3F206, 3F1F6, 3F1E6, 3F1D6, 3F1C6, 3F1B5, 3F1A5, 3F195, 3F185, 3F175, 3F164, 3F154, 3F144, 3F133, 3F123, 3F113, 3F102, 3F0F2, 3F0E1, 3F0D1, 3F0C0, 3F0AF, 3F09F, 3F08E, 3F07D, 3F06D, 3F05C, 3F04B, 3F03A, 3F02A, 3F019, 3F008, 3EFF7, 3EFE6, 3EFD5, 3EFC4, 3EFB3, 3EFA2, 3EF91, 3EF80, 3EF6F, 3EF5E, 3EF4D, 3EF3C, 3EF2B, 3EF19, 3EF08, 3EEF7, 3EEE6, 3EED4, 3EEC3, 3EEB2, 3EEA1, 3EE8F, 3EE7E, 3EE6C, 3EE5B, 3EE4A, 3EE38, 3EE27, 3EE15, 3EE04, 3EDF2, 3EDE1, 3EDCF, 3EDBE, 3EDAC, 3ED9B, 3ED89, 3ED77, 3ED66, 3ED54, 3ED42, 3ED31, 3ED1F, 3ED0D, 3ECFC, 3ECEA, 3ECD8, 3ECC6, 3ECB5, 3ECA3, 3EC91, 3EC7F, 3EC6E, 3EC5C, 3EC4A, 3EC38, 3EC26, 3EC14, 3EC03, 3EBF1, 3EBDF, 3EBCD, 3EBBB, 3EBA9, 3EB97, 3EB85, 3EB73, 3EB62, 3EB50, 3EB3E, 3EB2C, 3EB1A, 3EB08, 3EAF6, 3EAE4, 3EAD2, 3EAC0, 3EAAE, 3EA9C, 3EA8B, 3EA79, 3EA67, 3EA55, 3EA43, 3EA31, 3EA1F, 3EA0D, 3E9FB, 3E9E9, 3E9D7, 3E9C5, 3E9B4, 3E9A2, 3E990, 3E97E, 3E96C, 3E95A, 3E948, 3E936, 3E925, 3E913, 3E901, 3E8EF, 3E8DD, 3E8CC, 3E8BA, 3E8A8, 3E896, 3E884, 3E873, 3E861, 3E84F, 3E83E, 3E82C, 3E81A, 3E809, 3E7F7, 3E7E5, 3E7D4, 3E7C2, 3E7B1, 3E79F, 3E78E, 3E77C, 3E76B, 3E759, 3E748, 3E736, 3E725, 3E713, 3E702, 3E6F1, 3E6DF, 3E6CE, 3E6BD, 3E6AC, 3E69A, 3E689, 3E678, 3E667, 3E656, 3E645, 3E634, 3E623, 3E612, 3E601, 3E5F0, 3E5DF, 3E5CE, 3E5BD, 3E5AC, 3E59C, 3E58B, 3E57A, 3E56A, 3E559, 3E548, 3E538, 3E527, 3E517, 3E506, 3E4F6, 3E4E6, 3E4D5, 3E4C5, 3E4B5, 3E4A5, 3E494, 3E484, 3E474, 3E464, 3E454, 3E444, 3E434, 3E425, 3E415, 3E405, 3E3F5, 3E3E6, 3E3D6, 3E3C6, 3E3B7, 3E3A7, 3E398, 3E389, 3E379, 3E36A, 3E35B, 3E34C, 3E33D, 3E32E, 3E31F, 3E310, 3E301, 3E2F2, 3E2E3, 3E2D5, 3E2C6, 3E2B7, 3E2A9, 3E29A, 3E28C, 3E27E, 3E26F, 3E261, 3E253, 3E245, 3E237, 3E229, 3E21B, 3E20D, 3E200, 3E1F2, 3E1E4, 3E1D7, 3E1C9, 3E1BC, 3E1AF, 3E1A1, 3E194, 3E187, 3E17A, 3E16D, 3E160, 3E154, 3E147, 3E13A, 3E12E, 3E121, 3E115, 3E108, 3E0FC, 3E0F0, 3E0E4, 3E0D8, 3E0CC, 3E0C0, 3E0B4, 3E0A9, 3E09D, 3E092, 3E086, 3E07B, 3E070, 3E065, 3E059, 3E04F, 3E044, 3E039, 3E02E, 3E024, 3E019, 3E00F, 3E004, 3DFFA, 3DFF0, 3DFE6, 3DFDC, 3DFD2, 3DFC9, 3DFBF, 3DFB5, 3DFAC, 3DFA3, 3DF99, 3DF90, 3DF87, 3DF7E, 3DF76, 3DF6D, 3DF64, 3DF5C, 3DF53, 3DF4B, 3DF43, 3DF3B, 3DF33, 3DF2B, 3DF23, 3DF1C, 3DF14, 3DF0D, 3DF06, 3DEFE, 3DEF7, 3DEF1, 3DEEA, 3DEE3, 3DEDD, 3DED6, 3DED0, 3DECA, 3DEC3, 3DEBE, 3DEB8, 3DEB2, 3DEAC, 3DEA7, 3DEA2, 3DE9C, 3DE97, 3DE92, 3DE8E, 3DE89, 3DE84, 3DE80, 3DE7C, 3DE77, 3DE73, 3DE6F, 3DE6C, 3DE68, 3DE65, 3DE61, 3DE5E, 3DE5B, 3DE58, 3DE55, 3DE52, 3DE50, 3DE4E, 3DE4B, 3DE49, 3DE47, 3DE45, 3DE44, 3DE42, 3DE41, 3DE40, 3DE3F, 3DE3E, 3DE3D, 3DE3C, 3DE3C, 3DE3B, 3DE3B, 3DE3B, 3DE3B, 3DE3C, 3DE3C, 3DE3D, 3DE3D, 3DE3E, 3DE3F, 3DE41, 3DE42, 3DE44, 3DE45, 3DE47, 3DE49, 3DE4B, 3DE4E, 3DE50, 3DE53, 3DE56, 3DE59, 3DE5C, 3DE5F, 3DE63, 3DE66, 3DE6A, 3DE6E, 3DE73, 3DE77, 3DE7C, 3DE80, 3DE85, 3DE8A, 3DE8F, 3DE95, 3DE9A, 3DEA0, 3DEA6, 3DEAC, 3DEB3, 3DEB9, 3DEC0, 3DEC7, 3DECE, 3DED5, 3DEDC, 3DEE4, 3DEEC, 3DEF4, 3DEFC, 3DF04, 3DF0D, 3DF16, 3DF1E, 3DF28, 3DF31, 3DF3A, 3DF44, 3DF4E, 3DF58, 3DF62, 3DF6D, 3DF77, 3DF82, 3DF8D, 3DF98, 3DFA4, 3DFB0, 3DFBB, 3DFC7, 3DFD4, 3DFE0, 3DFED, 3DFFA, 3E007, 3E014, 3E022, 3E02F, 3E03D, 3E04B, 3E05A, 3E068, 3E077, 3E086, 3E095, 3E0A4, 3E0B4, 3E0C4, 3E0D4, 3E0E4, 3E0F4, 3E105, 3E116, 3E127, 3E138, 3E14A, 3E15C, 3E16D, 3E180, 3E192, 3E1A5, 3E1B8, 3E1CB, 3E1DE, 3E1F2, 3E205, 3E219, 3E22D, 3E242, 3E257, 3E26B, 3E281, 3E296, 3E2AC, 3E2C1, 3E2D7, 3E2EE, 3E304, 3E31B, 3E332, 3E349, 3E361, 3E378, 3E390, 3E3A9, 3E3C1, 3E3DA, 3E3F2, 3E40C, 3E425, 3E43F, 3E458, 3E473, 3E48D, 3E4A8, 3E4C2, 3E4DD, 3E4F9, 3E514, 3E530, 3E54C, 3E569, 3E585, 3E5A2, 3E5BF, 3E5DC, 3E5FA, 3E618, 3E636, 3E654, 3E673, 3E692, 3E6B1, 3E6D0, 3E6F0, 3E710, 3E730, 3E750, 3E771, 3E792, 3E7B3, 3E7D4, 3E7F6, 3E818, 3E83A, 3E85D, 3E880, 3E8A3, 3E8C6, 3E8E9, 3E90D, 3E931, 3E956, 3E97A, 3E99F, 3E9C4, 3E9EA, 3EA0F, 3EA35, 3EA5C, 3EA82, 3EAA9, 3EAD0, 3EAF7, 3EB1F, 3EB47, 3EB6F, 3EB97, 3EBC0, 3EBE9, 3EC12, 3EC3C, 3EC66, 3EC90, 3ECBA, 3ECE5, 3ED10, 3ED3B, 3ED67, 3ED92, 3EDBE, 3EDEB, 3EE17, 3EE44, 3EE71, 3EE9F, 3EECD, 3EEFB, 3EF29, 3EF58, 3EF87, 3EFB6, 3EFE5, 3F015, 3F045, 3F076, 3F0A6, 3F0D7, 3F108, 3F13A, 3F16C, 3F19E, 3F1D0, 3F203, 3F236, 3F269, 3F29D, 3F2D1, 3F305, 3F339, 3F36E, 3F3A3, 3F3D8, 3F40E, 3F444, 3F47A, 3F4B1, 3F4E8, 3F51F, 3F556, 3F58E, 3F5C6, 3F5FE, 3F637, 3F670, 3F6A9, 3F6E3, 3F71D, 3F757, 3F791, 3F7CC, 3F807, 3F843, 3F87E, 3F8BA, 3F8F7, 3F933, 3F970, 3F9AD, 3F9EB, 3FA29, 3FA67, 3FAA5, 3FAE4, 3FB23, 3FB63, 3FBA2, 3FBE2, 3FC23, 3FC63, 3FCA4, 3FCE5, 3FD27, 3FD69, 3FDAB, 3FDEE, 3FE30, 3FE74, 3FEB7, 3FEFB, 3FF3F, 3FF83, 3FFC8;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_797d180cdbf0046e',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '60ff6a500190ba1bf416b6025479ff5d',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_797d180cdbf0046e',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = D, 52, 98, DE, 124, 16B, 1B2, 1F9, 241, 288, 2D1, 319, 362, 3AB, 3F5, 43E, 488, 4D3, 51E, 569, 5B4, 600, 64C, 698, 6E5, 732, 77F, 7CD, 81B, 869, 8B8, 906, 956, 9A5, 9F5, A45, A96, AE7, B38, B89, BDB, C2D, C80, CD3, D26, D79, DCD, E21, E76, ECA, F1F, F75, FCB, 1021, 1077, 10CE, 1125, 117C, 11D4, 122C, 1284, 12DD, 1336, 138F, 13E9, 1443, 149D, 14F8, 1553, 15AE, 1609, 1665, 16C2, 171E, 177B, 17D8, 1836, 1894, 18F2, 1950, 19AF, 1A0F, 1A6E, 1ACE, 1B2E, 1B8F, 1BEF, 1C50, 1CB2, 1D14, 1D76, 1DD8, 1E3B, 1E9E, 1F02, 1F65, 1FCA, 202E, 2093, 20F8, 215D, 21C3, 2229, 228F, 22F6, 235D, 23C4, 242C, 2494, 24FC, 2565, 25CE, 2637, 26A1, 270B, 2775, 27E0, 284A, 28B6, 2921, 298D, 29F9, 2A66, 2AD3, 2B40, 2BAD, 2C1B, 2C89, 2CF8, 2D67, 2DD6, 2E45, 2EB5, 2F25, 2F95, 3006, 3077, 30E8, 315A, 31CC, 323E, 32B1, 3324, 3397, 340B, 347F, 34F3, 3568, 35DC, 3652, 36C7, 373D, 37B3, 3829, 38A0, 3917, 398F, 3A06, 3A7E, 3AF7, 3B6F, 3BE8, 3C62, 3CDB, 3D55, 3DCF, 3E4A, 3EC5, 3F40, 3FBB, 4037, 40B3, 412F, 41AC, 4229, 42A6, 4324, 43A2, 4420, 449F, 451E, 459D, 461C, 469C, 471C, 479C, 481D, 489E, 491F, 49A1, 4A23, 4AA5, 4B28, 4BAA, 4C2D, 4CB1, 4D34, 4DB8, 4E3D, 4EC1, 4F46, 4FCB, 5051, 50D7, 515D, 51E3, 526A, 52F1, 5378, 5400, 5487, 550F, 5598, 5621, 56AA, 5733, 57BC, 5846, 58D0, 595B, 59E6, 5A71, 5AFC, 5B88, 5C13, 5CA0, 5D2C, 5DB9, 5E46, 5ED3, 5F61, 5FEE, 607D, 610B, 619A, 6229, 62B8, 6347, 63D7, 6467, 64F8, 6588, 6619, 66AA, 673C, 67CD, 685F, 68F2, 6984, 6A17, 6AAA, 6B3D, 6BD1, 6C65, 6CF9, 6D8D, 6E22, 6EB7, 6F4C, 6FE1, 7077, 710D, 71A3, 723A, 72D1, 7367, 73FF, 7496, 752E, 75C6, 765E, 76F7, 7790, 7829, 78C2, 795B, 79F5, 7A8F, 7B29, 7BC4, 7C5F, 7CFA, 7D95, 7E30, 7ECC, 7F68, 8004, 80A1, 813D, 81DA, 8278, 8315, 83B3, 8450, 84EF, 858D, 862B, 86CA, 8769, 8809, 88A8, 8948, 89E8, 8A88, 8B28, 8BC9, 8C6A, 8D0B, 8DAC, 8E4E, 8EEF, 8F91, 9033, 90D6, 9178, 921B, 92BE, 9361, 9405, 94A9, 954C, 95F1, 9695, 9739, 97DE, 9883, 9928, 99CD, 9A73, 9B19, 9BBE, 9C65, 9D0B, 9DB1, 9E58, 9EFF, 9FA6, A04D, A0F5, A19D, A244, A2ED, A395, A43D, A4E6, A58F, A638, A6E1, A78A, A834, A8DD, A987, AA31, AADB, AB86, AC30, ACDB, AD86, AE31, AEDD, AF88, B034, B0DF, B18B, B237, B2E4, B390, B43D, B4EA, B596, B643, B6F1, B79E, B84C, B8F9, B9A7, BA55, BB03, BBB2, BC60, BD0F, BDBD, BE6C, BF1B, BFCA, C07A, C129, C1D9, C288, C338, C3E8, C498, C549, C5F9, C6A9, C75A, C80B, C8BC, C96D, CA1E, CACF, CB81, CC32, CCE4, CD95, CE47, CEF9, CFAB, D05D, D110, D1C2, D275, D327, D3DA, D48D, D540, D5F3, D6A6, D759, D80D, D8C0, D974, DA27, DADB, DB8F, DC43, DCF7, DDAB, DE5F, DF13, DFC8, E07C, E131, E1E5, E29A, E34F, E403, E4B8, E56D, E622, E6D8, E78D, E842, E8F7, E9AD, EA62, EB18, EBCD, EC83, ED39, EDEE, EEA4, EF5A, F010, F0C6, F17C, F232, F2E8, F39E, F455, F50B, F5C1, F678, F72E, F7E4, F89B, F951, FA08, FABF, FB75, FC2C, FCE2, FD99, FE50, FF07, FFBD, 10074, 1012B, 101E2, 10299, 10350, 10406, 104BD, 10574, 1062B, 106E2, 10799, 10850, 10907, 109BE, 10A75, 10B2C, 10BE3, 10C9A, 10D51, 10E08, 10EBF, 10F76, 1102D, 110E3, 1119A, 11251, 11308, 113BF, 11476, 1152D, 115E4, 1169A, 11751, 11808, 118BF, 11975, 11A2C, 11AE3, 11B99, 11C50, 11D06, 11DBD, 11E73, 11F2A, 11FE0, 12096, 1214D, 12203, 122B9, 1236F, 12425, 124DB, 12591, 12647, 126FD, 127B3, 12869, 1291F, 129D4, 12A8A, 12B3F, 12BF5, 12CAA, 12D60, 12E15, 12ECA, 12F7F, 13034, 130E9, 1319E, 13253, 13308, 133BC, 13471, 13525, 135DA, 1368E, 13742, 137F6, 138AA, 1395E, 13A12, 13AC6, 13B7A, 13C2D, 13CE1, 13D94, 13E47, 13EFA, 13FAD, 14060, 14113, 141C6, 14278, 1432B, 143DD, 14490, 14542, 145F4, 146A6, 14757, 14809, 148BB, 1496C, 14A1D, 14ACE, 14B7F, 14C30, 14CE1, 14D91, 14E42, 14EF2, 14FA2, 15052, 15102, 151B2, 15262, 15311, 153C0, 15470, 1551F, 155CD, 1567C, 1572B, 157D9, 15887, 15935, 159E3, 15A91, 15B3E, 15BEC, 15C99, 15D46, 15DF3, 15E9F, 15F4C, 15FF8, 160A4, 16150, 161FC, 162A8, 16353, 163FF, 164AA, 16555, 165FF, 166AA, 16754, 167FE, 168A8, 16952, 169FB, 16AA5, 16B4E, 16BF7, 16C9F, 16D48, 16DF0, 16E98, 16F40, 16FE8, 1708F, 17136, 171DD, 17284, 1732B, 173D1, 17477, 1751D, 175C3, 17668, 1770D, 177B2, 17857, 178FC, 179A0, 17A44, 17AE8, 17B8C, 17C2F, 17CD2, 17D75, 17E18, 17EBA, 17F5C, 17FFE, 180A0, 18141, 181E2, 18283, 18324, 183C4, 18464, 18504, 185A3, 18643, 186E2, 18781, 1881F, 188BD, 1895B, 189F9, 18A97, 18B34, 18BD1, 18C6D, 18D0A, 18DA6, 18E41, 18EDD, 18F78, 19013, 190AE, 19148, 191E2, 1927C, 19315, 193AF, 19448, 194E0, 19578, 19610, 196A8, 19740, 197D7, 1986D, 19904, 1999A, 19A30, 19AC6, 19B5B, 19BF0, 19C84, 19D19, 19DAD, 19E40, 19ED4, 19F67, 19FFA, 1A08C, 1A11E, 1A1B0, 1A241, 1A2D2, 1A363, 1A3F4, 1A484, 1A513, 1A5A3, 1A632, 1A6C1, 1A74F, 1A7DD, 1A86B, 1A8F8, 1A985, 1AA12, 1AA9E, 1AB2A, 1ABB6, 1AC41, 1ACCC, 1AD57, 1ADE1, 1AE6B, 1AEF5, 1AF7E, 1B007, 1B08F, 1B117, 1B19F, 1B226, 1B2AD, 1B334, 1B3BA, 1B440, 1B4C6, 1B54B, 1B5D0, 1B654, 1B6D8, 1B75C, 1B7DF, 1B862, 1B8E5, 1B967, 1B9E8, 1BA6A, 1BAEB, 1BB6B, 1BBEC, 1BC6C, 1BCEB, 1BD6A, 1BDE9, 1BE67, 1BEE5, 1BF62, 1BFDF, 1C05C, 1C0D8, 1C154, 1C1D0, 1C24B, 1C2C5, 1C340, 1C3BA, 1C433, 1C4AC, 1C525, 1C59D, 1C615, 1C68C, 1C703, 1C77A, 1C7F0, 1C866, 1C8DB, 1C950, 1C9C4, 1CA39, 1CAAC, 1CB1F, 1CB92, 1CC05, 1CC76, 1CCE8, 1CD59, 1CDCA, 1CE3A, 1CEAA, 1CF19, 1CF88, 1CFF7, 1D065, 1D0D2, 1D13F, 1D1AC, 1D218, 1D284, 1D2F0, 1D35B, 1D3C5, 1D42F, 1D499, 1D502, 1D56B, 1D5D3, 1D63B, 1D6A2, 1D709, 1D770, 1D7D6, 1D83B, 1D8A1, 1D905, 1D969, 1D9CD, 1DA30, 1DA93, 1DAF6, 1DB58, 1DBB9, 1DC1A, 1DC7A, 1DCDA, 1DD3A, 1DD99, 1DDF8, 1DE56, 1DEB4, 1DF11, 1DF6E, 1DFCA, 1E026, 1E081, 1E0DC, 1E136, 1E190, 1E1EA, 1E242, 1E29B, 1E2F3, 1E34A, 1E3A1, 1E3F8, 1E44E, 1E4A4, 1E4F9, 1E54D, 1E5A1, 1E5F5, 1E648, 1E69B, 1E6ED, 1E73E, 1E790, 1E7E0, 1E830, 1E880, 1E8CF, 1E91E, 1E96C, 1E9BA, 1EA07, 1EA54, 1EAA0, 1EAEC, 1EB37, 1EB81, 1EBCC, 1EC15, 1EC5E, 1ECA7, 1ECEF, 1ED37, 1ED7E, 1EDC5, 1EE0B, 1EE50, 1EE96, 1EEDA, 1EF1E, 1EF62, 1EFA5, 1EFE7, 1F029, 1F06B, 1F0AC, 1F0EC, 1F12C, 1F16C, 1F1AB, 1F1E9, 1F227, 1F265, 1F2A1, 1F2DE, 1F31A, 1F355, 1F390, 1F3CA, 1F404, 1F43D, 1F476, 1F4AE, 1F4E5, 1F51D, 1F553, 1F589, 1F5BF, 1F5F4, 1F628, 1F65C, 1F690, 1F6C3, 1F6F5, 1F727, 1F758, 1F789, 1F7B9, 1F7E9, 1F818, 1F847, 1F875, 1F8A2, 1F8CF, 1F8FC, 1F928, 1F953, 1F97E, 1F9A8, 1F9D2, 1F9FB, 1FA24, 1FA4C, 1FA74, 1FA9B, 1FAC2, 1FAE8, 1FB0D, 1FB32, 1FB57, 1FB7A, 1FB9E, 1FBC1, 1FBE3, 1FC05, 1FC26, 1FC46, 1FC66, 1FC86, 1FCA5, 1FCC3, 1FCE1, 1FCFF, 1FD1B, 1FD38, 1FD53, 1FD6F, 1FD89, 1FDA3, 1FDBD, 1FDD6, 1FDEE, 1FE06, 1FE1D, 1FE34, 1FE4A, 1FE60, 1FE75, 1FE8A, 1FE9E, 1FEB1, 1FEC4, 1FED7, 1FEE8, 1FEFA, 1FF0B, 1FF1B, 1FF2A, 1FF39, 1FF48, 1FF56, 1FF63, 1FF70, 1FF7D, 1FF88, 1FF94, 1FF9E, 1FFA8, 1FFB2, 1FFBB, 1FFC3, 1FFCB, 1FFD3, 1FFD9, 1FFE0, 1FFE5, 1FFEB, 1FFEF, 1FFF3, 1FFF7, 1FFFA, 1FFFC, 1FFFE, 1FFFF, 1FFFF;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_bece30c16e103c31',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '9ab1bbed01951204d93b791f6e56b497',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_bece30c16e103c31',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 1FFFF, 1FFFF, 1FFFF, 1FFFD, 1FFFB, 1FFF9, 1FFF5, 1FFF2, 1FFED, 1FFE9, 1FFE3, 1FFDD, 1FFD7, 1FFD0, 1FFC8, 1FFC0, 1FFB7, 1FFAE, 1FFA4, 1FF9A, 1FF8F, 1FF84, 1FF78, 1FF6B, 1FF5E, 1FF51, 1FF42, 1FF34, 1FF24, 1FF14, 1FF04, 1FEF3, 1FEE2, 1FED0, 1FEBD, 1FEAA, 1FE96, 1FE82, 1FE6D, 1FE58, 1FE42, 1FE2B, 1FE14, 1FDFD, 1FDE5, 1FDCC, 1FDB3, 1FD99, 1FD7F, 1FD64, 1FD49, 1FD2D, 1FD10, 1FCF3, 1FCD6, 1FCB8, 1FC99, 1FC7A, 1FC5A, 1FC3A, 1FC19, 1FBF7, 1FBD6, 1FBB3, 1FB90, 1FB6D, 1FB48, 1FB24, 1FAFF, 1FAD9, 1FAB3, 1FA8C, 1FA65, 1FA3D, 1FA14, 1F9EB, 1F9C2, 1F998, 1F96D, 1F942, 1F917, 1F8EA, 1F8BE, 1F890, 1F863, 1F834, 1F805, 1F7D6, 1F7A6, 1F776, 1F745, 1F713, 1F6E1, 1F6AF, 1F67C, 1F648, 1F614, 1F5DF, 1F5AA, 1F574, 1F53E, 1F507, 1F4D0, 1F498, 1F460, 1F427, 1F3ED, 1F3B3, 1F379, 1F33E, 1F302, 1F2C6, 1F28A, 1F24D, 1F20F, 1F1D1, 1F192, 1F153, 1F114, 1F0D3, 1F093, 1F051, 1F010, 1EFCD, 1EF8B, 1EF47, 1EF04, 1EEBF, 1EE7B, 1EE35, 1EDEF, 1EDA9, 1ED62, 1ED1B, 1ECD3, 1EC8B, 1EC42, 1EBF8, 1EBAF, 1EB64, 1EB19, 1EACE, 1EA82, 1EA36, 1E9E9, 1E99B, 1E94E, 1E8FF, 1E8B0, 1E861, 1E811, 1E7C1, 1E770, 1E71F, 1E6CD, 1E67A, 1E628, 1E5D4, 1E580, 1E52C, 1E4D7, 1E482, 1E42C, 1E3D6, 1E37F, 1E328, 1E2D1, 1E278, 1E220, 1E1C7, 1E16D, 1E113, 1E0B8, 1E05D, 1E002, 1DFA6, 1DF49, 1DEEC, 1DE8F, 1DE31, 1DDD3, 1DD74, 1DD15, 1DCB5, 1DC55, 1DBF4, 1DB93, 1DB31, 1DACF, 1DA6D, 1DA0A, 1D9A6, 1D942, 1D8DE, 1D879, 1D814, 1D7AE, 1D748, 1D6E1, 1D67A, 1D612, 1D5AA, 1D542, 1D4D9, 1D470, 1D406, 1D39C, 1D331, 1D2C6, 1D25A, 1D1EE, 1D182, 1D115, 1D0A7, 1D03A, 1CFCB, 1CF5D, 1CEEE, 1CE7E, 1CE0E, 1CD9E, 1CD2D, 1CCBC, 1CC4A, 1CBD8, 1CB65, 1CAF2, 1CA7F, 1CA0B, 1C997, 1C922, 1C8AD, 1C838, 1C7C2, 1C74C, 1C6D5, 1C65E, 1C5E6, 1C56E, 1C4F6, 1C47D, 1C404, 1C38A, 1C310, 1C296, 1C21B, 1C1A0, 1C124, 1C0A8, 1C02B, 1BFAF, 1BF31, 1BEB4, 1BE36, 1BDB7, 1BD38, 1BCB9, 1BC3A, 1BBBA, 1BB39, 1BAB9, 1BA37, 1B9B6, 1B934, 1B8B2, 1B82F, 1B7AC, 1B728, 1B6A5, 1B620, 1B59C, 1B517, 1B492, 1B40C, 1B386, 1B2FF, 1B279, 1B1F2, 1B16A, 1B0E2, 1B05A, 1AFD1, 1AF48, 1AEBF, 1AE35, 1ADAB, 1AD21, 1AC96, 1AC0B, 1AB80, 1AAF4, 1AA68, 1A9DB, 1A94E, 1A8C1, 1A834, 1A7A6, 1A718, 1A689, 1A5FA, 1A56B, 1A4DB, 1A44B, 1A3BB, 1A32B, 1A29A, 1A208, 1A177, 1A0E5, 1A053, 19FC0, 19F2D, 19E9A, 19E07, 19D73, 19CDF, 19C4A, 19BB6, 19B21, 19A8B, 199F6, 19960, 198C9, 19833, 1979C, 19705, 1966D, 195D5, 1953D, 194A5, 1940C, 19373, 192DA, 19240, 191A6, 1910C, 19071, 18FD7, 18F3C, 18EA0, 18E05, 18D69, 18CCD, 18C30, 18B93, 18AF6, 18A59, 189BC, 1891E, 18880, 187E1, 18743, 186A4, 18605, 18565, 184C6, 18426, 18385, 182E5, 18244, 181A3, 18102, 18060, 17FBF, 17F1D, 17E7B, 17DD8, 17D35, 17C92, 17BEF, 17B4C, 17AA8, 17A04, 17960, 178BC, 17817, 17772, 176CD, 17628, 17582, 174DC, 17436, 17390, 172EA, 17243, 1719C, 170F5, 1704E, 16FA6, 16EFF, 16E57, 16DAE, 16D06, 16C5D, 16BB5, 16B0C, 16A63, 169B9, 16910, 16866, 167BC, 16712, 16667, 165BD, 16512, 16467, 163BC, 16310, 16265, 161B9, 1610D, 16061, 15FB5, 15F09, 15E5C, 15DAF, 15D02, 15C55, 15BA8, 15AFB, 15A4D, 1599F, 158F1, 15843, 15795, 156E7, 15638, 15589, 154DA, 1542B, 1537C, 152CD, 1521D, 1516E, 150BE, 1500E, 14F5E, 14EAE, 14DFD, 14D4D, 14C9C, 14BEB, 14B3A, 14A89, 149D8, 14927, 14875, 147C4, 14712, 14660, 145AE, 144FC, 1444A, 14398, 142E5, 14233, 14180, 140CD, 1401B, 13F68, 13EB5, 13E01, 13D4E, 13C9B, 13BE7, 13B34, 13A80, 139CC, 13918, 13864, 137B0, 136FC, 13648, 13593, 134DF, 1342A, 13376, 132C1, 1320C, 13158, 130A3, 12FEE, 12F39, 12E83, 12DCE, 12D19, 12C64, 12BAE, 12AF9, 12A43, 1298D, 128D8, 12822, 1276C, 126B6, 12600, 1254B, 12494, 123DE, 12328, 12272, 121BC, 12106, 1204F, 11F99, 11EE3, 11E2C, 11D76, 11CBF, 11C09, 11B52, 11A9B, 119E5, 1192E, 11877, 117C1, 1170A, 11653, 1159C, 114E6, 1142F, 11378, 112C1, 1120A, 11153, 1109C, 10FE5, 10F2E, 10E77, 10DC1, 10D0A, 10C53, 10B9C, 10AE5, 10A2E, 10977, 108C0, 10809, 10752, 1069B, 105E4, 1052D, 10476, 103BF, 10308, 10252, 1019B, 100E4, 1002D, FF76, FEC0, FE09, FD52, FC9B, FBE5, FB2E, FA78, F9C1, F90A, F854, F79D, F6E7, F631, F57A, F4C4, F40E, F358, F2A1, F1EB, F135, F07F, EFC9, EF13, EE5E, EDA8, ECF2, EC3C, EB87, EAD1, EA1C, E966, E8B1, E7FC, E746, E691, E5DC, E527, E472, E3BD, E308, E254, E19F, E0EA, E036, DF82, DECD, DE19, DD65, DCB1, DBFD, DB49, DA95, D9E2, D92E, D87A, D7C7, D714, D661, D5AD, D4FA, D447, D395, D2E2, D22F, D17D, D0CB, D018, CF66, CEB4, CE02, CD50, CC9F, CBED, CB3C, CA8A, C9D9, C928, C877, C7C6, C716, C665, C5B5, C504, C454, C3A4, C2F4, C244, C195, C0E5, C036, BF86, BED7, BE28, BD7A, BCCB, BC1C, BB6E, BAC0, BA12, B964, B8B6, B808, B75B, B6AE, B600, B553, B4A7, B3FA, B34D, B2A1, B1F5, B149, B09D, AFF1, AF46, AE9A, ADEF, AD44, AC99, ABEE, AB44, AA9A, A9EF, A945, A89C, A7F2, A748, A69F, A5F6, A54D, A4A4, A3FC, A354, A2AB, A203, A15C, A0B4, A00D, 9F65, 9EBE, 9E18, 9D71, 9CCB, 9C24, 9B7E, 9AD8, 9A33, 998D, 98E8, 9843, 979E, 96FA, 9655, 95B1, 950D, 9469, 93C6, 9322, 927F, 91DC, 9139, 9097, 8FF5, 8F53, 8EB1, 8E0F, 8D6E, 8CCD, 8C2C, 8B8B, 8AEA, 8A4A, 89AA, 890A, 886A, 87CB, 872C, 868D, 85EE, 8550, 84B1, 8413, 8376, 82D8, 823B, 819E, 8101, 8064, 7FC8, 7F2C, 7E90, 7DF4, 7D59, 7CBE, 7C23, 7B88, 7AEE, 7A54, 79BA, 7920, 7887, 77ED, 7755, 76BC, 7623, 758B, 74F3, 745C, 73C4, 732D, 7296, 7200, 7169, 70D3, 703D, 6FA8, 6F12, 6E7D, 6DE9, 6D54, 6CC0, 6C2C, 6B98, 6B04, 6A71, 69DE, 694C, 68B9, 6827, 6795, 6704, 6672, 65E1, 6550, 64C0, 6430, 63A0, 6310, 6281, 61F2, 6163, 60D4, 6046, 5FB8, 5F2A, 5E9D, 5E0F, 5D83, 5CF6, 5C6A, 5BDE, 5B52, 5AC6, 5A3B, 59B0, 5926, 589B, 5811, 5787, 56FE, 5675, 55EC, 5563, 54DB, 5453, 53CB, 5344, 52BD, 5236, 51AF, 5129, 50A3, 501E, 4F98, 4F13, 4E8E, 4E0A, 4D86, 4D02, 4C7E, 4BFB, 4B78, 4AF5, 4A73, 49F1, 496F, 48EE, 486D, 47EC, 476B, 46EB, 466B, 45EB, 456C, 44ED, 446E, 43F0, 4372, 42F4, 4276, 41F9, 417C, 4100, 4083, 4007, 3F8C, 3F11, 3E96, 3E1B, 3DA0, 3D26, 3CAD, 3C33, 3BBA, 3B41, 3AC9, 3A50, 39D8, 3961, 38EA, 3873, 37FC, 3786, 3710, 369A, 3625, 35B0, 353B, 34C7, 3452, 33DF, 336B, 32F8, 3285, 3213, 31A1, 312F, 30BD, 304C, 2FDB, 2F6A, 2EFA, 2E8A, 2E1B, 2DAB, 2D3C, 2CCE, 2C5F, 2BF1, 2B84, 2B16, 2AA9, 2A3C, 29D0, 2964, 28F8, 288D, 2822, 27B7, 274C, 26E2, 2678, 260F, 25A6, 253D, 24D4, 246C, 2404, 239D, 2336, 22CF, 2268, 2202, 219C, 2136, 20D1, 206C, 2008, 1FA3, 1F3F, 1EDC, 1E78, 1E15, 1DB3, 1D51, 1CEF, 1C8D, 1C2C, 1BCA, 1B6A, 1B09, 1AA9, 1A4A, 19EA, 198B, 192C, 18CE, 1870, 1812, 17B5, 1758, 16FB, 169F, 1642, 15E7, 158B, 1530, 14D5, 147B, 1421, 13C7, 136D, 1314, 12BB, 1263, 120A, 11B3, 115B, 1104, 10AD, 1056, 1000, FAA, F55, EFF, EAA, E56, E01, DAD, D5A, D06, CB3, C61, C0E, BBC, B6B, B19, AC8, A77, A27, 9D7, 987, 938, 8E9, 89A, 84B, 7FD, 7AF, 762, 715, 6C8, 67B, 62F, 5E3, 598, 54C, 501, 4B7, 46D, 423, 3D9, 390, 347, 2FE, 2B5, 26D, 226, 1DE, 197, 150, 10A, C4, 7E, 38;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_b794889df4d0ec69',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ec532c847866352abb5652c8e0100bde',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_b794889df4d0ec69',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFF3, 3FFAE, 3FF6A, 3FF25, 3FEE1, 3FE9E, 3FE5A, 3FE17, 3FDD5, 3FD92, 3FD50, 3FD0E, 3FCCD, 3FC8C, 3FC4B, 3FC0B, 3FBCA, 3FB8A, 3FB4B, 3FB0C, 3FACD, 3FA8E, 3FA50, 3FA12, 3F9D4, 3F996, 3F959, 3F91D, 3F8E0, 3F8A4, 3F868, 3F82C, 3F7F1, 3F7B6, 3F77C, 3F741, 3F707, 3F6CD, 3F694, 3F65B, 3F622, 3F5E9, 3F5B1, 3F579, 3F542, 3F50A, 3F4D3, 3F49D, 3F466, 3F430, 3F3FA, 3F3C5, 3F38F, 3F35A, 3F326, 3F2F1, 3F2BD, 3F28A, 3F256, 3F223, 3F1F0, 3F1BE, 3F18B, 3F159, 3F128, 3F0F6, 3F0C5, 3F094, 3F064, 3F033, 3F004, 3EFD4, 3EFA4, 3EF75, 3EF47, 3EF18, 3EEEA, 3EEBC, 3EE8E, 3EE61, 3EE34, 3EE07, 3EDDA, 3EDAE, 3ED82, 3ED57, 3ED2B, 3ED00, 3ECD5, 3ECAB, 3EC80, 3EC56, 3EC2D, 3EC03, 3EBDA, 3EBB1, 3EB89, 3EB60, 3EB38, 3EB11, 3EAE9, 3EAC2, 3EA9B, 3EA74, 3EA4E, 3EA28, 3EA02, 3E9DC, 3E9B7, 3E992, 3E96D, 3E949, 3E924, 3E900, 3E8DD, 3E8B9, 3E896, 3E873, 3E850, 3E82E, 3E80C, 3E7EA, 3E7C8, 3E7A7, 3E786, 3E765, 3E745, 3E724, 3E704, 3E6E5, 3E6C5, 3E6A6, 3E687, 3E668, 3E64A, 3E62B, 3E60D, 3E5F0, 3E5D2, 3E5B5, 3E598, 3E57B, 3E55F, 3E542, 3E526, 3E50B, 3E4EF, 3E4D4, 3E4B9, 3E49E, 3E484, 3E469, 3E44F, 3E436, 3E41C, 3E403, 3E3EA, 3E3D1, 3E3B8, 3E3A0, 3E388, 3E370, 3E359, 3E341, 3E32A, 3E313, 3E2FD, 3E2E6, 3E2D0, 3E2BA, 3E2A4, 3E28F, 3E279, 3E264, 3E250, 3E23B, 3E227, 3E213, 3E1FF, 3E1EB, 3E1D8, 3E1C4, 3E1B1, 3E19F, 3E18C, 3E17A, 3E168, 3E156, 3E144, 3E133, 3E121, 3E110, 3E100, 3E0EF, 3E0DF, 3E0CE, 3E0BF, 3E0AF, 3E09F, 3E090, 3E081, 3E072, 3E063, 3E055, 3E047, 3E039, 3E02B, 3E01D, 3E010, 3E003, 3DFF6, 3DFE9, 3DFDC, 3DFD0, 3DFC4, 3DFB8, 3DFAC, 3DFA0, 3DF95, 3DF8A, 3DF7F, 3DF74, 3DF6A, 3DF5F, 3DF55, 3DF4B, 3DF41, 3DF38, 3DF2E, 3DF25, 3DF1C, 3DF13, 3DF0A, 3DF02, 3DEFA, 3DEF2, 3DEEA, 3DEE2, 3DEDB, 3DED3, 3DECC, 3DEC5, 3DEBE, 3DEB8, 3DEB1, 3DEAB, 3DEA5, 3DE9F, 3DE99, 3DE94, 3DE8E, 3DE89, 3DE84, 3DE7F, 3DE7B, 3DE76, 3DE72, 3DE6E, 3DE6A, 3DE66, 3DE62, 3DE5F, 3DE5C, 3DE59, 3DE56, 3DE53, 3DE50, 3DE4E, 3DE4B, 3DE49, 3DE47, 3DE46, 3DE44, 3DE42, 3DE41, 3DE40, 3DE3F, 3DE3E, 3DE3D, 3DE3D, 3DE3C, 3DE3C, 3DE3C, 3DE3C, 3DE3C, 3DE3D, 3DE3D, 3DE3E, 3DE3F, 3DE40, 3DE41, 3DE42, 3DE44, 3DE45, 3DE47, 3DE49, 3DE4B, 3DE4D, 3DE4F, 3DE52, 3DE54, 3DE57, 3DE5A, 3DE5D, 3DE60, 3DE63, 3DE67, 3DE6A, 3DE6E, 3DE72, 3DE76, 3DE7A, 3DE7E, 3DE83, 3DE87, 3DE8C, 3DE90, 3DE95, 3DE9A, 3DE9F, 3DEA5, 3DEAA, 3DEAF, 3DEB5, 3DEBB, 3DEC1, 3DEC7, 3DECD, 3DED3, 3DED9, 3DEE0, 3DEE7, 3DEED, 3DEF4, 3DEFB, 3DF02, 3DF09, 3DF11, 3DF18, 3DF20, 3DF27, 3DF2F, 3DF37, 3DF3F, 3DF47, 3DF4F, 3DF58, 3DF60, 3DF68, 3DF71, 3DF7A, 3DF83, 3DF8C, 3DF95, 3DF9E, 3DFA7, 3DFB0, 3DFBA, 3DFC4, 3DFCD, 3DFD7, 3DFE1, 3DFEB, 3DFF5, 3DFFF, 3E009, 3E014, 3E01E, 3E029, 3E033, 3E03E, 3E049, 3E054, 3E05F, 3E06A, 3E075, 3E080, 3E08C, 3E097, 3E0A2, 3E0AE, 3E0BA, 3E0C6, 3E0D1, 3E0DD, 3E0E9, 3E0F6, 3E102, 3E10E, 3E11A, 3E127, 3E133, 3E140, 3E14D, 3E159, 3E166, 3E173, 3E180, 3E18D, 3E19A, 3E1A7, 3E1B5, 3E1C2, 3E1D0, 3E1DD, 3E1EB, 3E1F8, 3E206, 3E214, 3E221, 3E22F, 3E23D, 3E24B, 3E259, 3E268, 3E276, 3E284, 3E292, 3E2A1, 3E2AF, 3E2BE, 3E2CC, 3E2DB, 3E2EA, 3E2F9, 3E307, 3E316, 3E325, 3E334, 3E343, 3E352, 3E362, 3E371, 3E380, 3E38F, 3E39F, 3E3AE, 3E3BE, 3E3CD, 3E3DD, 3E3EC, 3E3FC, 3E40C, 3E41C, 3E42B, 3E43B, 3E44B, 3E45B, 3E46B, 3E47B, 3E48B, 3E49B, 3E4AC, 3E4BC, 3E4CC, 3E4DC, 3E4ED, 3E4FD, 3E50E, 3E51E, 3E52E, 3E53F, 3E550, 3E560, 3E571, 3E581, 3E592, 3E5A3, 3E5B4, 3E5C5, 3E5D5, 3E5E6, 3E5F7, 3E608, 3E619, 3E62A, 3E63B, 3E64C, 3E65D, 3E66E, 3E67F, 3E691, 3E6A2, 3E6B3, 3E6C4, 3E6D6, 3E6E7, 3E6F8, 3E70A, 3E71B, 3E72C, 3E73E, 3E74F, 3E761, 3E772, 3E784, 3E795, 3E7A7, 3E7B8, 3E7CA, 3E7DB, 3E7ED, 3E7FE, 3E810, 3E822, 3E833, 3E845, 3E857, 3E869, 3E87A, 3E88C, 3E89E, 3E8AF, 3E8C1, 3E8D3, 3E8E5, 3E8F7, 3E908, 3E91A, 3E92C, 3E93E, 3E950, 3E962, 3E974, 3E985, 3E997, 3E9A9, 3E9BB, 3E9CD, 3E9DF, 3E9F1, 3EA03, 3EA15, 3EA27, 3EA38, 3EA4A, 3EA5C, 3EA6E, 3EA80, 3EA92, 3EAA4, 3EAB6, 3EAC8, 3EADA, 3EAEC, 3EAFE, 3EB10, 3EB21, 3EB33, 3EB45, 3EB57, 3EB69, 3EB7B, 3EB8D, 3EB9F, 3EBB1, 3EBC3, 3EBD4, 3EBE6, 3EBF8, 3EC0A, 3EC1C, 3EC2E, 3EC3F, 3EC51, 3EC63, 3EC75, 3EC87, 3EC99, 3ECAA, 3ECBC, 3ECCE, 3ECE0, 3ECF1, 3ED03, 3ED15, 3ED26, 3ED38, 3ED4A, 3ED5B, 3ED6D, 3ED7F, 3ED90, 3EDA2, 3EDB3, 3EDC5, 3EDD7, 3EDE8, 3EDFA, 3EE0B, 3EE1D, 3EE2E, 3EE3F, 3EE51, 3EE62, 3EE74, 3EE85, 3EE96, 3EEA8, 3EEB9, 3EECA, 3EEDC, 3EEED, 3EEFE, 3EF0F, 3EF21, 3EF32, 3EF43, 3EF54, 3EF65, 3EF76, 3EF87, 3EF98, 3EFA9, 3EFBA, 3EFCB, 3EFDC, 3EFED, 3EFFE, 3F00F, 3F020, 3F031, 3F041, 3F052, 3F063, 3F074, 3F084, 3F095, 3F0A6, 3F0B6, 3F0C7, 3F0D7, 3F0E8, 3F0F8, 3F109, 3F119, 3F12A, 3F13A, 3F14A, 3F15B, 3F16B, 3F17B, 3F18C, 3F19C, 3F1AC, 3F1BC, 3F1CC, 3F1DC, 3F1EC, 3F1FC, 3F20C, 3F21C, 3F22C, 3F23C, 3F24C, 3F25C, 3F26C, 3F27B, 3F28B, 3F29B, 3F2AB, 3F2BA, 3F2CA, 3F2D9, 3F2E9, 3F2F9, 3F308, 3F317, 3F327, 3F336, 3F346, 3F355, 3F364, 3F373, 3F383, 3F392, 3F3A1, 3F3B0, 3F3BF, 3F3CE, 3F3DD, 3F3EC, 3F3FB, 3F40A, 3F419, 3F427, 3F436, 3F445, 3F454, 3F462, 3F471, 3F480, 3F48E, 3F49D, 3F4AB, 3F4BA, 3F4C8, 3F4D6, 3F4E5, 3F4F3, 3F501, 3F50F, 3F51E, 3F52C, 3F53A, 3F548, 3F556, 3F564, 3F572, 3F580, 3F58E, 3F59C, 3F5A9, 3F5B7, 3F5C5, 3F5D3, 3F5E0, 3F5EE, 3F5FB, 3F609, 3F616, 3F624, 3F631, 3F63F, 3F64C, 3F659, 3F666, 3F674, 3F681, 3F68E, 3F69B, 3F6A8, 3F6B5, 3F6C2, 3F6CF, 3F6DC, 3F6E9, 3F6F6, 3F702, 3F70F, 3F71C, 3F729, 3F735, 3F742, 3F74E, 3F75B, 3F767, 3F774, 3F780, 3F78C, 3F799, 3F7A5, 3F7B1, 3F7BD, 3F7CA, 3F7D6, 3F7E2, 3F7EE, 3F7FA, 3F806, 3F812, 3F81E, 3F829, 3F835, 3F841, 3F84D, 3F858, 3F864, 3F870, 3F87B, 3F887, 3F892, 3F89D, 3F8A9, 3F8B4, 3F8C0, 3F8CB, 3F8D6, 3F8E1, 3F8EC, 3F8F8, 3F903, 3F90E, 3F919, 3F924, 3F92F, 3F939, 3F944, 3F94F, 3F95A, 3F965, 3F96F, 3F97A, 3F985, 3F98F, 3F99A, 3F9A4, 3F9AF, 3F9B9, 3F9C4, 3F9CE, 3F9D8, 3F9E2, 3F9ED, 3F9F7, 3FA01, 3FA0B, 3FA15, 3FA1F, 3FA29, 3FA33, 3FA3D, 3FA47, 3FA51, 3FA5B, 3FA65, 3FA6E, 3FA78, 3FA82, 3FA8B, 3FA95, 3FA9F, 3FAA8, 3FAB2, 3FABB, 3FAC4, 3FACE, 3FAD7, 3FAE1, 3FAEA, 3FAF3, 3FAFC, 3FB05, 3FB0F, 3FB18, 3FB21, 3FB2A, 3FB33, 3FB3C, 3FB45, 3FB4E, 3FB57, 3FB5F, 3FB68, 3FB71, 3FB7A, 3FB82, 3FB8B, 3FB94, 3FB9C, 3FBA5, 3FBAD, 3FBB6, 3FBBE, 3FBC7, 3FBCF, 3FBD7, 3FBE0, 3FBE8, 3FBF0, 3FBF9, 3FC01, 3FC09, 3FC11, 3FC19, 3FC21, 3FC29, 3FC31, 3FC39, 3FC41, 3FC49, 3FC51, 3FC59, 3FC61, 3FC69, 3FC70, 3FC78, 3FC80, 3FC88, 3FC8F, 3FC97, 3FC9E, 3FCA6, 3FCAD, 3FCB5, 3FCBC, 3FCC4, 3FCCB, 3FCD3, 3FCDA, 3FCE1, 3FCE9, 3FCF0, 3FCF7, 3FCFF, 3FD06, 3FD0D, 3FD14, 3FD1B, 3FD22, 3FD29, 3FD30, 3FD37, 3FD3E, 3FD45, 3FD4C, 3FD53, 3FD5A, 3FD61, 3FD68, 3FD6F, 3FD75, 3FD7C, 3FD83, 3FD8A, 3FD90, 3FD97, 3FD9E, 3FDA4, 3FDAB, 3FDB2, 3FDB8, 3FDBF, 3FDC5, 3FDCC, 3FDD2, 3FDD9, 3FDDF, 3FDE5, 3FDEC, 3FDF2, 3FDF8, 3FDFF, 3FE05, 3FE0B, 3FE12, 3FE18, 3FE1E, 3FE24, 3FE2A, 3FE31, 3FE37, 3FE3D, 3FE43, 3FE49, 3FE4F, 3FE55, 3FE5B, 3FE61, 3FE67, 3FE6D, 3FE73, 3FE79, 3FE7F, 3FE85, 3FE8B, 3FE90, 3FE96, 3FE9C, 3FEA2, 3FEA8, 3FEAD, 3FEB3, 3FEB9, 3FEBF, 3FEC4, 3FECA, 3FED0, 3FED6, 3FEDB, 3FEE1, 3FEE6, 3FEEC, 3FEF2, 3FEF7, 3FEFD, 3FF02, 3FF08, 3FF0D, 3FF13, 3FF19, 3FF1E, 3FF23, 3FF29, 3FF2E, 3FF34, 3FF39, 3FF3F, 3FF44, 3FF4A, 3FF4F, 3FF54, 3FF5A, 3FF5F, 3FF64, 3FF6A, 3FF6F, 3FF74, 3FF7A, 3FF7F, 3FF84, 3FF8A, 3FF8F, 3FF94, 3FF99, 3FF9F, 3FFA4, 3FFA9, 3FFAE, 3FFB4, 3FFB9, 3FFBE, 3FFC3, 3FFC8, 3FFCD, 3FFD3, 3FFD8, 3FFDD, 3FFE2, 3FFE7, 3FFEC, 3FFF2, 3FFF7, 3FFFC;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_7d18046e7b7c5e7a',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '46a876ce5949db1cc0d5fe185db6d701',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_7d18046e7b7c5e7a',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFFF, 3FFFA, 3FFF4, 3FFEF, 3FFEA, 3FFE5, 3FFE0, 3FFDB, 3FFD6, 3FFD0, 3FFCB, 3FFC6, 3FFC1, 3FFBC, 3FFB6, 3FFB1, 3FFAC, 3FFA7, 3FFA2, 3FF9C, 3FF97, 3FF92, 3FF8D, 3FF87, 3FF82, 3FF7D, 3FF77, 3FF72, 3FF6D, 3FF67, 3FF62, 3FF5D, 3FF57, 3FF52, 3FF4D, 3FF47, 3FF42, 3FF3C, 3FF37, 3FF31, 3FF2C, 3FF27, 3FF21, 3FF1C, 3FF16, 3FF11, 3FF0B, 3FF06, 3FF00, 3FEFA, 3FEF5, 3FEEF, 3FEEA, 3FEE4, 3FEDE, 3FED9, 3FED3, 3FECD, 3FEC8, 3FEC2, 3FEBC, 3FEB6, 3FEB1, 3FEAB, 3FEA5, 3FE9F, 3FE9A, 3FE94, 3FE8E, 3FE88, 3FE82, 3FE7C, 3FE76, 3FE70, 3FE6A, 3FE64, 3FE5E, 3FE58, 3FE52, 3FE4C, 3FE46, 3FE40, 3FE3A, 3FE34, 3FE2E, 3FE28, 3FE21, 3FE1B, 3FE15, 3FE0F, 3FE09, 3FE02, 3FDFC, 3FDF6, 3FDEF, 3FDE9, 3FDE2, 3FDDC, 3FDD6, 3FDCF, 3FDC9, 3FDC2, 3FDBC, 3FDB5, 3FDAF, 3FDA8, 3FDA1, 3FD9B, 3FD94, 3FD8D, 3FD87, 3FD80, 3FD79, 3FD72, 3FD6C, 3FD65, 3FD5E, 3FD57, 3FD50, 3FD49, 3FD42, 3FD3B, 3FD34, 3FD2D, 3FD26, 3FD1F, 3FD18, 3FD11, 3FD0A, 3FD03, 3FCFB, 3FCF4, 3FCED, 3FCE6, 3FCDE, 3FCD7, 3FCCF, 3FCC8, 3FCC1, 3FCB9, 3FCB2, 3FCAA, 3FCA3, 3FC9B, 3FC93, 3FC8C, 3FC84, 3FC7C, 3FC75, 3FC6D, 3FC65, 3FC5D, 3FC55, 3FC4E, 3FC46, 3FC3E, 3FC36, 3FC2E, 3FC26, 3FC1E, 3FC16, 3FC0D, 3FC05, 3FBFD, 3FBF5, 3FBED, 3FBE4, 3FBDC, 3FBD4, 3FBCB, 3FBC3, 3FBBA, 3FBB2, 3FBA9, 3FBA1, 3FB98, 3FB90, 3FB87, 3FB7E, 3FB76, 3FB6D, 3FB64, 3FB5B, 3FB52, 3FB4A, 3FB41, 3FB38, 3FB2F, 3FB26, 3FB1D, 3FB14, 3FB0A, 3FB01, 3FAF8, 3FAEF, 3FAE6, 3FADC, 3FAD3, 3FACA, 3FAC0, 3FAB7, 3FAAD, 3FAA4, 3FA9A, 3FA91, 3FA87, 3FA7D, 3FA74, 3FA6A, 3FA60, 3FA56, 3FA4C, 3FA43, 3FA39, 3FA2F, 3FA25, 3FA1B, 3FA11, 3FA07, 3F9FC, 3F9F2, 3F9E8, 3F9DE, 3F9D3, 3F9C9, 3F9BF, 3F9B4, 3F9AA, 3F99F, 3F995, 3F98A, 3F980, 3F975, 3F96A, 3F960, 3F955, 3F94A, 3F93F, 3F934, 3F92A, 3F91F, 3F914, 3F909, 3F8FE, 3F8F2, 3F8E7, 3F8DC, 3F8D1, 3F8C6, 3F8BA, 3F8AF, 3F8A4, 3F898, 3F88D, 3F881, 3F876, 3F86A, 3F85F, 3F853, 3F847, 3F83B, 3F830, 3F824, 3F818, 3F80C, 3F800, 3F7F4, 3F7E8, 3F7DC, 3F7D0, 3F7C4, 3F7B8, 3F7AC, 3F79F, 3F793, 3F787, 3F77A, 3F76E, 3F762, 3F755, 3F749, 3F73C, 3F72F, 3F723, 3F716, 3F709, 3F6FD, 3F6F0, 3F6E3, 3F6D6, 3F6C9, 3F6BC, 3F6AF, 3F6A2, 3F695, 3F688, 3F67B, 3F66E, 3F660, 3F653, 3F646, 3F638, 3F62B, 3F61E, 3F610, 3F603, 3F5F5, 3F5E7, 3F5DA, 3F5CC, 3F5BE, 3F5B1, 3F5A3, 3F595, 3F587, 3F579, 3F56B, 3F55D, 3F54F, 3F541, 3F533, 3F525, 3F517, 3F509, 3F4FB, 3F4EC, 3F4DE, 3F4D0, 3F4C1, 3F4B3, 3F4A4, 3F496, 3F487, 3F479, 3F46A, 3F45B, 3F44D, 3F43E, 3F42F, 3F421, 3F412, 3F403, 3F3F4, 3F3E5, 3F3D6, 3F3C7, 3F3B8, 3F3A9, 3F39A, 3F38B, 3F37B, 3F36C, 3F35D, 3F34E, 3F33E, 3F32F, 3F320, 3F310, 3F301, 3F2F1, 3F2E2, 3F2D2, 3F2C3, 3F2B3, 3F2A3, 3F294, 3F284, 3F274, 3F264, 3F254, 3F245, 3F235, 3F225, 3F215, 3F205, 3F1F5, 3F1E5, 3F1D5, 3F1C5, 3F1B4, 3F1A4, 3F194, 3F184, 3F174, 3F163, 3F153, 3F143, 3F132, 3F122, 3F111, 3F101, 3F0F1, 3F0E0, 3F0CF, 3F0BF, 3F0AE, 3F09E, 3F08D, 3F07C, 3F06C, 3F05B, 3F04A, 3F039, 3F029, 3F018, 3F007, 3EFF6, 3EFE5, 3EFD4, 3EFC3, 3EFB2, 3EFA1, 3EF90, 3EF7F, 3EF6E, 3EF5D, 3EF4C, 3EF3B, 3EF2A, 3EF18, 3EF07, 3EEF6, 3EEE5, 3EED3, 3EEC2, 3EEB1, 3EE9F, 3EE8E, 3EE7D, 3EE6B, 3EE5A, 3EE49, 3EE37, 3EE26, 3EE14, 3EE03, 3EDF1, 3EDE0, 3EDCE, 3EDBD, 3EDAB, 3ED99, 3ED88, 3ED76, 3ED65, 3ED53, 3ED41, 3ED30, 3ED1E, 3ED0C, 3ECFA, 3ECE9, 3ECD7, 3ECC5, 3ECB4, 3ECA2, 3EC90, 3EC7E, 3EC6C, 3EC5B, 3EC49, 3EC37, 3EC25, 3EC13, 3EC01, 3EBF0, 3EBDE, 3EBCC, 3EBBA, 3EBA8, 3EB96, 3EB84, 3EB72, 3EB60, 3EB4F, 3EB3D, 3EB2B, 3EB19, 3EB07, 3EAF5, 3EAE3, 3EAD1, 3EABF, 3EAAD, 3EA9B, 3EA89, 3EA77, 3EA66, 3EA54, 3EA42, 3EA30, 3EA1E, 3EA0C, 3E9FA, 3E9E8, 3E9D6, 3E9C4, 3E9B2, 3E9A1, 3E98F, 3E97D, 3E96B, 3E959, 3E947, 3E935, 3E923, 3E912, 3E900, 3E8EE, 3E8DC, 3E8CA, 3E8B9, 3E8A7, 3E895, 3E883, 3E872, 3E860, 3E84E, 3E83C, 3E82B, 3E819, 3E808, 3E7F6, 3E7E4, 3E7D3, 3E7C1, 3E7B0, 3E79E, 3E78C, 3E77B, 3E769, 3E758, 3E747, 3E735, 3E724, 3E712, 3E701, 3E6F0, 3E6DE, 3E6CD, 3E6BC, 3E6AB, 3E699, 3E688, 3E677, 3E666, 3E655, 3E644, 3E633, 3E622, 3E611, 3E600, 3E5EF, 3E5DE, 3E5CD, 3E5BC, 3E5AB, 3E59B, 3E58A, 3E579, 3E569, 3E558, 3E547, 3E537, 3E526, 3E516, 3E505, 3E4F5, 3E4E5, 3E4D4, 3E4C4, 3E4B4, 3E4A4, 3E493, 3E483, 3E473, 3E463, 3E453, 3E443, 3E433, 3E424, 3E414, 3E404, 3E3F4, 3E3E5, 3E3D5, 3E3C5, 3E3B6, 3E3A6, 3E397, 3E388, 3E378, 3E369, 3E35A, 3E34B, 3E33C, 3E32D, 3E31E, 3E30F, 3E300, 3E2F1, 3E2E2, 3E2D4, 3E2C5, 3E2B7, 3E2A8, 3E29A, 3E28B, 3E27D, 3E26F, 3E260, 3E252, 3E244, 3E236, 3E228, 3E21A, 3E20D, 3E1FF, 3E1F1, 3E1E4, 3E1D6, 3E1C9, 3E1BB, 3E1AE, 3E1A1, 3E193, 3E186, 3E179, 3E16C, 3E160, 3E153, 3E146, 3E139, 3E12D, 3E120, 3E114, 3E108, 3E0FB, 3E0EF, 3E0E3, 3E0D7, 3E0CB, 3E0BF, 3E0B4, 3E0A8, 3E09C, 3E091, 3E086, 3E07A, 3E06F, 3E064, 3E059, 3E04E, 3E043, 3E038, 3E02E, 3E023, 3E018, 3E00E, 3E004, 3DFFA, 3DFEF, 3DFE5, 3DFDB, 3DFD2, 3DFC8, 3DFBE, 3DFB5, 3DFAB, 3DFA2, 3DF99, 3DF90, 3DF87, 3DF7E, 3DF75, 3DF6C, 3DF64, 3DF5B, 3DF53, 3DF4B, 3DF42, 3DF3A, 3DF32, 3DF2B, 3DF23, 3DF1B, 3DF14, 3DF0C, 3DF05, 3DEFE, 3DEF7, 3DEF0, 3DEE9, 3DEE3, 3DEDC, 3DED6, 3DECF, 3DEC9, 3DEC3, 3DEBD, 3DEB7, 3DEB2, 3DEAC, 3DEA7, 3DEA1, 3DE9C, 3DE97, 3DE92, 3DE8D, 3DE89, 3DE84, 3DE80, 3DE7B, 3DE77, 3DE73, 3DE6F, 3DE6B, 3DE68, 3DE64, 3DE61, 3DE5E, 3DE5B, 3DE58, 3DE55, 3DE52, 3DE50, 3DE4D, 3DE4B, 3DE49, 3DE47, 3DE45, 3DE44, 3DE42, 3DE41, 3DE40, 3DE3E, 3DE3E, 3DE3D, 3DE3C, 3DE3C, 3DE3B, 3DE3B, 3DE3B, 3DE3B, 3DE3C, 3DE3C, 3DE3D, 3DE3D, 3DE3E, 3DE3F, 3DE41, 3DE42, 3DE44, 3DE45, 3DE47, 3DE49, 3DE4B, 3DE4E, 3DE50, 3DE53, 3DE56, 3DE59, 3DE5C, 3DE5F, 3DE63, 3DE67, 3DE6B, 3DE6F, 3DE73, 3DE77, 3DE7C, 3DE81, 3DE85, 3DE8B, 3DE90, 3DE95, 3DE9B, 3DEA1, 3DEA7, 3DEAD, 3DEB3, 3DEBA, 3DEC0, 3DEC7, 3DECE, 3DED5, 3DEDD, 3DEE4, 3DEEC, 3DEF4, 3DEFC, 3DF05, 3DF0D, 3DF16, 3DF1F, 3DF28, 3DF31, 3DF3B, 3DF45, 3DF4E, 3DF59, 3DF63, 3DF6D, 3DF78, 3DF83, 3DF8E, 3DF99, 3DFA5, 3DFB0, 3DFBC, 3DFC8, 3DFD5, 3DFE1, 3DFEE, 3DFFB, 3E008, 3E015, 3E022, 3E030, 3E03E, 3E04C, 3E05A, 3E069, 3E078, 3E087, 3E096, 3E0A5, 3E0B5, 3E0C5, 3E0D5, 3E0E5, 3E0F5, 3E106, 3E117, 3E128, 3E139, 3E14B, 3E15D, 3E16F, 3E181, 3E193, 3E1A6, 3E1B9, 3E1CC, 3E1DF, 3E1F3, 3E207, 3E21B, 3E22F, 3E243, 3E258, 3E26D, 3E282, 3E297, 3E2AD, 3E2C3, 3E2D9, 3E2EF, 3E306, 3E31C, 3E333, 3E34B, 3E362, 3E37A, 3E392, 3E3AA, 3E3C2, 3E3DB, 3E3F4, 3E40D, 3E427, 3E440, 3E45A, 3E474, 3E48F, 3E4A9, 3E4C4, 3E4DF, 3E4FB, 3E516, 3E532, 3E54E, 3E56A, 3E587, 3E5A4, 3E5C1, 3E5DE, 3E5FC, 3E61A, 3E638, 3E656, 3E675, 3E694, 3E6B3, 3E6D2, 3E6F2, 3E712, 3E732, 3E752, 3E773, 3E794, 3E7B5, 3E7D7, 3E7F8, 3E81A, 3E83D, 3E85F, 3E882, 3E8A5, 3E8C8, 3E8EC, 3E910, 3E934, 3E958, 3E97D, 3E9A2, 3E9C7, 3E9EC, 3EA12, 3EA38, 3EA5E, 3EA85, 3EAAB, 3EAD2, 3EAFA, 3EB21, 3EB49, 3EB72, 3EB9A, 3EBC3, 3EBEC, 3EC15, 3EC3F, 3EC68, 3EC92, 3ECBD, 3ECE8, 3ED13, 3ED3E, 3ED69, 3ED95, 3EDC1, 3EDED, 3EE1A, 3EE47, 3EE74, 3EEA2, 3EED0, 3EEFE, 3EF2C, 3EF5B, 3EF8A, 3EFB9, 3EFE8, 3F018, 3F048, 3F079, 3F0A9, 3F0DA, 3F10B, 3F13D, 3F16F, 3F1A1, 3F1D3, 3F206, 3F239, 3F26C, 3F2A0, 3F2D4, 3F308, 3F33D, 3F371, 3F3A6, 3F3DC, 3F411, 3F447, 3F47E, 3F4B4, 3F4EB, 3F522, 3F55A, 3F591, 3F5CA, 3F602, 3F63B, 3F674, 3F6AD, 3F6E6, 3F720, 3F75B, 3F795, 3F7D0, 3F80B, 3F846, 3F882, 3F8BE, 3F8FA, 3F937, 3F974, 3F9B1, 3F9EF, 3FA2D, 3FA6B, 3FAA9, 3FAE8, 3FB27, 3FB67, 3FBA6, 3FBE6, 3FC27, 3FC67, 3FCA8, 3FCEA, 3FD2B, 3FD6D, 3FDAF, 3FDF2, 3FE35, 3FE78, 3FEBB, 3FEFF, 3FF43, 3FF88, 3FFCC;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_b076d989b180557c',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '85660ded6a4c665dd263d4c0f3119c67',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_b076d989b180557c',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 11, 57, 9C, E2, 129, 16F, 1B6, 1FD, 245, 28D, 2D5, 31E, 367, 3B0, 3F9, 443, 48D, 4D8, 522, 56D, 5B9, 605, 651, 69D, 6EA, 737, 784, 7D2, 820, 86E, 8BC, 90B, 95B, 9AA, 9FA, A4A, A9B, AEC, B3D, B8F, BE0, C33, C85, CD8, D2B, D7F, DD2, E26, E7B, ED0, F25, F7A, FD0, 1026, 107C, 10D3, 112A, 1182, 11D9, 1231, 128A, 12E2, 133B, 1395, 13EE, 1448, 14A3, 14FD, 1558, 15B4, 160F, 166B, 16C7, 1724, 1781, 17DE, 183C, 189A, 18F8, 1956, 19B5, 1A14, 1A74, 1AD4, 1B34, 1B95, 1BF5, 1C57, 1CB8, 1D1A, 1D7C, 1DDF, 1E41, 1EA4, 1F08, 1F6C, 1FD0, 2034, 2099, 20FE, 2163, 21C9, 222F, 2296, 22FC, 2363, 23CB, 2432, 249A, 2503, 256B, 25D4, 263E, 26A7, 2711, 277C, 27E6, 2851, 28BC, 2928, 2994, 2A00, 2A6D, 2ADA, 2B47, 2BB4, 2C22, 2C90, 2CFF, 2D6E, 2DDD, 2E4C, 2EBC, 2F2C, 2F9C, 300D, 307E, 30F0, 3161, 31D3, 3246, 32B8, 332B, 339F, 3412, 3486, 34FA, 356F, 35E4, 3659, 36CE, 3744, 37BA, 3831, 38A8, 391F, 3996, 3A0E, 3A86, 3AFE, 3B77, 3BF0, 3C69, 3CE3, 3D5D, 3DD7, 3E51, 3ECC, 3F47, 3FC3, 403F, 40BB, 4137, 41B4, 4231, 42AE, 432C, 43AA, 4428, 44A7, 4526, 45A5, 4624, 46A4, 4724, 47A4, 4825, 48A6, 4927, 49A9, 4A2B, 4AAD, 4B30, 4BB3, 4C36, 4CB9, 4D3D, 4DC1, 4E45, 4ECA, 4F4F, 4FD4, 5059, 50DF, 5165, 51EC, 5272, 52F9, 5380, 5408, 5490, 5518, 55A0, 5629, 56B2, 573B, 57C5, 584F, 58D9, 5964, 59EE, 5A79, 5B05, 5B90, 5C1C, 5CA8, 5D35, 5DC2, 5E4F, 5EDC, 5F69, 5FF7, 6085, 6114, 61A3, 6232, 62C1, 6350, 63E0, 6470, 6501, 6591, 6622, 66B3, 6745, 67D7, 6869, 68FB, 698D, 6A20, 6AB3, 6B47, 6BDA, 6C6E, 6D02, 6D97, 6E2B, 6EC0, 6F55, 6FEB, 7080, 7116, 71AD, 7243, 72DA, 7371, 7408, 74A0, 7537, 75D0, 7668, 7700, 7799, 7832, 78CB, 7965, 79FF, 7A99, 7B33, 7BCE, 7C68, 7D03, 7D9F, 7E3A, 7ED6, 7F72, 800E, 80AB, 8147, 81E4, 8281, 831F, 83BC, 845A, 84F8, 8597, 8635, 86D4, 8773, 8813, 88B2, 8952, 89F2, 8A92, 8B32, 8BD3, 8C74, 8D15, 8DB6, 8E58, 8EF9, 8F9B, 903E, 90E0, 9183, 9225, 92C8, 936C, 940F, 94B3, 9557, 95FB, 969F, 9744, 97E8, 988D, 9932, 99D8, 9A7D, 9B23, 9BC9, 9C6F, 9D15, 9DBC, 9E63, 9F09, 9FB1, A058, A0FF, A1A7, A24F, A2F7, A39F, A448, A4F0, A599, A642, A6EB, A795, A83E, A8E8, A992, AA3C, AAE6, AB91, AC3B, ACE6, AD91, AE3C, AEE7, AF93, B03E, B0EA, B196, B242, B2EE, B39B, B448, B4F4, B5A1, B64E, B6FC, B7A9, B856, B904, B9B2, BA60, BB0E, BBBC, BC6B, BD1A, BDC8, BE77, BF26, BFD5, C085, C134, C1E4, C293, C343, C3F3, C4A3, C554, C604, C6B5, C765, C816, C8C7, C978, CA29, CADA, CB8C, CC3D, CCEF, CDA1, CE52, CF04, CFB6, D069, D11B, D1CD, D280, D333, D3E5, D498, D54B, D5FE, D6B1, D765, D818, D8CB, D97F, DA33, DAE6, DB9A, DC4E, DD02, DDB6, DE6A, DF1F, DFD3, E087, E13C, E1F1, E2A5, E35A, E40F, E4C4, E579, E62E, E6E3, E798, E84D, E903, E9B8, EA6E, EB23, EBD9, EC8E, ED44, EDFA, EEB0, EF65, F01B, F0D1, F187, F23E, F2F4, F3AA, F460, F516, F5CD, F683, F739, F7F0, F8A6, F95D, FA13, FACA, FB81, FC37, FCEE, FDA5, FE5B, FF12, FFC9, 10080, 10136, 101ED, 102A4, 1035B, 10412, 104C9, 10580, 10637, 106EE, 107A5, 1085B, 10912, 109C9, 10A80, 10B37, 10BEE, 10CA5, 10D5C, 10E13, 10ECA, 10F81, 11038, 110EF, 111A6, 1125D, 11314, 113CA, 11481, 11538, 115EF, 116A6, 1175D, 11813, 118CA, 11981, 11A37, 11AEE, 11BA5, 11C5B, 11D12, 11DC8, 11E7F, 11F35, 11FEB, 120A2, 12158, 1220E, 122C4, 1237B, 12431, 124E7, 1259D, 12653, 12709, 127BE, 12874, 1292A, 129E0, 12A95, 12B4B, 12C00, 12CB6, 12D6B, 12E20, 12ED5, 12F8A, 1303F, 130F4, 131A9, 1325E, 13313, 133C8, 1347C, 13531, 135E5, 13699, 1374D, 13802, 138B6, 1396A, 13A1D, 13AD1, 13B85, 13C38, 13CEC, 13D9F, 13E52, 13F06, 13FB9, 1406C, 1411E, 141D1, 14284, 14336, 143E8, 1449B, 1454D, 145FF, 146B1, 14762, 14814, 148C6, 14977, 14A28, 14AD9, 14B8A, 14C3B, 14CEC, 14D9C, 14E4D, 14EFD, 14FAD, 1505D, 1510D, 151BD, 1526D, 1531C, 153CB, 1547A, 15529, 155D8, 15687, 15735, 157E4, 15892, 15940, 159EE, 15A9C, 15B49, 15BF6, 15CA4, 15D51, 15DFE, 15EAA, 15F57, 16003, 160AF, 1615B, 16207, 162B3, 1635E, 16409, 164B4, 1655F, 1660A, 166B4, 1675F, 16809, 168B3, 1695C, 16A06, 16AAF, 16B58, 16C01, 16CAA, 16D52, 16DFB, 16EA3, 16F4A, 16FF2, 1709A, 17141, 171E8, 1728F, 17335, 173DB, 17482, 17527, 175CD, 17673, 17718, 177BD, 17862, 17906, 179AA, 17A4E, 17AF2, 17B96, 17C39, 17CDC, 17D7F, 17E22, 17EC4, 17F66, 18008, 180AA, 1814B, 181EC, 1828D, 1832E, 183CE, 1846E, 1850E, 185AD, 1864D, 186EC, 1878B, 18829, 188C7, 18965, 18A03, 18AA0, 18B3E, 18BDA, 18C77, 18D13, 18DAF, 18E4B, 18EE7, 18F82, 1901D, 190B7, 19152, 191EC, 19286, 1931F, 193B8, 19451, 194EA, 19582, 1961A, 196B2, 19749, 197E0, 19877, 1990D, 199A4, 19A39, 19ACF, 19B64, 19BF9, 19C8E, 19D22, 19DB6, 19E4A, 19EDD, 19F70, 1A003, 1A095, 1A127, 1A1B9, 1A24A, 1A2DB, 1A36C, 1A3FD, 1A48D, 1A51C, 1A5AC, 1A63B, 1A6CA, 1A758, 1A7E6, 1A874, 1A901, 1A98E, 1AA1B, 1AAA7, 1AB33, 1ABBF, 1AC4A, 1ACD5, 1AD60, 1ADEA, 1AE74, 1AEFD, 1AF86, 1B00F, 1B098, 1B120, 1B1A7, 1B22F, 1B2B6, 1B33C, 1B3C3, 1B449, 1B4CE, 1B553, 1B5D8, 1B65C, 1B6E0, 1B764, 1B7E7, 1B86A, 1B8ED, 1B96F, 1B9F1, 1BA72, 1BAF3, 1BB73, 1BBF4, 1BC73, 1BCF3, 1BD72, 1BDF1, 1BE6F, 1BEED, 1BF6A, 1BFE7, 1C064, 1C0E0, 1C15C, 1C1D7, 1C252, 1C2CD, 1C347, 1C3C1, 1C43B, 1C4B4, 1C52C, 1C5A5, 1C61C, 1C694, 1C70B, 1C781, 1C7F7, 1C86D, 1C8E2, 1C957, 1C9CC, 1CA40, 1CAB3, 1CB27, 1CB99, 1CC0C, 1CC7E, 1CCEF, 1CD60, 1CDD1, 1CE41, 1CEB1, 1CF20, 1CF8F, 1CFFD, 1D06B, 1D0D9, 1D146, 1D1B3, 1D21F, 1D28B, 1D2F6, 1D361, 1D3CC, 1D436, 1D4A0, 1D509, 1D571, 1D5DA, 1D641, 1D6A9, 1D710, 1D776, 1D7DC, 1D842, 1D8A7, 1D90B, 1D970, 1D9D3, 1DA37, 1DA99, 1DAFC, 1DB5E, 1DBBF, 1DC20, 1DC80, 1DCE0, 1DD40, 1DD9F, 1DDFE, 1DE5C, 1DEB9, 1DF17, 1DF73, 1DFD0, 1E02B, 1E087, 1E0E2, 1E13C, 1E196, 1E1EF, 1E248, 1E2A0, 1E2F8, 1E350, 1E3A7, 1E3FD, 1E453, 1E4A9, 1E4FE, 1E552, 1E5A7, 1E5FA, 1E64D, 1E6A0, 1E6F2, 1E743, 1E795, 1E7E5, 1E835, 1E885, 1E8D4, 1E923, 1E971, 1E9BF, 1EA0C, 1EA58, 1EAA5, 1EAF0, 1EB3B, 1EB86, 1EBD0, 1EC1A, 1EC63, 1ECAC, 1ECF4, 1ED3B, 1ED82, 1EDC9, 1EE0F, 1EE55, 1EE9A, 1EEDE, 1EF22, 1EF66, 1EFA9, 1EFEC, 1F02E, 1F06F, 1F0B0, 1F0F0, 1F130, 1F170, 1F1AF, 1F1ED, 1F22B, 1F268, 1F2A5, 1F2E2, 1F31D, 1F359, 1F393, 1F3CE, 1F407, 1F441, 1F479, 1F4B1, 1F4E9, 1F520, 1F557, 1F58D, 1F5C2, 1F5F7, 1F62C, 1F65F, 1F693, 1F6C6, 1F6F8, 1F72A, 1F75B, 1F78C, 1F7BC, 1F7EC, 1F81B, 1F849, 1F877, 1F8A5, 1F8D2, 1F8FE, 1F92A, 1F956, 1F981, 1F9AB, 1F9D5, 1F9FE, 1FA27, 1FA4F, 1FA76, 1FA9E, 1FAC4, 1FAEA, 1FB10, 1FB34, 1FB59, 1FB7D, 1FBA0, 1FBC3, 1FBE5, 1FC07, 1FC28, 1FC48, 1FC68, 1FC88, 1FCA7, 1FCC5, 1FCE3, 1FD00, 1FD1D, 1FD39, 1FD55, 1FD70, 1FD8B, 1FDA5, 1FDBE, 1FDD7, 1FDF0, 1FE08, 1FE1F, 1FE36, 1FE4C, 1FE61, 1FE77, 1FE8B, 1FE9F, 1FEB3, 1FEC5, 1FED8, 1FEEA, 1FEFB, 1FF0C, 1FF1C, 1FF2B, 1FF3A, 1FF49, 1FF57, 1FF64, 1FF71, 1FF7D, 1FF89, 1FF94, 1FF9F, 1FFA9, 1FFB3, 1FFBB, 1FFC4, 1FFCC, 1FFD3, 1FFDA, 1FFE0, 1FFE6, 1FFEB, 1FFEF, 1FFF3, 1FFF7, 1FFFA, 1FFFC, 1FFFE, 1FFFF, 1FFFF;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_5d5677e988a1fc94',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '154762ebb478849028b7ec51074aaa03',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_5d5677e988a1fc94',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 1FFFF, 1FFFF, 1FFFF, 1FFFD, 1FFFB, 1FFF8, 1FFF5, 1FFF1, 1FFED, 1FFE8, 1FFE3, 1FFDD, 1FFD6, 1FFCF, 1FFC8, 1FFC0, 1FFB7, 1FFAE, 1FFA4, 1FF99, 1FF8F, 1FF83, 1FF77, 1FF6A, 1FF5D, 1FF50, 1FF41, 1FF33, 1FF23, 1FF13, 1FF03, 1FEF2, 1FEE0, 1FECE, 1FEBC, 1FEA9, 1FE95, 1FE81, 1FE6C, 1FE56, 1FE40, 1FE2A, 1FE13, 1FDFB, 1FDE3, 1FDCA, 1FDB1, 1FD97, 1FD7D, 1FD62, 1FD47, 1FD2B, 1FD0E, 1FCF1, 1FCD4, 1FCB6, 1FC97, 1FC78, 1FC58, 1FC38, 1FC17, 1FBF5, 1FBD3, 1FBB1, 1FB8E, 1FB6A, 1FB46, 1FB21, 1FAFC, 1FAD7, 1FAB0, 1FA89, 1FA62, 1FA3A, 1FA12, 1F9E9, 1F9BF, 1F995, 1F96B, 1F93F, 1F914, 1F8E8, 1F8BB, 1F88E, 1F860, 1F831, 1F803, 1F7D3, 1F7A3, 1F773, 1F742, 1F710, 1F6DE, 1F6AB, 1F678, 1F645, 1F611, 1F5DC, 1F5A7, 1F571, 1F53A, 1F504, 1F4CC, 1F494, 1F45C, 1F423, 1F3EA, 1F3B0, 1F375, 1F33A, 1F2FF, 1F2C3, 1F286, 1F249, 1F20B, 1F1CD, 1F18E, 1F14F, 1F110, 1F0CF, 1F08F, 1F04D, 1F00C, 1EFC9, 1EF87, 1EF43, 1EEFF, 1EEBB, 1EE76, 1EE31, 1EDEB, 1EDA5, 1ED5E, 1ED16, 1ECCF, 1EC86, 1EC3D, 1EBF4, 1EBAA, 1EB60, 1EB15, 1EAC9, 1EA7D, 1EA31, 1E9E4, 1E997, 1E949, 1E8FA, 1E8AB, 1E85C, 1E80C, 1E7BC, 1E76B, 1E719, 1E6C8, 1E675, 1E622, 1E5CF, 1E57B, 1E527, 1E4D2, 1E47D, 1E427, 1E3D1, 1E37A, 1E323, 1E2CB, 1E273, 1E21A, 1E1C1, 1E167, 1E10D, 1E0B3, 1E058, 1DFFC, 1DFA0, 1DF44, 1DEE7, 1DE89, 1DE2B, 1DDCD, 1DD6E, 1DD0F, 1DCAF, 1DC4F, 1DBEE, 1DB8D, 1DB2B, 1DAC9, 1DA66, 1DA03, 1D9A0, 1D93C, 1D8D8, 1D873, 1D80D, 1D7A8, 1D741, 1D6DB, 1D674, 1D60C, 1D5A4, 1D53B, 1D4D2, 1D469, 1D3FF, 1D395, 1D32A, 1D2BF, 1D253, 1D1E7, 1D17B, 1D10E, 1D0A1, 1D033, 1CFC5, 1CF56, 1CEE7, 1CE77, 1CE07, 1CD97, 1CD26, 1CCB5, 1CC43, 1CBD1, 1CB5E, 1CAEB, 1CA78, 1CA04, 1C990, 1C91B, 1C8A6, 1C830, 1C7BA, 1C744, 1C6CD, 1C656, 1C5DF, 1C567, 1C4EE, 1C475, 1C3FC, 1C382, 1C308, 1C28E, 1C213, 1C198, 1C11C, 1C0A0, 1C024, 1BFA7, 1BF29, 1BEAC, 1BE2E, 1BDAF, 1BD30, 1BCB1, 1BC32, 1BBB2, 1BB31, 1BAB0, 1BA2F, 1B9AE, 1B92C, 1B8A9, 1B827, 1B7A4, 1B720, 1B69C, 1B618, 1B594, 1B50F, 1B489, 1B404, 1B37E, 1B2F7, 1B270, 1B1E9, 1B162, 1B0DA, 1B051, 1AFC9, 1AF40, 1AEB6, 1AE2D, 1ADA3, 1AD18, 1AC8D, 1AC02, 1AB77, 1AAEB, 1AA5F, 1A9D2, 1A945, 1A8B8, 1A82B, 1A79D, 1A70F, 1A680, 1A5F1, 1A562, 1A4D2, 1A442, 1A3B2, 1A322, 1A291, 1A1FF, 1A16E, 1A0DC, 1A04A, 19FB7, 19F24, 19E91, 19DFE, 19D6A, 19CD6, 19C41, 19BAC, 19B17, 19A82, 199EC, 19956, 198C0, 19829, 19792, 196FB, 19663, 195CC, 19534, 1949B, 19402, 19369, 192D0, 19236, 1919C, 19102, 19068, 18FCD, 18F32, 18E97, 18DFB, 18D5F, 18CC3, 18C26, 18B8A, 18AED, 18A4F, 189B2, 18914, 18876, 187D7, 18739, 1869A, 185FB, 1855B, 184BC, 1841C, 1837B, 182DB, 1823A, 18199, 180F8, 18056, 17FB5, 17F13, 17E70, 17DCE, 17D2B, 17C88, 17BE5, 17B42, 17A9E, 179FA, 17956, 178B1, 1780D, 17768, 176C3, 1761D, 17578, 174D2, 1742C, 17386, 172DF, 17239, 17192, 170EB, 17043, 16F9C, 16EF4, 16E4C, 16DA4, 16CFC, 16C53, 16BAA, 16B01, 16A58, 169AF, 16905, 1685B, 167B1, 16707, 1665D, 165B2, 16507, 1645C, 163B1, 16306, 1625A, 161AF, 16103, 16057, 15FAA, 15EFE, 15E51, 15DA5, 15CF8, 15C4B, 15B9D, 15AF0, 15A42, 15994, 158E6, 15838, 1578A, 156DC, 1562D, 1557E, 154CF, 15420, 15371, 152C2, 15212, 15163, 150B3, 15003, 14F53, 14EA2, 14DF2, 14D42, 14C91, 14BE0, 14B2F, 14A7E, 149CD, 1491C, 1486A, 147B9, 14707, 14655, 145A3, 144F1, 1443F, 1438D, 142DA, 14228, 14175, 140C2, 1400F, 13F5C, 13EA9, 13DF6, 13D43, 13C8F, 13BDC, 13B28, 13A75, 139C1, 1390D, 13859, 137A5, 136F1, 1363D, 13588, 134D4, 1341F, 1336B, 132B6, 13201, 1314C, 13097, 12FE2, 12F2D, 12E78, 12DC3, 12D0E, 12C58, 12BA3, 12AED, 12A38, 12982, 128CC, 12817, 12761, 126AB, 125F5, 1253F, 12489, 123D3, 1231D, 12267, 121B1, 120FA, 12044, 11F8E, 11ED7, 11E21, 11D6A, 11CB4, 11BFD, 11B47, 11A90, 119D9, 11923, 1186C, 117B5, 116FF, 11648, 11591, 114DA, 11423, 1136C, 112B6, 111FF, 11148, 11091, 10FDA, 10F23, 10E6C, 10DB5, 10CFE, 10C47, 10B90, 10AD9, 10A22, 1096B, 108B4, 107FD, 10746, 10690, 105D9, 10522, 1046B, 103B4, 102FD, 10246, 1018F, 100D8, 10022, FF6B, FEB4, FDFD, FD47, FC90, FBD9, FB23, FA6C, F9B6, F8FF, F849, F792, F6DC, F625, F56F, F4B9, F402, F34C, F296, F1E0, F12A, F074, EFBE, EF08, EE52, ED9C, ECE7, EC31, EB7B, EAC6, EA10, E95B, E8A6, E7F0, E73B, E686, E5D1, E51C, E467, E3B2, E2FD, E248, E194, E0DF, E02B, DF76, DEC2, DE0E, DD5A, DCA6, DBF2, DB3E, DA8A, D9D6, D923, D86F, D7BC, D709, D655, D5A2, D4EF, D43C, D38A, D2D7, D224, D172, D0BF, D00D, CF5B, CEA9, CDF7, CD45, CC94, CBE2, CB31, CA7F, C9CE, C91D, C86C, C7BB, C70B, C65A, C5A9, C4F9, C449, C399, C2E9, C239, C18A, C0DA, C02B, BF7B, BECC, BE1D, BD6F, BCC0, BC11, BB63, BAB5, BA07, B959, B8AB, B7FD, B750, B6A3, B5F6, B549, B49C, B3EF, B343, B296, B1EA, B13E, B092, AFE6, AF3B, AE8F, ADE4, AD39, AC8E, ABE4, AB39, AA8F, A9E5, A93B, A891, A7E7, A73E, A695, A5EC, A543, A49A, A3F1, A349, A2A1, A1F9, A151, A0AA, A002, 9F5B, 9EB4, 9E0D, 9D67, 9CC0, 9C1A, 9B74, 9ACE, 9A28, 9983, 98DE, 9839, 9794, 96EF, 964B, 95A7, 9503, 945F, 93BB, 9318, 9275, 91D2, 912F, 908D, 8FEB, 8F48, 8EA7, 8E05, 8D64, 8CC2, 8C21, 8B81, 8AE0, 8A40, 89A0, 8900, 8860, 87C1, 8722, 8683, 85E4, 8546, 84A8, 840A, 836C, 82CE, 8231, 8194, 80F7, 805B, 7FBE, 7F22, 7E86, 7DEB, 7D4F, 7CB4, 7C19, 7B7F, 7AE4, 7A4A, 79B0, 7916, 787D, 77E4, 774B, 76B2, 761A, 7582, 74EA, 7452, 73BB, 7324, 728D, 71F6, 7160, 70CA, 7034, 6F9E, 6F09, 6E74, 6DDF, 6D4B, 6CB6, 6C22, 6B8F, 6AFB, 6A68, 69D5, 6942, 68B0, 681E, 678C, 66FB, 6669, 65D8, 6547, 64B7, 6427, 6397, 6307, 6278, 61E9, 615A, 60CB, 603D, 5FAF, 5F21, 5E94, 5E07, 5D7A, 5CED, 5C61, 5BD5, 5B49, 5ABE, 5A32, 59A8, 591D, 5893, 5809, 577F, 56F5, 566C, 55E3, 555B, 54D3, 544B, 53C3, 533B, 52B4, 522E, 51A7, 5121, 509B, 5015, 4F90, 4F0B, 4E86, 4E02, 4D7D, 4CFA, 4C76, 4BF3, 4B70, 4AED, 4A6B, 49E9, 4967, 48E6, 4864, 47E4, 4763, 46E3, 4663, 45E3, 4564, 44E5, 4466, 43E8, 436A, 42EC, 426F, 41F1, 4174, 40F8, 407C, 4000, 3F84, 3F09, 3E8E, 3E13, 3D99, 3D1F, 3CA5, 3C2C, 3BB2, 3B3A, 3AC1, 3A49, 39D1, 3959, 38E2, 386B, 37F5, 377E, 3708, 3693, 361D, 35A8, 3534, 34BF, 344B, 33D7, 3364, 32F1, 327E, 320C, 3199, 3128, 30B6, 3045, 2FD4, 2F63, 2EF3, 2E83, 2E14, 2DA4, 2D35, 2CC7, 2C58, 2BEA, 2B7D, 2B0F, 2AA2, 2A36, 29C9, 295D, 28F1, 2886, 281B, 27B0, 2746, 26DC, 2672, 2608, 259F, 2536, 24CE, 2466, 23FE, 2396, 232F, 22C8, 2262, 21FC, 2196, 2130, 20CB, 2066, 2001, 1F9D, 1F39, 1ED6, 1E72, 1E0F, 1DAD, 1D4A, 1CE8, 1C87, 1C25, 1BC4, 1B64, 1B03, 1AA3, 1A44, 19E4, 1985, 1927, 18C8, 186A, 180C, 17AF, 1752, 16F5, 1699, 163D, 15E1, 1585, 152A, 14D0, 1475, 141B, 13C1, 1368, 130E, 12B6, 125D, 1205, 11AD, 1156, 10FE, 10A7, 1051, FFB, FA5, F4F, EFA, EA5, E50, DFC, DA8, D55, D01, CAE, C5C, C09, BB7, B66, B14, AC3, A72, A22, 9D2, 982, 933, 8E4, 895, 847, 7F8, 7AB, 75D, 710, 6C3, 677, 62A, 5DE, 593, 548, 4FD, 4B2, 468, 41E, 3D4, 38B, 342, 2F9, 2B1, 269, 221, 1DA, 193, 14C, 105, BF, 79, 34;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_f419e81fef8db9fa',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '1b126f27e81c2566b4cee63adc6a4238',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_f419e81fef8db9fa',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFEF, 3FFAA, 3FF65, 3FF21, 3FEDD, 3FE99, 3FE56, 3FE13, 3FDD1, 3FD8E, 3FD4C, 3FD0A, 3FCC9, 3FC88, 3FC47, 3FC07, 3FBC6, 3FB86, 3FB47, 3FB08, 3FAC9, 3FA8A, 3FA4C, 3FA0E, 3F9D0, 3F993, 3F956, 3F919, 3F8DC, 3F8A0, 3F864, 3F829, 3F7ED, 3F7B3, 3F778, 3F73E, 3F704, 3F6CA, 3F690, 3F657, 3F61E, 3F5E6, 3F5AE, 3F576, 3F53E, 3F507, 3F4D0, 3F499, 3F463, 3F42D, 3F3F7, 3F3C1, 3F38C, 3F357, 3F323, 3F2EE, 3F2BA, 3F286, 3F253, 3F220, 3F1ED, 3F1BA, 3F188, 3F156, 3F125, 3F0F3, 3F0C2, 3F091, 3F061, 3F030, 3F001, 3EFD1, 3EFA2, 3EF72, 3EF44, 3EF15, 3EEE7, 3EEB9, 3EE8B, 3EE5E, 3EE31, 3EE04, 3EDD8, 3EDAB, 3ED80, 3ED54, 3ED29, 3ECFD, 3ECD3, 3ECA8, 3EC7E, 3EC54, 3EC2A, 3EC01, 3EBD8, 3EBAF, 3EB86, 3EB5E, 3EB36, 3EB0E, 3EAE7, 3EABF, 3EA99, 3EA72, 3EA4B, 3EA25, 3E9FF, 3E9DA, 3E9B5, 3E990, 3E96B, 3E946, 3E922, 3E8FE, 3E8DA, 3E8B7, 3E894, 3E871, 3E84E, 3E82C, 3E80A, 3E7E8, 3E7C6, 3E7A5, 3E784, 3E763, 3E743, 3E722, 3E702, 3E6E3, 3E6C3, 3E6A4, 3E685, 3E666, 3E648, 3E629, 3E60B, 3E5EE, 3E5D0, 3E5B3, 3E596, 3E579, 3E55D, 3E541, 3E525, 3E509, 3E4EE, 3E4D2, 3E4B7, 3E49D, 3E482, 3E468, 3E44E, 3E434, 3E41B, 3E401, 3E3E8, 3E3CF, 3E3B7, 3E39F, 3E387, 3E36F, 3E357, 3E340, 3E329, 3E312, 3E2FB, 3E2E5, 3E2CF, 3E2B9, 3E2A3, 3E28D, 3E278, 3E263, 3E24E, 3E23A, 3E225, 3E211, 3E1FD, 3E1EA, 3E1D6, 3E1C3, 3E1B0, 3E19D, 3E18B, 3E178, 3E166, 3E155, 3E143, 3E131, 3E120, 3E10F, 3E0FE, 3E0EE, 3E0DE, 3E0CD, 3E0BE, 3E0AE, 3E09E, 3E08F, 3E080, 3E071, 3E063, 3E054, 3E046, 3E038, 3E02A, 3E01C, 3E00F, 3E002, 3DFF5, 3DFE8, 3DFDC, 3DFCF, 3DFC3, 3DFB7, 3DFAB, 3DFA0, 3DF94, 3DF89, 3DF7E, 3DF74, 3DF69, 3DF5F, 3DF54, 3DF4A, 3DF41, 3DF37, 3DF2E, 3DF24, 3DF1B, 3DF13, 3DF0A, 3DF01, 3DEF9, 3DEF1, 3DEE9, 3DEE2, 3DEDA, 3DED3, 3DECC, 3DEC5, 3DEBE, 3DEB7, 3DEB1, 3DEAB, 3DEA5, 3DE9F, 3DE99, 3DE93, 3DE8E, 3DE89, 3DE84, 3DE7F, 3DE7A, 3DE76, 3DE72, 3DE6E, 3DE6A, 3DE66, 3DE62, 3DE5F, 3DE5B, 3DE58, 3DE55, 3DE53, 3DE50, 3DE4E, 3DE4B, 3DE49, 3DE47, 3DE45, 3DE44, 3DE42, 3DE41, 3DE40, 3DE3F, 3DE3E, 3DE3D, 3DE3D, 3DE3C, 3DE3C, 3DE3C, 3DE3C, 3DE3D, 3DE3D, 3DE3D, 3DE3E, 3DE3F, 3DE40, 3DE41, 3DE42, 3DE44, 3DE45, 3DE47, 3DE49, 3DE4B, 3DE4D, 3DE50, 3DE52, 3DE55, 3DE57, 3DE5A, 3DE5D, 3DE60, 3DE64, 3DE67, 3DE6B, 3DE6E, 3DE72, 3DE76, 3DE7A, 3DE7E, 3DE83, 3DE87, 3DE8C, 3DE91, 3DE96, 3DE9B, 3DEA0, 3DEA5, 3DEAA, 3DEB0, 3DEB5, 3DEBB, 3DEC1, 3DEC7, 3DECD, 3DED4, 3DEDA, 3DEE0, 3DEE7, 3DEEE, 3DEF5, 3DEFC, 3DF03, 3DF0A, 3DF11, 3DF19, 3DF20, 3DF28, 3DF30, 3DF37, 3DF3F, 3DF48, 3DF50, 3DF58, 3DF60, 3DF69, 3DF72, 3DF7A, 3DF83, 3DF8C, 3DF95, 3DF9E, 3DFA8, 3DFB1, 3DFBB, 3DFC4, 3DFCE, 3DFD8, 3DFE1, 3DFEB, 3DFF5, 3E000, 3E00A, 3E014, 3E01F, 3E029, 3E034, 3E03F, 3E049, 3E054, 3E05F, 3E06A, 3E076, 3E081, 3E08C, 3E098, 3E0A3, 3E0AF, 3E0BB, 3E0C6, 3E0D2, 3E0DE, 3E0EA, 3E0F6, 3E103, 3E10F, 3E11B, 3E128, 3E134, 3E141, 3E14D, 3E15A, 3E167, 3E174, 3E181, 3E18E, 3E19B, 3E1A8, 3E1B6, 3E1C3, 3E1D0, 3E1DE, 3E1EB, 3E1F9, 3E207, 3E214, 3E222, 3E230, 3E23E, 3E24C, 3E25A, 3E268, 3E277, 3E285, 3E293, 3E2A2, 3E2B0, 3E2BF, 3E2CD, 3E2DC, 3E2EB, 3E2FA, 3E308, 3E317, 3E326, 3E335, 3E344, 3E353, 3E363, 3E372, 3E381, 3E390, 3E3A0, 3E3AF, 3E3BF, 3E3CE, 3E3DE, 3E3ED, 3E3FD, 3E40D, 3E41D, 3E42C, 3E43C, 3E44C, 3E45C, 3E46C, 3E47C, 3E48C, 3E49C, 3E4AD, 3E4BD, 3E4CD, 3E4DD, 3E4EE, 3E4FE, 3E50F, 3E51F, 3E52F, 3E540, 3E551, 3E561, 3E572, 3E583, 3E593, 3E5A4, 3E5B5, 3E5C6, 3E5D6, 3E5E7, 3E5F8, 3E609, 3E61A, 3E62B, 3E63C, 3E64D, 3E65E, 3E66F, 3E681, 3E692, 3E6A3, 3E6B4, 3E6C5, 3E6D7, 3E6E8, 3E6F9, 3E70B, 3E71C, 3E72D, 3E73F, 3E750, 3E762, 3E773, 3E785, 3E796, 3E7A8, 3E7B9, 3E7CB, 3E7DC, 3E7EE, 3E800, 3E811, 3E823, 3E835, 3E846, 3E858, 3E86A, 3E87B, 3E88D, 3E89F, 3E8B1, 3E8C2, 3E8D4, 3E8E6, 3E8F8, 3E90A, 3E91B, 3E92D, 3E93F, 3E951, 3E963, 3E975, 3E987, 3E998, 3E9AA, 3E9BC, 3E9CE, 3E9E0, 3E9F2, 3EA04, 3EA16, 3EA28, 3EA3A, 3EA4B, 3EA5D, 3EA6F, 3EA81, 3EA93, 3EAA5, 3EAB7, 3EAC9, 3EADB, 3EAED, 3EAFF, 3EB11, 3EB23, 3EB34, 3EB46, 3EB58, 3EB6A, 3EB7C, 3EB8E, 3EBA0, 3EBB2, 3EBC4, 3EBD6, 3EBE7, 3EBF9, 3EC0B, 3EC1D, 3EC2F, 3EC41, 3EC52, 3EC64, 3EC76, 3EC88, 3EC9A, 3ECAB, 3ECBD, 3ECCF, 3ECE1, 3ECF2, 3ED04, 3ED16, 3ED27, 3ED39, 3ED4B, 3ED5C, 3ED6E, 3ED80, 3ED91, 3EDA3, 3EDB5, 3EDC6, 3EDD8, 3EDE9, 3EDFB, 3EE0C, 3EE1E, 3EE2F, 3EE41, 3EE52, 3EE63, 3EE75, 3EE86, 3EE98, 3EEA9, 3EEBA, 3EECB, 3EEDD, 3EEEE, 3EEFF, 3EF10, 3EF22, 3EF33, 3EF44, 3EF55, 3EF66, 3EF77, 3EF88, 3EF99, 3EFAA, 3EFBB, 3EFCC, 3EFDD, 3EFEE, 3EFFF, 3F010, 3F021, 3F032, 3F042, 3F053, 3F064, 3F075, 3F085, 3F096, 3F0A7, 3F0B7, 3F0C8, 3F0D8, 3F0E9, 3F0F9, 3F10A, 3F11A, 3F12B, 3F13B, 3F14B, 3F15C, 3F16C, 3F17C, 3F18D, 3F19D, 3F1AD, 3F1BD, 3F1CD, 3F1DD, 3F1ED, 3F1FD, 3F20D, 3F21D, 3F22D, 3F23D, 3F24D, 3F25D, 3F26D, 3F27C, 3F28C, 3F29C, 3F2AC, 3F2BB, 3F2CB, 3F2DA, 3F2EA, 3F2F9, 3F309, 3F318, 3F328, 3F337, 3F347, 3F356, 3F365, 3F374, 3F384, 3F393, 3F3A2, 3F3B1, 3F3C0, 3F3CF, 3F3DE, 3F3ED, 3F3FC, 3F40B, 3F41A, 3F428, 3F437, 3F446, 3F455, 3F463, 3F472, 3F480, 3F48F, 3F49E, 3F4AC, 3F4BA, 3F4C9, 3F4D7, 3F4E6, 3F4F4, 3F502, 3F510, 3F51F, 3F52D, 3F53B, 3F549, 3F557, 3F565, 3F573, 3F581, 3F58F, 3F59C, 3F5AA, 3F5B8, 3F5C6, 3F5D3, 3F5E1, 3F5EF, 3F5FC, 3F60A, 3F617, 3F625, 3F632, 3F63F, 3F64D, 3F65A, 3F667, 3F675, 3F682, 3F68F, 3F69C, 3F6A9, 3F6B6, 3F6C3, 3F6D0, 3F6DD, 3F6EA, 3F6F6, 3F703, 3F710, 3F71D, 3F729, 3F736, 3F743, 3F74F, 3F75C, 3F768, 3F775, 3F781, 3F78D, 3F79A, 3F7A6, 3F7B2, 3F7BE, 3F7CA, 3F7D6, 3F7E3, 3F7EF, 3F7FB, 3F806, 3F812, 3F81E, 3F82A, 3F836, 3F842, 3F84D, 3F859, 3F865, 3F870, 3F87C, 3F887, 3F893, 3F89E, 3F8AA, 3F8B5, 3F8C0, 3F8CC, 3F8D7, 3F8E2, 3F8ED, 3F8F8, 3F903, 3F90E, 3F919, 3F924, 3F92F, 3F93A, 3F945, 3F950, 3F95B, 3F965, 3F970, 3F97B, 3F985, 3F990, 3F99A, 3F9A5, 3F9AF, 3F9BA, 3F9C4, 3F9CF, 3F9D9, 3F9E3, 3F9ED, 3F9F8, 3FA02, 3FA0C, 3FA16, 3FA20, 3FA2A, 3FA34, 3FA3E, 3FA48, 3FA52, 3FA5B, 3FA65, 3FA6F, 3FA79, 3FA82, 3FA8C, 3FA96, 3FA9F, 3FAA9, 3FAB2, 3FABC, 3FAC5, 3FACE, 3FAD8, 3FAE1, 3FAEA, 3FAF4, 3FAFD, 3FB06, 3FB0F, 3FB18, 3FB21, 3FB2A, 3FB33, 3FB3C, 3FB45, 3FB4E, 3FB57, 3FB60, 3FB69, 3FB71, 3FB7A, 3FB83, 3FB8C, 3FB94, 3FB9D, 3FBA5, 3FBAE, 3FBB6, 3FBBF, 3FBC7, 3FBD0, 3FBD8, 3FBE0, 3FBE9, 3FBF1, 3FBF9, 3FC01, 3FC09, 3FC12, 3FC1A, 3FC22, 3FC2A, 3FC32, 3FC3A, 3FC42, 3FC4A, 3FC52, 3FC59, 3FC61, 3FC69, 3FC71, 3FC79, 3FC80, 3FC88, 3FC90, 3FC97, 3FC9F, 3FCA6, 3FCAE, 3FCB5, 3FCBD, 3FCC4, 3FCCC, 3FCD3, 3FCDB, 3FCE2, 3FCE9, 3FCF1, 3FCF8, 3FCFF, 3FD06, 3FD0D, 3FD15, 3FD1C, 3FD23, 3FD2A, 3FD31, 3FD38, 3FD3F, 3FD46, 3FD4D, 3FD54, 3FD5B, 3FD61, 3FD68, 3FD6F, 3FD76, 3FD7D, 3FD83, 3FD8A, 3FD91, 3FD97, 3FD9E, 3FDA5, 3FDAB, 3FDB2, 3FDB8, 3FDBF, 3FDC6, 3FDCC, 3FDD2, 3FDD9, 3FDDF, 3FDE6, 3FDEC, 3FDF2, 3FDF9, 3FDFF, 3FE05, 3FE0C, 3FE12, 3FE18, 3FE1E, 3FE25, 3FE2B, 3FE31, 3FE37, 3FE3D, 3FE43, 3FE49, 3FE4F, 3FE55, 3FE5B, 3FE61, 3FE67, 3FE6D, 3FE73, 3FE79, 3FE7F, 3FE85, 3FE8B, 3FE91, 3FE97, 3FE9C, 3FEA2, 3FEA8, 3FEAE, 3FEB4, 3FEB9, 3FEBF, 3FEC5, 3FECB, 3FED0, 3FED6, 3FEDC, 3FEE1, 3FEE7, 3FEEC, 3FEF2, 3FEF8, 3FEFD, 3FF03, 3FF08, 3FF0E, 3FF13, 3FF19, 3FF1E, 3FF24, 3FF29, 3FF2F, 3FF34, 3FF3A, 3FF3F, 3FF44, 3FF4A, 3FF4F, 3FF55, 3FF5A, 3FF5F, 3FF65, 3FF6A, 3FF6F, 3FF75, 3FF7A, 3FF7F, 3FF85, 3FF8A, 3FF8F, 3FF94, 3FF9A, 3FF9F, 3FFA4, 3FFA9, 3FFAF, 3FFB4, 3FFB9, 3FFBE, 3FFC3, 3FFC9, 3FFCE, 3FFD3, 3FFD8, 3FFDD, 3FFE2, 3FFE8, 3FFED, 3FFF2, 3FFF7, 3FFFC;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_79609f4d77ef4f9a',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '7aeaa2ce48a7b22691ae3eb24c7158c6',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_79609f4d77ef4f9a',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFFE, 3FFF9, 3FFF4, 3FFEF, 3FFEA, 3FFE5, 3FFE0, 3FFDA, 3FFD5, 3FFD0, 3FFCB, 3FFC6, 3FFC1, 3FFBB, 3FFB6, 3FFB1, 3FFAC, 3FFA6, 3FFA1, 3FF9C, 3FF97, 3FF91, 3FF8C, 3FF87, 3FF82, 3FF7C, 3FF77, 3FF72, 3FF6C, 3FF67, 3FF62, 3FF5C, 3FF57, 3FF52, 3FF4C, 3FF47, 3FF41, 3FF3C, 3FF37, 3FF31, 3FF2C, 3FF26, 3FF21, 3FF1B, 3FF16, 3FF10, 3FF0B, 3FF05, 3FF00, 3FEFA, 3FEF4, 3FEEF, 3FEE9, 3FEE4, 3FEDE, 3FED8, 3FED3, 3FECD, 3FEC7, 3FEC2, 3FEBC, 3FEB6, 3FEB0, 3FEAB, 3FEA5, 3FE9F, 3FE99, 3FE93, 3FE8D, 3FE88, 3FE82, 3FE7C, 3FE76, 3FE70, 3FE6A, 3FE64, 3FE5E, 3FE58, 3FE52, 3FE4C, 3FE46, 3FE40, 3FE3A, 3FE34, 3FE2D, 3FE27, 3FE21, 3FE1B, 3FE15, 3FE0E, 3FE08, 3FE02, 3FDFC, 3FDF5, 3FDEF, 3FDE8, 3FDE2, 3FDDC, 3FDD5, 3FDCF, 3FDC8, 3FDC2, 3FDBB, 3FDB5, 3FDAE, 3FDA8, 3FDA1, 3FD9A, 3FD94, 3FD8D, 3FD86, 3FD80, 3FD79, 3FD72, 3FD6B, 3FD64, 3FD5E, 3FD57, 3FD50, 3FD49, 3FD42, 3FD3B, 3FD34, 3FD2D, 3FD26, 3FD1F, 3FD18, 3FD10, 3FD09, 3FD02, 3FCFB, 3FCF4, 3FCEC, 3FCE5, 3FCDE, 3FCD6, 3FCCF, 3FCC8, 3FCC0, 3FCB9, 3FCB1, 3FCAA, 3FCA2, 3FC9B, 3FC93, 3FC8B, 3FC84, 3FC7C, 3FC74, 3FC6C, 3FC65, 3FC5D, 3FC55, 3FC4D, 3FC45, 3FC3D, 3FC35, 3FC2D, 3FC25, 3FC1D, 3FC15, 3FC0D, 3FC05, 3FBFD, 3FBF4, 3FBEC, 3FBE4, 3FBDB, 3FBD3, 3FBCB, 3FBC2, 3FBBA, 3FBB1, 3FBA9, 3FBA0, 3FB98, 3FB8F, 3FB87, 3FB7E, 3FB75, 3FB6C, 3FB64, 3FB5B, 3FB52, 3FB49, 3FB40, 3FB37, 3FB2E, 3FB25, 3FB1C, 3FB13, 3FB0A, 3FB01, 3FAF8, 3FAEE, 3FAE5, 3FADC, 3FAD2, 3FAC9, 3FAC0, 3FAB6, 3FAAD, 3FAA3, 3FA9A, 3FA90, 3FA86, 3FA7D, 3FA73, 3FA69, 3FA60, 3FA56, 3FA4C, 3FA42, 3FA38, 3FA2E, 3FA24, 3FA1A, 3FA10, 3FA06, 3F9FC, 3F9F2, 3F9E7, 3F9DD, 3F9D3, 3F9C8, 3F9BE, 3F9B4, 3F9A9, 3F99F, 3F994, 3F98A, 3F97F, 3F974, 3F96A, 3F95F, 3F954, 3F949, 3F93F, 3F934, 3F929, 3F91E, 3F913, 3F908, 3F8FD, 3F8F2, 3F8E7, 3F8DB, 3F8D0, 3F8C5, 3F8BA, 3F8AE, 3F8A3, 3F897, 3F88C, 3F881, 3F875, 3F869, 3F85E, 3F852, 3F846, 3F83B, 3F82F, 3F823, 3F817, 3F80B, 3F7FF, 3F7F3, 3F7E7, 3F7DB, 3F7CF, 3F7C3, 3F7B7, 3F7AB, 3F79F, 3F792, 3F786, 3F77A, 3F76D, 3F761, 3F754, 3F748, 3F73B, 3F72F, 3F722, 3F715, 3F709, 3F6FC, 3F6EF, 3F6E2, 3F6D5, 3F6C8, 3F6BB, 3F6AE, 3F6A1, 3F694, 3F687, 3F67A, 3F66D, 3F65F, 3F652, 3F645, 3F638, 3F62A, 3F61D, 3F60F, 3F602, 3F5F4, 3F5E7, 3F5D9, 3F5CB, 3F5BE, 3F5B0, 3F5A2, 3F594, 3F586, 3F578, 3F56B, 3F55D, 3F54F, 3F540, 3F532, 3F524, 3F516, 3F508, 3F4FA, 3F4EB, 3F4DD, 3F4CF, 3F4C0, 3F4B2, 3F4A3, 3F495, 3F486, 3F478, 3F469, 3F45B, 3F44C, 3F43D, 3F42E, 3F420, 3F411, 3F402, 3F3F3, 3F3E4, 3F3D5, 3F3C6, 3F3B7, 3F3A8, 3F399, 3F38A, 3F37A, 3F36B, 3F35C, 3F34D, 3F33D, 3F32E, 3F31F, 3F30F, 3F300, 3F2F0, 3F2E1, 3F2D1, 3F2C2, 3F2B2, 3F2A2, 3F293, 3F283, 3F273, 3F263, 3F253, 3F244, 3F234, 3F224, 3F214, 3F204, 3F1F4, 3F1E4, 3F1D4, 3F1C4, 3F1B3, 3F1A3, 3F193, 3F183, 3F173, 3F162, 3F152, 3F142, 3F131, 3F121, 3F110, 3F100, 3F0EF, 3F0DF, 3F0CE, 3F0BE, 3F0AD, 3F09D, 3F08C, 3F07B, 3F06B, 3F05A, 3F049, 3F038, 3F028, 3F017, 3F006, 3EFF5, 3EFE4, 3EFD3, 3EFC2, 3EFB1, 3EFA0, 3EF8F, 3EF7E, 3EF6D, 3EF5C, 3EF4B, 3EF3A, 3EF28, 3EF17, 3EF06, 3EEF5, 3EEE4, 3EED2, 3EEC1, 3EEB0, 3EE9E, 3EE8D, 3EE7C, 3EE6A, 3EE59, 3EE47, 3EE36, 3EE25, 3EE13, 3EE02, 3EDF0, 3EDDF, 3EDCD, 3EDBB, 3EDAA, 3ED98, 3ED87, 3ED75, 3ED63, 3ED52, 3ED40, 3ED2E, 3ED1D, 3ED0B, 3ECF9, 3ECE8, 3ECD6, 3ECC4, 3ECB2, 3ECA1, 3EC8F, 3EC7D, 3EC6B, 3EC59, 3EC48, 3EC36, 3EC24, 3EC12, 3EC00, 3EBEE, 3EBDD, 3EBCB, 3EBB9, 3EBA7, 3EB95, 3EB83, 3EB71, 3EB5F, 3EB4D, 3EB3C, 3EB2A, 3EB18, 3EB06, 3EAF4, 3EAE2, 3EAD0, 3EABE, 3EAAC, 3EA9A, 3EA88, 3EA76, 3EA64, 3EA52, 3EA41, 3EA2F, 3EA1D, 3EA0B, 3E9F9, 3E9E7, 3E9D5, 3E9C3, 3E9B1, 3E99F, 3E98E, 3E97C, 3E96A, 3E958, 3E946, 3E934, 3E922, 3E911, 3E8FF, 3E8ED, 3E8DB, 3E8C9, 3E8B8, 3E8A6, 3E894, 3E882, 3E871, 3E85F, 3E84D, 3E83B, 3E82A, 3E818, 3E806, 3E7F5, 3E7E3, 3E7D2, 3E7C0, 3E7AE, 3E79D, 3E78B, 3E77A, 3E768, 3E757, 3E745, 3E734, 3E723, 3E711, 3E700, 3E6EF, 3E6DD, 3E6CC, 3E6BB, 3E6AA, 3E698, 3E687, 3E676, 3E665, 3E654, 3E643, 3E632, 3E621, 3E610, 3E5FF, 3E5EE, 3E5DD, 3E5CC, 3E5BB, 3E5AA, 3E59A, 3E589, 3E578, 3E568, 3E557, 3E546, 3E536, 3E525, 3E515, 3E504, 3E4F4, 3E4E4, 3E4D3, 3E4C3, 3E4B3, 3E4A3, 3E492, 3E482, 3E472, 3E462, 3E452, 3E442, 3E432, 3E423, 3E413, 3E403, 3E3F3, 3E3E4, 3E3D4, 3E3C4, 3E3B5, 3E3A6, 3E396, 3E387, 3E377, 3E368, 3E359, 3E34A, 3E33B, 3E32C, 3E31D, 3E30E, 3E2FF, 3E2F0, 3E2E1, 3E2D3, 3E2C4, 3E2B6, 3E2A7, 3E299, 3E28A, 3E27C, 3E26E, 3E260, 3E251, 3E243, 3E235, 3E227, 3E21A, 3E20C, 3E1FE, 3E1F0, 3E1E3, 3E1D5, 3E1C8, 3E1BA, 3E1AD, 3E1A0, 3E193, 3E186, 3E179, 3E16C, 3E15F, 3E152, 3E145, 3E139, 3E12C, 3E120, 3E113, 3E107, 3E0FB, 3E0EE, 3E0E2, 3E0D6, 3E0CA, 3E0BF, 3E0B3, 3E0A7, 3E09C, 3E090, 3E085, 3E07A, 3E06E, 3E063, 3E058, 3E04D, 3E042, 3E038, 3E02D, 3E022, 3E018, 3E00D, 3E003, 3DFF9, 3DFEF, 3DFE5, 3DFDB, 3DFD1, 3DFC7, 3DFBE, 3DFB4, 3DFAB, 3DFA1, 3DF98, 3DF8F, 3DF86, 3DF7D, 3DF74, 3DF6C, 3DF63, 3DF5B, 3DF52, 3DF4A, 3DF42, 3DF3A, 3DF32, 3DF2A, 3DF22, 3DF1B, 3DF13, 3DF0C, 3DF05, 3DEFE, 3DEF7, 3DEF0, 3DEE9, 3DEE2, 3DEDC, 3DED5, 3DECF, 3DEC9, 3DEC3, 3DEBD, 3DEB7, 3DEB1, 3DEAC, 3DEA6, 3DEA1, 3DE9C, 3DE97, 3DE92, 3DE8D, 3DE88, 3DE84, 3DE7F, 3DE7B, 3DE77, 3DE73, 3DE6F, 3DE6B, 3DE68, 3DE64, 3DE61, 3DE5E, 3DE5A, 3DE58, 3DE55, 3DE52, 3DE50, 3DE4D, 3DE4B, 3DE49, 3DE47, 3DE45, 3DE44, 3DE42, 3DE41, 3DE3F, 3DE3E, 3DE3E, 3DE3D, 3DE3C, 3DE3C, 3DE3B, 3DE3B, 3DE3B, 3DE3B, 3DE3C, 3DE3C, 3DE3D, 3DE3D, 3DE3E, 3DE40, 3DE41, 3DE42, 3DE44, 3DE45, 3DE47, 3DE49, 3DE4C, 3DE4E, 3DE51, 3DE53, 3DE56, 3DE59, 3DE5C, 3DE60, 3DE63, 3DE67, 3DE6B, 3DE6F, 3DE73, 3DE78, 3DE7C, 3DE81, 3DE86, 3DE8B, 3DE90, 3DE96, 3DE9B, 3DEA1, 3DEA7, 3DEAD, 3DEB3, 3DEBA, 3DEC1, 3DEC8, 3DECF, 3DED6, 3DEDD, 3DEE5, 3DEED, 3DEF5, 3DEFD, 3DF05, 3DF0E, 3DF17, 3DF20, 3DF29, 3DF32, 3DF3C, 3DF45, 3DF4F, 3DF59, 3DF63, 3DF6E, 3DF79, 3DF84, 3DF8F, 3DF9A, 3DFA5, 3DFB1, 3DFBD, 3DFC9, 3DFD5, 3DFE2, 3DFEE, 3DFFB, 3E008, 3E016, 3E023, 3E031, 3E03F, 3E04D, 3E05B, 3E06A, 3E079, 3E088, 3E097, 3E0A6, 3E0B6, 3E0C6, 3E0D6, 3E0E6, 3E0F6, 3E107, 3E118, 3E129, 3E13A, 3E14C, 3E15E, 3E170, 3E182, 3E194, 3E1A7, 3E1BA, 3E1CD, 3E1E0, 3E1F4, 3E208, 3E21C, 3E230, 3E244, 3E259, 3E26E, 3E283, 3E299, 3E2AE, 3E2C4, 3E2DA, 3E2F1, 3E307, 3E31E, 3E335, 3E34C, 3E364, 3E37B, 3E393, 3E3AC, 3E3C4, 3E3DD, 3E3F6, 3E40F, 3E428, 3E442, 3E45C, 3E476, 3E490, 3E4AB, 3E4C6, 3E4E1, 3E4FC, 3E518, 3E534, 3E550, 3E56C, 3E589, 3E5A6, 3E5C3, 3E5E0, 3E5FE, 3E61C, 3E63A, 3E658, 3E677, 3E696, 3E6B5, 3E6D4, 3E6F4, 3E714, 3E734, 3E754, 3E775, 3E796, 3E7B7, 3E7D9, 3E7FA, 3E81C, 3E83F, 3E861, 3E884, 3E8A7, 3E8CA, 3E8EE, 3E912, 3E936, 3E95A, 3E97F, 3E9A4, 3E9C9, 3E9EE, 3EA14, 3EA3A, 3EA60, 3EA87, 3EAAE, 3EAD5, 3EAFC, 3EB24, 3EB4C, 3EB74, 3EB9D, 3EBC5, 3EBEE, 3EC18, 3EC41, 3EC6B, 3EC95, 3ECC0, 3ECEA, 3ED15, 3ED40, 3ED6C, 3ED98, 3EDC4, 3EDF0, 3EE1D, 3EE4A, 3EE77, 3EEA5, 3EED2, 3EF01, 3EF2F, 3EF5E, 3EF8D, 3EFBC, 3EFEB, 3F01B, 3F04B, 3F07C, 3F0AC, 3F0DD, 3F10F, 3F140, 3F172, 3F1A4, 3F1D7, 3F209, 3F23C, 3F270, 3F2A3, 3F2D7, 3F30B, 3F340, 3F375, 3F3AA, 3F3DF, 3F415, 3F44B, 3F481, 3F4B8, 3F4EF, 3F526, 3F55D, 3F595, 3F5CD, 3F605, 3F63E, 3F677, 3F6B0, 3F6EA, 3F724, 3F75E, 3F799, 3F7D3, 3F80F, 3F84A, 3F886, 3F8C2, 3F8FE, 3F93B, 3F978, 3F9B5, 3F9F3, 3FA30, 3FA6F, 3FAAD, 3FAEC, 3FB2B, 3FB6B, 3FBAA, 3FBEA, 3FC2B, 3FC6B, 3FCAC, 3FCEE, 3FD2F, 3FD71, 3FDB3, 3FDF6, 3FE39, 3FE7C, 3FEBF, 3FF03, 3FF47, 3FF8C, 3FFD1;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_6d2cfd52c53670b3',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ee13a7ec49e6238d70fda3163182f4bc',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_6d2cfd52c53670b3',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 16, 5B, A1, E7, 12D, 174, 1BB, 202, 24A, 291, 2DA, 322, 36B, 3B4, 3FE, 448, 492, 4DC, 527, 572, 5BE, 609, 655, 6A2, 6EE, 73B, 789, 7D6, 824, 873, 8C1, 910, 960, 9AF, 9FF, A4F, AA0, AF1, B42, B94, BE6, C38, C8A, CDD, D30, D84, DD8, E2C, E80, ED5, F2A, F80, FD5, 102B, 1082, 10D9, 1130, 1187, 11DF, 1237, 128F, 12E8, 1341, 139A, 13F4, 144E, 14A8, 1503, 155E, 15B9, 1615, 1671, 16CD, 172A, 1787, 17E4, 1842, 189F, 18FE, 195C, 19BB, 1A1A, 1A7A, 1ADA, 1B3A, 1B9B, 1BFB, 1C5D, 1CBE, 1D20, 1D82, 1DE5, 1E48, 1EAB, 1F0E, 1F72, 1FD6, 203B, 209F, 2104, 216A, 21D0, 2236, 229C, 2303, 236A, 23D1, 2439, 24A1, 2509, 2572, 25DB, 2644, 26AE, 2718, 2782, 27ED, 2858, 28C3, 292F, 299B, 2A07, 2A73, 2AE0, 2B4E, 2BBB, 2C29, 2C97, 2D06, 2D75, 2DE4, 2E53, 2EC3, 2F33, 2FA3, 3014, 3085, 30F7, 3168, 31DA, 324D, 32BF, 3332, 33A6, 3419, 348D, 3502, 3576, 35EB, 3660, 36D6, 374C, 37C2, 3838, 38AF, 3926, 399E, 3A15, 3A8D, 3B06, 3B7E, 3BF7, 3C71, 3CEA, 3D64, 3DDF, 3E59, 3ED4, 3F4F, 3FCB, 4046, 40C3, 413F, 41BC, 4239, 42B6, 4334, 43B2, 4430, 44AF, 452E, 45AD, 462C, 46AC, 472C, 47AD, 482D, 48AE, 4930, 49B1, 4A33, 4AB5, 4B38, 4BBB, 4C3E, 4CC1, 4D45, 4DC9, 4E4D, 4ED2, 4F57, 4FDC, 5062, 50E7, 516E, 51F4, 527B, 5302, 5389, 5410, 5498, 5521, 55A9, 5632, 56BB, 5744, 57CE, 5858, 58E2, 596C, 59F7, 5A82, 5B0D, 5B99, 5C25, 5CB1, 5D3E, 5DCA, 5E57, 5EE5, 5F72, 6000, 608E, 611D, 61AC, 623B, 62CA, 6359, 63E9, 6479, 650A, 659A, 662B, 66BC, 674E, 67E0, 6872, 6904, 6996, 6A29, 6ABC, 6B50, 6BE3, 6C77, 6D0B, 6DA0, 6E35, 6EC9, 6F5F, 6FF4, 708A, 7120, 71B6, 724D, 72E3, 737A, 7412, 74A9, 7541, 75D9, 7671, 770A, 77A3, 783C, 78D5, 796F, 7A08, 7AA2, 7B3D, 7BD7, 7C72, 7D0D, 7DA8, 7E44, 7EE0, 7F7C, 8018, 80B4, 8151, 81EE, 828B, 8329, 83C6, 8464, 8502, 85A1, 863F, 86DE, 877D, 881D, 88BC, 895C, 89FC, 8A9C, 8B3C, 8BDD, 8C7E, 8D1F, 8DC0, 8E62, 8F04, 8FA6, 9048, 90EA, 918D, 9230, 92D3, 9376, 9419, 94BD, 9561, 9605, 96A9, 974E, 97F3, 9898, 993D, 99E2, 9A88, 9B2D, 9BD3, 9C79, 9D20, 9DC6, 9E6D, 9F14, 9FBB, A062, A10A, A1B2, A259, A302, A3AA, A452, A4FB, A5A4, A64D, A6F6, A79F, A849, A8F3, A99C, AA47, AAF1, AB9B, AC46, ACF1, AD9C, AE47, AEF2, AF9D, B049, B0F5, B1A1, B24D, B2F9, B3A6, B452, B4FF, B5AC, B659, B706, B7B4, B861, B90F, B9BD, BA6B, BB19, BBC7, BC76, BD24, BDD3, BE82, BF31, BFE0, C090, C13F, C1EF, C29E, C34E, C3FE, C4AE, C55F, C60F, C6C0, C770, C821, C8D2, C983, CA34, CAE5, CB97, CC48, CCFA, CDAC, CE5D, CF0F, CFC2, D074, D126, D1D9, D28B, D33E, D3F0, D4A3, D556, D609, D6BC, D770, D823, D8D7, D98A, DA3E, DAF2, DBA5, DC59, DD0D, DDC1, DE76, DF2A, DFDE, E093, E147, E1FC, E2B0, E365, E41A, E4CF, E584, E639, E6EE, E7A3, E859, E90E, E9C3, EA79, EB2E, EBE4, EC9A, ED4F, EE05, EEBB, EF71, F027, F0DD, F193, F249, F2FF, F3B5, F46B, F522, F5D8, F68E, F745, F7FB, F8B2, F968, FA1F, FAD5, FB8C, FC43, FCF9, FDB0, FE67, FF1D, FFD4, 1008B, 10142, 101F9, 102B0, 10366, 1041D, 104D4, 1058B, 10642, 106F9, 107B0, 10867, 1091E, 109D5, 10A8C, 10B43, 10BFA, 10CB1, 10D68, 10E1F, 10ED6, 10F8C, 11043, 110FA, 111B1, 11268, 1131F, 113D6, 1148D, 11544, 115FA, 116B1, 11768, 1181F, 118D5, 1198C, 11A43, 11AF9, 11BB0, 11C67, 11D1D, 11DD4, 11E8A, 11F40, 11FF7, 120AD, 12163, 1221A, 122D0, 12386, 1243C, 124F2, 125A8, 1265E, 12714, 127CA, 12880, 12935, 129EB, 12AA1, 12B56, 12C0C, 12CC1, 12D76, 12E2B, 12EE1, 12F96, 1304B, 13100, 131B5, 13269, 1331E, 133D3, 13487, 1353C, 135F0, 136A5, 13759, 1380D, 138C1, 13975, 13A29, 13ADC, 13B90, 13C44, 13CF7, 13DAA, 13E5E, 13F11, 13FC4, 14077, 1412A, 141DC, 1428F, 14341, 143F4, 144A6, 14558, 1460A, 146BC, 1476E, 1481F, 148D1, 14982, 14A33, 14AE4, 14B95, 14C46, 14CF7, 14DA8, 14E58, 14F08, 14FB8, 15068, 15118, 151C8, 15278, 15327, 153D6, 15485, 15534, 155E3, 15692, 15740, 157EF, 1589D, 1594B, 159F9, 15AA6, 15B54, 15C01, 15CAF, 15D5C, 15E08, 15EB5, 15F62, 1600E, 160BA, 16166, 16212, 162BD, 16369, 16414, 164BF, 1656A, 16615, 166BF, 16769, 16813, 168BD, 16967, 16A10, 16ABA, 16B63, 16C0C, 16CB4, 16D5D, 16E05, 16EAD, 16F55, 16FFD, 170A4, 1714B, 171F2, 17299, 17340, 173E6, 1748C, 17532, 175D7, 1767D, 17722, 177C7, 1786C, 17910, 179B5, 17A59, 17AFC, 17BA0, 17C43, 17CE6, 17D89, 17E2C, 17ECE, 17F70, 18012, 180B4, 18155, 181F6, 18297, 18338, 183D8, 18478, 18518, 185B7, 18657, 186F6, 18794, 18833, 188D1, 1896F, 18A0D, 18AAA, 18B47, 18BE4, 18C81, 18D1D, 18DB9, 18E55, 18EF0, 18F8C, 19026, 190C1, 1915B, 191F5, 1928F, 19329, 193C2, 1945B, 194F3, 1958B, 19623, 196BB, 19752, 197EA, 19880, 19917, 199AD, 19A43, 19AD8, 19B6D, 19C02, 19C97, 19D2B, 19DBF, 19E53, 19EE6, 19F79, 1A00C, 1A09E, 1A130, 1A1C2, 1A253, 1A2E4, 1A375, 1A406, 1A496, 1A525, 1A5B5, 1A644, 1A6D2, 1A761, 1A7EF, 1A87D, 1A90A, 1A997, 1AA24, 1AAB0, 1AB3C, 1ABC8, 1AC53, 1ACDE, 1AD68, 1ADF2, 1AE7C, 1AF06, 1AF8F, 1B018, 1B0A0, 1B128, 1B1B0, 1B237, 1B2BE, 1B345, 1B3CB, 1B451, 1B4D6, 1B55C, 1B5E0, 1B665, 1B6E9, 1B76C, 1B7F0, 1B872, 1B8F5, 1B977, 1B9F9, 1BA7A, 1BAFB, 1BB7C, 1BBFC, 1BC7B, 1BCFB, 1BD7A, 1BDF8, 1BE77, 1BEF5, 1BF72, 1BFEF, 1C06C, 1C0E8, 1C164, 1C1DF, 1C25A, 1C2D5, 1C34F, 1C3C9, 1C442, 1C4BB, 1C534, 1C5AC, 1C624, 1C69B, 1C712, 1C789, 1C7FF, 1C874, 1C8EA, 1C95F, 1C9D3, 1CA47, 1CABB, 1CB2E, 1CBA0, 1CC13, 1CC85, 1CCF6, 1CD67, 1CDD8, 1CE48, 1CEB8, 1CF27, 1CF96, 1D004, 1D072, 1D0E0, 1D14D, 1D1BA, 1D226, 1D292, 1D2FD, 1D368, 1D3D2, 1D43D, 1D4A6, 1D50F, 1D578, 1D5E0, 1D648, 1D6AF, 1D716, 1D77D, 1D7E3, 1D848, 1D8AD, 1D912, 1D976, 1D9DA, 1DA3D, 1DAA0, 1DB02, 1DB64, 1DBC5, 1DC26, 1DC86, 1DCE6, 1DD46, 1DDA5, 1DE04, 1DE62, 1DEBF, 1DF1C, 1DF79, 1DFD5, 1E031, 1E08C, 1E0E7, 1E141, 1E19B, 1E1F5, 1E24E, 1E2A6, 1E2FE, 1E355, 1E3AC, 1E403, 1E459, 1E4AE, 1E503, 1E558, 1E5AC, 1E5FF, 1E652, 1E6A5, 1E6F7, 1E749, 1E79A, 1E7EA, 1E83A, 1E88A, 1E8D9, 1E928, 1E976, 1E9C3, 1EA11, 1EA5D, 1EAA9, 1EAF5, 1EB40, 1EB8B, 1EBD5, 1EC1E, 1EC68, 1ECB0, 1ECF8, 1ED40, 1ED87, 1EDCD, 1EE14, 1EE59, 1EE9E, 1EEE3, 1EF27, 1EF6A, 1EFAD, 1EFF0, 1F032, 1F073, 1F0B4, 1F0F5, 1F134, 1F174, 1F1B3, 1F1F1, 1F22F, 1F26C, 1F2A9, 1F2E5, 1F321, 1F35C, 1F397, 1F3D1, 1F40B, 1F444, 1F47D, 1F4B5, 1F4EC, 1F523, 1F55A, 1F590, 1F5C5, 1F5FA, 1F62F, 1F663, 1F696, 1F6C9, 1F6FB, 1F72D, 1F75E, 1F78F, 1F7BF, 1F7EF, 1F81E, 1F84C, 1F87A, 1F8A8, 1F8D5, 1F901, 1F92D, 1F958, 1F983, 1F9AE, 1F9D7, 1FA01, 1FA29, 1FA51, 1FA79, 1FAA0, 1FAC6, 1FAEC, 1FB12, 1FB37, 1FB5B, 1FB7F, 1FBA2, 1FBC5, 1FBE7, 1FC09, 1FC2A, 1FC4A, 1FC6A, 1FC8A, 1FCA9, 1FCC7, 1FCE5, 1FD02, 1FD1F, 1FD3B, 1FD57, 1FD72, 1FD8C, 1FDA6, 1FDC0, 1FDD9, 1FDF1, 1FE09, 1FE20, 1FE37, 1FE4D, 1FE63, 1FE78, 1FE8C, 1FEA0, 1FEB4, 1FEC7, 1FED9, 1FEEB, 1FEFC, 1FF0D, 1FF1D, 1FF2C, 1FF3B, 1FF4A, 1FF58, 1FF65, 1FF72, 1FF7E, 1FF8A, 1FF95, 1FFA0, 1FFAA, 1FFB3, 1FFBC, 1FFC4, 1FFCC, 1FFD4, 1FFDA, 1FFE0, 1FFE6, 1FFEB, 1FFF0, 1FFF4, 1FFF7, 1FFFA, 1FFFC, 1FFFE, 1FFFF, 1FFFF;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_5e0338ff57cbbf31',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e4e3fc2662ebcf1fdb8c1be1c7d1b729',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_5e0338ff57cbbf31',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 1FFFF, 1FFFF, 1FFFF, 1FFFD, 1FFFB, 1FFF8, 1FFF5, 1FFF1, 1FFED, 1FFE8, 1FFE3, 1FFDD, 1FFD6, 1FFCF, 1FFC7, 1FFBF, 1FFB6, 1FFAD, 1FFA3, 1FF99, 1FF8E, 1FF82, 1FF76, 1FF6A, 1FF5C, 1FF4F, 1FF41, 1FF32, 1FF22, 1FF12, 1FF02, 1FEF1, 1FEDF, 1FECD, 1FEBB, 1FEA7, 1FE94, 1FE7F, 1FE6A, 1FE55, 1FE3F, 1FE28, 1FE11, 1FDFA, 1FDE2, 1FDC9, 1FDB0, 1FD96, 1FD7B, 1FD61, 1FD45, 1FD29, 1FD0D, 1FCF0, 1FCD2, 1FCB4, 1FC95, 1FC76, 1FC56, 1FC36, 1FC15, 1FBF3, 1FBD1, 1FBAF, 1FB8C, 1FB68, 1FB44, 1FB1F, 1FAFA, 1FAD4, 1FAAE, 1FA87, 1FA60, 1FA38, 1FA0F, 1F9E6, 1F9BD, 1F993, 1F968, 1F93D, 1F911, 1F8E5, 1F8B8, 1F88B, 1F85D, 1F82F, 1F800, 1F7D0, 1F7A0, 1F770, 1F73F, 1F70D, 1F6DB, 1F6A8, 1F675, 1F641, 1F60D, 1F5D8, 1F5A3, 1F56D, 1F537, 1F500, 1F4C9, 1F491, 1F458, 1F41F, 1F3E6, 1F3AC, 1F371, 1F336, 1F2FB, 1F2BF, 1F282, 1F245, 1F207, 1F1C9, 1F18A, 1F14B, 1F10C, 1F0CB, 1F08B, 1F049, 1F007, 1EFC5, 1EF82, 1EF3F, 1EEFB, 1EEB7, 1EE72, 1EE2D, 1EDE7, 1EDA0, 1ED59, 1ED12, 1ECCA, 1EC82, 1EC39, 1EBEF, 1EBA5, 1EB5B, 1EB10, 1EAC5, 1EA79, 1EA2C, 1E9DF, 1E992, 1E944, 1E8F5, 1E8A6, 1E857, 1E807, 1E7B7, 1E766, 1E714, 1E6C2, 1E670, 1E61D, 1E5CA, 1E576, 1E522, 1E4CD, 1E477, 1E422, 1E3CB, 1E375, 1E31D, 1E2C6, 1E26D, 1E215, 1E1BB, 1E162, 1E108, 1E0AD, 1E052, 1DFF6, 1DF9A, 1DF3E, 1DEE1, 1DE83, 1DE25, 1DDC7, 1DD68, 1DD09, 1DCA9, 1DC49, 1DBE8, 1DB87, 1DB25, 1DAC3, 1DA60, 1D9FD, 1D99A, 1D936, 1D8D1, 1D86C, 1D807, 1D7A1, 1D73B, 1D6D4, 1D66D, 1D605, 1D59D, 1D535, 1D4CC, 1D462, 1D3F9, 1D38E, 1D324, 1D2B8, 1D24D, 1D1E1, 1D174, 1D107, 1D09A, 1D02C, 1CFBE, 1CF4F, 1CEE0, 1CE70, 1CE00, 1CD90, 1CD1F, 1CCAE, 1CC3C, 1CBCA, 1CB57, 1CAE4, 1CA71, 1C9FD, 1C988, 1C914, 1C89F, 1C829, 1C7B3, 1C73D, 1C6C6, 1C64F, 1C5D7, 1C55F, 1C4E7, 1C46E, 1C3F4, 1C37B, 1C301, 1C286, 1C20B, 1C190, 1C114, 1C098, 1C01C, 1BF9F, 1BF22, 1BEA4, 1BE26, 1BDA7, 1BD29, 1BCA9, 1BC2A, 1BBAA, 1BB29, 1BAA8, 1BA27, 1B9A6, 1B924, 1B8A1, 1B81F, 1B79B, 1B718, 1B694, 1B610, 1B58B, 1B506, 1B481, 1B3FB, 1B375, 1B2EF, 1B268, 1B1E1, 1B159, 1B0D1, 1B049, 1AFC0, 1AF37, 1AEAE, 1AE24, 1AD9A, 1AD10, 1AC85, 1ABFA, 1AB6E, 1AAE2, 1AA56, 1A9CA, 1A93D, 1A8AF, 1A822, 1A794, 1A706, 1A677, 1A5E8, 1A559, 1A4C9, 1A439, 1A3A9, 1A318, 1A288, 1A1F6, 1A165, 1A0D3, 1A041, 19FAE, 19F1B, 19E88, 19DF4, 19D61, 19CCC, 19C38, 19BA3, 19B0E, 19A79, 199E3, 1994D, 198B6, 19820, 19789, 196F2, 1965A, 195C2, 1952A, 19492, 193F9, 19360, 192C6, 1922D, 19193, 190F9, 1905E, 18FC3, 18F28, 18E8D, 18DF1, 18D55, 18CB9, 18C1D, 18B80, 18AE3, 18A45, 189A8, 1890A, 1886C, 187CE, 1872F, 18690, 185F1, 18551, 184B2, 18412, 18371, 182D1, 18230, 1818F, 180EE, 1804C, 17FAB, 17F09, 17E66, 17DC4, 17D21, 17C7E, 17BDB, 17B37, 17A94, 179F0, 1794B, 178A7, 17802, 1775D, 176B8, 17613, 1756D, 174C8, 17422, 1737B, 172D5, 1722E, 17187, 170E0, 17039, 16F91, 16EEA, 16E42, 16D99, 16CF1, 16C48, 16BA0, 16AF7, 16A4D, 169A4, 168FA, 16851, 167A7, 166FC, 16652, 165A7, 164FD, 16452, 163A6, 162FB, 16250, 161A4, 160F8, 1604C, 15FA0, 15EF3, 15E47, 15D9A, 15CED, 15C40, 15B92, 15AE5, 15A37, 1598A, 158DC, 1582D, 1577F, 156D1, 15622, 15573, 154C4, 15415, 15366, 152B7, 15207, 15158, 150A8, 14FF8, 14F48, 14E97, 14DE7, 14D37, 14C86, 14BD5, 14B24, 14A73, 149C2, 14911, 1485F, 147AE, 146FC, 1464A, 14598, 144E6, 14434, 14382, 142CF, 1421D, 1416A, 140B7, 14004, 13F51, 13E9E, 13DEB, 13D38, 13C84, 13BD1, 13B1D, 13A69, 139B6, 13902, 1384E, 1379A, 136E5, 13631, 1357D, 134C8, 13414, 1335F, 132AB, 131F6, 13141, 1308C, 12FD7, 12F22, 12E6D, 12DB8, 12D02, 12C4D, 12B97, 12AE2, 12A2C, 12977, 128C1, 1280B, 12756, 126A0, 125EA, 12534, 1247E, 123C8, 12312, 1225B, 121A5, 120EF, 12039, 11F82, 11ECC, 11E15, 11D5F, 11CA8, 11BF2, 11B3B, 11A85, 119CE, 11917, 11861, 117AA, 116F3, 1163C, 11586, 114CF, 11418, 11361, 112AA, 111F3, 1113C, 11085, 10FCE, 10F18, 10E61, 10DAA, 10CF3, 10C3C, 10B85, 10ACE, 10A17, 10960, 108A9, 107F2, 1073B, 10684, 105CD, 10516, 1045F, 103A8, 102F2, 1023B, 10184, 100CD, 10016, FF5F, FEA9, FDF2, FD3B, FC85, FBCE, FB17, FA61, F9AA, F8F4, F83D, F787, F6D0, F61A, F564, F4AD, F3F7, F341, F28B, F1D5, F11F, F069, EFB3, EEFD, EE47, ED91, ECDB, EC26, EB70, EABA, EA05, E950, E89A, E7E5, E730, E67B, E5C5, E510, E45B, E3A7, E2F2, E23D, E188, E0D4, E01F, DF6B, DEB7, DE03, DD4E, DC9A, DBE6, DB33, DA7F, D9CB, D918, D864, D7B1, D6FD, D64A, D597, D4E4, D431, D37E, D2CC, D219, D167, D0B4, D002, CF50, CE9E, CDEC, CD3A, CC89, CBD7, CB26, CA74, C9C3, C912, C861, C7B0, C6FF, C64F, C59E, C4EE, C43E, C38E, C2DE, C22E, C17F, C0CF, C020, BF71, BEC1, BE13, BD64, BCB5, BC07, BB58, BAAA, B9FC, B94E, B8A0, B7F3, B745, B698, B5EB, B53E, B491, B3E4, B338, B28B, B1DF, B133, B087, AFDC, AF30, AE85, ADDA, AD2F, AC84, ABD9, AB2F, AA84, A9DA, A930, A886, A7DD, A733, A68A, A5E1, A538, A48F, A3E7, A33F, A296, A1EE, A147, A09F, 9FF8, 9F51, 9EAA, 9E03, 9D5C, 9CB6, 9C10, 9B6A, 9AC4, 9A1E, 9979, 98D3, 982E, 978A, 96E5, 9641, 959D, 94F9, 9455, 93B1, 930E, 926B, 91C8, 9125, 9083, 8FE0, 8F3E, 8E9D, 8DFB, 8D5A, 8CB8, 8C17, 8B77, 8AD6, 8A36, 8996, 88F6, 8856, 87B7, 8718, 8679, 85DA, 853C, 849E, 8400, 8362, 82C4, 8227, 818A, 80ED, 8051, 7FB4, 7F18, 7E7C, 7DE1, 7D46, 7CAA, 7C10, 7B75, 7ADB, 7A40, 79A7, 790D, 7873, 77DA, 7741, 76A9, 7610, 7578, 74E0, 7449, 73B1, 731A, 7283, 71ED, 7157, 70C0, 702B, 6F95, 6F00, 6E6B, 6DD6, 6D41, 6CAD, 6C19, 6B85, 6AF2, 6A5F, 69CC, 6939, 68A7, 6815, 6783, 66F1, 6660, 65CF, 653E, 64AE, 641E, 638E, 62FE, 626F, 61E0, 6151, 60C2, 6034, 5FA6, 5F18, 5E8B, 5DFE, 5D71, 5CE4, 5C58, 5BCC, 5B40, 5AB5, 5A2A, 599F, 5914, 588A, 5800, 5776, 56ED, 5664, 55DB, 5552, 54CA, 5442, 53BA, 5333, 52AC, 5225, 519F, 5118, 5092, 500D, 4F88, 4F03, 4E7E, 4DF9, 4D75, 4CF1, 4C6E, 4BEB, 4B68, 4AE5, 4A63, 49E1, 495F, 48DE, 485C, 47DC, 475B, 46DB, 465B, 45DB, 455C, 44DD, 445E, 43E0, 4362, 42E4, 4267, 41EA, 416D, 40F0, 4074, 3FF8, 3F7C, 3F01, 3E86, 3E0B, 3D91, 3D17, 3C9D, 3C24, 3BAB, 3B32, 3ABA, 3A41, 39CA, 3952, 38DB, 3864, 37ED, 3777, 3701, 368B, 3616, 35A1, 352C, 34B8, 3444, 33D0, 335D, 32EA, 3277, 3204, 3192, 3120, 30AF, 303E, 2FCD, 2F5C, 2EEC, 2E7C, 2E0D, 2D9D, 2D2E, 2CC0, 2C52, 2BE4, 2B76, 2B09, 2A9C, 2A2F, 29C2, 2956, 28EB, 287F, 2814, 27AA, 273F, 26D5, 266B, 2602, 2599, 2530, 24C7, 245F, 23F7, 2390, 2329, 22C2, 225B, 21F5, 218F, 212A, 20C5, 2060, 1FFB, 1F97, 1F33, 1ECF, 1E6C, 1E09, 1DA7, 1D44, 1CE2, 1C81, 1C1F, 1BBE, 1B5E, 1AFD, 1A9D, 1A3E, 19DE, 197F, 1921, 18C2, 1864, 1807, 17A9, 174C, 16EF, 1693, 1637, 15DB, 1580, 1525, 14CA, 146F, 1415, 13BB, 1362, 1309, 12B0, 1258, 11FF, 11A8, 1150, 10F9, 10A2, 104B, FF5, F9F, F4A, EF5, EA0, E4B, DF7, DA3, D4F, CFC, CA9, C56, C04, BB2, B60, B0F, ABE, A6D, A1D, 9CD, 97D, 92E, 8DF, 890, 842, 7F4, 7A6, 758, 70B, 6BE, 672, 626, 5DA, 58E, 543, 4F8, 4AE, 463, 419, 3D0, 386, 33D, 2F5, 2AC, 264, 21D, 1D5, 18E, 147, 101, BB, 75, 30;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_5baa652c5120a02c',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c42fef9440f29ff675a67f2c27dfba79',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_5baa652c5120a02c',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFEA, 3FFA6, 3FF61, 3FF1D, 3FED9, 3FE95, 3FE52, 3FE0F, 3FDCC, 3FD8A, 3FD48, 3FD06, 3FCC5, 3FC84, 3FC43, 3FC02, 3FBC2, 3FB82, 3FB43, 3FB04, 3FAC5, 3FA86, 3FA48, 3FA0A, 3F9CC, 3F98F, 3F952, 3F915, 3F8D9, 3F89C, 3F861, 3F825, 3F7EA, 3F7AF, 3F774, 3F73A, 3F700, 3F6C6, 3F68D, 3F654, 3F61B, 3F5E2, 3F5AA, 3F572, 3F53B, 3F503, 3F4CC, 3F496, 3F45F, 3F429, 3F3F3, 3F3BE, 3F389, 3F354, 3F31F, 3F2EB, 3F2B7, 3F283, 3F250, 3F21D, 3F1EA, 3F1B7, 3F185, 3F153, 3F121, 3F0F0, 3F0BF, 3F08E, 3F05E, 3F02D, 3EFFE, 3EFCE, 3EF9F, 3EF70, 3EF41, 3EF12, 3EEE4, 3EEB6, 3EE89, 3EE5B, 3EE2E, 3EE01, 3EDD5, 3EDA9, 3ED7D, 3ED51, 3ED26, 3ECFB, 3ECD0, 3ECA5, 3EC7B, 3EC51, 3EC28, 3EBFE, 3EBD5, 3EBAC, 3EB84, 3EB5B, 3EB33, 3EB0C, 3EAE4, 3EABD, 3EA96, 3EA6F, 3EA49, 3EA23, 3E9FD, 3E9D8, 3E9B2, 3E98D, 3E969, 3E944, 3E920, 3E8FC, 3E8D8, 3E8B5, 3E892, 3E86F, 3E84C, 3E82A, 3E808, 3E7E6, 3E7C4, 3E7A3, 3E782, 3E761, 3E741, 3E720, 3E700, 3E6E1, 3E6C1, 3E6A2, 3E683, 3E664, 3E646, 3E628, 3E60A, 3E5EC, 3E5CE, 3E5B1, 3E594, 3E578, 3E55B, 3E53F, 3E523, 3E507, 3E4EC, 3E4D1, 3E4B6, 3E49B, 3E480, 3E466, 3E44C, 3E432, 3E419, 3E400, 3E3E7, 3E3CE, 3E3B5, 3E39D, 3E385, 3E36D, 3E356, 3E33E, 3E327, 3E310, 3E2FA, 3E2E3, 3E2CD, 3E2B7, 3E2A1, 3E28C, 3E277, 3E262, 3E24D, 3E238, 3E224, 3E210, 3E1FC, 3E1E9, 3E1D5, 3E1C2, 3E1AF, 3E19C, 3E18A, 3E177, 3E165, 3E153, 3E142, 3E130, 3E11F, 3E10E, 3E0FD, 3E0ED, 3E0DD, 3E0CC, 3E0BD, 3E0AD, 3E09D, 3E08E, 3E07F, 3E070, 3E062, 3E053, 3E045, 3E037, 3E029, 3E01C, 3E00E, 3E001, 3DFF4, 3DFE7, 3DFDB, 3DFCE, 3DFC2, 3DFB6, 3DFAB, 3DF9F, 3DF94, 3DF89, 3DF7E, 3DF73, 3DF68, 3DF5E, 3DF54, 3DF4A, 3DF40, 3DF36, 3DF2D, 3DF24, 3DF1B, 3DF12, 3DF09, 3DF01, 3DEF9, 3DEF1, 3DEE9, 3DEE1, 3DEDA, 3DED2, 3DECB, 3DEC4, 3DEBD, 3DEB7, 3DEB0, 3DEAA, 3DEA4, 3DE9E, 3DE99, 3DE93, 3DE8E, 3DE89, 3DE84, 3DE7F, 3DE7A, 3DE76, 3DE71, 3DE6D, 3DE69, 3DE66, 3DE62, 3DE5F, 3DE5B, 3DE58, 3DE55, 3DE52, 3DE50, 3DE4D, 3DE4B, 3DE49, 3DE47, 3DE45, 3DE44, 3DE42, 3DE41, 3DE40, 3DE3F, 3DE3E, 3DE3D, 3DE3D, 3DE3C, 3DE3C, 3DE3C, 3DE3C, 3DE3D, 3DE3D, 3DE3D, 3DE3E, 3DE3F, 3DE40, 3DE41, 3DE43, 3DE44, 3DE46, 3DE47, 3DE49, 3DE4B, 3DE4D, 3DE50, 3DE52, 3DE55, 3DE58, 3DE5A, 3DE5D, 3DE61, 3DE64, 3DE67, 3DE6B, 3DE6F, 3DE72, 3DE76, 3DE7A, 3DE7F, 3DE83, 3DE88, 3DE8C, 3DE91, 3DE96, 3DE9B, 3DEA0, 3DEA5, 3DEAB, 3DEB0, 3DEB6, 3DEBC, 3DEC1, 3DEC8, 3DECE, 3DED4, 3DEDA, 3DEE1, 3DEE7, 3DEEE, 3DEF5, 3DEFC, 3DF03, 3DF0A, 3DF12, 3DF19, 3DF21, 3DF28, 3DF30, 3DF38, 3DF40, 3DF48, 3DF50, 3DF59, 3DF61, 3DF6A, 3DF72, 3DF7B, 3DF84, 3DF8D, 3DF96, 3DF9F, 3DFA8, 3DFB2, 3DFBB, 3DFC5, 3DFCE, 3DFD8, 3DFE2, 3DFEC, 3DFF6, 3E000, 3E00B, 3E015, 3E01F, 3E02A, 3E035, 3E03F, 3E04A, 3E055, 3E060, 3E06B, 3E076, 3E082, 3E08D, 3E098, 3E0A4, 3E0B0, 3E0BB, 3E0C7, 3E0D3, 3E0DF, 3E0EB, 3E0F7, 3E103, 3E110, 3E11C, 3E128, 3E135, 3E142, 3E14E, 3E15B, 3E168, 3E175, 3E182, 3E18F, 3E19C, 3E1A9, 3E1B6, 3E1C4, 3E1D1, 3E1DF, 3E1EC, 3E1FA, 3E208, 3E215, 3E223, 3E231, 3E23F, 3E24D, 3E25B, 3E269, 3E278, 3E286, 3E294, 3E2A3, 3E2B1, 3E2C0, 3E2CE, 3E2DD, 3E2EC, 3E2FA, 3E309, 3E318, 3E327, 3E336, 3E345, 3E354, 3E364, 3E373, 3E382, 3E391, 3E3A1, 3E3B0, 3E3C0, 3E3CF, 3E3DF, 3E3EE, 3E3FE, 3E40E, 3E41E, 3E42D, 3E43D, 3E44D, 3E45D, 3E46D, 3E47D, 3E48D, 3E49D, 3E4AE, 3E4BE, 3E4CE, 3E4DE, 3E4EF, 3E4FF, 3E510, 3E520, 3E531, 3E541, 3E552, 3E562, 3E573, 3E584, 3E594, 3E5A5, 3E5B6, 3E5C7, 3E5D7, 3E5E8, 3E5F9, 3E60A, 3E61B, 3E62C, 3E63D, 3E64E, 3E65F, 3E670, 3E682, 3E693, 3E6A4, 3E6B5, 3E6C6, 3E6D8, 3E6E9, 3E6FA, 3E70C, 3E71D, 3E72E, 3E740, 3E751, 3E763, 3E774, 3E786, 3E797, 3E7A9, 3E7BA, 3E7CC, 3E7DD, 3E7EF, 3E801, 3E812, 3E824, 3E836, 3E847, 3E859, 3E86B, 3E87C, 3E88E, 3E8A0, 3E8B2, 3E8C3, 3E8D5, 3E8E7, 3E8F9, 3E90B, 3E91D, 3E92E, 3E940, 3E952, 3E964, 3E976, 3E988, 3E99A, 3E9AB, 3E9BD, 3E9CF, 3E9E1, 3E9F3, 3EA05, 3EA17, 3EA29, 3EA3B, 3EA4D, 3EA5F, 3EA70, 3EA82, 3EA94, 3EAA6, 3EAB8, 3EACA, 3EADC, 3EAEE, 3EB00, 3EB12, 3EB24, 3EB36, 3EB48, 3EB59, 3EB6B, 3EB7D, 3EB8F, 3EBA1, 3EBB3, 3EBC5, 3EBD7, 3EBE9, 3EBFA, 3EC0C, 3EC1E, 3EC30, 3EC42, 3EC54, 3EC65, 3EC77, 3EC89, 3EC9B, 3ECAD, 3ECBE, 3ECD0, 3ECE2, 3ECF3, 3ED05, 3ED17, 3ED29, 3ED3A, 3ED4C, 3ED5E, 3ED6F, 3ED81, 3ED92, 3EDA4, 3EDB6, 3EDC7, 3EDD9, 3EDEA, 3EDFC, 3EE0D, 3EE1F, 3EE30, 3EE42, 3EE53, 3EE64, 3EE76, 3EE87, 3EE99, 3EEAA, 3EEBB, 3EECD, 3EEDE, 3EEEF, 3EF00, 3EF12, 3EF23, 3EF34, 3EF45, 3EF56, 3EF67, 3EF78, 3EF89, 3EF9A, 3EFAB, 3EFBC, 3EFCD, 3EFDE, 3EFEF, 3F000, 3F011, 3F022, 3F033, 3F043, 3F054, 3F065, 3F076, 3F086, 3F097, 3F0A8, 3F0B8, 3F0C9, 3F0D9, 3F0EA, 3F0FA, 3F10B, 3F11B, 3F12C, 3F13C, 3F14C, 3F15D, 3F16D, 3F17D, 3F18E, 3F19E, 3F1AE, 3F1BE, 3F1CE, 3F1DE, 3F1EE, 3F1FE, 3F20E, 3F21E, 3F22E, 3F23E, 3F24E, 3F25E, 3F26E, 3F27D, 3F28D, 3F29D, 3F2AD, 3F2BC, 3F2CC, 3F2DB, 3F2EB, 3F2FA, 3F30A, 3F319, 3F329, 3F338, 3F347, 3F357, 3F366, 3F375, 3F384, 3F394, 3F3A3, 3F3B2, 3F3C1, 3F3D0, 3F3DF, 3F3EE, 3F3FD, 3F40C, 3F41B, 3F429, 3F438, 3F447, 3F456, 3F464, 3F473, 3F481, 3F490, 3F49E, 3F4AD, 3F4BB, 3F4CA, 3F4D8, 3F4E6, 3F4F5, 3F503, 3F511, 3F51F, 3F52E, 3F53C, 3F54A, 3F558, 3F566, 3F574, 3F582, 3F58F, 3F59D, 3F5AB, 3F5B9, 3F5C7, 3F5D4, 3F5E2, 3F5EF, 3F5FD, 3F60B, 3F618, 3F625, 3F633, 3F640, 3F64E, 3F65B, 3F668, 3F675, 3F683, 3F690, 3F69D, 3F6AA, 3F6B7, 3F6C4, 3F6D1, 3F6DE, 3F6EA, 3F6F7, 3F704, 3F711, 3F71E, 3F72A, 3F737, 3F743, 3F750, 3F75C, 3F769, 3F775, 3F782, 3F78E, 3F79A, 3F7A7, 3F7B3, 3F7BF, 3F7CB, 3F7D7, 3F7E3, 3F7EF, 3F7FB, 3F807, 3F813, 3F81F, 3F82B, 3F837, 3F842, 3F84E, 3F85A, 3F865, 3F871, 3F87C, 3F888, 3F893, 3F89F, 3F8AA, 3F8B6, 3F8C1, 3F8CC, 3F8D7, 3F8E3, 3F8EE, 3F8F9, 3F904, 3F90F, 3F91A, 3F925, 3F930, 3F93B, 3F946, 3F950, 3F95B, 3F966, 3F971, 3F97B, 3F986, 3F991, 3F99B, 3F9A6, 3F9B0, 3F9BA, 3F9C5, 3F9CF, 3F9D9, 3F9E4, 3F9EE, 3F9F8, 3FA02, 3FA0C, 3FA17, 3FA21, 3FA2B, 3FA35, 3FA3E, 3FA48, 3FA52, 3FA5C, 3FA66, 3FA70, 3FA79, 3FA83, 3FA8D, 3FA96, 3FAA0, 3FAA9, 3FAB3, 3FABC, 3FAC6, 3FACF, 3FAD8, 3FAE2, 3FAEB, 3FAF4, 3FAFD, 3FB07, 3FB10, 3FB19, 3FB22, 3FB2B, 3FB34, 3FB3D, 3FB46, 3FB4F, 3FB58, 3FB60, 3FB69, 3FB72, 3FB7B, 3FB83, 3FB8C, 3FB95, 3FB9D, 3FBA6, 3FBAE, 3FBB7, 3FBBF, 3FBC8, 3FBD0, 3FBD8, 3FBE1, 3FBE9, 3FBF1, 3FBFA, 3FC02, 3FC0A, 3FC12, 3FC1A, 3FC22, 3FC2A, 3FC32, 3FC3A, 3FC42, 3FC4A, 3FC52, 3FC5A, 3FC62, 3FC6A, 3FC71, 3FC79, 3FC81, 3FC88, 3FC90, 3FC98, 3FC9F, 3FCA7, 3FCAE, 3FCB6, 3FCBD, 3FCC5, 3FCCC, 3FCD4, 3FCDB, 3FCE2, 3FCEA, 3FCF1, 3FCF8, 3FCFF, 3FD07, 3FD0E, 3FD15, 3FD1C, 3FD23, 3FD2A, 3FD31, 3FD38, 3FD3F, 3FD46, 3FD4D, 3FD54, 3FD5B, 3FD62, 3FD69, 3FD70, 3FD76, 3FD7D, 3FD84, 3FD8B, 3FD91, 3FD98, 3FD9F, 3FDA5, 3FDAC, 3FDB2, 3FDB9, 3FDBF, 3FDC6, 3FDCC, 3FDD3, 3FDD9, 3FDE0, 3FDE6, 3FDED, 3FDF3, 3FDF9, 3FE00, 3FE06, 3FE0C, 3FE12, 3FE19, 3FE1F, 3FE25, 3FE2B, 3FE31, 3FE37, 3FE3E, 3FE44, 3FE4A, 3FE50, 3FE56, 3FE5C, 3FE62, 3FE68, 3FE6E, 3FE74, 3FE7A, 3FE80, 3FE85, 3FE8B, 3FE91, 3FE97, 3FE9D, 3FEA3, 3FEA8, 3FEAE, 3FEB4, 3FEBA, 3FEBF, 3FEC5, 3FECB, 3FED1, 3FED6, 3FEDC, 3FEE2, 3FEE7, 3FEED, 3FEF2, 3FEF8, 3FEFE, 3FF03, 3FF09, 3FF0E, 3FF14, 3FF19, 3FF1F, 3FF24, 3FF2A, 3FF2F, 3FF35, 3FF3A, 3FF3F, 3FF45, 3FF4A, 3FF50, 3FF55, 3FF5A, 3FF60, 3FF65, 3FF6A, 3FF70, 3FF75, 3FF7A, 3FF80, 3FF85, 3FF8A, 3FF8F, 3FF95, 3FF9A, 3FF9F, 3FFA5, 3FFAA, 3FFAF, 3FFB4, 3FFB9, 3FFBF, 3FFC4, 3FFC9, 3FFCE, 3FFD3, 3FFD8, 3FFDE, 3FFE3, 3FFE8, 3FFED, 3FFF2, 3FFF7, 3FFFC;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_11d13cd84f70eb99',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '6ec18c75c402d91cdaa3a5997db0940f',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_11d13cd84f70eb99',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFFE, 3FFF9, 3FFF4, 3FFEF, 3FFEA, 3FFE4, 3FFDF, 3FFDA, 3FFD5, 3FFD0, 3FFCB, 3FFC5, 3FFC0, 3FFBB, 3FFB6, 3FFB1, 3FFAB, 3FFA6, 3FFA1, 3FF9C, 3FF96, 3FF91, 3FF8C, 3FF87, 3FF81, 3FF7C, 3FF77, 3FF71, 3FF6C, 3FF67, 3FF61, 3FF5C, 3FF57, 3FF51, 3FF4C, 3FF47, 3FF41, 3FF3C, 3FF36, 3FF31, 3FF2B, 3FF26, 3FF20, 3FF1B, 3FF15, 3FF10, 3FF0A, 3FF05, 3FEFF, 3FEFA, 3FEF4, 3FEEF, 3FEE9, 3FEE3, 3FEDE, 3FED8, 3FED2, 3FECD, 3FEC7, 3FEC1, 3FEBC, 3FEB6, 3FEB0, 3FEAA, 3FEA4, 3FE9F, 3FE99, 3FE93, 3FE8D, 3FE87, 3FE81, 3FE7B, 3FE76, 3FE70, 3FE6A, 3FE64, 3FE5E, 3FE58, 3FE52, 3FE4C, 3FE45, 3FE3F, 3FE39, 3FE33, 3FE2D, 3FE27, 3FE21, 3FE1A, 3FE14, 3FE0E, 3FE08, 3FE01, 3FDFB, 3FDF5, 3FDEE, 3FDE8, 3FDE2, 3FDDB, 3FDD5, 3FDCE, 3FDC8, 3FDC1, 3FDBB, 3FDB4, 3FDAE, 3FDA7, 3FDA1, 3FD9A, 3FD93, 3FD8D, 3FD86, 3FD7F, 3FD78, 3FD72, 3FD6B, 3FD64, 3FD5D, 3FD56, 3FD4F, 3FD48, 3FD41, 3FD3A, 3FD33, 3FD2C, 3FD25, 3FD1E, 3FD17, 3FD10, 3FD09, 3FD02, 3FCFA, 3FCF3, 3FCEC, 3FCE5, 3FCDD, 3FCD6, 3FCCF, 3FCC7, 3FCC0, 3FCB8, 3FCB1, 3FCA9, 3FCA2, 3FC9A, 3FC92, 3FC8B, 3FC83, 3FC7B, 3FC74, 3FC6C, 3FC64, 3FC5C, 3FC54, 3FC4D, 3FC45, 3FC3D, 3FC35, 3FC2D, 3FC25, 3FC1D, 3FC15, 3FC0C, 3FC04, 3FBFC, 3FBF4, 3FBEC, 3FBE3, 3FBDB, 3FBD3, 3FBCA, 3FBC2, 3FBB9, 3FBB1, 3FBA8, 3FBA0, 3FB97, 3FB8F, 3FB86, 3FB7D, 3FB75, 3FB6C, 3FB63, 3FB5A, 3FB51, 3FB48, 3FB40, 3FB37, 3FB2E, 3FB25, 3FB1C, 3FB12, 3FB09, 3FB00, 3FAF7, 3FAEE, 3FAE4, 3FADB, 3FAD2, 3FAC8, 3FABF, 3FAB6, 3FAAC, 3FAA3, 3FA99, 3FA8F, 3FA86, 3FA7C, 3FA72, 3FA69, 3FA5F, 3FA55, 3FA4B, 3FA41, 3FA37, 3FA2D, 3FA23, 3FA19, 3FA0F, 3FA05, 3F9FB, 3F9F1, 3F9E7, 3F9DC, 3F9D2, 3F9C8, 3F9BD, 3F9B3, 3F9A9, 3F99E, 3F994, 3F989, 3F97E, 3F974, 3F969, 3F95E, 3F954, 3F949, 3F93E, 3F933, 3F928, 3F91D, 3F912, 3F907, 3F8FC, 3F8F1, 3F8E6, 3F8DB, 3F8CF, 3F8C4, 3F8B9, 3F8AE, 3F8A2, 3F897, 3F88B, 3F880, 3F874, 3F869, 3F85D, 3F851, 3F846, 3F83A, 3F82E, 3F822, 3F817, 3F80B, 3F7FF, 3F7F3, 3F7E7, 3F7DB, 3F7CF, 3F7C2, 3F7B6, 3F7AA, 3F79E, 3F792, 3F785, 3F779, 3F76C, 3F760, 3F753, 3F747, 3F73A, 3F72E, 3F721, 3F714, 3F708, 3F6FB, 3F6EE, 3F6E1, 3F6D4, 3F6C7, 3F6BB, 3F6AE, 3F6A0, 3F693, 3F686, 3F679, 3F66C, 3F65F, 3F651, 3F644, 3F637, 3F629, 3F61C, 3F60E, 3F601, 3F5F3, 3F5E6, 3F5D8, 3F5CA, 3F5BD, 3F5AF, 3F5A1, 3F593, 3F585, 3F578, 3F56A, 3F55C, 3F54E, 3F540, 3F532, 3F523, 3F515, 3F507, 3F4F9, 3F4EA, 3F4DC, 3F4CE, 3F4BF, 3F4B1, 3F4A3, 3F494, 3F485, 3F477, 3F468, 3F45A, 3F44B, 3F43C, 3F42D, 3F41F, 3F410, 3F401, 3F3F2, 3F3E3, 3F3D4, 3F3C5, 3F3B6, 3F3A7, 3F398, 3F389, 3F37A, 3F36A, 3F35B, 3F34C, 3F33C, 3F32D, 3F31E, 3F30E, 3F2FF, 3F2EF, 3F2E0, 3F2D0, 3F2C1, 3F2B1, 3F2A1, 3F292, 3F282, 3F272, 3F262, 3F252, 3F243, 3F233, 3F223, 3F213, 3F203, 3F1F3, 3F1E3, 3F1D3, 3F1C3, 3F1B2, 3F1A2, 3F192, 3F182, 3F172, 3F161, 3F151, 3F141, 3F130, 3F120, 3F10F, 3F0FF, 3F0EE, 3F0DE, 3F0CD, 3F0BD, 3F0AC, 3F09C, 3F08B, 3F07A, 3F06A, 3F059, 3F048, 3F037, 3F026, 3F016, 3F005, 3EFF4, 3EFE3, 3EFD2, 3EFC1, 3EFB0, 3EF9F, 3EF8E, 3EF7D, 3EF6C, 3EF5B, 3EF4A, 3EF39, 3EF27, 3EF16, 3EF05, 3EEF4, 3EEE3, 3EED1, 3EEC0, 3EEAF, 3EE9D, 3EE8C, 3EE7B, 3EE69, 3EE58, 3EE46, 3EE35, 3EE23, 3EE12, 3EE01, 3EDEF, 3EDDD, 3EDCC, 3EDBA, 3EDA9, 3ED97, 3ED86, 3ED74, 3ED62, 3ED51, 3ED3F, 3ED2D, 3ED1C, 3ED0A, 3ECF8, 3ECE7, 3ECD5, 3ECC3, 3ECB1, 3ECA0, 3EC8E, 3EC7C, 3EC6A, 3EC58, 3EC47, 3EC35, 3EC23, 3EC11, 3EBFF, 3EBED, 3EBDB, 3EBCA, 3EBB8, 3EBA6, 3EB94, 3EB82, 3EB70, 3EB5E, 3EB4C, 3EB3A, 3EB28, 3EB17, 3EB05, 3EAF3, 3EAE1, 3EACF, 3EABD, 3EAAB, 3EA99, 3EA87, 3EA75, 3EA63, 3EA51, 3EA3F, 3EA2E, 3EA1C, 3EA0A, 3E9F8, 3E9E6, 3E9D4, 3E9C2, 3E9B0, 3E99E, 3E98C, 3E97B, 3E969, 3E957, 3E945, 3E933, 3E921, 3E90F, 3E8FE, 3E8EC, 3E8DA, 3E8C8, 3E8B6, 3E8A5, 3E893, 3E881, 3E86F, 3E85E, 3E84C, 3E83A, 3E829, 3E817, 3E805, 3E7F4, 3E7E2, 3E7D0, 3E7BF, 3E7AD, 3E79C, 3E78A, 3E779, 3E767, 3E756, 3E744, 3E733, 3E722, 3E710, 3E6FF, 3E6EE, 3E6DC, 3E6CB, 3E6BA, 3E6A8, 3E697, 3E686, 3E675, 3E664, 3E653, 3E642, 3E631, 3E620, 3E60F, 3E5FE, 3E5ED, 3E5DC, 3E5CB, 3E5BA, 3E5A9, 3E599, 3E588, 3E577, 3E566, 3E556, 3E545, 3E535, 3E524, 3E514, 3E503, 3E4F3, 3E4E3, 3E4D2, 3E4C2, 3E4B2, 3E4A2, 3E491, 3E481, 3E471, 3E461, 3E451, 3E441, 3E431, 3E422, 3E412, 3E402, 3E3F2, 3E3E3, 3E3D3, 3E3C4, 3E3B4, 3E3A5, 3E395, 3E386, 3E377, 3E367, 3E358, 3E349, 3E33A, 3E32B, 3E31C, 3E30D, 3E2FE, 3E2EF, 3E2E1, 3E2D2, 3E2C3, 3E2B5, 3E2A6, 3E298, 3E289, 3E27B, 3E26D, 3E25F, 3E251, 3E242, 3E234, 3E227, 3E219, 3E20B, 3E1FD, 3E1EF, 3E1E2, 3E1D4, 3E1C7, 3E1BA, 3E1AC, 3E19F, 3E192, 3E185, 3E178, 3E16B, 3E15E, 3E151, 3E144, 3E138, 3E12B, 3E11F, 3E112, 3E106, 3E0FA, 3E0EE, 3E0E2, 3E0D6, 3E0CA, 3E0BE, 3E0B2, 3E0A7, 3E09B, 3E08F, 3E084, 3E079, 3E06E, 3E062, 3E057, 3E04C, 3E042, 3E037, 3E02C, 3E022, 3E017, 3E00D, 3E002, 3DFF8, 3DFEE, 3DFE4, 3DFDA, 3DFD0, 3DFC7, 3DFBD, 3DFB4, 3DFAA, 3DFA1, 3DF98, 3DF8F, 3DF86, 3DF7D, 3DF74, 3DF6B, 3DF63, 3DF5A, 3DF52, 3DF4A, 3DF41, 3DF39, 3DF31, 3DF2A, 3DF22, 3DF1A, 3DF13, 3DF0C, 3DF04, 3DEFD, 3DEF6, 3DEEF, 3DEE8, 3DEE2, 3DEDB, 3DED5, 3DECF, 3DEC8, 3DEC2, 3DEBC, 3DEB7, 3DEB1, 3DEAB, 3DEA6, 3DEA1, 3DE9B, 3DE96, 3DE91, 3DE8D, 3DE88, 3DE83, 3DE7F, 3DE7B, 3DE77, 3DE73, 3DE6F, 3DE6B, 3DE67, 3DE64, 3DE61, 3DE5D, 3DE5A, 3DE57, 3DE55, 3DE52, 3DE4F, 3DE4D, 3DE4B, 3DE49, 3DE47, 3DE45, 3DE43, 3DE42, 3DE41, 3DE3F, 3DE3E, 3DE3D, 3DE3D, 3DE3C, 3DE3C, 3DE3B, 3DE3B, 3DE3B, 3DE3B, 3DE3C, 3DE3C, 3DE3D, 3DE3E, 3DE3E, 3DE40, 3DE41, 3DE42, 3DE44, 3DE46, 3DE47, 3DE4A, 3DE4C, 3DE4E, 3DE51, 3DE53, 3DE56, 3DE59, 3DE5D, 3DE60, 3DE63, 3DE67, 3DE6B, 3DE6F, 3DE73, 3DE78, 3DE7C, 3DE81, 3DE86, 3DE8B, 3DE90, 3DE96, 3DE9C, 3DEA1, 3DEA7, 3DEAE, 3DEB4, 3DEBA, 3DEC1, 3DEC8, 3DECF, 3DED6, 3DEDE, 3DEE5, 3DEED, 3DEF5, 3DEFD, 3DF06, 3DF0E, 3DF17, 3DF20, 3DF29, 3DF33, 3DF3C, 3DF46, 3DF50, 3DF5A, 3DF64, 3DF6F, 3DF79, 3DF84, 3DF8F, 3DF9B, 3DFA6, 3DFB2, 3DFBE, 3DFCA, 3DFD6, 3DFE3, 3DFEF, 3DFFC, 3E009, 3E017, 3E024, 3E032, 3E040, 3E04E, 3E05C, 3E06B, 3E07A, 3E089, 3E098, 3E0A7, 3E0B7, 3E0C7, 3E0D7, 3E0E7, 3E0F7, 3E108, 3E119, 3E12A, 3E13C, 3E14D, 3E15F, 3E171, 3E183, 3E196, 3E1A8, 3E1BB, 3E1CE, 3E1E2, 3E1F5, 3E209, 3E21D, 3E231, 3E246, 3E25A, 3E26F, 3E285, 3E29A, 3E2B0, 3E2C6, 3E2DC, 3E2F2, 3E308, 3E31F, 3E336, 3E34E, 3E365, 3E37D, 3E395, 3E3AD, 3E3C6, 3E3DE, 3E3F7, 3E410, 3E42A, 3E443, 3E45D, 3E478, 3E492, 3E4AD, 3E4C7, 3E4E3, 3E4FE, 3E51A, 3E535, 3E552, 3E56E, 3E58B, 3E5A7, 3E5C5, 3E5E2, 3E600, 3E61D, 3E63C, 3E65A, 3E679, 3E698, 3E6B7, 3E6D6, 3E6F6, 3E716, 3E736, 3E756, 3E777, 3E798, 3E7B9, 3E7DB, 3E7FD, 3E81F, 3E841, 3E863, 3E886, 3E8A9, 3E8CD, 3E8F0, 3E914, 3E938, 3E95D, 3E981, 3E9A6, 3E9CB, 3E9F1, 3EA17, 3EA3D, 3EA63, 3EA89, 3EAB0, 3EAD7, 3EAFF, 3EB26, 3EB4E, 3EB77, 3EB9F, 3EBC8, 3EBF1, 3EC1A, 3EC44, 3EC6E, 3EC98, 3ECC2, 3ECED, 3ED18, 3ED43, 3ED6F, 3ED9B, 3EDC7, 3EDF3, 3EE20, 3EE4D, 3EE7A, 3EEA7, 3EED5, 3EF03, 3EF32, 3EF60, 3EF8F, 3EFBF, 3EFEE, 3F01E, 3F04E, 3F07F, 3F0AF, 3F0E0, 3F112, 3F143, 3F175, 3F1A7, 3F1DA, 3F20C, 3F23F, 3F273, 3F2A6, 3F2DA, 3F30F, 3F343, 3F378, 3F3AD, 3F3E2, 3F418, 3F44E, 3F484, 3F4BB, 3F4F2, 3F529, 3F561, 3F598, 3F5D1, 3F609, 3F642, 3F67B, 3F6B4, 3F6EE, 3F728, 3F762, 3F79C, 3F7D7, 3F812, 3F84E, 3F88A, 3F8C6, 3F902, 3F93F, 3F97C, 3F9B9, 3F9F6, 3FA34, 3FA73, 3FAB1, 3FAF0, 3FB2F, 3FB6E, 3FBAE, 3FBEE, 3FC2F, 3FC6F, 3FCB0, 3FCF2, 3FD33, 3FD75, 3FDB8, 3FDFA, 3FE3D, 3FE80, 3FEC4, 3FF08, 3FF4C, 3FF90, 3FFD5;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_25f2c2372ab0b146',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '46d1f97566d151637946fb8707065939',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_25f2c2372ab0b146',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 1A, 5F, A5, EB, 131, 178, 1BF, 206, 24E, 296, 2DE, 327, 370, 3B9, 402, 44C, 496, 4E1, 52C, 577, 5C2, 60E, 65A, 6A6, 6F3, 740, 78E, 7DB, 829, 878, 8C6, 915, 965, 9B4, A04, A54, AA5, AF6, B47, B99, BEB, C3D, C8F, CE2, D36, D89, DDD, E31, E86, EDA, F2F, F85, FDB, 1031, 1087, 10DE, 1135, 118D, 11E4, 123C, 1295, 12ED, 1346, 13A0, 13FA, 1454, 14AE, 1509, 1564, 15BF, 161B, 1677, 16D3, 1730, 178D, 17EA, 1847, 18A5, 1904, 1962, 19C1, 1A20, 1A80, 1AE0, 1B40, 1BA1, 1C02, 1C63, 1CC4, 1D26, 1D88, 1DEB, 1E4E, 1EB1, 1F14, 1F78, 1FDC, 2041, 20A6, 210B, 2170, 21D6, 223C, 22A2, 2309, 2370, 23D8, 243F, 24A7, 2510, 2579, 25E2, 264B, 26B5, 271F, 2789, 27F4, 285F, 28CA, 2935, 29A1, 2A0E, 2A7A, 2AE7, 2B54, 2BC2, 2C30, 2C9E, 2D0D, 2D7B, 2DEB, 2E5A, 2ECA, 2F3A, 2FAB, 301B, 308C, 30FE, 3170, 31E2, 3254, 32C7, 333A, 33AD, 3421, 3495, 3509, 357D, 35F2, 3668, 36DD, 3753, 37C9, 3840, 38B7, 392E, 39A5, 3A1D, 3A95, 3B0D, 3B86, 3BFF, 3C78, 3CF2, 3D6C, 3DE6, 3E61, 3EDC, 3F57, 3FD2, 404E, 40CA, 4147, 41C4, 4241, 42BE, 433C, 43BA, 4438, 44B7, 4535, 45B5, 4634, 46B4, 4734, 47B5, 4835, 48B6, 4938, 49B9, 4A3B, 4ABD, 4B40, 4BC3, 4C46, 4CC9, 4D4D, 4DD1, 4E56, 4EDA, 4F5F, 4FE4, 506A, 50F0, 5176, 51FC, 5283, 530A, 5391, 5419, 54A1, 5529, 55B2, 563A, 56C3, 574D, 57D6, 5860, 58EA, 5975, 5A00, 5A8B, 5B16, 5BA2, 5C2E, 5CBA, 5D46, 5DD3, 5E60, 5EEE, 5F7B, 6009, 6097, 6126, 61B4, 6243, 62D3, 6362, 63F2, 6482, 6513, 65A3, 6634, 66C6, 6757, 67E9, 687B, 690D, 69A0, 6A32, 6AC6, 6B59, 6BED, 6C81, 6D15, 6DA9, 6E3E, 6ED3, 6F68, 6FFD, 7093, 7129, 71BF, 7256, 72ED, 7384, 741B, 74B3, 754A, 75E3, 767B, 7713, 77AC, 7845, 78DF, 7978, 7A12, 7AAC, 7B46, 7BE1, 7C7C, 7D17, 7DB2, 7E4E, 7EE9, 7F85, 8022, 80BE, 815B, 81F8, 8295, 8333, 83D0, 846E, 850C, 85AB, 8649, 86E8, 8787, 8826, 88C6, 8966, 8A06, 8AA6, 8B46, 8BE7, 8C88, 8D29, 8DCA, 8E6C, 8F0E, 8FB0, 9052, 90F4, 9197, 923A, 92DD, 9380, 9424, 94C7, 956B, 960F, 96B4, 9758, 97FD, 98A2, 9947, 99EC, 9A92, 9B38, 9BDE, 9C84, 9D2A, 9DD1, 9E77, 9F1E, 9FC5, A06D, A114, A1BC, A264, A30C, A3B4, A45D, A505, A5AE, A657, A700, A7AA, A853, A8FD, A9A7, AA51, AAFB, ABA6, AC50, ACFB, ADA6, AE51, AEFD, AFA8, B054, B100, B1AC, B258, B304, B3B1, B45D, B50A, B5B7, B664, B711, B7BF, B86C, B91A, B9C8, BA76, BB24, BBD2, BC81, BD2F, BDDE, BE8D, BF3C, BFEB, C09B, C14A, C1FA, C2A9, C359, C409, C4B9, C56A, C61A, C6CB, C77B, C82C, C8DD, C98E, CA3F, CAF0, CBA2, CC53, CD05, CDB7, CE69, CF1B, CFCD, D07F, D131, D1E4, D296, D349, D3FC, D4AE, D561, D615, D6C8, D77B, D82E, D8E2, D995, DA49, DAFD, DBB1, DC65, DD19, DDCD, DE81, DF35, DFEA, E09E, E152, E207, E2BC, E371, E425, E4DA, E58F, E644, E6F9, E7AF, E864, E919, E9CF, EA84, EB3A, EBEF, ECA5, ED5B, EE10, EEC6, EF7C, F032, F0E8, F19E, F254, F30A, F3C1, F477, F52D, F5E3, F69A, F750, F807, F8BD, F974, FA2A, FAE1, FB97, FC4E, FD05, FDBB, FE72, FF29, FFE0, 10096, 1014D, 10204, 102BB, 10372, 10429, 104E0, 10597, 1064E, 10704, 107BB, 10872, 10929, 109E0, 10A97, 10B4E, 10C05, 10CBC, 10D73, 10E2A, 10EE1, 10F98, 1104F, 11106, 111BD, 11274, 1132A, 113E1, 11498, 1154F, 11606, 116BD, 11773, 1182A, 118E1, 11997, 11A4E, 11B05, 11BBB, 11C72, 11D28, 11DDF, 11E95, 11F4C, 12002, 120B9, 1216F, 12225, 122DB, 12391, 12447, 124FE, 125B4, 12669, 1271F, 127D5, 1288B, 12941, 129F6, 12AAC, 12B61, 12C17, 12CCC, 12D82, 12E37, 12EEC, 12FA1, 13056, 1310B, 131C0, 13275, 13329, 133DE, 13493, 13547, 135FC, 136B0, 13764, 13818, 138CC, 13980, 13A34, 13AE8, 13B9B, 13C4F, 13D02, 13DB6, 13E69, 13F1C, 13FCF, 14082, 14135, 141E7, 1429A, 1434C, 143FF, 144B1, 14563, 14615, 146C7, 14779, 1482A, 148DC, 1498D, 14A3E, 14AEF, 14BA0, 14C51, 14D02, 14DB3, 14E63, 14F13, 14FC3, 15073, 15123, 151D3, 15283, 15332, 153E1, 15490, 1553F, 155EE, 1569D, 1574B, 157FA, 158A8, 15956, 15A04, 15AB1, 15B5F, 15C0C, 15CB9, 15D66, 15E13, 15EC0, 15F6C, 16019, 160C5, 16171, 1621C, 162C8, 16373, 1641F, 164CA, 16575, 1661F, 166CA, 16774, 1681E, 168C8, 16972, 16A1B, 16AC4, 16B6D, 16C16, 16CBF, 16D67, 16E10, 16EB8, 16F5F, 17007, 170AE, 17156, 171FD, 172A3, 1734A, 173F0, 17496, 1753C, 175E2, 17687, 1772C, 177D1, 17876, 1791B, 179BF, 17A63, 17B07, 17BAA, 17C4E, 17CF1, 17D93, 17E36, 17ED8, 17F7A, 1801C, 180BE, 1815F, 18200, 182A1, 18342, 183E2, 18482, 18522, 185C1, 18661, 18700, 1879E, 1883D, 188DB, 18979, 18A17, 18AB4, 18B51, 18BEE, 18C8B, 18D27, 18DC3, 18E5F, 18EFA, 18F95, 19030, 190CB, 19165, 191FF, 19299, 19332, 193CB, 19464, 194FD, 19595, 1962D, 196C5, 1975C, 197F3, 1988A, 19920, 199B6, 19A4C, 19AE2, 19B77, 19C0C, 19CA0, 19D35, 19DC8, 19E5C, 19EEF, 19F82, 1A015, 1A0A7, 1A139, 1A1CB, 1A25C, 1A2ED, 1A37E, 1A40F, 1A49F, 1A52E, 1A5BE, 1A64D, 1A6DB, 1A76A, 1A7F8, 1A885, 1A913, 1A9A0, 1AA2C, 1AAB9, 1AB45, 1ABD0, 1AC5B, 1ACE6, 1AD71, 1ADFB, 1AE85, 1AF0E, 1AF98, 1B020, 1B0A9, 1B131, 1B1B8, 1B240, 1B2C7, 1B34D, 1B3D3, 1B459, 1B4DF, 1B564, 1B5E9, 1B66D, 1B6F1, 1B774, 1B7F8, 1B87B, 1B8FD, 1B97F, 1BA01, 1BA82, 1BB03, 1BB84, 1BC04, 1BC83, 1BD03, 1BD82, 1BE00, 1BE7F, 1BEFC, 1BF7A, 1BFF7, 1C073, 1C0F0, 1C16B, 1C1E7, 1C262, 1C2DC, 1C357, 1C3D0, 1C44A, 1C4C3, 1C53B, 1C5B4, 1C62B, 1C6A3, 1C719, 1C790, 1C806, 1C87C, 1C8F1, 1C966, 1C9DA, 1CA4E, 1CAC2, 1CB35, 1CBA8, 1CC1A, 1CC8C, 1CCFD, 1CD6E, 1CDDF, 1CE4F, 1CEBF, 1CF2E, 1CF9D, 1D00B, 1D079, 1D0E7, 1D154, 1D1C0, 1D22D, 1D298, 1D304, 1D36F, 1D3D9, 1D443, 1D4AD, 1D516, 1D57E, 1D5E7, 1D64E, 1D6B6, 1D71D, 1D783, 1D7E9, 1D84E, 1D8B3, 1D918, 1D97C, 1D9E0, 1DA43, 1DAA6, 1DB08, 1DB6A, 1DBCB, 1DC2C, 1DC8C, 1DCEC, 1DD4C, 1DDAB, 1DE09, 1DE68, 1DEC5, 1DF22, 1DF7F, 1DFDB, 1E037, 1E092, 1E0ED, 1E147, 1E1A1, 1E1FA, 1E253, 1E2AB, 1E303, 1E35B, 1E3B2, 1E408, 1E45E, 1E4B4, 1E508, 1E55D, 1E5B1, 1E604, 1E658, 1E6AA, 1E6FC, 1E74E, 1E79F, 1E7EF, 1E83F, 1E88F, 1E8DE, 1E92D, 1E97B, 1E9C8, 1EA15, 1EA62, 1EAAE, 1EAFA, 1EB45, 1EB8F, 1EBD9, 1EC23, 1EC6C, 1ECB5, 1ECFD, 1ED44, 1ED8B, 1EDD2, 1EE18, 1EE5D, 1EEA2, 1EEE7, 1EF2B, 1EF6E, 1EFB1, 1EFF4, 1F036, 1F077, 1F0B8, 1F0F9, 1F138, 1F178, 1F1B7, 1F1F5, 1F233, 1F270, 1F2AD, 1F2E9, 1F325, 1F360, 1F39B, 1F3D5, 1F40F, 1F448, 1F480, 1F4B8, 1F4F0, 1F527, 1F55D, 1F593, 1F5C9, 1F5FE, 1F632, 1F666, 1F699, 1F6CC, 1F6FE, 1F730, 1F761, 1F792, 1F7C2, 1F7F2, 1F821, 1F84F, 1F87D, 1F8AB, 1F8D8, 1F904, 1F930, 1F95B, 1F986, 1F9B0, 1F9DA, 1FA03, 1FA2C, 1FA54, 1FA7B, 1FAA2, 1FAC9, 1FAEF, 1FB14, 1FB39, 1FB5D, 1FB81, 1FBA4, 1FBC7, 1FBE9, 1FC0B, 1FC2C, 1FC4C, 1FC6C, 1FC8C, 1FCAB, 1FCC9, 1FCE7, 1FD04, 1FD21, 1FD3D, 1FD59, 1FD74, 1FD8E, 1FDA8, 1FDC1, 1FDDA, 1FDF3, 1FE0A, 1FE22, 1FE38, 1FE4E, 1FE64, 1FE79, 1FE8E, 1FEA2, 1FEB5, 1FEC8, 1FEDA, 1FEEC, 1FEFD, 1FF0E, 1FF1E, 1FF2D, 1FF3C, 1FF4B, 1FF58, 1FF66, 1FF73, 1FF7F, 1FF8A, 1FF96, 1FFA0, 1FFAA, 1FFB4, 1FFBD, 1FFC5, 1FFCD, 1FFD4, 1FFDB, 1FFE1, 1FFE6, 1FFEB, 1FFF0, 1FFF4, 1FFF7, 1FFFA, 1FFFC, 1FFFE, 1FFFF, 1FFFF;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_5fa31a00bae3d0c8',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ec62f339f4cfbb4b1e70c9d756cf58e1',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_5fa31a00bae3d0c8',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 1FFFF, 1FFFF, 1FFFE, 1FFFD, 1FFFB, 1FFF8, 1FFF5, 1FFF1, 1FFED, 1FFE8, 1FFE2, 1FFDC, 1FFD6, 1FFCE, 1FFC7, 1FFBF, 1FFB6, 1FFAC, 1FFA3, 1FF98, 1FF8D, 1FF82, 1FF76, 1FF69, 1FF5C, 1FF4E, 1FF40, 1FF31, 1FF21, 1FF11, 1FF01, 1FEF0, 1FEDE, 1FECC, 1FEB9, 1FEA6, 1FE92, 1FE7E, 1FE69, 1FE54, 1FE3E, 1FE27, 1FE10, 1FDF8, 1FDE0, 1FDC7, 1FDAE, 1FD94, 1FD7A, 1FD5F, 1FD43, 1FD27, 1FD0B, 1FCEE, 1FCD0, 1FCB2, 1FC93, 1FC74, 1FC54, 1FC34, 1FC13, 1FBF1, 1FBCF, 1FBAD, 1FB89, 1FB66, 1FB42, 1FB1D, 1FAF8, 1FAD2, 1FAAB, 1FA85, 1FA5D, 1FA35, 1FA0D, 1F9E4, 1F9BA, 1F990, 1F965, 1F93A, 1F90E, 1F8E2, 1F8B5, 1F888, 1F85A, 1F82C, 1F7FD, 1F7CD, 1F79D, 1F76D, 1F73C, 1F70A, 1F6D8, 1F6A5, 1F672, 1F63E, 1F60A, 1F5D5, 1F5A0, 1F56A, 1F534, 1F4FD, 1F4C5, 1F48D, 1F455, 1F41C, 1F3E2, 1F3A8, 1F36E, 1F333, 1F2F7, 1F2BB, 1F27E, 1F241, 1F203, 1F1C5, 1F187, 1F147, 1F108, 1F0C7, 1F086, 1F045, 1F003, 1EFC1, 1EF7E, 1EF3B, 1EEF7, 1EEB3, 1EE6E, 1EE28, 1EDE2, 1ED9C, 1ED55, 1ED0D, 1ECC6, 1EC7D, 1EC34, 1EBEB, 1EBA1, 1EB56, 1EB0B, 1EAC0, 1EA74, 1EA27, 1E9DA, 1E98D, 1E93F, 1E8F0, 1E8A1, 1E852, 1E802, 1E7B2, 1E761, 1E70F, 1E6BD, 1E66B, 1E618, 1E5C5, 1E571, 1E51C, 1E4C7, 1E472, 1E41C, 1E3C6, 1E36F, 1E318, 1E2C0, 1E268, 1E20F, 1E1B6, 1E15C, 1E102, 1E0A7, 1E04C, 1DFF1, 1DF95, 1DF38, 1DEDB, 1DE7D, 1DE20, 1DDC1, 1DD62, 1DD03, 1DCA3, 1DC43, 1DBE2, 1DB81, 1DB1F, 1DABD, 1DA5A, 1D9F7, 1D994, 1D92F, 1D8CB, 1D866, 1D801, 1D79B, 1D735, 1D6CE, 1D667, 1D5FF, 1D597, 1D52E, 1D4C5, 1D45C, 1D3F2, 1D388, 1D31D, 1D2B2, 1D246, 1D1DA, 1D16D, 1D100, 1D093, 1D025, 1CFB7, 1CF48, 1CED9, 1CE69, 1CDF9, 1CD89, 1CD18, 1CCA6, 1CC35, 1CBC2, 1CB50, 1CADD, 1CA69, 1C9F5, 1C981, 1C90C, 1C897, 1C822, 1C7AC, 1C735, 1C6BE, 1C647, 1C5D0, 1C558, 1C4DF, 1C466, 1C3ED, 1C373, 1C2F9, 1C27F, 1C204, 1C188, 1C10D, 1C091, 1C014, 1BF97, 1BF1A, 1BE9C, 1BE1E, 1BD9F, 1BD21, 1BCA1, 1BC22, 1BBA2, 1BB21, 1BAA0, 1BA1F, 1B99D, 1B91C, 1B899, 1B816, 1B793, 1B710, 1B68C, 1B608, 1B583, 1B4FE, 1B479, 1B3F3, 1B36D, 1B2E6, 1B25F, 1B1D8, 1B151, 1B0C9, 1B040, 1AFB8, 1AF2F, 1AEA5, 1AE1B, 1AD91, 1AD07, 1AC7C, 1ABF1, 1AB65, 1AADA, 1AA4D, 1A9C1, 1A934, 1A8A7, 1A819, 1A78B, 1A6FD, 1A66E, 1A5DF, 1A550, 1A4C0, 1A430, 1A3A0, 1A30F, 1A27E, 1A1ED, 1A15C, 1A0CA, 1A037, 19FA5, 19F12, 19E7F, 19DEB, 19D57, 19CC3, 19C2F, 19B9A, 19B05, 19A6F, 199D9, 19943, 198AD, 19816, 1977F, 196E8, 19651, 195B9, 19520, 19488, 193EF, 19356, 192BD, 19223, 19189, 190EF, 19054, 18FBA, 18F1F, 18E83, 18DE7, 18D4C, 18CAF, 18C13, 18B76, 18AD9, 18A3C, 1899E, 18900, 18862, 187C4, 18725, 18686, 185E7, 18547, 184A8, 18408, 18367, 182C7, 18226, 18185, 180E4, 18042, 17FA0, 17EFE, 17E5C, 17DBA, 17D17, 17C74, 17BD1, 17B2D, 17A89, 179E5, 17941, 1789D, 177F8, 17753, 176AE, 17609, 17563, 174BD, 17417, 17371, 172CB, 17224, 1717D, 170D6, 1702E, 16F87, 16EDF, 16E37, 16D8F, 16CE6, 16C3E, 16B95, 16AEC, 16A43, 16999, 168F0, 16846, 1679C, 166F2, 16647, 1659D, 164F2, 16447, 1639C, 162F0, 16245, 16199, 160ED, 16041, 15F95, 15EE8, 15E3C, 15D8F, 15CE2, 15C35, 15B88, 15ADA, 15A2C, 1597F, 158D1, 15823, 15774, 156C6, 15617, 15568, 154B9, 1540A, 1535B, 152AC, 151FC, 1514D, 1509D, 14FED, 14F3D, 14E8C, 14DDC, 14D2C, 14C7B, 14BCA, 14B19, 14A68, 149B7, 14906, 14854, 147A2, 146F1, 1463F, 1458D, 144DB, 14429, 14376, 142C4, 14211, 1415F, 140AC, 13FF9, 13F46, 13E93, 13DE0, 13D2C, 13C79, 13BC6, 13B12, 13A5E, 139AA, 138F7, 13843, 1378E, 136DA, 13626, 13572, 134BD, 13409, 13354, 1329F, 131EB, 13136, 13081, 12FCC, 12F17, 12E61, 12DAC, 12CF7, 12C42, 12B8C, 12AD7, 12A21, 1296B, 128B6, 12800, 1274A, 12694, 125DE, 12528, 12472, 123BC, 12306, 12250, 1219A, 120E3, 1202D, 11F77, 11EC0, 11E0A, 11D53, 11C9D, 11BE6, 11B30, 11A79, 119C3, 1190C, 11855, 1179E, 116E8, 11631, 1157A, 114C3, 1140C, 11356, 1129F, 111E8, 11131, 1107A, 10FC3, 10F0C, 10E55, 10D9E, 10CE7, 10C30, 10B79, 10AC2, 10A0B, 10954, 1089E, 107E7, 10730, 10679, 105C2, 1050B, 10454, 1039D, 102E6, 1022F, 10178, 100C2, 1000B, FF54, FE9D, FDE7, FD30, FC79, FBC3, FB0C, FA55, F99F, F8E8, F832, F77B, F6C5, F60F, F558, F4A2, F3EC, F335, F27F, F1C9, F113, F05D, EFA7, EEF1, EE3B, ED86, ECD0, EC1A, EB65, EAAF, E9FA, E944, E88F, E7DA, E724, E66F, E5BA, E505, E450, E39B, E2E7, E232, E17D, E0C9, E014, DF60, DEAB, DDF7, DD43, DC8F, DBDB, DB27, DA74, D9C0, D90C, D859, D7A5, D6F2, D63F, D58C, D4D9, D426, D373, D2C1, D20E, D15B, D0A9, CFF7, CF45, CE93, CDE1, CD2F, CC7D, CBCC, CB1A, CA69, C9B8, C907, C856, C7A5, C6F4, C644, C593, C4E3, C433, C383, C2D3, C223, C174, C0C4, C015, BF66, BEB7, BE08, BD59, BCAA, BBFC, BB4D, BA9F, B9F1, B943, B895, B7E8, B73A, B68D, B5E0, B533, B486, B3D9, B32D, B281, B1D4, B128, B07D, AFD1, AF25, AE7A, ADCF, AD24, AC79, ABCE, AB24, AA7A, A9CF, A925, A87C, A7D2, A729, A67F, A5D6, A52E, A485, A3DC, A334, A28C, A1E4, A13C, A095, 9FED, 9F46, 9E9F, 9DF8, 9D52, 9CAB, 9C05, 9B5F, 9AB9, 9A14, 996E, 98C9, 9824, 977F, 96DB, 9636, 9592, 94EE, 944B, 93A7, 9304, 9261, 91BE, 911B, 9079, 8FD6, 8F34, 8E92, 8DF1, 8D4F, 8CAE, 8C0D, 8B6D, 8ACC, 8A2C, 898C, 88EC, 884C, 87AD, 870E, 866F, 85D0, 8532, 8494, 83F6, 8358, 82BB, 821D, 8180, 80E4, 8047, 7FAB, 7F0F, 7E73, 7DD7, 7D3C, 7CA1, 7C06, 7B6B, 7AD1, 7A37, 799D, 7903, 786A, 77D1, 7738, 769F, 7607, 756F, 74D7, 743F, 73A8, 7311, 727A, 71E3, 714D, 70B7, 7021, 6F8C, 6EF6, 6E61, 6DCD, 6D38, 6CA4, 6C10, 6B7C, 6AE9, 6A56, 69C3, 6930, 689E, 680C, 677A, 66E8, 6657, 65C6, 6535, 64A5, 6415, 6385, 62F5, 6266, 61D7, 6148, 60B9, 602B, 5F9D, 5F0F, 5E82, 5DF5, 5D68, 5CDC, 5C4F, 5BC3, 5B38, 5AAC, 5A21, 5996, 590C, 5881, 57F7, 576E, 56E4, 565B, 55D2, 554A, 54C2, 543A, 53B2, 532B, 52A3, 521D, 5196, 5110, 508A, 5005, 4F7F, 4EFA, 4E76, 4DF1, 4D6D, 4CE9, 4C66, 4BE2, 4B60, 4ADD, 4A5B, 49D9, 4957, 48D5, 4854, 47D4, 4753, 46D3, 4653, 45D3, 4554, 44D5, 4456, 43D8, 435A, 42DC, 425F, 41E2, 4165, 40E8, 406C, 3FF0, 3F75, 3EF9, 3E7E, 3E04, 3D89, 3D0F, 3C96, 3C1C, 3BA3, 3B2A, 3AB2, 3A3A, 39C2, 394B, 38D3, 385C, 37E6, 3770, 36FA, 3684, 360F, 359A, 3525, 34B1, 343D, 33C9, 3356, 32E2, 3270, 31FD, 318B, 3119, 30A8, 3037, 2FC6, 2F55, 2EE5, 2E75, 2E06, 2D96, 2D27, 2CB9, 2C4B, 2BDD, 2B6F, 2B02, 2A95, 2A28, 29BC, 2950, 28E4, 2879, 280E, 27A3, 2738, 26CE, 2665, 25FB, 2592, 2529, 24C1, 2459, 23F1, 2389, 2322, 22BB, 2255, 21EF, 2189, 2123, 20BE, 2059, 1FF5, 1F91, 1F2D, 1EC9, 1E66, 1E03, 1DA0, 1D3E, 1CDC, 1C7B, 1C19, 1BB8, 1B58, 1AF7, 1A97, 1A38, 19D8, 1979, 191B, 18BC, 185E, 1801, 17A3, 1746, 16EA, 168D, 1631, 15D5, 157A, 151F, 14C4, 146A, 1410, 13B6, 135C, 1303, 12AB, 1252, 11FA, 11A2, 114B, 10F3, 109D, 1046, FF0, F9A, F44, EEF, E9A, E46, DF2, D9E, D4A, CF7, CA4, C51, BFF, BAD, B5B, B0A, AB9, A68, A18, 9C8, 978, 929, 8DA, 88B, 83D, 7EF, 7A1, 753, 706, 6BA, 66D, 621, 5D5, 58A, 53E, 4F3, 4A9, 45F, 415, 3CB, 382, 339, 2F0, 2A8, 260, 218, 1D1, 18A, 143, FD, B7, 71, 2B;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_a29f7bcc57c74c3b',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '89b779e33c6e66897607268755fc753a',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_a29f7bcc57c74c3b',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFE6, 3FFA1, 3FF5D, 3FF19, 3FED5, 3FE91, 3FE4E, 3FE0B, 3FDC8, 3FD86, 3FD44, 3FD02, 3FCC1, 3FC80, 3FC3F, 3FBFE, 3FBBE, 3FB7F, 3FB3F, 3FB00, 3FAC1, 3FA82, 3FA44, 3FA06, 3F9C8, 3F98B, 3F94E, 3F911, 3F8D5, 3F899, 3F85D, 3F821, 3F7E6, 3F7AB, 3F771, 3F736, 3F6FC, 3F6C3, 3F689, 3F650, 3F617, 3F5DF, 3F5A7, 3F56F, 3F537, 3F500, 3F4C9, 3F492, 3F45C, 3F426, 3F3F0, 3F3BB, 3F385, 3F351, 3F31C, 3F2E8, 3F2B4, 3F280, 3F24D, 3F219, 3F1E7, 3F1B4, 3F182, 3F150, 3F11E, 3F0ED, 3F0BC, 3F08B, 3F05B, 3F02A, 3EFFB, 3EFCB, 3EF9C, 3EF6D, 3EF3E, 3EF0F, 3EEE1, 3EEB3, 3EE86, 3EE58, 3EE2B, 3EDFF, 3EDD2, 3EDA6, 3ED7A, 3ED4E, 3ED23, 3ECF8, 3ECCD, 3ECA3, 3EC79, 3EC4F, 3EC25, 3EBFC, 3EBD3, 3EBAA, 3EB81, 3EB59, 3EB31, 3EB09, 3EAE2, 3EABB, 3EA94, 3EA6D, 3EA47, 3EA21, 3E9FB, 3E9D5, 3E9B0, 3E98B, 3E966, 3E942, 3E91E, 3E8FA, 3E8D6, 3E8B3, 3E88F, 3E86D, 3E84A, 3E828, 3E806, 3E7E4, 3E7C2, 3E7A1, 3E780, 3E75F, 3E73F, 3E71E, 3E6FE, 3E6DF, 3E6BF, 3E6A0, 3E681, 3E662, 3E644, 3E626, 3E608, 3E5EA, 3E5CD, 3E5AF, 3E592, 3E576, 3E559, 3E53D, 3E521, 3E506, 3E4EA, 3E4CF, 3E4B4, 3E499, 3E47F, 3E465, 3E44B, 3E431, 3E417, 3E3FE, 3E3E5, 3E3CC, 3E3B4, 3E39C, 3E384, 3E36C, 3E354, 3E33D, 3E326, 3E30F, 3E2F8, 3E2E2, 3E2CC, 3E2B6, 3E2A0, 3E28B, 3E275, 3E260, 3E24C, 3E237, 3E223, 3E20F, 3E1FB, 3E1E7, 3E1D4, 3E1C1, 3E1AE, 3E19B, 3E189, 3E176, 3E164, 3E152, 3E141, 3E12F, 3E11E, 3E10D, 3E0FC, 3E0EC, 3E0DC, 3E0CB, 3E0BC, 3E0AC, 3E09C, 3E08D, 3E07E, 3E06F, 3E061, 3E052, 3E044, 3E036, 3E028, 3E01B, 3E00D, 3E000, 3DFF3, 3DFE7, 3DFDA, 3DFCE, 3DFC2, 3DFB6, 3DFAA, 3DF9E, 3DF93, 3DF88, 3DF7D, 3DF72, 3DF68, 3DF5D, 3DF53, 3DF49, 3DF3F, 3DF36, 3DF2C, 3DF23, 3DF1A, 3DF11, 3DF09, 3DF00, 3DEF8, 3DEF0, 3DEE8, 3DEE1, 3DED9, 3DED2, 3DECB, 3DEC4, 3DEBD, 3DEB6, 3DEB0, 3DEAA, 3DEA4, 3DE9E, 3DE98, 3DE93, 3DE8D, 3DE88, 3DE83, 3DE7F, 3DE7A, 3DE75, 3DE71, 3DE6D, 3DE69, 3DE65, 3DE62, 3DE5E, 3DE5B, 3DE58, 3DE55, 3DE52, 3DE50, 3DE4D, 3DE4B, 3DE49, 3DE47, 3DE45, 3DE44, 3DE42, 3DE41, 3DE40, 3DE3F, 3DE3E, 3DE3D, 3DE3D, 3DE3C, 3DE3C, 3DE3C, 3DE3C, 3DE3D, 3DE3D, 3DE3E, 3DE3E, 3DE3F, 3DE40, 3DE41, 3DE43, 3DE44, 3DE46, 3DE47, 3DE49, 3DE4B, 3DE4E, 3DE50, 3DE52, 3DE55, 3DE58, 3DE5B, 3DE5E, 3DE61, 3DE64, 3DE67, 3DE6B, 3DE6F, 3DE73, 3DE77, 3DE7B, 3DE7F, 3DE83, 3DE88, 3DE8C, 3DE91, 3DE96, 3DE9B, 3DEA0, 3DEA6, 3DEAB, 3DEB1, 3DEB6, 3DEBC, 3DEC2, 3DEC8, 3DECE, 3DED4, 3DEDB, 3DEE1, 3DEE8, 3DEEF, 3DEF5, 3DEFC, 3DF04, 3DF0B, 3DF12, 3DF1A, 3DF21, 3DF29, 3DF31, 3DF38, 3DF40, 3DF49, 3DF51, 3DF59, 3DF62, 3DF6A, 3DF73, 3DF7B, 3DF84, 3DF8D, 3DF96, 3DFA0, 3DFA9, 3DFB2, 3DFBC, 3DFC5, 3DFCF, 3DFD9, 3DFE3, 3DFED, 3DFF7, 3E001, 3E00B, 3E016, 3E020, 3E02B, 3E035, 3E040, 3E04B, 3E056, 3E061, 3E06C, 3E077, 3E082, 3E08E, 3E099, 3E0A5, 3E0B0, 3E0BC, 3E0C8, 3E0D4, 3E0E0, 3E0EC, 3E0F8, 3E104, 3E110, 3E11D, 3E129, 3E136, 3E142, 3E14F, 3E15C, 3E169, 3E176, 3E183, 3E190, 3E19D, 3E1AA, 3E1B7, 3E1C5, 3E1D2, 3E1E0, 3E1ED, 3E1FB, 3E208, 3E216, 3E224, 3E232, 3E240, 3E24E, 3E25C, 3E26A, 3E279, 3E287, 3E295, 3E2A4, 3E2B2, 3E2C1, 3E2CF, 3E2DE, 3E2ED, 3E2FB, 3E30A, 3E319, 3E328, 3E337, 3E346, 3E355, 3E364, 3E374, 3E383, 3E392, 3E3A2, 3E3B1, 3E3C1, 3E3D0, 3E3E0, 3E3EF, 3E3FF, 3E40F, 3E41F, 3E42E, 3E43E, 3E44E, 3E45E, 3E46E, 3E47E, 3E48E, 3E49E, 3E4AF, 3E4BF, 3E4CF, 3E4DF, 3E4F0, 3E500, 3E511, 3E521, 3E532, 3E542, 3E553, 3E563, 3E574, 3E585, 3E595, 3E5A6, 3E5B7, 3E5C8, 3E5D9, 3E5E9, 3E5FA, 3E60B, 3E61C, 3E62D, 3E63E, 3E64F, 3E660, 3E672, 3E683, 3E694, 3E6A5, 3E6B6, 3E6C8, 3E6D9, 3E6EA, 3E6FB, 3E70D, 3E71E, 3E730, 3E741, 3E752, 3E764, 3E775, 3E787, 3E798, 3E7AA, 3E7BB, 3E7CD, 3E7DF, 3E7F0, 3E802, 3E813, 3E825, 3E837, 3E848, 3E85A, 3E86C, 3E87E, 3E88F, 3E8A1, 3E8B3, 3E8C5, 3E8D6, 3E8E8, 3E8FA, 3E90C, 3E91E, 3E92F, 3E941, 3E953, 3E965, 3E977, 3E989, 3E99B, 3E9AD, 3E9BE, 3E9D0, 3E9E2, 3E9F4, 3EA06, 3EA18, 3EA2A, 3EA3C, 3EA4E, 3EA60, 3EA72, 3EA83, 3EA95, 3EAA7, 3EAB9, 3EACB, 3EADD, 3EAEF, 3EB01, 3EB13, 3EB25, 3EB37, 3EB49, 3EB5B, 3EB6C, 3EB7E, 3EB90, 3EBA2, 3EBB4, 3EBC6, 3EBD8, 3EBEA, 3EBFB, 3EC0D, 3EC1F, 3EC31, 3EC43, 3EC55, 3EC66, 3EC78, 3EC8A, 3EC9C, 3ECAE, 3ECBF, 3ECD1, 3ECE3, 3ECF5, 3ED06, 3ED18, 3ED2A, 3ED3B, 3ED4D, 3ED5F, 3ED70, 3ED82, 3ED94, 3EDA5, 3EDB7, 3EDC8, 3EDDA, 3EDEB, 3EDFD, 3EE0E, 3EE20, 3EE31, 3EE43, 3EE54, 3EE66, 3EE77, 3EE88, 3EE9A, 3EEAB, 3EEBC, 3EECE, 3EEDF, 3EEF0, 3EF01, 3EF13, 3EF24, 3EF35, 3EF46, 3EF57, 3EF68, 3EF79, 3EF8A, 3EF9B, 3EFAC, 3EFBD, 3EFCE, 3EFDF, 3EFF0, 3F001, 3F012, 3F023, 3F034, 3F044, 3F055, 3F066, 3F077, 3F087, 3F098, 3F0A9, 3F0B9, 3F0CA, 3F0DA, 3F0EB, 3F0FB, 3F10C, 3F11C, 3F12D, 3F13D, 3F14D, 3F15E, 3F16E, 3F17E, 3F18F, 3F19F, 3F1AF, 3F1BF, 3F1CF, 3F1DF, 3F1EF, 3F1FF, 3F20F, 3F21F, 3F22F, 3F23F, 3F24F, 3F25F, 3F26F, 3F27E, 3F28E, 3F29E, 3F2AE, 3F2BD, 3F2CD, 3F2DC, 3F2EC, 3F2FB, 3F30B, 3F31A, 3F32A, 3F339, 3F348, 3F358, 3F367, 3F376, 3F385, 3F395, 3F3A4, 3F3B3, 3F3C2, 3F3D1, 3F3E0, 3F3EF, 3F3FE, 3F40D, 3F41B, 3F42A, 3F439, 3F448, 3F456, 3F465, 3F474, 3F482, 3F491, 3F49F, 3F4AE, 3F4BC, 3F4CB, 3F4D9, 3F4E7, 3F4F6, 3F504, 3F512, 3F520, 3F52E, 3F53D, 3F54B, 3F559, 3F567, 3F575, 3F582, 3F590, 3F59E, 3F5AC, 3F5BA, 3F5C7, 3F5D5, 3F5E3, 3F5F0, 3F5FE, 3F60B, 3F619, 3F626, 3F634, 3F641, 3F64E, 3F65C, 3F669, 3F676, 3F683, 3F690, 3F69E, 3F6AB, 3F6B8, 3F6C5, 3F6D2, 3F6DE, 3F6EB, 3F6F8, 3F705, 3F712, 3F71E, 3F72B, 3F738, 3F744, 3F751, 3F75D, 3F76A, 3F776, 3F782, 3F78F, 3F79B, 3F7A7, 3F7B4, 3F7C0, 3F7CC, 3F7D8, 3F7E4, 3F7F0, 3F7FC, 3F808, 3F814, 3F820, 3F82C, 3F837, 3F843, 3F84F, 3F85A, 3F866, 3F872, 3F87D, 3F889, 3F894, 3F8A0, 3F8AB, 3F8B6, 3F8C2, 3F8CD, 3F8D8, 3F8E3, 3F8EF, 3F8FA, 3F905, 3F910, 3F91B, 3F926, 3F931, 3F93C, 3F946, 3F951, 3F95C, 3F967, 3F971, 3F97C, 3F987, 3F991, 3F99C, 3F9A6, 3F9B1, 3F9BB, 3F9C5, 3F9D0, 3F9DA, 3F9E4, 3F9EF, 3F9F9, 3FA03, 3FA0D, 3FA17, 3FA21, 3FA2B, 3FA35, 3FA3F, 3FA49, 3FA53, 3FA5D, 3FA66, 3FA70, 3FA7A, 3FA84, 3FA8D, 3FA97, 3FAA0, 3FAAA, 3FAB3, 3FABD, 3FAC6, 3FAD0, 3FAD9, 3FAE2, 3FAEC, 3FAF5, 3FAFE, 3FB07, 3FB10, 3FB19, 3FB23, 3FB2C, 3FB35, 3FB3D, 3FB46, 3FB4F, 3FB58, 3FB61, 3FB6A, 3FB73, 3FB7B, 3FB84, 3FB8D, 3FB95, 3FB9E, 3FBA6, 3FBAF, 3FBB7, 3FBC0, 3FBC8, 3FBD1, 3FBD9, 3FBE1, 3FBEA, 3FBF2, 3FBFA, 3FC02, 3FC0A, 3FC13, 3FC1B, 3FC23, 3FC2B, 3FC33, 3FC3B, 3FC43, 3FC4B, 3FC53, 3FC5A, 3FC62, 3FC6A, 3FC72, 3FC7A, 3FC81, 3FC89, 3FC91, 3FC98, 3FCA0, 3FCA7, 3FCAF, 3FCB6, 3FCBE, 3FCC5, 3FCCD, 3FCD4, 3FCDC, 3FCE3, 3FCEA, 3FCF1, 3FCF9, 3FD00, 3FD07, 3FD0E, 3FD15, 3FD1D, 3FD24, 3FD2B, 3FD32, 3FD39, 3FD40, 3FD47, 3FD4E, 3FD55, 3FD5B, 3FD62, 3FD69, 3FD70, 3FD77, 3FD7D, 3FD84, 3FD8B, 3FD92, 3FD98, 3FD9F, 3FDA6, 3FDAC, 3FDB3, 3FDB9, 3FDC0, 3FDC6, 3FDCD, 3FDD3, 3FDDA, 3FDE0, 3FDE7, 3FDED, 3FDF3, 3FDFA, 3FE00, 3FE06, 3FE0C, 3FE13, 3FE19, 3FE1F, 3FE25, 3FE2C, 3FE32, 3FE38, 3FE3E, 3FE44, 3FE4A, 3FE50, 3FE56, 3FE5C, 3FE62, 3FE68, 3FE6E, 3FE74, 3FE7A, 3FE80, 3FE86, 3FE8C, 3FE92, 3FE97, 3FE9D, 3FEA3, 3FEA9, 3FEAF, 3FEB4, 3FEBA, 3FEC0, 3FEC6, 3FECB, 3FED1, 3FED7, 3FEDC, 3FEE2, 3FEE8, 3FEED, 3FEF3, 3FEF8, 3FEFE, 3FF03, 3FF09, 3FF0F, 3FF14, 3FF1A, 3FF1F, 3FF25, 3FF2A, 3FF2F, 3FF35, 3FF3A, 3FF40, 3FF45, 3FF4B, 3FF50, 3FF55, 3FF5B, 3FF60, 3FF65, 3FF6B, 3FF70, 3FF75, 3FF7B, 3FF80, 3FF85, 3FF8B, 3FF90, 3FF95, 3FF9A, 3FFA0, 3FFA5, 3FFAA, 3FFAF, 3FFB4, 3FFBA, 3FFBF, 3FFC4, 3FFC9, 3FFCE, 3FFD4, 3FFD9, 3FFDE, 3FFE3, 3FFE8, 3FFED, 3FFF3, 3FFF8, 3FFFD;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_00770e99d0f3dff9',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '68715f604a74462178fdca9ad2f5d021',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_00770e99d0f3dff9',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFFE, 3FFF9, 3FFF4, 3FFEE, 3FFE9, 3FFE4, 3FFDF, 3FFDA, 3FFD5, 3FFCF, 3FFCA, 3FFC5, 3FFC0, 3FFBB, 3FFB5, 3FFB0, 3FFAB, 3FFA6, 3FFA1, 3FF9B, 3FF96, 3FF91, 3FF8C, 3FF86, 3FF81, 3FF7C, 3FF76, 3FF71, 3FF6C, 3FF66, 3FF61, 3FF5C, 3FF56, 3FF51, 3FF4C, 3FF46, 3FF41, 3FF3B, 3FF36, 3FF30, 3FF2B, 3FF26, 3FF20, 3FF1B, 3FF15, 3FF10, 3FF0A, 3FF04, 3FEFF, 3FEF9, 3FEF4, 3FEEE, 3FEE9, 3FEE3, 3FEDD, 3FED8, 3FED2, 3FECC, 3FEC7, 3FEC1, 3FEBB, 3FEB5, 3FEB0, 3FEAA, 3FEA4, 3FE9E, 3FE98, 3FE93, 3FE8D, 3FE87, 3FE81, 3FE7B, 3FE75, 3FE6F, 3FE69, 3FE63, 3FE5D, 3FE57, 3FE51, 3FE4B, 3FE45, 3FE3F, 3FE39, 3FE33, 3FE2D, 3FE26, 3FE20, 3FE1A, 3FE14, 3FE0E, 3FE07, 3FE01, 3FDFB, 3FDF4, 3FDEE, 3FDE8, 3FDE1, 3FDDB, 3FDD4, 3FDCE, 3FDC8, 3FDC1, 3FDBA, 3FDB4, 3FDAD, 3FDA7, 3FDA0, 3FD9A, 3FD93, 3FD8C, 3FD85, 3FD7F, 3FD78, 3FD71, 3FD6A, 3FD64, 3FD5D, 3FD56, 3FD4F, 3FD48, 3FD41, 3FD3A, 3FD33, 3FD2C, 3FD25, 3FD1E, 3FD17, 3FD10, 3FD08, 3FD01, 3FCFA, 3FCF3, 3FCEB, 3FCE4, 3FCDD, 3FCD5, 3FCCE, 3FCC7, 3FCBF, 3FCB8, 3FCB0, 3FCA9, 3FCA1, 3FC9A, 3FC92, 3FC8A, 3FC83, 3FC7B, 3FC73, 3FC6B, 3FC64, 3FC5C, 3FC54, 3FC4C, 3FC44, 3FC3C, 3FC34, 3FC2C, 3FC24, 3FC1C, 3FC14, 3FC0C, 3FC04, 3FBFC, 3FBF3, 3FBEB, 3FBE3, 3FBDA, 3FBD2, 3FBCA, 3FBC1, 3FBB9, 3FBB0, 3FBA8, 3FB9F, 3FB97, 3FB8E, 3FB85, 3FB7D, 3FB74, 3FB6B, 3FB62, 3FB5A, 3FB51, 3FB48, 3FB3F, 3FB36, 3FB2D, 3FB24, 3FB1B, 3FB12, 3FB09, 3FB00, 3FAF6, 3FAED, 3FAE4, 3FADB, 3FAD1, 3FAC8, 3FABE, 3FAB5, 3FAAB, 3FAA2, 3FA98, 3FA8F, 3FA85, 3FA7C, 3FA72, 3FA68, 3FA5E, 3FA54, 3FA4B, 3FA41, 3FA37, 3FA2D, 3FA23, 3FA19, 3FA0F, 3FA05, 3F9FA, 3F9F0, 3F9E6, 3F9DC, 3F9D2, 3F9C7, 3F9BD, 3F9B2, 3F9A8, 3F99D, 3F993, 3F988, 3F97E, 3F973, 3F968, 3F95E, 3F953, 3F948, 3F93D, 3F932, 3F928, 3F91D, 3F912, 3F907, 3F8FB, 3F8F0, 3F8E5, 3F8DA, 3F8CF, 3F8C4, 3F8B8, 3F8AD, 3F8A1, 3F896, 3F88B, 3F87F, 3F874, 3F868, 3F85C, 3F851, 3F845, 3F839, 3F82D, 3F822, 3F816, 3F80A, 3F7FE, 3F7F2, 3F7E6, 3F7DA, 3F7CE, 3F7C2, 3F7B6, 3F7A9, 3F79D, 3F791, 3F784, 3F778, 3F76C, 3F75F, 3F753, 3F746, 3F73A, 3F72D, 3F720, 3F714, 3F707, 3F6FA, 3F6ED, 3F6E0, 3F6D4, 3F6C7, 3F6BA, 3F6AD, 3F6A0, 3F693, 3F685, 3F678, 3F66B, 3F65E, 3F651, 3F643, 3F636, 3F628, 3F61B, 3F60E, 3F600, 3F5F2, 3F5E5, 3F5D7, 3F5CA, 3F5BC, 3F5AE, 3F5A0, 3F592, 3F585, 3F577, 3F569, 3F55B, 3F54D, 3F53F, 3F531, 3F523, 3F514, 3F506, 3F4F8, 3F4EA, 3F4DB, 3F4CD, 3F4BF, 3F4B0, 3F4A2, 3F493, 3F485, 3F476, 3F467, 3F459, 3F44A, 3F43B, 3F42D, 3F41E, 3F40F, 3F400, 3F3F1, 3F3E2, 3F3D3, 3F3C4, 3F3B5, 3F3A6, 3F397, 3F388, 3F379, 3F369, 3F35A, 3F34B, 3F33B, 3F32C, 3F31D, 3F30D, 3F2FE, 3F2EE, 3F2DF, 3F2CF, 3F2C0, 3F2B0, 3F2A0, 3F291, 3F281, 3F271, 3F261, 3F251, 3F242, 3F232, 3F222, 3F212, 3F202, 3F1F2, 3F1E2, 3F1D2, 3F1C2, 3F1B1, 3F1A1, 3F191, 3F181, 3F171, 3F160, 3F150, 3F140, 3F12F, 3F11F, 3F10E, 3F0FE, 3F0ED, 3F0DD, 3F0CC, 3F0BC, 3F0AB, 3F09B, 3F08A, 3F079, 3F069, 3F058, 3F047, 3F036, 3F025, 3F015, 3F004, 3EFF3, 3EFE2, 3EFD1, 3EFC0, 3EFAF, 3EF9E, 3EF8D, 3EF7C, 3EF6B, 3EF5A, 3EF49, 3EF37, 3EF26, 3EF15, 3EF04, 3EEF3, 3EEE1, 3EED0, 3EEBF, 3EEAE, 3EE9C, 3EE8B, 3EE7A, 3EE68, 3EE57, 3EE45, 3EE34, 3EE22, 3EE11, 3EDFF, 3EDEE, 3EDDC, 3EDCB, 3EDB9, 3EDA8, 3ED96, 3ED85, 3ED73, 3ED61, 3ED50, 3ED3E, 3ED2C, 3ED1B, 3ED09, 3ECF7, 3ECE5, 3ECD4, 3ECC2, 3ECB0, 3EC9E, 3EC8D, 3EC7B, 3EC69, 3EC57, 3EC45, 3EC34, 3EC22, 3EC10, 3EBFE, 3EBEC, 3EBDA, 3EBC8, 3EBB7, 3EBA5, 3EB93, 3EB81, 3EB6F, 3EB5D, 3EB4B, 3EB39, 3EB27, 3EB15, 3EB04, 3EAF2, 3EAE0, 3EACE, 3EABC, 3EAAA, 3EA98, 3EA86, 3EA74, 3EA62, 3EA50, 3EA3E, 3EA2C, 3EA1A, 3EA09, 3E9F7, 3E9E5, 3E9D3, 3E9C1, 3E9AF, 3E99D, 3E98B, 3E979, 3E968, 3E956, 3E944, 3E932, 3E920, 3E90E, 3E8FC, 3E8EB, 3E8D9, 3E8C7, 3E8B5, 3E8A4, 3E892, 3E880, 3E86E, 3E85D, 3E84B, 3E839, 3E828, 3E816, 3E804, 3E7F3, 3E7E1, 3E7CF, 3E7BE, 3E7AC, 3E79B, 3E789, 3E778, 3E766, 3E755, 3E743, 3E732, 3E720, 3E70F, 3E6FE, 3E6EC, 3E6DB, 3E6CA, 3E6B9, 3E6A7, 3E696, 3E685, 3E674, 3E663, 3E652, 3E641, 3E62F, 3E61E, 3E60D, 3E5FD, 3E5EC, 3E5DB, 3E5CA, 3E5B9, 3E5A8, 3E598, 3E587, 3E576, 3E565, 3E555, 3E544, 3E534, 3E523, 3E513, 3E502, 3E4F2, 3E4E2, 3E4D1, 3E4C1, 3E4B1, 3E4A1, 3E490, 3E480, 3E470, 3E460, 3E450, 3E440, 3E430, 3E421, 3E411, 3E401, 3E3F1, 3E3E2, 3E3D2, 3E3C3, 3E3B3, 3E3A4, 3E394, 3E385, 3E376, 3E366, 3E357, 3E348, 3E339, 3E32A, 3E31B, 3E30C, 3E2FD, 3E2EE, 3E2E0, 3E2D1, 3E2C2, 3E2B4, 3E2A5, 3E297, 3E288, 3E27A, 3E26C, 3E25E, 3E250, 3E242, 3E234, 3E226, 3E218, 3E20A, 3E1FC, 3E1EF, 3E1E1, 3E1D4, 3E1C6, 3E1B9, 3E1AB, 3E19E, 3E191, 3E184, 3E177, 3E16A, 3E15D, 3E150, 3E144, 3E137, 3E12B, 3E11E, 3E112, 3E105, 3E0F9, 3E0ED, 3E0E1, 3E0D5, 3E0C9, 3E0BD, 3E0B1, 3E0A6, 3E09A, 3E08F, 3E083, 3E078, 3E06D, 3E062, 3E057, 3E04C, 3E041, 3E036, 3E02C, 3E021, 3E016, 3E00C, 3E002, 3DFF8, 3DFEE, 3DFE4, 3DFDA, 3DFD0, 3DFC6, 3DFBC, 3DFB3, 3DFAA, 3DFA0, 3DF97, 3DF8E, 3DF85, 3DF7C, 3DF73, 3DF6B, 3DF62, 3DF5A, 3DF51, 3DF49, 3DF41, 3DF39, 3DF31, 3DF29, 3DF21, 3DF1A, 3DF12, 3DF0B, 3DF04, 3DEFD, 3DEF6, 3DEEF, 3DEE8, 3DEE1, 3DEDB, 3DED4, 3DECE, 3DEC8, 3DEC2, 3DEBC, 3DEB6, 3DEB1, 3DEAB, 3DEA6, 3DEA0, 3DE9B, 3DE96, 3DE91, 3DE8C, 3DE88, 3DE83, 3DE7F, 3DE7A, 3DE76, 3DE72, 3DE6E, 3DE6B, 3DE67, 3DE64, 3DE60, 3DE5D, 3DE5A, 3DE57, 3DE54, 3DE52, 3DE4F, 3DE4D, 3DE4B, 3DE49, 3DE47, 3DE45, 3DE43, 3DE42, 3DE41, 3DE3F, 3DE3E, 3DE3D, 3DE3D, 3DE3C, 3DE3C, 3DE3B, 3DE3B, 3DE3B, 3DE3B, 3DE3C, 3DE3C, 3DE3D, 3DE3E, 3DE3F, 3DE40, 3DE41, 3DE42, 3DE44, 3DE46, 3DE48, 3DE4A, 3DE4C, 3DE4E, 3DE51, 3DE54, 3DE56, 3DE5A, 3DE5D, 3DE60, 3DE64, 3DE67, 3DE6B, 3DE6F, 3DE74, 3DE78, 3DE7D, 3DE81, 3DE86, 3DE8B, 3DE91, 3DE96, 3DE9C, 3DEA2, 3DEA8, 3DEAE, 3DEB4, 3DEBB, 3DEC2, 3DEC8, 3DED0, 3DED7, 3DEDE, 3DEE6, 3DEEE, 3DEF6, 3DEFE, 3DF06, 3DF0F, 3DF18, 3DF21, 3DF2A, 3DF33, 3DF3D, 3DF46, 3DF50, 3DF5A, 3DF65, 3DF6F, 3DF7A, 3DF85, 3DF90, 3DF9B, 3DFA7, 3DFB3, 3DFBE, 3DFCB, 3DFD7, 3DFE3, 3DFF0, 3DFFD, 3E00A, 3E017, 3E025, 3E033, 3E041, 3E04F, 3E05D, 3E06C, 3E07B, 3E089, 3E099, 3E0A8, 3E0B8, 3E0C8, 3E0D8, 3E0E8, 3E0F8, 3E109, 3E11A, 3E12B, 3E13D, 3E14E, 3E160, 3E172, 3E184, 3E197, 3E1A9, 3E1BC, 3E1CF, 3E1E3, 3E1F6, 3E20A, 3E21E, 3E233, 3E247, 3E25C, 3E271, 3E286, 3E29B, 3E2B1, 3E2C7, 3E2DD, 3E2F3, 3E30A, 3E321, 3E338, 3E34F, 3E367, 3E37E, 3E396, 3E3AF, 3E3C7, 3E3E0, 3E3F9, 3E412, 3E42B, 3E445, 3E45F, 3E479, 3E494, 3E4AE, 3E4C9, 3E4E4, 3E500, 3E51B, 3E537, 3E553, 3E570, 3E58C, 3E5A9, 3E5C6, 3E5E4, 3E601, 3E61F, 3E63E, 3E65C, 3E67B, 3E69A, 3E6B9, 3E6D8, 3E6F8, 3E718, 3E738, 3E758, 3E779, 3E79A, 3E7BB, 3E7DD, 3E7FF, 3E821, 3E843, 3E866, 3E888, 3E8AB, 3E8CF, 3E8F2, 3E916, 3E93A, 3E95F, 3E984, 3E9A8, 3E9CE, 3E9F3, 3EA19, 3EA3F, 3EA65, 3EA8C, 3EAB3, 3EADA, 3EB01, 3EB29, 3EB51, 3EB79, 3EBA2, 3EBCA, 3EBF3, 3EC1D, 3EC46, 3EC70, 3EC9A, 3ECC5, 3ECF0, 3ED1B, 3ED46, 3ED71, 3ED9D, 3EDC9, 3EDF6, 3EE23, 3EE50, 3EE7D, 3EEAA, 3EED8, 3EF06, 3EF35, 3EF63, 3EF92, 3EFC2, 3EFF1, 3F021, 3F051, 3F082, 3F0B2, 3F0E3, 3F115, 3F146, 3F178, 3F1AA, 3F1DD, 3F210, 3F243, 3F276, 3F2AA, 3F2DE, 3F312, 3F346, 3F37B, 3F3B0, 3F3E6, 3F41C, 3F452, 3F488, 3F4BE, 3F4F5, 3F52D, 3F564, 3F59C, 3F5D4, 3F60D, 3F645, 3F67E, 3F6B8, 3F6F1, 3F72B, 3F765, 3F7A0, 3F7DB, 3F816, 3F851, 3F88D, 3F8C9, 3F906, 3F942, 3F97F, 3F9BD, 3F9FA, 3FA38, 3FA76, 3FAB5, 3FAF4, 3FB33, 3FB72, 3FBB2, 3FBF2, 3FC33, 3FC73, 3FCB4, 3FCF6, 3FD37, 3FD79, 3FDBC, 3FDFE, 3FE41, 3FE84, 3FEC8, 3FF0C, 3FF50, 3FF94, 3FFD9;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_853ce479ddde041c',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '224cfd977438d6c9a9d3d21cc1c3cb09',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_853ce479ddde041c',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 1E, 64, A9, EF, 136, 17D, 1C4, 20B, 252, 29A, 2E3, 32B, 374, 3BD, 407, 451, 49B, 4E6, 530, 57B, 5C7, 613, 65F, 6AB, 6F8, 745, 792, 7E0, 82E, 87D, 8CB, 91A, 96A, 9B9, A09, A5A, AAA, AFB, B4C, B9E, BF0, C42, C95, CE8, D3B, D8E, DE2, E36, E8B, EE0, F35, F8A, FE0, 1036, 108D, 10E3, 113B, 1192, 11EA, 1242, 129A, 12F3, 134C, 13A5, 13FF, 1459, 14B4, 150E, 1569, 15C5, 1620, 167C, 16D9, 1735, 1792, 17F0, 184D, 18AB, 190A, 1968, 19C7, 1A26, 1A86, 1AE6, 1B46, 1BA7, 1C08, 1C69, 1CCA, 1D2C, 1D8E, 1DF1, 1E54, 1EB7, 1F1B, 1F7E, 1FE3, 2047, 20AC, 2111, 2177, 21DC, 2242, 22A9, 2310, 2377, 23DE, 2446, 24AE, 2516, 257F, 25E8, 2652, 26BB, 2725, 2790, 27FA, 2865, 28D1, 293C, 29A8, 2A14, 2A81, 2AEE, 2B5B, 2BC9, 2C37, 2CA5, 2D14, 2D82, 2DF2, 2E61, 2ED1, 2F41, 2FB2, 3022, 3093, 3105, 3177, 31E9, 325B, 32CE, 3341, 33B4, 3428, 349C, 3510, 3585, 35FA, 366F, 36E5, 375A, 37D1, 3847, 38BE, 3935, 39AD, 3A24, 3A9C, 3B15, 3B8E, 3C07, 3C80, 3CFA, 3D74, 3DEE, 3E68, 3EE3, 3F5F, 3FDA, 4056, 40D2, 414F, 41CB, 4248, 42C6, 4344, 43C2, 4440, 44BE, 453D, 45BD, 463C, 46BC, 473C, 47BD, 483D, 48BE, 4940, 49C1, 4A43, 4AC6, 4B48, 4BCB, 4C4E, 4CD2, 4D55, 4DDA, 4E5E, 4EE3, 4F68, 4FED, 5072, 50F8, 517E, 5205, 528B, 5313, 539A, 5421, 54A9, 5532, 55BA, 5643, 56CC, 5755, 57DF, 5869, 58F3, 597E, 5A08, 5A93, 5B1F, 5BAB, 5C36, 5CC3, 5D4F, 5DDC, 5E69, 5EF6, 5F84, 6012, 60A0, 612F, 61BD, 624C, 62DC, 636B, 63FB, 648B, 651C, 65AC, 663D, 66CF, 6760, 67F2, 6884, 6916, 69A9, 6A3C, 6ACF, 6B62, 6BF6, 6C8A, 6D1E, 6DB2, 6E47, 6EDC, 6F71, 7007, 709D, 7133, 71C9, 725F, 72F6, 738D, 7425, 74BC, 7554, 75EC, 7684, 771D, 77B6, 784F, 78E8, 7982, 7A1C, 7AB6, 7B50, 7BEB, 7C85, 7D20, 7DBC, 7E57, 7EF3, 7F8F, 802B, 80C8, 8165, 8202, 829F, 833C, 83DA, 8478, 8516, 85B5, 8653, 86F2, 8791, 8830, 88D0, 8970, 8A10, 8AB0, 8B50, 8BF1, 8C92, 8D33, 8DD4, 8E76, 8F18, 8FBA, 905C, 90FE, 91A1, 9244, 92E7, 938A, 942E, 94D2, 9575, 961A, 96BE, 9762, 9807, 98AC, 9951, 99F7, 9A9C, 9B42, 9BE8, 9C8E, 9D35, 9DDB, 9E82, 9F29, 9FD0, A077, A11F, A1C7, A26E, A317, A3BF, A467, A510, A5B9, A662, A70B, A7B4, A85E, A908, A9B2, AA5C, AB06, ABB1, AC5B, AD06, ADB1, AE5C, AF07, AFB3, B05F, B10A, B1B6, B263, B30F, B3BB, B468, B515, B5C2, B66F, B71C, B7C9, B877, B925, B9D3, BA81, BB2F, BBDD, BC8C, BD3A, BDE9, BE98, BF47, BFF6, C0A6, C155, C205, C2B4, C364, C414, C4C4, C575, C625, C6D6, C786, C837, C8E8, C999, CA4A, CAFB, CBAD, CC5E, CD10, CDC2, CE74, CF26, CFD8, D08A, D13C, D1EF, D2A1, D354, D407, D4BA, D56D, D620, D6D3, D786, D83A, D8ED, D9A1, DA54, DB08, DBBC, DC70, DD24, DDD8, DE8C, DF40, DFF5, E0A9, E15E, E212, E2C7, E37C, E431, E4E6, E59B, E650, E705, E7BA, E86F, E925, E9DA, EA90, EB45, EBFB, ECB0, ED66, EE1C, EED2, EF88, F03E, F0F4, F1AA, F260, F316, F3CC, F482, F539, F5EF, F6A5, F75C, F812, F8C9, F97F, FA36, FAEC, FBA3, FC59, FD10, FDC7, FE7E, FF34, FFEB, 100A2, 10159, 10210, 102C6, 1037D, 10434, 104EB, 105A2, 10659, 10710, 107C7, 1087E, 10935, 109EC, 10AA3, 10B5A, 10C11, 10CC8, 10D7E, 10E35, 10EEC, 10FA3, 1105A, 11111, 111C8, 1127F, 11336, 113ED, 114A4, 1155A, 11611, 116C8, 1177F, 11836, 118EC, 119A3, 11A5A, 11B10, 11BC7, 11C7D, 11D34, 11DEA, 11EA1, 11F57, 1200E, 120C4, 1217A, 12230, 122E7, 1239D, 12453, 12509, 125BF, 12675, 1272B, 127E1, 12896, 1294C, 12A02, 12AB7, 12B6D, 12C22, 12CD8, 12D8D, 12E42, 12EF7, 12FAC, 13061, 13116, 131CB, 13280, 13335, 133E9, 1349E, 13552, 13607, 136BB, 1376F, 13823, 138D7, 1398B, 13A3F, 13AF3, 13BA7, 13C5A, 13D0D, 13DC1, 13E74, 13F27, 13FDA, 1408D, 14140, 141F3, 142A5, 14358, 1440A, 144BC, 1456E, 14620, 146D2, 14784, 14835, 148E7, 14998, 14A49, 14AFB, 14BAC, 14C5C, 14D0D, 14DBE, 14E6E, 14F1E, 14FCE, 1507E, 1512E, 151DE, 1528E, 1533D, 153EC, 1549B, 1554A, 155F9, 156A8, 15756, 15804, 158B3, 15961, 15A0E, 15ABC, 15B6A, 15C17, 15CC4, 15D71, 15E1E, 15ECB, 15F77, 16023, 160CF, 1617B, 16227, 162D3, 1637E, 16429, 164D4, 1657F, 1662A, 166D4, 1677F, 16829, 168D2, 1697C, 16A26, 16ACF, 16B78, 16C21, 16CC9, 16D72, 16E1A, 16EC2, 16F6A, 17012, 170B9, 17160, 17207, 172AE, 17354, 173FB, 174A1, 17547, 175EC, 17692, 17737, 177DC, 17880, 17925, 179C9, 17A6D, 17B11, 17BB4, 17C58, 17CFB, 17D9E, 17E40, 17EE2, 17F85, 18026, 180C8, 18169, 1820A, 182AB, 1834C, 183EC, 1848C, 1852C, 185CB, 1866B, 1870A, 187A8, 18847, 188E5, 18983, 18A21, 18ABE, 18B5B, 18BF8, 18C94, 18D31, 18DCD, 18E68, 18F04, 18F9F, 1903A, 190D4, 1916F, 19209, 192A2, 1933C, 193D5, 1946E, 19506, 1959E, 19636, 196CE, 19765, 197FC, 19893, 1992A, 199C0, 19A55, 19AEB, 19B80, 19C15, 19CAA, 19D3E, 19DD2, 19E65, 19EF9, 19F8C, 1A01E, 1A0B1, 1A143, 1A1D4, 1A266, 1A2F7, 1A387, 1A418, 1A4A8, 1A537, 1A5C7, 1A656, 1A6E4, 1A773, 1A801, 1A88E, 1A91C, 1A9A9, 1AA35, 1AAC1, 1AB4D, 1ABD9, 1AC64, 1ACEF, 1AD7A, 1AE04, 1AE8E, 1AF17, 1AFA0, 1B029, 1B0B1, 1B139, 1B1C1, 1B248, 1B2CF, 1B356, 1B3DC, 1B462, 1B4E7, 1B56C, 1B5F1, 1B675, 1B6F9, 1B77D, 1B800, 1B883, 1B905, 1B987, 1BA09, 1BA8A, 1BB0B, 1BB8C, 1BC0C, 1BC8B, 1BD0B, 1BD8A, 1BE08, 1BE86, 1BF04, 1BF82, 1BFFF, 1C07B, 1C0F7, 1C173, 1C1EF, 1C26A, 1C2E4, 1C35E, 1C3D8, 1C451, 1C4CA, 1C543, 1C5BB, 1C633, 1C6AA, 1C721, 1C797, 1C80D, 1C883, 1C8F8, 1C96D, 1C9E1, 1CA55, 1CAC9, 1CB3C, 1CBAF, 1CC21, 1CC93, 1CD04, 1CD75, 1CDE6, 1CE56, 1CEC6, 1CF35, 1CFA4, 1D012, 1D080, 1D0EE, 1D15B, 1D1C7, 1D233, 1D29F, 1D30A, 1D375, 1D3E0, 1D44A, 1D4B3, 1D51C, 1D585, 1D5ED, 1D655, 1D6BC, 1D723, 1D789, 1D7EF, 1D855, 1D8BA, 1D91E, 1D982, 1D9E6, 1DA49, 1DAAC, 1DB0E, 1DB70, 1DBD1, 1DC32, 1DC92, 1DCF2, 1DD52, 1DDB1, 1DE0F, 1DE6D, 1DECB, 1DF28, 1DF85, 1DFE1, 1E03D, 1E098, 1E0F2, 1E14D, 1E1A7, 1E200, 1E259, 1E2B1, 1E309, 1E360, 1E3B7, 1E40D, 1E463, 1E4B9, 1E50E, 1E562, 1E5B6, 1E60A, 1E65D, 1E6AF, 1E701, 1E753, 1E7A4, 1E7F4, 1E844, 1E894, 1E8E3, 1E931, 1E980, 1E9CD, 1EA1A, 1EA67, 1EAB3, 1EAFE, 1EB49, 1EB94, 1EBDE, 1EC28, 1EC71, 1ECB9, 1ED01, 1ED49, 1ED90, 1EDD6, 1EE1C, 1EE62, 1EEA7, 1EEEB, 1EF2F, 1EF73, 1EFB6, 1EFF8, 1F03A, 1F07B, 1F0BC, 1F0FD, 1F13C, 1F17C, 1F1BB, 1F1F9, 1F237, 1F274, 1F2B1, 1F2ED, 1F329, 1F364, 1F39E, 1F3D8, 1F412, 1F44B, 1F484, 1F4BC, 1F4F3, 1F52A, 1F561, 1F597, 1F5CC, 1F601, 1F635, 1F669, 1F69C, 1F6CF, 1F701, 1F733, 1F764, 1F795, 1F7C5, 1F7F5, 1F824, 1F852, 1F880, 1F8AD, 1F8DA, 1F907, 1F933, 1F95E, 1F989, 1F9B3, 1F9DC, 1FA06, 1FA2E, 1FA56, 1FA7E, 1FAA5, 1FACB, 1FAF1, 1FB17, 1FB3B, 1FB60, 1FB83, 1FBA7, 1FBC9, 1FBEB, 1FC0D, 1FC2E, 1FC4E, 1FC6E, 1FC8E, 1FCAD, 1FCCB, 1FCE9, 1FD06, 1FD23, 1FD3F, 1FD5A, 1FD75, 1FD90, 1FDAA, 1FDC3, 1FDDC, 1FDF4, 1FE0C, 1FE23, 1FE3A, 1FE50, 1FE65, 1FE7A, 1FE8F, 1FEA3, 1FEB6, 1FEC9, 1FEDB, 1FEED, 1FEFE, 1FF0F, 1FF1F, 1FF2E, 1FF3D, 1FF4B, 1FF59, 1FF67, 1FF73, 1FF80, 1FF8B, 1FF96, 1FFA1, 1FFAB, 1FFB4, 1FFBD, 1FFC5, 1FFCD, 1FFD4, 1FFDB, 1FFE1, 1FFE7, 1FFEC, 1FFF0, 1FFF4, 1FFF7, 1FFFA, 1FFFD, 1FFFE, 1FFFF, 1FFFF;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_ded209eb01860ee1',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ae8346201393fbba609b1129fbeda57d',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_ded209eb01860ee1',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 1FFFF, 1FFFF, 1FFFE, 1FFFD, 1FFFB, 1FFF8, 1FFF5, 1FFF1, 1FFEC, 1FFE7, 1FFE2, 1FFDC, 1FFD5, 1FFCE, 1FFC6, 1FFBE, 1FFB5, 1FFAC, 1FFA2, 1FF97, 1FF8C, 1FF81, 1FF75, 1FF68, 1FF5B, 1FF4D, 1FF3F, 1FF30, 1FF20, 1FF10, 1FF00, 1FEEF, 1FEDD, 1FECB, 1FEB8, 1FEA5, 1FE91, 1FE7D, 1FE68, 1FE52, 1FE3C, 1FE26, 1FE0E, 1FDF7, 1FDDF, 1FDC6, 1FDAC, 1FD93, 1FD78, 1FD5D, 1FD42, 1FD26, 1FD09, 1FCEC, 1FCCE, 1FCB0, 1FC91, 1FC72, 1FC52, 1FC31, 1FC11, 1FBEF, 1FBCD, 1FBAA, 1FB87, 1FB64, 1FB3F, 1FB1B, 1FAF5, 1FACF, 1FAA9, 1FA82, 1FA5B, 1FA33, 1FA0A, 1F9E1, 1F9B7, 1F98D, 1F963, 1F937, 1F90C, 1F8DF, 1F8B2, 1F885, 1F857, 1F829, 1F7FA, 1F7CA, 1F79A, 1F76A, 1F738, 1F707, 1F6D5, 1F6A2, 1F66F, 1F63B, 1F607, 1F5D2, 1F59D, 1F567, 1F530, 1F4F9, 1F4C2, 1F48A, 1F451, 1F418, 1F3DF, 1F3A5, 1F36A, 1F32F, 1F2F3, 1F2B7, 1F27B, 1F23D, 1F200, 1F1C1, 1F183, 1F143, 1F104, 1F0C3, 1F082, 1F041, 1EFFF, 1EFBD, 1EF7A, 1EF37, 1EEF3, 1EEAE, 1EE69, 1EE24, 1EDDE, 1ED97, 1ED50, 1ED09, 1ECC1, 1EC79, 1EC30, 1EBE6, 1EB9C, 1EB52, 1EB07, 1EABB, 1EA6F, 1EA23, 1E9D6, 1E988, 1E93A, 1E8EC, 1E89D, 1E84D, 1E7FD, 1E7AD, 1E75C, 1E70A, 1E6B8, 1E666, 1E613, 1E5BF, 1E56B, 1E517, 1E4C2, 1E46D, 1E417, 1E3C1, 1E36A, 1E312, 1E2BB, 1E262, 1E20A, 1E1B0, 1E157, 1E0FC, 1E0A2, 1E047, 1DFEB, 1DF8F, 1DF32, 1DED5, 1DE78, 1DE1A, 1DDBB, 1DD5C, 1DCFD, 1DC9D, 1DC3D, 1DBDC, 1DB7B, 1DB19, 1DAB7, 1DA54, 1D9F1, 1D98D, 1D929, 1D8C5, 1D860, 1D7FA, 1D795, 1D72E, 1D6C7, 1D660, 1D5F9, 1D590, 1D528, 1D4BF, 1D455, 1D3EB, 1D381, 1D316, 1D2AB, 1D23F, 1D1D3, 1D167, 1D0F9, 1D08C, 1D01E, 1CFB0, 1CF41, 1CED2, 1CE62, 1CDF2, 1CD82, 1CD11, 1CC9F, 1CC2E, 1CBBB, 1CB49, 1CAD6, 1CA62, 1C9EE, 1C97A, 1C905, 1C890, 1C81A, 1C7A4, 1C72E, 1C6B7, 1C640, 1C5C8, 1C550, 1C4D8, 1C45F, 1C3E5, 1C36C, 1C2F1, 1C277, 1C1FC, 1C181, 1C105, 1C089, 1C00C, 1BF8F, 1BF12, 1BE94, 1BE16, 1BD98, 1BD19, 1BC99, 1BC1A, 1BB9A, 1BB19, 1BA98, 1BA17, 1B995, 1B913, 1B891, 1B80E, 1B78B, 1B708, 1B684, 1B5FF, 1B57B, 1B4F6, 1B470, 1B3EA, 1B364, 1B2DE, 1B257, 1B1D0, 1B148, 1B0C0, 1B038, 1AFAF, 1AF26, 1AE9D, 1AE13, 1AD89, 1ACFE, 1AC73, 1ABE8, 1AB5D, 1AAD1, 1AA45, 1A9B8, 1A92B, 1A89E, 1A810, 1A782, 1A6F4, 1A665, 1A5D6, 1A547, 1A4B7, 1A427, 1A397, 1A306, 1A275, 1A1E4, 1A152, 1A0C1, 1A02E, 19F9C, 19F09, 19E75, 19DE2, 19D4E, 19CBA, 19C25, 19B90, 19AFB, 19A66, 199D0, 1993A, 198A4, 1980D, 19776, 196DF, 19647, 195AF, 19517, 1947E, 193E6, 1934D, 192B3, 1921A, 19180, 190E5, 1904B, 18FB0, 18F15, 18E79, 18DDE, 18D42, 18CA6, 18C09, 18B6C, 18ACF, 18A32, 18994, 188F6, 18858, 187BA, 1871B, 1867C, 185DD, 1853D, 1849E, 183FE, 1835D, 182BD, 1821C, 1817B, 180DA, 18038, 17F96, 17EF4, 17E52, 17DAF, 17D0D, 17C6A, 17BC6, 17B23, 17A7F, 179DB, 17937, 17892, 177EE, 17749, 176A4, 175FE, 17559, 174B3, 1740D, 17367, 172C0, 17219, 17172, 170CB, 17024, 16F7C, 16ED5, 16E2D, 16D84, 16CDC, 16C33, 16B8A, 16AE1, 16A38, 1698F, 168E5, 1683B, 16791, 166E7, 1663D, 16592, 164E7, 1643C, 16391, 162E6, 1623A, 1618E, 160E2, 16036, 15F8A, 15EDE, 15E31, 15D84, 15CD7, 15C2A, 15B7D, 15ACF, 15A22, 15974, 158C6, 15818, 15769, 156BB, 1560C, 1555D, 154AF, 153FF, 15350, 152A1, 151F1, 15142, 15092, 14FE2, 14F32, 14E81, 14DD1, 14D20, 14C70, 14BBF, 14B0E, 14A5D, 149AC, 148FA, 14849, 14797, 146E6, 14634, 14582, 144D0, 1441E, 1436B, 142B9, 14206, 14154, 140A1, 13FEE, 13F3B, 13E88, 13DD5, 13D21, 13C6E, 13BBA, 13B07, 13A53, 1399F, 138EB, 13837, 13783, 136CF, 1361B, 13566, 134B2, 133FD, 13349, 13294, 131DF, 1312A, 13075, 12FC0, 12F0B, 12E56, 12DA1, 12CEC, 12C36, 12B81, 12ACB, 12A16, 12960, 128AA, 127F5, 1273F, 12689, 125D3, 1251D, 12467, 123B1, 122FB, 12245, 1218E, 120D8, 12022, 11F6B, 11EB5, 11DFF, 11D48, 11C92, 11BDB, 11B24, 11A6E, 119B7, 11900, 1184A, 11793, 116DC, 11625, 1156F, 114B8, 11401, 1134A, 11293, 111DC, 11125, 1106F, 10FB8, 10F01, 10E4A, 10D93, 10CDC, 10C25, 10B6E, 10AB7, 10A00, 10949, 10892, 107DB, 10724, 1066D, 105B6, 104FF, 10448, 10392, 102DB, 10224, 1016D, 100B6, FFFF, FF49, FE92, FDDB, FD24, FC6E, FBB7, FB00, FA4A, F993, F8DD, F826, F770, F6B9, F603, F54D, F496, F3E0, F32A, F274, F1BE, F108, F052, EF9C, EEE6, EE30, ED7A, ECC5, EC0F, EB59, EAA4, E9EE, E939, E884, E7CE, E719, E664, E5AF, E4FA, E445, E390, E2DB, E227, E172, E0BD, E009, DF55, DEA0, DDEC, DD38, DC84, DBD0, DB1C, DA68, D9B5, D901, D84E, D79A, D6E7, D634, D581, D4CE, D41B, D368, D2B5, D203, D150, D09E, CFEC, CF3A, CE88, CDD6, CD24, CC72, CBC1, CB0F, CA5E, C9AD, C8FC, C84B, C79A, C6E9, C639, C588, C4D8, C428, C378, C2C8, C218, C169, C0B9, C00A, BF5B, BEAC, BDFD, BD4E, BC9F, BBF1, BB42, BA94, B9E6, B938, B88B, B7DD, B730, B682, B5D5, B528, B47B, B3CF, B322, B276, B1CA, B11E, B072, AFC6, AF1B, AE6F, ADC4, AD19, AC6E, ABC4, AB19, AA6F, A9C5, A91B, A871, A7C8, A71E, A675, A5CC, A523, A47A, A3D2, A329, A281, A1D9, A132, A08A, 9FE3, 9F3C, 9E95, 9DEE, 9D47, 9CA1, 9BFB, 9B55, 9AAF, 9A09, 9964, 98BF, 981A, 9775, 96D1, 962C, 9588, 94E4, 9440, 939D, 92FA, 9256, 91B4, 9111, 906E, 8FCC, 8F2A, 8E88, 8DE7, 8D45, 8CA4, 8C03, 8B63, 8AC2, 8A22, 8982, 88E2, 8843, 87A3, 8704, 8665, 85C7, 8528, 848A, 83EC, 834E, 82B1, 8214, 8176, 80DA, 803D, 7FA1, 7F05, 7E69, 7DCD, 7D32, 7C97, 7BFC, 7B62, 7AC7, 7A2D, 7993, 78FA, 7860, 77C7, 772E, 7696, 75FD, 7565, 74CD, 7436, 739F, 7307, 7271, 71DA, 7144, 70AE, 7018, 6F82, 6EED, 6E58, 6DC3, 6D2F, 6C9B, 6C07, 6B73, 6AE0, 6A4C, 69BA, 6927, 6895, 6803, 6771, 66DF, 664E, 65BD, 652C, 649C, 640C, 637C, 62EC, 625D, 61CE, 613F, 60B0, 6022, 5F94, 5F07, 5E79, 5DEC, 5D5F, 5CD3, 5C47, 5BBB, 5B2F, 5AA3, 5A18, 598E, 5903, 5879, 57EF, 5765, 56DC, 5653, 55CA, 5541, 54B9, 5431, 53A9, 5322, 529B, 5214, 518E, 5108, 5082, 4FFC, 4F77, 4EF2, 4E6D, 4DE9, 4D65, 4CE1, 4C5D, 4BDA, 4B57, 4AD5, 4A52, 49D0, 494F, 48CD, 484C, 47CB, 474B, 46CB, 464B, 45CB, 454C, 44CD, 444F, 43D0, 4352, 42D4, 4257, 41DA, 415D, 40E1, 4064, 3FE9, 3F6D, 3EF2, 3E77, 3DFC, 3D82, 3D08, 3C8E, 3C15, 3B9C, 3B23, 3AAB, 3A32, 39BB, 3943, 38CC, 3855, 37DE, 3768, 36F2, 367D, 3607, 3592, 351E, 34A9, 3435, 33C2, 334E, 32DB, 3269, 31F6, 3184, 3112, 30A1, 3030, 2FBF, 2F4E, 2EDE, 2E6E, 2DFF, 2D8F, 2D21, 2CB2, 2C44, 2BD6, 2B68, 2AFB, 2A8E, 2A21, 29B5, 2949, 28DD, 2872, 2807, 279C, 2732, 26C8, 265E, 25F5, 258C, 2523, 24BA, 2452, 23EA, 2383, 231C, 22B5, 224F, 21E8, 2183, 211D, 20B8, 2053, 1FEF, 1F8A, 1F26, 1EC3, 1E60, 1DFD, 1D9A, 1D38, 1CD6, 1C74, 1C13, 1BB2, 1B52, 1AF1, 1A91, 1A32, 19D2, 1974, 1915, 18B7, 1859, 17FB, 179E, 1741, 16E4, 1687, 162B, 15D0, 1574, 1519, 14BF, 1464, 140A, 13B0, 1357, 12FE, 12A5, 124D, 11F4, 119D, 1145, 10EE, 1097, 1041, FEB, F95, F3F, EEA, E95, E41, DEC, D98, D45, CF2, C9F, C4C, BFA, BA8, B56, B05, AB4, A63, A13, 9C3, 973, 924, 8D5, 886, 838, 7EA, 79C, 74F, 701, 6B5, 668, 61C, 5D0, 585, 53A, 4EF, 4A4, 45A, 410, 3C7, 37D, 334, 2EC, 2A3, 25B, 214, 1CC, 185, 13F, F8, B2, 6C, 27;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_2193333e6188e9ee',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ca756525e176210a9ff2b64f710fac7d',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_2193333e6188e9ee',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFE2, 3FF9D, 3FF58, 3FF14, 3FED0, 3FE8D, 3FE4A, 3FE07, 3FDC4, 3FD82, 3FD40, 3FCFE, 3FCBD, 3FC7C, 3FC3B, 3FBFA, 3FBBA, 3FB7B, 3FB3B, 3FAFC, 3FABD, 3FA7E, 3FA40, 3FA02, 3F9C5, 3F987, 3F94A, 3F90D, 3F8D1, 3F895, 3F859, 3F81E, 3F7E2, 3F7A8, 3F76D, 3F733, 3F6F9, 3F6BF, 3F686, 3F64D, 3F614, 3F5DB, 3F5A3, 3F56B, 3F534, 3F4FD, 3F4C6, 3F48F, 3F459, 3F423, 3F3ED, 3F3B7, 3F382, 3F34D, 3F319, 3F2E4, 3F2B0, 3F27D, 3F249, 3F216, 3F1E3, 3F1B1, 3F17F, 3F14D, 3F11B, 3F0EA, 3F0B9, 3F088, 3F058, 3F027, 3EFF8, 3EFC8, 3EF99, 3EF6A, 3EF3B, 3EF0C, 3EEDE, 3EEB0, 3EE83, 3EE56, 3EE29, 3EDFC, 3EDCF, 3EDA3, 3ED77, 3ED4C, 3ED20, 3ECF5, 3ECCB, 3ECA0, 3EC76, 3EC4C, 3EC22, 3EBF9, 3EBD0, 3EBA7, 3EB7F, 3EB56, 3EB2E, 3EB07, 3EADF, 3EAB8, 3EA91, 3EA6B, 3EA44, 3EA1E, 3E9F8, 3E9D3, 3E9AE, 3E989, 3E964, 3E940, 3E91B, 3E8F7, 3E8D4, 3E8B0, 3E88D, 3E86A, 3E848, 3E826, 3E803, 3E7E2, 3E7C0, 3E79F, 3E77E, 3E75D, 3E73D, 3E71C, 3E6FC, 3E6DD, 3E6BD, 3E69E, 3E67F, 3E660, 3E642, 3E624, 3E606, 3E5E8, 3E5CB, 3E5AE, 3E591, 3E574, 3E558, 3E53B, 3E51F, 3E504, 3E4E8, 3E4CD, 3E4B2, 3E498, 3E47D, 3E463, 3E449, 3E42F, 3E416, 3E3FD, 3E3E4, 3E3CB, 3E3B2, 3E39A, 3E382, 3E36A, 3E353, 3E33B, 3E324, 3E30E, 3E2F7, 3E2E1, 3E2CA, 3E2B4, 3E29F, 3E289, 3E274, 3E25F, 3E24A, 3E236, 3E222, 3E20E, 3E1FA, 3E1E6, 3E1D3, 3E1C0, 3E1AD, 3E19A, 3E187, 3E175, 3E163, 3E151, 3E140, 3E12E, 3E11D, 3E10C, 3E0FB, 3E0EB, 3E0DB, 3E0CA, 3E0BB, 3E0AB, 3E09B, 3E08C, 3E07D, 3E06E, 3E060, 3E051, 3E043, 3E035, 3E028, 3E01A, 3E00D, 3DFFF, 3DFF3, 3DFE6, 3DFD9, 3DFCD, 3DFC1, 3DFB5, 3DFA9, 3DF9E, 3DF92, 3DF87, 3DF7C, 3DF72, 3DF67, 3DF5D, 3DF53, 3DF49, 3DF3F, 3DF35, 3DF2C, 3DF23, 3DF1A, 3DF11, 3DF08, 3DF00, 3DEF8, 3DEF0, 3DEE8, 3DEE0, 3DED9, 3DED1, 3DECA, 3DEC3, 3DEBD, 3DEB6, 3DEB0, 3DEA9, 3DEA3, 3DE9E, 3DE98, 3DE92, 3DE8D, 3DE88, 3DE83, 3DE7E, 3DE7A, 3DE75, 3DE71, 3DE6D, 3DE69, 3DE65, 3DE62, 3DE5E, 3DE5B, 3DE58, 3DE55, 3DE52, 3DE50, 3DE4D, 3DE4B, 3DE49, 3DE47, 3DE45, 3DE44, 3DE42, 3DE41, 3DE40, 3DE3F, 3DE3E, 3DE3D, 3DE3D, 3DE3C, 3DE3C, 3DE3C, 3DE3C, 3DE3D, 3DE3D, 3DE3E, 3DE3E, 3DE3F, 3DE40, 3DE41, 3DE43, 3DE44, 3DE46, 3DE48, 3DE49, 3DE4B, 3DE4E, 3DE50, 3DE52, 3DE55, 3DE58, 3DE5B, 3DE5E, 3DE61, 3DE64, 3DE68, 3DE6B, 3DE6F, 3DE73, 3DE77, 3DE7B, 3DE7F, 3DE84, 3DE88, 3DE8D, 3DE92, 3DE96, 3DE9B, 3DEA1, 3DEA6, 3DEAB, 3DEB1, 3DEB7, 3DEBC, 3DEC2, 3DEC8, 3DECE, 3DED5, 3DEDB, 3DEE2, 3DEE8, 3DEEF, 3DEF6, 3DEFD, 3DF04, 3DF0B, 3DF13, 3DF1A, 3DF22, 3DF29, 3DF31, 3DF39, 3DF41, 3DF49, 3DF51, 3DF5A, 3DF62, 3DF6B, 3DF73, 3DF7C, 3DF85, 3DF8E, 3DF97, 3DFA0, 3DFA9, 3DFB3, 3DFBC, 3DFC6, 3DFD0, 3DFD9, 3DFE3, 3DFED, 3DFF7, 3E002, 3E00C, 3E016, 3E021, 3E02B, 3E036, 3E041, 3E04B, 3E056, 3E061, 3E06D, 3E078, 3E083, 3E08E, 3E09A, 3E0A5, 3E0B1, 3E0BD, 3E0C9, 3E0D4, 3E0E0, 3E0EC, 3E0F9, 3E105, 3E111, 3E11E, 3E12A, 3E137, 3E143, 3E150, 3E15D, 3E169, 3E176, 3E183, 3E190, 3E19E, 3E1AB, 3E1B8, 3E1C5, 3E1D3, 3E1E0, 3E1EE, 3E1FC, 3E209, 3E217, 3E225, 3E233, 3E241, 3E24F, 3E25D, 3E26B, 3E279, 3E288, 3E296, 3E2A4, 3E2B3, 3E2C2, 3E2D0, 3E2DF, 3E2EE, 3E2FC, 3E30B, 3E31A, 3E329, 3E338, 3E347, 3E356, 3E365, 3E375, 3E384, 3E393, 3E3A3, 3E3B2, 3E3C2, 3E3D1, 3E3E1, 3E3F0, 3E400, 3E410, 3E420, 3E42F, 3E43F, 3E44F, 3E45F, 3E46F, 3E47F, 3E48F, 3E49F, 3E4B0, 3E4C0, 3E4D0, 3E4E0, 3E4F1, 3E501, 3E512, 3E522, 3E533, 3E543, 3E554, 3E564, 3E575, 3E586, 3E596, 3E5A7, 3E5B8, 3E5C9, 3E5DA, 3E5EA, 3E5FB, 3E60C, 3E61D, 3E62E, 3E63F, 3E650, 3E661, 3E673, 3E684, 3E695, 3E6A6, 3E6B7, 3E6C9, 3E6DA, 3E6EB, 3E6FC, 3E70E, 3E71F, 3E731, 3E742, 3E753, 3E765, 3E776, 3E788, 3E799, 3E7AB, 3E7BC, 3E7CE, 3E7E0, 3E7F1, 3E803, 3E815, 3E826, 3E838, 3E84A, 3E85B, 3E86D, 3E87F, 3E890, 3E8A2, 3E8B4, 3E8C6, 3E8D7, 3E8E9, 3E8FB, 3E90D, 3E91F, 3E931, 3E942, 3E954, 3E966, 3E978, 3E98A, 3E99C, 3E9AE, 3E9C0, 3E9D1, 3E9E3, 3E9F5, 3EA07, 3EA19, 3EA2B, 3EA3D, 3EA4F, 3EA61, 3EA73, 3EA85, 3EA97, 3EAA8, 3EABA, 3EACC, 3EADE, 3EAF0, 3EB02, 3EB14, 3EB26, 3EB38, 3EB4A, 3EB5C, 3EB6E, 3EB7F, 3EB91, 3EBA3, 3EBB5, 3EBC7, 3EBD9, 3EBEB, 3EBFD, 3EC0E, 3EC20, 3EC32, 3EC44, 3EC56, 3EC68, 3EC79, 3EC8B, 3EC9D, 3ECAF, 3ECC0, 3ECD2, 3ECE4, 3ECF6, 3ED07, 3ED19, 3ED2B, 3ED3C, 3ED4E, 3ED60, 3ED71, 3ED83, 3ED95, 3EDA6, 3EDB8, 3EDC9, 3EDDB, 3EDEC, 3EDFE, 3EE0F, 3EE21, 3EE32, 3EE44, 3EE55, 3EE67, 3EE78, 3EE89, 3EE9B, 3EEAC, 3EEBD, 3EECF, 3EEE0, 3EEF1, 3EF02, 3EF14, 3EF25, 3EF36, 3EF47, 3EF58, 3EF69, 3EF7A, 3EF8C, 3EF9D, 3EFAE, 3EFBF, 3EFCF, 3EFE0, 3EFF1, 3F002, 3F013, 3F024, 3F035, 3F046, 3F056, 3F067, 3F078, 3F088, 3F099, 3F0AA, 3F0BA, 3F0CB, 3F0DB, 3F0EC, 3F0FC, 3F10D, 3F11D, 3F12E, 3F13E, 3F14F, 3F15F, 3F16F, 3F17F, 3F190, 3F1A0, 3F1B0, 3F1C0, 3F1D0, 3F1E0, 3F1F0, 3F200, 3F210, 3F220, 3F230, 3F240, 3F250, 3F260, 3F270, 3F27F, 3F28F, 3F29F, 3F2AF, 3F2BE, 3F2CE, 3F2DD, 3F2ED, 3F2FC, 3F30C, 3F31B, 3F32B, 3F33A, 3F349, 3F359, 3F368, 3F377, 3F386, 3F396, 3F3A5, 3F3B4, 3F3C3, 3F3D2, 3F3E1, 3F3F0, 3F3FF, 3F40E, 3F41C, 3F42B, 3F43A, 3F449, 3F457, 3F466, 3F475, 3F483, 3F492, 3F4A0, 3F4AF, 3F4BD, 3F4CC, 3F4DA, 3F4E8, 3F4F7, 3F505, 3F513, 3F521, 3F52F, 3F53D, 3F54B, 3F559, 3F567, 3F575, 3F583, 3F591, 3F59F, 3F5AD, 3F5BB, 3F5C8, 3F5D6, 3F5E4, 3F5F1, 3F5FF, 3F60C, 3F61A, 3F627, 3F635, 3F642, 3F64F, 3F65D, 3F66A, 3F677, 3F684, 3F691, 3F69E, 3F6AB, 3F6B8, 3F6C5, 3F6D2, 3F6DF, 3F6EC, 3F6F9, 3F706, 3F712, 3F71F, 3F72C, 3F738, 3F745, 3F751, 3F75E, 3F76A, 3F777, 3F783, 3F790, 3F79C, 3F7A8, 3F7B4, 3F7C0, 3F7CD, 3F7D9, 3F7E5, 3F7F1, 3F7FD, 3F809, 3F815, 3F820, 3F82C, 3F838, 3F844, 3F850, 3F85B, 3F867, 3F872, 3F87E, 3F889, 3F895, 3F8A0, 3F8AC, 3F8B7, 3F8C2, 3F8CE, 3F8D9, 3F8E4, 3F8EF, 3F8FA, 3F905, 3F910, 3F91B, 3F926, 3F931, 3F93C, 3F947, 3F952, 3F95D, 3F967, 3F972, 3F97D, 3F987, 3F992, 3F99C, 3F9A7, 3F9B1, 3F9BC, 3F9C6, 3F9D0, 3F9DB, 3F9E5, 3F9EF, 3F9F9, 3FA04, 3FA0E, 3FA18, 3FA22, 3FA2C, 3FA36, 3FA40, 3FA4A, 3FA53, 3FA5D, 3FA67, 3FA71, 3FA7B, 3FA84, 3FA8E, 3FA97, 3FAA1, 3FAAA, 3FAB4, 3FABD, 3FAC7, 3FAD0, 3FADA, 3FAE3, 3FAEC, 3FAF5, 3FAFF, 3FB08, 3FB11, 3FB1A, 3FB23, 3FB2C, 3FB35, 3FB3E, 3FB47, 3FB50, 3FB59, 3FB62, 3FB6A, 3FB73, 3FB7C, 3FB84, 3FB8D, 3FB96, 3FB9E, 3FBA7, 3FBAF, 3FBB8, 3FBC0, 3FBC9, 3FBD1, 3FBDA, 3FBE2, 3FBEA, 3FBF2, 3FBFB, 3FC03, 3FC0B, 3FC13, 3FC1B, 3FC23, 3FC2B, 3FC33, 3FC3B, 3FC43, 3FC4B, 3FC53, 3FC5B, 3FC63, 3FC6B, 3FC72, 3FC7A, 3FC82, 3FC89, 3FC91, 3FC99, 3FCA0, 3FCA8, 3FCAF, 3FCB7, 3FCBE, 3FCC6, 3FCCD, 3FCD5, 3FCDC, 3FCE3, 3FCEB, 3FCF2, 3FCF9, 3FD00, 3FD08, 3FD0F, 3FD16, 3FD1D, 3FD24, 3FD2B, 3FD32, 3FD39, 3FD40, 3FD47, 3FD4E, 3FD55, 3FD5C, 3FD63, 3FD6A, 3FD70, 3FD77, 3FD7E, 3FD85, 3FD8B, 3FD92, 3FD99, 3FD9F, 3FDA6, 3FDAD, 3FDB3, 3FDBA, 3FDC0, 3FDC7, 3FDCD, 3FDD4, 3FDDA, 3FDE1, 3FDE7, 3FDED, 3FDF4, 3FDFA, 3FE00, 3FE07, 3FE0D, 3FE13, 3FE19, 3FE20, 3FE26, 3FE2C, 3FE32, 3FE38, 3FE3E, 3FE44, 3FE4A, 3FE51, 3FE57, 3FE5D, 3FE63, 3FE69, 3FE6E, 3FE74, 3FE7A, 3FE80, 3FE86, 3FE8C, 3FE92, 3FE98, 3FE9E, 3FEA3, 3FEA9, 3FEAF, 3FEB5, 3FEBA, 3FEC0, 3FEC6, 3FECC, 3FED1, 3FED7, 3FEDD, 3FEE2, 3FEE8, 3FEED, 3FEF3, 3FEF9, 3FEFE, 3FF04, 3FF09, 3FF0F, 3FF14, 3FF1A, 3FF1F, 3FF25, 3FF2A, 3FF30, 3FF35, 3FF3B, 3FF40, 3FF45, 3FF4B, 3FF50, 3FF56, 3FF5B, 3FF60, 3FF66, 3FF6B, 3FF70, 3FF76, 3FF7B, 3FF80, 3FF86, 3FF8B, 3FF90, 3FF95, 3FF9B, 3FFA0, 3FFA5, 3FFAA, 3FFB0, 3FFB5, 3FFBA, 3FFBF, 3FFC4, 3FFCA, 3FFCF, 3FFD4, 3FFD9, 3FFDE, 3FFE3, 3FFE9, 3FFEE, 3FFF3, 3FFF8, 3FFFD;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_a19310373d0c64c7',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f4c17dc739ab891a969d094581b99977',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_a19310373d0c64c7',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFFD, 3FFF8, 3FFF3, 3FFEE, 3FFE9, 3FFE4, 3FFDF, 3FFD9, 3FFD4, 3FFCF, 3FFCA, 3FFC5, 3FFC0, 3FFBA, 3FFB5, 3FFB0, 3FFAB, 3FFA5, 3FFA0, 3FF9B, 3FF96, 3FF90, 3FF8B, 3FF86, 3FF81, 3FF7B, 3FF76, 3FF71, 3FF6B, 3FF66, 3FF61, 3FF5B, 3FF56, 3FF51, 3FF4B, 3FF46, 3FF40, 3FF3B, 3FF36, 3FF30, 3FF2B, 3FF25, 3FF20, 3FF1A, 3FF15, 3FF0F, 3FF0A, 3FF04, 3FEFF, 3FEF9, 3FEF3, 3FEEE, 3FEE8, 3FEE3, 3FEDD, 3FED7, 3FED2, 3FECC, 3FEC6, 3FEC1, 3FEBB, 3FEB5, 3FEAF, 3FEAA, 3FEA4, 3FE9E, 3FE98, 3FE92, 3FE8C, 3FE87, 3FE81, 3FE7B, 3FE75, 3FE6F, 3FE69, 3FE63, 3FE5D, 3FE57, 3FE51, 3FE4B, 3FE45, 3FE3F, 3FE39, 3FE32, 3FE2C, 3FE26, 3FE20, 3FE1A, 3FE13, 3FE0D, 3FE07, 3FE01, 3FDFA, 3FDF4, 3FDEE, 3FDE7, 3FDE1, 3FDDA, 3FDD4, 3FDCE, 3FDC7, 3FDC1, 3FDBA, 3FDB4, 3FDAD, 3FDA6, 3FDA0, 3FD99, 3FD92, 3FD8C, 3FD85, 3FD7E, 3FD78, 3FD71, 3FD6A, 3FD63, 3FD5C, 3FD55, 3FD4E, 3FD48, 3FD41, 3FD3A, 3FD33, 3FD2C, 3FD24, 3FD1D, 3FD16, 3FD0F, 3FD08, 3FD01, 3FCFA, 3FCF2, 3FCEB, 3FCE4, 3FCDC, 3FCD5, 3FCCE, 3FCC6, 3FCBF, 3FCB7, 3FCB0, 3FCA8, 3FCA1, 3FC99, 3FC91, 3FC8A, 3FC82, 3FC7A, 3FC73, 3FC6B, 3FC63, 3FC5B, 3FC53, 3FC4C, 3FC44, 3FC3C, 3FC34, 3FC2C, 3FC24, 3FC1C, 3FC14, 3FC0B, 3FC03, 3FBFB, 3FBF3, 3FBEB, 3FBE2, 3FBDA, 3FBD2, 3FBC9, 3FBC1, 3FBB8, 3FBB0, 3FBA7, 3FB9F, 3FB96, 3FB8E, 3FB85, 3FB7C, 3FB73, 3FB6B, 3FB62, 3FB59, 3FB50, 3FB47, 3FB3E, 3FB35, 3FB2D, 3FB23, 3FB1A, 3FB11, 3FB08, 3FAFF, 3FAF6, 3FAED, 3FAE3, 3FADA, 3FAD1, 3FAC7, 3FABE, 3FAB4, 3FAAB, 3FAA1, 3FA98, 3FA8E, 3FA85, 3FA7B, 3FA71, 3FA67, 3FA5E, 3FA54, 3FA4A, 3FA40, 3FA36, 3FA2C, 3FA22, 3FA18, 3FA0E, 3FA04, 3F9FA, 3F9F0, 3F9E5, 3F9DB, 3F9D1, 3F9C7, 3F9BC, 3F9B2, 3F9A7, 3F99D, 3F992, 3F988, 3F97D, 3F972, 3F968, 3F95D, 3F952, 3F947, 3F93D, 3F932, 3F927, 3F91C, 3F911, 3F906, 3F8FB, 3F8F0, 3F8E4, 3F8D9, 3F8CE, 3F8C3, 3F8B8, 3F8AC, 3F8A1, 3F895, 3F88A, 3F87E, 3F873, 3F867, 3F85C, 3F850, 3F844, 3F839, 3F82D, 3F821, 3F815, 3F809, 3F7FD, 3F7F1, 3F7E5, 3F7D9, 3F7CD, 3F7C1, 3F7B5, 3F7A9, 3F79C, 3F790, 3F784, 3F777, 3F76B, 3F75E, 3F752, 3F745, 3F739, 3F72C, 3F720, 3F713, 3F706, 3F6F9, 3F6ED, 3F6E0, 3F6D3, 3F6C6, 3F6B9, 3F6AC, 3F69F, 3F692, 3F685, 3F677, 3F66A, 3F65D, 3F650, 3F642, 3F635, 3F628, 3F61A, 3F60D, 3F5FF, 3F5F2, 3F5E4, 3F5D6, 3F5C9, 3F5BB, 3F5AD, 3F59F, 3F592, 3F584, 3F576, 3F568, 3F55A, 3F54C, 3F53E, 3F530, 3F522, 3F513, 3F505, 3F4F7, 3F4E9, 3F4DA, 3F4CC, 3F4BE, 3F4AF, 3F4A1, 3F492, 3F484, 3F475, 3F466, 3F458, 3F449, 3F43A, 3F42C, 3F41D, 3F40E, 3F3FF, 3F3F0, 3F3E1, 3F3D2, 3F3C3, 3F3B4, 3F3A5, 3F396, 3F387, 3F378, 3F368, 3F359, 3F34A, 3F33B, 3F32B, 3F31C, 3F30C, 3F2FD, 3F2ED, 3F2DE, 3F2CE, 3F2BF, 3F2AF, 3F29F, 3F290, 3F280, 3F270, 3F260, 3F250, 3F241, 3F231, 3F221, 3F211, 3F201, 3F1F1, 3F1E1, 3F1D1, 3F1C1, 3F1B0, 3F1A0, 3F190, 3F180, 3F170, 3F15F, 3F14F, 3F13F, 3F12E, 3F11E, 3F10D, 3F0FD, 3F0EC, 3F0DC, 3F0CB, 3F0BB, 3F0AA, 3F09A, 3F089, 3F078, 3F067, 3F057, 3F046, 3F035, 3F024, 3F014, 3F003, 3EFF2, 3EFE1, 3EFD0, 3EFBF, 3EFAE, 3EF9D, 3EF8C, 3EF7B, 3EF6A, 3EF59, 3EF48, 3EF36, 3EF25, 3EF14, 3EF03, 3EEF2, 3EEE0, 3EECF, 3EEBE, 3EEAC, 3EE9B, 3EE8A, 3EE78, 3EE67, 3EE56, 3EE44, 3EE33, 3EE21, 3EE10, 3EDFE, 3EDED, 3EDDB, 3EDCA, 3EDB8, 3EDA7, 3ED95, 3ED83, 3ED72, 3ED60, 3ED4F, 3ED3D, 3ED2B, 3ED19, 3ED08, 3ECF6, 3ECE4, 3ECD3, 3ECC1, 3ECAF, 3EC9D, 3EC8C, 3EC7A, 3EC68, 3EC56, 3EC44, 3EC32, 3EC21, 3EC0F, 3EBFD, 3EBEB, 3EBD9, 3EBC7, 3EBB5, 3EBA4, 3EB92, 3EB80, 3EB6E, 3EB5C, 3EB4A, 3EB38, 3EB26, 3EB14, 3EB02, 3EAF0, 3EADF, 3EACD, 3EABB, 3EAA9, 3EA97, 3EA85, 3EA73, 3EA61, 3EA4F, 3EA3D, 3EA2B, 3EA19, 3EA07, 3E9F6, 3E9E4, 3E9D2, 3E9C0, 3E9AE, 3E99C, 3E98A, 3E978, 3E966, 3E955, 3E943, 3E931, 3E91F, 3E90D, 3E8FB, 3E8EA, 3E8D8, 3E8C6, 3E8B4, 3E8A2, 3E891, 3E87F, 3E86D, 3E85B, 3E84A, 3E838, 3E826, 3E815, 3E803, 3E7F1, 3E7E0, 3E7CE, 3E7BD, 3E7AB, 3E79A, 3E788, 3E777, 3E765, 3E754, 3E742, 3E731, 3E71F, 3E70E, 3E6FD, 3E6EB, 3E6DA, 3E6C9, 3E6B8, 3E6A6, 3E695, 3E684, 3E673, 3E662, 3E651, 3E63F, 3E62E, 3E61D, 3E60C, 3E5FB, 3E5EB, 3E5DA, 3E5C9, 3E5B8, 3E5A7, 3E596, 3E586, 3E575, 3E564, 3E554, 3E543, 3E533, 3E522, 3E512, 3E501, 3E4F1, 3E4E1, 3E4D0, 3E4C0, 3E4B0, 3E4A0, 3E48F, 3E47F, 3E46F, 3E45F, 3E44F, 3E43F, 3E42F, 3E420, 3E410, 3E400, 3E3F0, 3E3E1, 3E3D1, 3E3C2, 3E3B2, 3E3A3, 3E393, 3E384, 3E375, 3E365, 3E356, 3E347, 3E338, 3E329, 3E31A, 3E30B, 3E2FC, 3E2ED, 3E2DF, 3E2D0, 3E2C1, 3E2B3, 3E2A4, 3E296, 3E288, 3E279, 3E26B, 3E25D, 3E24F, 3E241, 3E233, 3E225, 3E217, 3E209, 3E1FB, 3E1EE, 3E1E0, 3E1D3, 3E1C5, 3E1B8, 3E1AB, 3E19D, 3E190, 3E183, 3E176, 3E169, 3E15C, 3E150, 3E143, 3E136, 3E12A, 3E11D, 3E111, 3E105, 3E0F8, 3E0EC, 3E0E0, 3E0D4, 3E0C8, 3E0BC, 3E0B1, 3E0A5, 3E09A, 3E08E, 3E083, 3E077, 3E06C, 3E061, 3E056, 3E04B, 3E040, 3E036, 3E02B, 3E020, 3E016, 3E00B, 3E001, 3DFF7, 3DFED, 3DFE3, 3DFD9, 3DFCF, 3DFC5, 3DFBC, 3DFB2, 3DFA9, 3DFA0, 3DF97, 3DF8D, 3DF84, 3DF7C, 3DF73, 3DF6A, 3DF62, 3DF59, 3DF51, 3DF49, 3DF40, 3DF38, 3DF30, 3DF29, 3DF21, 3DF19, 3DF12, 3DF0B, 3DF03, 3DEFC, 3DEF5, 3DEEE, 3DEE8, 3DEE1, 3DEDA, 3DED4, 3DECE, 3DEC8, 3DEC2, 3DEBC, 3DEB6, 3DEB0, 3DEAB, 3DEA5, 3DEA0, 3DE9B, 3DE96, 3DE91, 3DE8C, 3DE87, 3DE83, 3DE7E, 3DE7A, 3DE76, 3DE72, 3DE6E, 3DE6B, 3DE67, 3DE63, 3DE60, 3DE5D, 3DE5A, 3DE57, 3DE54, 3DE52, 3DE4F, 3DE4D, 3DE4B, 3DE49, 3DE47, 3DE45, 3DE43, 3DE42, 3DE40, 3DE3F, 3DE3E, 3DE3D, 3DE3D, 3DE3C, 3DE3C, 3DE3B, 3DE3B, 3DE3B, 3DE3B, 3DE3C, 3DE3C, 3DE3D, 3DE3E, 3DE3F, 3DE40, 3DE41, 3DE42, 3DE44, 3DE46, 3DE48, 3DE4A, 3DE4C, 3DE4E, 3DE51, 3DE54, 3DE57, 3DE5A, 3DE5D, 3DE60, 3DE64, 3DE68, 3DE6C, 3DE70, 3DE74, 3DE78, 3DE7D, 3DE82, 3DE87, 3DE8C, 3DE91, 3DE97, 3DE9C, 3DEA2, 3DEA8, 3DEAE, 3DEB5, 3DEBB, 3DEC2, 3DEC9, 3DED0, 3DED7, 3DEDF, 3DEE6, 3DEEE, 3DEF6, 3DEFE, 3DF07, 3DF0F, 3DF18, 3DF21, 3DF2A, 3DF34, 3DF3D, 3DF47, 3DF51, 3DF5B, 3DF65, 3DF70, 3DF7B, 3DF86, 3DF91, 3DF9C, 3DFA8, 3DFB3, 3DFBF, 3DFCB, 3DFD8, 3DFE4, 3DFF1, 3DFFE, 3E00B, 3E018, 3E026, 3E034, 3E042, 3E050, 3E05E, 3E06D, 3E07B, 3E08A, 3E09A, 3E0A9, 3E0B9, 3E0C9, 3E0D9, 3E0E9, 3E0F9, 3E10A, 3E11B, 3E12C, 3E13E, 3E14F, 3E161, 3E173, 3E185, 3E198, 3E1AB, 3E1BE, 3E1D1, 3E1E4, 3E1F8, 3E20B, 3E220, 3E234, 3E248, 3E25D, 3E272, 3E287, 3E29D, 3E2B2, 3E2C8, 3E2DE, 3E2F5, 3E30B, 3E322, 3E339, 3E351, 3E368, 3E380, 3E398, 3E3B0, 3E3C9, 3E3E1, 3E3FA, 3E414, 3E42D, 3E447, 3E461, 3E47B, 3E495, 3E4B0, 3E4CB, 3E4E6, 3E501, 3E51D, 3E539, 3E555, 3E572, 3E58E, 3E5AB, 3E5C8, 3E5E6, 3E603, 3E621, 3E63F, 3E65E, 3E67D, 3E69B, 3E6BB, 3E6DA, 3E6FA, 3E71A, 3E73A, 3E75A, 3E77B, 3E79C, 3E7BD, 3E7DF, 3E801, 3E823, 3E845, 3E868, 3E88B, 3E8AE, 3E8D1, 3E8F5, 3E919, 3E93D, 3E961, 3E986, 3E9AB, 3E9D0, 3E9F6, 3EA1B, 3EA41, 3EA68, 3EA8E, 3EAB5, 3EADC, 3EB04, 3EB2B, 3EB53, 3EB7C, 3EBA4, 3EBCD, 3EBF6, 3EC1F, 3EC49, 3EC73, 3EC9D, 3ECC8, 3ECF2, 3ED1D, 3ED49, 3ED74, 3EDA0, 3EDCC, 3EDF9, 3EE25, 3EE52, 3EE80, 3EEAD, 3EEDB, 3EF09, 3EF38, 3EF66, 3EF95, 3EFC5, 3EFF4, 3F024, 3F054, 3F085, 3F0B5, 3F0E6, 3F118, 3F149, 3F17B, 3F1AE, 3F1E0, 3F213, 3F246, 3F279, 3F2AD, 3F2E1, 3F315, 3F34A, 3F37F, 3F3B4, 3F3E9, 3F41F, 3F455, 3F48B, 3F4C2, 3F4F9, 3F530, 3F568, 3F59F, 3F5D8, 3F610, 3F649, 3F682, 3F6BB, 3F6F5, 3F72F, 3F769, 3F7A4, 3F7DF, 3F81A, 3F855, 3F891, 3F8CD, 3F909, 3F946, 3F983, 3F9C1, 3F9FE, 3FA3C, 3FA7A, 3FAB9, 3FAF8, 3FB37, 3FB76, 3FBB6, 3FBF6, 3FC37, 3FC78, 3FCB9, 3FCFA, 3FD3C, 3FD7E, 3FDC0, 3FE02, 3FE45, 3FE89, 3FECC, 3FF10, 3FF54, 3FF99, 3FFDD;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_f04fa80dbef694af',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a465ca7fcfa779863bfd906293f79b74',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_f04fa80dbef694af',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 23, 68, AE, F4, 13A, 181, 1C8, 20F, 257, 29F, 2E7, 330, 379, 3C2, 40C, 455, 4A0, 4EA, 535, 580, 5CC, 617, 664, 6B0, 6FD, 74A, 797, 7E5, 833, 881, 8D0, 91F, 96F, 9BE, A0E, A5F, AAF, B00, B51, BA3, BF5, C47, C9A, CED, D40, D93, DE7, E3C, E90, EE5, F3A, F90, FE5, 103C, 1092, 10E9, 1140, 1197, 11EF, 1247, 12A0, 12F9, 1352, 13AB, 1405, 145F, 14B9, 1514, 156F, 15CA, 1626, 1682, 16DE, 173B, 1798, 17F5, 1853, 18B1, 190F, 196E, 19CD, 1A2C, 1A8C, 1AEC, 1B4C, 1BAD, 1C0E, 1C6F, 1CD1, 1D32, 1D95, 1DF7, 1E5A, 1EBD, 1F21, 1F85, 1FE9, 204D, 20B2, 2117, 217D, 21E3, 2249, 22AF, 2316, 237D, 23E5, 244C, 24B5, 251D, 2586, 25EF, 2658, 26C2, 272C, 2796, 2801, 286C, 28D7, 2943, 29AF, 2A1B, 2A88, 2AF5, 2B62, 2BD0, 2C3E, 2CAC, 2D1A, 2D89, 2DF9, 2E68, 2ED8, 2F48, 2FB9, 3029, 309B, 310C, 317E, 31F0, 3262, 32D5, 3348, 33BB, 342F, 34A3, 3517, 358C, 3601, 3676, 36EC, 3762, 37D8, 384F, 38C5, 393D, 39B4, 3A2C, 3AA4, 3B1C, 3B95, 3C0E, 3C88, 3D01, 3D7B, 3DF6, 3E70, 3EEB, 3F66, 3FE2, 405E, 40DA, 4156, 41D3, 4250, 42CE, 434B, 43C9, 4448, 44C6, 4545, 45C5, 4644, 46C4, 4744, 47C5, 4845, 48C6, 4948, 49CA, 4A4C, 4ACE, 4B50, 4BD3, 4C56, 4CDA, 4D5E, 4DE2, 4E66, 4EEB, 4F70, 4FF5, 507B, 5101, 5187, 520D, 5294, 531B, 53A2, 542A, 54B2, 553A, 55C3, 564B, 56D4, 575E, 57E8, 5871, 58FC, 5986, 5A11, 5A9C, 5B28, 5BB3, 5C3F, 5CCB, 5D58, 5DE5, 5E72, 5EFF, 5F8D, 601B, 60A9, 6138, 61C6, 6255, 62E5, 6374, 6404, 6494, 6525, 65B5, 6646, 66D8, 6769, 67FB, 688D, 691F, 69B2, 6A45, 6AD8, 6B6B, 6BFF, 6C93, 6D27, 6DBC, 6E50, 6EE5, 6F7B, 7010, 70A6, 713C, 71D2, 7269, 7300, 7397, 742E, 74C6, 755D, 75F6, 768E, 7727, 77BF, 7858, 78F2, 798B, 7A25, 7ABF, 7B5A, 7BF4, 7C8F, 7D2A, 7DC5, 7E61, 7EFD, 7F99, 8035, 80D2, 816E, 820B, 82A9, 8346, 83E4, 8482, 8520, 85BE, 865D, 86FC, 879B, 883A, 88DA, 897A, 8A1A, 8ABA, 8B5A, 8BFB, 8C9C, 8D3D, 8DDF, 8E80, 8F22, 8FC4, 9066, 9109, 91AB, 924E, 92F1, 9395, 9438, 94DC, 9580, 9624, 96C8, 976D, 9812, 98B7, 995C, 9A01, 9AA7, 9B4C, 9BF2, 9C99, 9D3F, 9DE6, 9E8C, 9F33, 9FDA, A082, A129, A1D1, A279, A321, A3C9, A472, A51B, A5C3, A66C, A716, A7BF, A869, A912, A9BC, AA66, AB11, ABBB, AC66, AD11, ADBC, AE67, AF12, AFBE, B069, B115, B1C1, B26D, B31A, B3C6, B473, B520, B5CC, B67A, B727, B7D4, B882, B930, B9DE, BA8C, BB3A, BBE8, BC97, BD45, BDF4, BEA3, BF52, C001, C0B0, C160, C210, C2BF, C36F, C41F, C4CF, C580, C630, C6E1, C791, C842, C8F3, C9A4, CA55, CB07, CBB8, CC6A, CD1B, CDCD, CE7F, CF31, CFE3, D095, D148, D1FA, D2AD, D35F, D412, D4C5, D578, D62B, D6DE, D791, D845, D8F8, D9AC, DA5F, DB13, DBC7, DC7B, DD2F, DDE3, DE97, DF4C, E000, E0B5, E169, E21E, E2D2, E387, E43C, E4F1, E5A6, E65B, E710, E7C5, E87B, E930, E9E5, EA9B, EB50, EC06, ECBC, ED71, EE27, EEDD, EF93, F049, F0FF, F1B5, F26B, F321, F3D7, F48E, F544, F5FA, F6B1, F767, F81D, F8D4, F98A, FA41, FAF8, FBAE, FC65, FD1C, FDD2, FE89, FF40, FFF7, 100AD, 10164, 1021B, 102D2, 10389, 10440, 104F7, 105AD, 10664, 1071B, 107D2, 10889, 10940, 109F7, 10AAE, 10B65, 10C1C, 10CD3, 10D8A, 10E41, 10EF8, 10FAF, 11066, 1111D, 111D4, 1128A, 11341, 113F8, 114AF, 11566, 1161D, 116D3, 1178A, 11841, 118F8, 119AE, 11A65, 11B1C, 11BD2, 11C89, 11D3F, 11DF6, 11EAC, 11F63, 12019, 120CF, 12186, 1223C, 122F2, 123A8, 1245E, 12514, 125CA, 12680, 12736, 127EC, 128A2, 12957, 12A0D, 12AC3, 12B78, 12C2E, 12CE3, 12D98, 12E4D, 12F03, 12FB8, 1306D, 13122, 131D7, 1328B, 13340, 133F5, 134A9, 1355E, 13612, 136C6, 1377B, 1382F, 138E3, 13997, 13A4A, 13AFE, 13BB2, 13C65, 13D19, 13DCC, 13E7F, 13F32, 13FE5, 14098, 1414B, 141FE, 142B0, 14363, 14415, 144C7, 14579, 1462B, 146DD, 1478F, 14840, 148F2, 149A3, 14A55, 14B06, 14BB7, 14C67, 14D18, 14DC9, 14E79, 14F29, 14FD9, 15089, 15139, 151E9, 15298, 15348, 153F7, 154A6, 15555, 15604, 156B3, 15761, 1580F, 158BE, 1596C, 15A19, 15AC7, 15B74, 15C22, 15CCF, 15D7C, 15E29, 15ED5, 15F82, 1602E, 160DA, 16186, 16232, 162DD, 16389, 16434, 164DF, 1658A, 16634, 166DF, 16789, 16833, 168DD, 16987, 16A30, 16AD9, 16B82, 16C2B, 16CD4, 16D7C, 16E25, 16ECD, 16F74, 1701C, 170C3, 1716B, 17211, 172B8, 1735F, 17405, 174AB, 17551, 175F7, 1769C, 17741, 177E6, 1788B, 1792F, 179D3, 17A77, 17B1B, 17BBF, 17C62, 17D05, 17DA8, 17E4A, 17EED, 17F8F, 18030, 180D2, 18173, 18214, 182B5, 18356, 183F6, 18496, 18536, 185D5, 18675, 18713, 187B2, 18851, 188EF, 1898D, 18A2A, 18AC8, 18B65, 18C02, 18C9E, 18D3A, 18DD6, 18E72, 18F0D, 18FA9, 19043, 190DE, 19178, 19212, 192AC, 19345, 193DE, 19477, 19510, 195A8, 19640, 196D8, 1976F, 19806, 1989D, 19933, 199C9, 19A5F, 19AF4, 19B89, 19C1E, 19CB3, 19D47, 19DDB, 19E6F, 19F02, 19F95, 1A027, 1A0BA, 1A14C, 1A1DD, 1A26F, 1A300, 1A390, 1A421, 1A4B1, 1A540, 1A5D0, 1A65F, 1A6ED, 1A77C, 1A809, 1A897, 1A924, 1A9B1, 1AA3E, 1AACA, 1AB56, 1ABE2, 1AC6D, 1ACF8, 1AD82, 1AE0C, 1AE96, 1AF20, 1AFA9, 1B031, 1B0BA, 1B142, 1B1C9, 1B251, 1B2D7, 1B35E, 1B3E4, 1B46A, 1B4EF, 1B574, 1B5F9, 1B67D, 1B701, 1B785, 1B808, 1B88B, 1B90D, 1B98F, 1BA11, 1BA92, 1BB13, 1BB94, 1BC14, 1BC93, 1BD13, 1BD92, 1BE10, 1BE8E, 1BF0C, 1BF89, 1C006, 1C083, 1C0FF, 1C17B, 1C1F6, 1C271, 1C2EC, 1C366, 1C3E0, 1C459, 1C4D2, 1C54A, 1C5C2, 1C63A, 1C6B1, 1C728, 1C79F, 1C815, 1C88A, 1C900, 1C974, 1C9E9, 1CA5D, 1CAD0, 1CB43, 1CBB6, 1CC28, 1CC9A, 1CD0B, 1CD7C, 1CDED, 1CE5D, 1CECD, 1CF3C, 1CFAB, 1D019, 1D087, 1D0F4, 1D161, 1D1CE, 1D23A, 1D2A6, 1D311, 1D37C, 1D3E6, 1D450, 1D4BA, 1D523, 1D58B, 1D5F4, 1D65B, 1D6C3, 1D729, 1D790, 1D7F6, 1D85B, 1D8C0, 1D925, 1D989, 1D9EC, 1DA4F, 1DAB2, 1DB14, 1DB76, 1DBD7, 1DC38, 1DC98, 1DCF8, 1DD58, 1DDB7, 1DE15, 1DE73, 1DED1, 1DF2E, 1DF8A, 1DFE7, 1E042, 1E09D, 1E0F8, 1E152, 1E1AC, 1E205, 1E25E, 1E2B6, 1E30E, 1E366, 1E3BC, 1E413, 1E469, 1E4BE, 1E513, 1E568, 1E5BB, 1E60F, 1E662, 1E6B4, 1E706, 1E758, 1E7A9, 1E7F9, 1E849, 1E899, 1E8E8, 1E936, 1E984, 1E9D2, 1EA1F, 1EA6B, 1EAB8, 1EB03, 1EB4E, 1EB99, 1EBE3, 1EC2C, 1EC75, 1ECBE, 1ED06, 1ED4D, 1ED94, 1EDDB, 1EE21, 1EE66, 1EEAB, 1EEEF, 1EF33, 1EF77, 1EFBA, 1EFFC, 1F03E, 1F07F, 1F0C0, 1F101, 1F140, 1F180, 1F1BE, 1F1FD, 1F23A, 1F278, 1F2B4, 1F2F1, 1F32C, 1F367, 1F3A2, 1F3DC, 1F416, 1F44F, 1F487, 1F4BF, 1F4F7, 1F52E, 1F564, 1F59A, 1F5CF, 1F604, 1F639, 1F66C, 1F6A0, 1F6D2, 1F704, 1F736, 1F767, 1F798, 1F7C8, 1F7F7, 1F826, 1F855, 1F883, 1F8B0, 1F8DD, 1F909, 1F935, 1F961, 1F98B, 1F9B5, 1F9DF, 1FA08, 1FA31, 1FA59, 1FA80, 1FAA7, 1FACE, 1FAF4, 1FB19, 1FB3E, 1FB62, 1FB86, 1FBA9, 1FBCB, 1FBED, 1FC0F, 1FC30, 1FC50, 1FC70, 1FC90, 1FCAE, 1FCCD, 1FCEA, 1FD08, 1FD24, 1FD40, 1FD5C, 1FD77, 1FD91, 1FDAB, 1FDC5, 1FDDD, 1FDF6, 1FE0D, 1FE25, 1FE3B, 1FE51, 1FE67, 1FE7C, 1FE90, 1FEA4, 1FEB7, 1FECA, 1FEDC, 1FEEE, 1FEFF, 1FF10, 1FF20, 1FF2F, 1FF3E, 1FF4C, 1FF5A, 1FF67, 1FF74, 1FF80, 1FF8C, 1FF97, 1FFA1, 1FFAB, 1FFB5, 1FFBE, 1FFC6, 1FFCE, 1FFD5, 1FFDB, 1FFE2, 1FFE7, 1FFEC, 1FFF0, 1FFF4, 1FFF8, 1FFFA, 1FFFD, 1FFFE, 1FFFF, 1FFFF;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_25ac2643f257572c',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '84fe2685320e8ee9f6656b76fa45143c',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_25ac2643f257572c',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 1FFFF, 1FFFF, 1FFFE, 1FFFD, 1FFFA, 1FFF8, 1FFF4, 1FFF0, 1FFEC, 1FFE7, 1FFE1, 1FFDB, 1FFD5, 1FFCE, 1FFC6, 1FFBE, 1FFB5, 1FFAB, 1FFA1, 1FF97, 1FF8C, 1FF80, 1FF74, 1FF67, 1FF5A, 1FF4C, 1FF3E, 1FF2F, 1FF1F, 1FF0F, 1FEFF, 1FEEE, 1FEDC, 1FECA, 1FEB7, 1FEA4, 1FE90, 1FE7B, 1FE66, 1FE51, 1FE3B, 1FE24, 1FE0D, 1FDF5, 1FDDD, 1FDC4, 1FDAB, 1FD91, 1FD76, 1FD5B, 1FD40, 1FD24, 1FD07, 1FCEA, 1FCCC, 1FCAE, 1FC8F, 1FC70, 1FC50, 1FC2F, 1FC0E, 1FBED, 1FBCB, 1FBA8, 1FB85, 1FB61, 1FB3D, 1FB18, 1FAF3, 1FACD, 1FAA7, 1FA80, 1FA58, 1FA30, 1FA08, 1F9DE, 1F9B5, 1F98B, 1F960, 1F935, 1F909, 1F8DC, 1F8B0, 1F882, 1F854, 1F826, 1F7F7, 1F7C7, 1F797, 1F767, 1F735, 1F704, 1F6D1, 1F69F, 1F66C, 1F638, 1F603, 1F5CF, 1F599, 1F563, 1F52D, 1F4F6, 1F4BE, 1F486, 1F44E, 1F415, 1F3DB, 1F3A1, 1F366, 1F32B, 1F2F0, 1F2B3, 1F277, 1F239, 1F1FC, 1F1BD, 1F17F, 1F13F, 1F100, 1F0BF, 1F07E, 1F03D, 1EFFB, 1EFB9, 1EF76, 1EF32, 1EEEE, 1EEAA, 1EE65, 1EE1F, 1EDDA, 1ED93, 1ED4C, 1ED05, 1ECBD, 1EC74, 1EC2B, 1EBE1, 1EB97, 1EB4D, 1EB02, 1EAB6, 1EA6A, 1EA1E, 1E9D1, 1E983, 1E935, 1E8E7, 1E898, 1E848, 1E7F8, 1E7A8, 1E757, 1E705, 1E6B3, 1E661, 1E60E, 1E5BA, 1E566, 1E512, 1E4BD, 1E467, 1E411, 1E3BB, 1E364, 1E30D, 1E2B5, 1E25D, 1E204, 1E1AB, 1E151, 1E0F7, 1E09C, 1E041, 1DFE5, 1DF89, 1DF2C, 1DECF, 1DE72, 1DE14, 1DDB5, 1DD56, 1DCF7, 1DC97, 1DC37, 1DBD6, 1DB74, 1DB13, 1DAB0, 1DA4E, 1D9EB, 1D987, 1D923, 1D8BE, 1D859, 1D7F4, 1D78E, 1D728, 1D6C1, 1D65A, 1D5F2, 1D58A, 1D521, 1D4B8, 1D44F, 1D3E5, 1D37A, 1D30F, 1D2A4, 1D238, 1D1CC, 1D160, 1D0F3, 1D085, 1D017, 1CFA9, 1CF3A, 1CECB, 1CE5B, 1CDEB, 1CD7B, 1CD0A, 1CC98, 1CC26, 1CBB4, 1CB41, 1CACE, 1CA5B, 1C9E7, 1C973, 1C8FE, 1C889, 1C813, 1C79D, 1C726, 1C6B0, 1C638, 1C5C1, 1C549, 1C4D0, 1C457, 1C3DE, 1C364, 1C2EA, 1C26F, 1C1F4, 1C179, 1C0FD, 1C081, 1C004, 1BF87, 1BF0A, 1BE8C, 1BE0E, 1BD90, 1BD11, 1BC91, 1BC12, 1BB92, 1BB11, 1BA90, 1BA0F, 1B98D, 1B90B, 1B889, 1B806, 1B783, 1B6FF, 1B67B, 1B5F7, 1B572, 1B4ED, 1B468, 1B3E2, 1B35C, 1B2D5, 1B24E, 1B1C7, 1B140, 1B0B8, 1B02F, 1AFA7, 1AF1D, 1AE94, 1AE0A, 1AD80, 1ACF6, 1AC6B, 1ABE0, 1AB54, 1AAC8, 1AA3C, 1A9AF, 1A922, 1A895, 1A807, 1A779, 1A6EB, 1A65C, 1A5CD, 1A53E, 1A4AE, 1A41E, 1A38E, 1A2FD, 1A26C, 1A1DB, 1A149, 1A0B7, 1A025, 19F92, 19F00, 19E6C, 19DD9, 19D45, 19CB1, 19C1C, 19B87, 19AF2, 19A5D, 199C7, 19931, 1989A, 19804, 1976C, 196D5, 1963E, 195A6, 1950D, 19475, 193DC, 19343, 192AA, 19210, 19176, 190DC, 19041, 18FA6, 18F0B, 18E70, 18DD4, 18D38, 18C9C, 18BFF, 18B62, 18AC5, 18A28, 1898A, 188EC, 1884E, 187B0, 18711, 18672, 185D3, 18533, 18494, 183F4, 18353, 182B3, 18212, 18171, 180D0, 1802E, 17F8C, 17EEA, 17E48, 17DA5, 17D02, 17C5F, 17BBC, 17B19, 17A75, 179D1, 1792D, 17888, 177E3, 1773F, 17699, 175F4, 1754E, 174A9, 17402, 1735C, 172B6, 1720F, 17168, 170C1, 17019, 16F72, 16ECA, 16E22, 16D7A, 16CD1, 16C29, 16B80, 16AD7, 16A2E, 16984, 168DB, 16831, 16787, 166DC, 16632, 16587, 164DC, 16431, 16386, 162DB, 1622F, 16184, 160D8, 1602C, 15F7F, 15ED3, 15E26, 15D79, 15CCC, 15C1F, 15B72, 15AC4, 15A17, 15969, 158BB, 1580D, 1575E, 156B0, 15601, 15553, 154A4, 153F5, 15345, 15296, 151E6, 15137, 15087, 14FD7, 14F27, 14E76, 14DC6, 14D15, 14C65, 14BB4, 14B03, 14A52, 149A1, 148EF, 1483E, 1478C, 146DB, 14629, 14577, 144C5, 14412, 14360, 142AE, 141FB, 14148, 14096, 13FE3, 13F30, 13E7D, 13DC9, 13D16, 13C63, 13BAF, 13AFB, 13A48, 13994, 138E0, 1382C, 13778, 136C4, 1360F, 1355B, 134A7, 133F2, 1333D, 13289, 131D4, 1311F, 1306A, 12FB5, 12F00, 12E4B, 12D96, 12CE0, 12C2B, 12B75, 12AC0, 12A0A, 12955, 1289F, 127E9, 12733, 1267E, 125C8, 12512, 1245C, 123A6, 122EF, 12239, 12183, 120CD, 12016, 11F60, 11EAA, 11DF3, 11D3D, 11C86, 11BD0, 11B19, 11A62, 119AC, 118F5, 1183E, 11788, 116D1, 1161A, 11563, 114AC, 113F6, 1133F, 11288, 111D1, 1111A, 11063, 10FAC, 10EF5, 10E3E, 10D87, 10CD0, 10C19, 10B62, 10AAC, 109F5, 1093E, 10887, 107D0, 10719, 10662, 105AB, 104F4, 1043D, 10386, 102CF, 10218, 10162, 100AB, FFF4, FF3D, FE86, FDD0, FD19, FC62, FBAC, FAF5, FA3E, F988, F8D1, F81B, F764, F6AE, F5F8, F541, F48B, F3D5, F31F, F269, F1B2, F0FC, F046, EF90, EEDB, EE25, ED6F, ECB9, EC04, EB4E, EA98, E9E3, E92E, E878, E7C3, E70E, E659, E5A3, E4EE, E43A, E385, E2D0, E21B, E167, E0B2, DFFE, DF49, DE95, DDE1, DD2D, DC79, DBC5, DB11, DA5D, D9A9, D8F6, D842, D78F, D6DC, D629, D575, D4C2, D410, D35D, D2AA, D1F8, D145, D093, CFE1, CF2F, CE7D, CDCB, CD19, CC67, CBB6, CB04, CA53, C9A2, C8F1, C840, C78F, C6DE, C62E, C57D, C4CD, C41D, C36D, C2BD, C20D, C15E, C0AE, BFFF, BF50, BEA1, BDF2, BD43, BC94, BBE6, BB38, BA89, B9DB, B92D, B880, B7D2, B725, B677, B5CA, B51D, B471, B3C4, B317, B26B, B1BF, B113, B067, AFBB, AF10, AE65, ADB9, AD0F, AC64, ABB9, AB0F, AA64, A9BA, A910, A867, A7BD, A714, A66A, A5C1, A518, A470, A3C7, A31F, A277, A1CF, A127, A080, 9FD8, 9F31, 9E8A, 9DE3, 9D3D, 9C97, 9BF0, 9B4A, 9AA5, 99FF, 995A, 98B5, 9810, 976B, 96C6, 9622, 957E, 94DA, 9436, 9393, 92EF, 924C, 91A9, 9107, 9064, 8FC2, 8F20, 8E7E, 8DDD, 8D3B, 8C9A, 8BF9, 8B59, 8AB8, 8A18, 8978, 88D8, 8839, 8799, 86FA, 865B, 85BD, 851E, 8480, 83E2, 8344, 82A7, 820A, 816D, 80D0, 8033, 7F97, 7EFB, 7E5F, 7DC4, 7D28, 7C8D, 7BF3, 7B58, 7ABE, 7A24, 798A, 78F0, 7857, 77BE, 7725, 768C, 75F4, 755C, 74C4, 742C, 7395, 72FE, 7267, 71D1, 713A, 70A4, 700F, 6F79, 6EE4, 6E4F, 6DBA, 6D26, 6C91, 6BFD, 6B6A, 6AD6, 6A43, 69B0, 691E, 688C, 67F9, 6768, 66D6, 6645, 65B4, 6523, 6493, 6403, 6373, 62E3, 6254, 61C5, 6136, 60A8, 6019, 5F8B, 5EFE, 5E70, 5DE3, 5D57, 5CCA, 5C3E, 5BB2, 5B26, 5A9B, 5A10, 5985, 58FA, 5870, 57E6, 575D, 56D3, 564A, 55C1, 5539, 54B1, 5429, 53A1, 531A, 5293, 520C, 5185, 50FF, 5079, 4FF4, 4F6F, 4EEA, 4E65, 4DE1, 4D5C, 4CD9, 4C55, 4BD2, 4B4F, 4ACD, 4A4A, 49C8, 4947, 48C5, 4844, 47C3, 4743, 46C3, 4643, 45C3, 4544, 44C5, 4447, 43C8, 434A, 42CD, 424F, 41D2, 4155, 40D9, 405D, 3FE1, 3F65, 3EEA, 3E6F, 3DF5, 3D7A, 3D00, 3C87, 3C0D, 3B94, 3B1B, 3AA3, 3A2B, 39B3, 393C, 38C4, 384E, 37D7, 3761, 36EB, 3675, 3600, 358B, 3517, 34A2, 342E, 33BB, 3347, 32D4, 3261, 31EF, 317D, 310B, 309A, 3029, 2FB8, 2F47, 2ED7, 2E67, 2DF8, 2D89, 2D1A, 2CAB, 2C3D, 2BCF, 2B61, 2AF4, 2A87, 2A1B, 29AE, 2942, 28D7, 286B, 2800, 2796, 272B, 26C1, 2657, 25EE, 2585, 251C, 24B4, 244C, 23E4, 237D, 2315, 22AF, 2248, 21E2, 217C, 2117, 20B2, 204D, 1FE8, 1F84, 1F20, 1EBD, 1E5A, 1DF7, 1D94, 1D32, 1CD0, 1C6E, 1C0D, 1BAC, 1B4C, 1AEB, 1A8B, 1A2C, 19CD, 196E, 190F, 18B1, 1853, 17F5, 1798, 173B, 16DE, 1682, 1626, 15CA, 156F, 1514, 14B9, 145E, 1404, 13AB, 1351, 12F8, 129F, 1247, 11EF, 1197, 1140, 10E9, 1092, 103B, FE5, F8F, F3A, EE5, E90, E3B, DE7, D93, D40, CEC, C9A, C47, BF5, BA3, B51, B00, AAF, A5E, A0E, 9BE, 96E, 91F, 8D0, 881, 833, 7E5, 797, 74A, 6FD, 6B0, 663, 617, 5CC, 580, 535, 4EA, 4A0, 455, 40B, 3C2, 379, 330, 2E7, 29F, 257, 20F, 1C8, 181, 13A, F4, AE, 68, 23;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_59bb78965fc20a49',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '72fb136e54c8a27bd7ddc65184741bf3',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_59bb78965fc20a49',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = [
    'SELECT Block_Memory_Generator virtex6 Xilinx,_Inc. 7.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET algorithm = Minimum_Area',
    'CSET assume_synchronous_clk = false',
    'CSET byte_size = 9',
    'CSET coe_file = [
',
    '  MEMORY_INITIALIZATION_RADIX = 16;',
    '  MEMORY_INITIALIZATION_VECTOR = 3FFDD, 3FF99, 3FF54, 3FF10, 3FECC, 3FE89, 3FE45, 3FE02, 3FDC0, 3FD7E, 3FD3C, 3FCFA, 3FCB9, 3FC78, 3FC37, 3FBF6, 3FBB6, 3FB77, 3FB37, 3FAF8, 3FAB9, 3FA7A, 3FA3C, 3F9FE, 3F9C1, 3F983, 3F946, 3F90A, 3F8CD, 3F891, 3F855, 3F81A, 3F7DF, 3F7A4, 3F769, 3F72F, 3F6F5, 3F6BB, 3F682, 3F649, 3F610, 3F5D8, 3F5A0, 3F568, 3F530, 3F4F9, 3F4C2, 3F48C, 3F455, 3F41F, 3F3E9, 3F3B4, 3F37F, 3F34A, 3F315, 3F2E1, 3F2AD, 3F27A, 3F246, 3F213, 3F1E0, 3F1AE, 3F17C, 3F14A, 3F118, 3F0E7, 3F0B6, 3F085, 3F055, 3F024, 3EFF5, 3EFC5, 3EF96, 3EF67, 3EF38, 3EF0A, 3EEDB, 3EEAE, 3EE80, 3EE53, 3EE26, 3EDF9, 3EDCD, 3EDA0, 3ED75, 3ED49, 3ED1E, 3ECF3, 3ECC8, 3EC9E, 3EC73, 3EC49, 3EC20, 3EBF6, 3EBCD, 3EBA5, 3EB7C, 3EB54, 3EB2C, 3EB04, 3EADD, 3EAB6, 3EA8F, 3EA68, 3EA42, 3EA1C, 3E9F6, 3E9D1, 3E9AB, 3E986, 3E962, 3E93D, 3E919, 3E8F5, 3E8D2, 3E8AE, 3E88B, 3E868, 3E846, 3E823, 3E801, 3E7E0, 3E7BE, 3E79D, 3E77C, 3E75B, 3E73B, 3E71A, 3E6FA, 3E6DB, 3E6BB, 3E69C, 3E67D, 3E65E, 3E640, 3E622, 3E604, 3E5E6, 3E5C9, 3E5AC, 3E58F, 3E572, 3E556, 3E53A, 3E51E, 3E502, 3E4E7, 3E4CC, 3E4B1, 3E496, 3E47C, 3E461, 3E447, 3E42E, 3E414, 3E3FB, 3E3E2, 3E3C9, 3E3B1, 3E399, 3E381, 3E369, 3E351, 3E33A, 3E323, 3E30C, 3E2F5, 3E2DF, 3E2C9, 3E2B3, 3E29D, 3E288, 3E273, 3E25E, 3E249, 3E235, 3E220, 3E20C, 3E1F8, 3E1E5, 3E1D1, 3E1BE, 3E1AB, 3E199, 3E186, 3E174, 3E162, 3E150, 3E13F, 3E12D, 3E11C, 3E10B, 3E0FA, 3E0EA, 3E0DA, 3E0C9, 3E0BA, 3E0AA, 3E09B, 3E08B, 3E07C, 3E06D, 3E05F, 3E051, 3E042, 3E034, 3E027, 3E019, 3E00C, 3DFFF, 3DFF2, 3DFE5, 3DFD8, 3DFCC, 3DFC0, 3DFB4, 3DFA8, 3DF9D, 3DF92, 3DF86, 3DF7C, 3DF71, 3DF66, 3DF5C, 3DF52, 3DF48, 3DF3E, 3DF35, 3DF2B, 3DF22, 3DF19, 3DF10, 3DF08, 3DEFF, 3DEF7, 3DEEF, 3DEE7, 3DEE0, 3DED8, 3DED1, 3DECA, 3DEC3, 3DEBC, 3DEB6, 3DEAF, 3DEA9, 3DEA3, 3DE9D, 3DE98, 3DE92, 3DE8D, 3DE88, 3DE83, 3DE7E, 3DE79, 3DE75, 3DE71, 3DE6D, 3DE69, 3DE65, 3DE61, 3DE5E, 3DE5B, 3DE58, 3DE55, 3DE52, 3DE4F, 3DE4D, 3DE4B, 3DE49, 3DE47, 3DE45, 3DE43, 3DE42, 3DE41, 3DE40, 3DE3F, 3DE3E, 3DE3D, 3DE3D, 3DE3C, 3DE3C, 3DE3C, 3DE3C, 3DE3D, 3DE3D, 3DE3E, 3DE3E, 3DE3F, 3DE40, 3DE41, 3DE43, 3DE44, 3DE46, 3DE48, 3DE4A, 3DE4C, 3DE4E, 3DE50, 3DE53, 3DE55, 3DE58, 3DE5B, 3DE5E, 3DE61, 3DE64, 3DE68, 3DE6C, 3DE6F, 3DE73, 3DE77, 3DE7B, 3DE7F, 3DE84, 3DE88, 3DE8D, 3DE92, 3DE97, 3DE9C, 3DEA1, 3DEA6, 3DEAC, 3DEB1, 3DEB7, 3DEBD, 3DEC3, 3DEC9, 3DECF, 3DED5, 3DEDC, 3DEE2, 3DEE9, 3DEEF, 3DEF6, 3DEFD, 3DF04, 3DF0C, 3DF13, 3DF1A, 3DF22, 3DF2A, 3DF32, 3DF39, 3DF41, 3DF4A, 3DF52, 3DF5A, 3DF63, 3DF6B, 3DF74, 3DF7D, 3DF85, 3DF8E, 3DF98, 3DFA1, 3DFAA, 3DFB3, 3DFBD, 3DFC7, 3DFD0, 3DFDA, 3DFE4, 3DFEE, 3DFF8, 3E002, 3E00C, 3E017, 3E021, 3E02C, 3E037, 3E041, 3E04C, 3E057, 3E062, 3E06D, 3E078, 3E084, 3E08F, 3E09B, 3E0A6, 3E0B2, 3E0BD, 3E0C9, 3E0D5, 3E0E1, 3E0ED, 3E0F9, 3E106, 3E112, 3E11E, 3E12B, 3E137, 3E144, 3E151, 3E15D, 3E16A, 3E177, 3E184, 3E191, 3E19E, 3E1AC, 3E1B9, 3E1C6, 3E1D4, 3E1E1, 3E1EF, 3E1FC, 3E20A, 3E218, 3E226, 3E234, 3E242, 3E250, 3E25E, 3E26C, 3E27A, 3E289, 3E297, 3E2A5, 3E2B4, 3E2C2, 3E2D1, 3E2E0, 3E2EE, 3E2FD, 3E30C, 3E31B, 3E32A, 3E339, 3E348, 3E357, 3E366, 3E376, 3E385, 3E394, 3E3A4, 3E3B3, 3E3C3, 3E3D2, 3E3E2, 3E3F1, 3E401, 3E411, 3E421, 3E430, 3E440, 3E450, 3E460, 3E470, 3E480, 3E490, 3E4A0, 3E4B1, 3E4C1, 3E4D1, 3E4E1, 3E4F2, 3E502, 3E513, 3E523, 3E534, 3E544, 3E555, 3E565, 3E576, 3E587, 3E597, 3E5A8, 3E5B9, 3E5CA, 3E5DB, 3E5EC, 3E5FC, 3E60D, 3E61E, 3E62F, 3E640, 3E651, 3E663, 3E674, 3E685, 3E696, 3E6A7, 3E6B8, 3E6CA, 3E6DB, 3E6EC, 3E6FE, 3E70F, 3E720, 3E732, 3E743, 3E755, 3E766, 3E777, 3E789, 3E79A, 3E7AC, 3E7BE, 3E7CF, 3E7E1, 3E7F2, 3E804, 3E816, 3E827, 3E839, 3E84B, 3E85C, 3E86E, 3E880, 3E892, 3E8A3, 3E8B5, 3E8C7, 3E8D9, 3E8EA, 3E8FC, 3E90E, 3E920, 3E932, 3E944, 3E955, 3E967, 3E979, 3E98B, 3E99D, 3E9AF, 3E9C1, 3E9D3, 3E9E4, 3E9F6, 3EA08, 3EA1A, 3EA2C, 3EA3E, 3EA50, 3EA62, 3EA74, 3EA86, 3EA98, 3EAAA, 3EABC, 3EACD, 3EADF, 3EAF1, 3EB03, 3EB15, 3EB27, 3EB39, 3EB4B, 3EB5D, 3EB6F, 3EB81, 3EB92, 3EBA4, 3EBB6, 3EBC8, 3EBDA, 3EBEC, 3EBFE, 3EC10, 3EC21, 3EC33, 3EC45, 3EC57, 3EC69, 3EC7A, 3EC8C, 3EC9E, 3ECB0, 3ECC2, 3ECD3, 3ECE5, 3ECF7, 3ED09, 3ED1A, 3ED2C, 3ED3E, 3ED4F, 3ED61, 3ED73, 3ED84, 3ED96, 3EDA7, 3EDB9, 3EDCA, 3EDDC, 3EDEE, 3EDFF, 3EE11, 3EE22, 3EE33, 3EE45, 3EE56, 3EE68, 3EE79, 3EE8A, 3EE9C, 3EEAD, 3EEBE, 3EED0, 3EEE1, 3EEF2, 3EF04, 3EF15, 3EF26, 3EF37, 3EF48, 3EF59, 3EF6A, 3EF7C, 3EF8D, 3EF9E, 3EFAF, 3EFC0, 3EFD1, 3EFE1, 3EFF2, 3F003, 3F014, 3F025, 3F036, 3F047, 3F057, 3F068, 3F079, 3F089, 3F09A, 3F0AB, 3F0BB, 3F0CC, 3F0DC, 3F0ED, 3F0FD, 3F10E, 3F11E, 3F12F, 3F13F, 3F150, 3F160, 3F170, 3F180, 3F191, 3F1A1, 3F1B1, 3F1C1, 3F1D1, 3F1E1, 3F1F1, 3F201, 3F211, 3F221, 3F231, 3F241, 3F251, 3F261, 3F271, 3F280, 3F290, 3F2A0, 3F2B0, 3F2BF, 3F2CF, 3F2DE, 3F2EE, 3F2FD, 3F30D, 3F31C, 3F32C, 3F33B, 3F34A, 3F35A, 3F369, 3F378, 3F387, 3F396, 3F3A6, 3F3B5, 3F3C4, 3F3D3, 3F3E2, 3F3F1, 3F400, 3F40E, 3F41D, 3F42C, 3F43B, 3F44A, 3F458, 3F467, 3F476, 3F484, 3F493, 3F4A1, 3F4B0, 3F4BE, 3F4CC, 3F4DB, 3F4E9, 3F4F7, 3F506, 3F514, 3F522, 3F530, 3F53E, 3F54C, 3F55A, 3F568, 3F576, 3F584, 3F592, 3F5A0, 3F5AE, 3F5BB, 3F5C9, 3F5D7, 3F5E4, 3F5F2, 3F600, 3F60D, 3F61B, 3F628, 3F635, 3F643, 3F650, 3F65D, 3F66B, 3F678, 3F685, 3F692, 3F69F, 3F6AC, 3F6B9, 3F6C6, 3F6D3, 3F6E0, 3F6ED, 3F6FA, 3F706, 3F713, 3F720, 3F72D, 3F739, 3F746, 3F752, 3F75F, 3F76B, 3F778, 3F784, 3F790, 3F79D, 3F7A9, 3F7B5, 3F7C1, 3F7CD, 3F7D9, 3F7E6, 3F7F2, 3F7FE, 3F809, 3F815, 3F821, 3F82D, 3F839, 3F845, 3F850, 3F85C, 3F868, 3F873, 3F87F, 3F88A, 3F896, 3F8A1, 3F8AC, 3F8B8, 3F8C3, 3F8CE, 3F8DA, 3F8E5, 3F8F0, 3F8FB, 3F906, 3F911, 3F91C, 3F927, 3F932, 3F93D, 3F948, 3F952, 3F95D, 3F968, 3F973, 3F97D, 3F988, 3F992, 3F99D, 3F9A7, 3F9B2, 3F9BC, 3F9C7, 3F9D1, 3F9DB, 3F9E6, 3F9F0, 3F9FA, 3FA04, 3FA0E, 3FA18, 3FA22, 3FA2C, 3FA36, 3FA40, 3FA4A, 3FA54, 3FA5E, 3FA68, 3FA71, 3FA7B, 3FA85, 3FA8E, 3FA98, 3FAA2, 3FAAB, 3FAB5, 3FABE, 3FAC7, 3FAD1, 3FADA, 3FAE3, 3FAED, 3FAF6, 3FAFF, 3FB08, 3FB11, 3FB1B, 3FB24, 3FB2D, 3FB36, 3FB3F, 3FB48, 3FB50, 3FB59, 3FB62, 3FB6B, 3FB74, 3FB7C, 3FB85, 3FB8E, 3FB96, 3FB9F, 3FBA7, 3FBB0, 3FBB8, 3FBC1, 3FBC9, 3FBD2, 3FBDA, 3FBE2, 3FBEB, 3FBF3, 3FBFB, 3FC03, 3FC0C, 3FC14, 3FC1C, 3FC24, 3FC2C, 3FC34, 3FC3C, 3FC44, 3FC4C, 3FC54, 3FC5B, 3FC63, 3FC6B, 3FC73, 3FC7B, 3FC82, 3FC8A, 3FC92, 3FC99, 3FCA1, 3FCA8, 3FCB0, 3FCB7, 3FCBF, 3FCC6, 3FCCE, 3FCD5, 3FCDC, 3FCE4, 3FCEB, 3FCF2, 3FCFA, 3FD01, 3FD08, 3FD0F, 3FD16, 3FD1D, 3FD25, 3FD2C, 3FD33, 3FD3A, 3FD41, 3FD48, 3FD4E, 3FD55, 3FD5C, 3FD63, 3FD6A, 3FD71, 3FD78, 3FD7E, 3FD85, 3FD8C, 3FD92, 3FD99, 3FDA0, 3FDA6, 3FDAD, 3FDB4, 3FDBA, 3FDC1, 3FDC7, 3FDCE, 3FDD4, 3FDDB, 3FDE1, 3FDE7, 3FDEE, 3FDF4, 3FDFA, 3FE01, 3FE07, 3FE0D, 3FE13, 3FE1A, 3FE20, 3FE26, 3FE2C, 3FE32, 3FE39, 3FE3F, 3FE45, 3FE4B, 3FE51, 3FE57, 3FE5D, 3FE63, 3FE69, 3FE6F, 3FE75, 3FE7B, 3FE81, 3FE87, 3FE8C, 3FE92, 3FE98, 3FE9E, 3FEA4, 3FEAA, 3FEAF, 3FEB5, 3FEBB, 3FEC1, 3FEC6, 3FECC, 3FED2, 3FED7, 3FEDD, 3FEE3, 3FEE8, 3FEEE, 3FEF3, 3FEF9, 3FEFF, 3FF04, 3FF0A, 3FF0F, 3FF15, 3FF1A, 3FF20, 3FF25, 3FF2B, 3FF30, 3FF36, 3FF3B, 3FF40, 3FF46, 3FF4B, 3FF51, 3FF56, 3FF5B, 3FF61, 3FF66, 3FF6B, 3FF71, 3FF76, 3FF7B, 3FF81, 3FF86, 3FF8B, 3FF90, 3FF96, 3FF9B, 3FFA0, 3FFA5, 3FFAB, 3FFB0, 3FFB5, 3FFBA, 3FFC0, 3FFC5, 3FFCA, 3FFCF, 3FFD4, 3FFD9, 3FFDF, 3FFE4, 3FFE9, 3FFEE, 3FFF3, 3FFF8, 3FFFD;',
    '
]',
    'CSET collision_warnings = ALL',
    'CSET disable_collision_warnings = false',
    'CSET ecc = false',
    'CSET enable_a = Use_ENA_Pin',
    'CSET enable_b = Always_Enabled',
    'CSET error_injection_type = Single_Bit_Error_Injection',
    'CSET fill_remaining_memory_locations = false',
    'CSET load_init_file = TRUE',
    'CSET memory_type = Single_Port_ROM',
    'CSET operating_mode_a = WRITE_FIRST',
    'CSET operating_mode_b = WRITE_FIRST',
    'CSET output_reset_value_a = 0',
    'CSET output_reset_value_b = 0',
    'CSET pipeline_stages = 0',
    'CSET primitive = 8kx2',
    'CSET read_width_a = 18',
    'CSET read_width_b = 18',
    'CSET register_porta_output_of_memory_core = false',
    'CSET register_porta_output_of_memory_primitives = true',
    'CSET register_portb_output_of_memory_core = false',
    'CSET register_portb_output_of_memory_primitives = false',
    'CSET remaining_memory_locations = 0',
    'CSET reset_type = SYNC',
    'CSET use_byte_write_enable = false',
    'CSET use_error_injection_pins = false',
    'CSET use_regcea_pin = false',
    'CSET use_regceb_pin = false',
    'CSET use_rsta_pin = false',
    'CSET use_rstb_pin = false',
    'CSET write_depth_a = 1024',
    'CSET write_width_a = 18',
    'CSET write_width_b = 18',
    'CSET component_name = bmg_72_5861d9696eba38ff',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ca88036b8fead2c153a6db1d4a63cce2',
    'sourceFile' => 'hdl/xlsprom.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)',
      'core_instance_text' => '        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out',
      'core_name0' => 'bmg_72_5861d9696eba38ff',
      'entityName' => 'xlsprom_he6_cres_correlator',
      'entity_name.0' => 'xlsprom',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '4bdf63ff13cc4fe2946fe196980cc163',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlconvert_pipeline.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '5e476a8d7efeaacee989d22aacca99c5',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal ip_17_23: signed((33 - 1) downto 0);
begin
  ip_17_23 <= std_logic_vector_to_signed(ip);
  op <= signed_to_std_logic_vector(ip_17_23);
end',
      'crippled_entity' => 'is
  port (
    ip : in std_logic_vector((33 - 1) downto 0);
    op : out std_logic_vector((33 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'scale_e16fd9fe4d',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c9c4bb581f2ec76003fc48bf776b7983',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlregister.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'e7cc51637bb2c8f4588caccc28b03ca8',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlregister.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a25c6562d8f4a15a1e19c0736ad8c254',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlregister.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '1f24fd032ba7e3102efffa9fc7690555',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlregister.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '6ee2fcdf965c024ba0ea407aeb37e621',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  signal bit_2_27: std_logic;
  signal fully_2_1_bitnot: std_logic;
begin
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  bit_2_27 <= d0_1_24 xor d1_1_27;
  fully_2_1_bitnot <= not bit_2_27;
  y <= std_logic_to_vector(fully_2_1_bitnot);
end',
      'crippled_entity' => 'is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'logical_f6397bdee1',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b04f86ab8b1a6dadbdbef54723ab007a',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((13 - 1) downto 0);
  signal in1_1_27: boolean;
  signal in2_1_31: unsigned((18 - 1) downto 0);
  signal y_2_1_concat: unsigned((32 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= ((in1) = "1");
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & boolean_to_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((13 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    in2 : in std_logic_vector((18 - 1) downto 0);
    y : out std_logic_vector((32 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_a1e3f9e7e9',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ad6326b968ed4bb0b12851c7f99d3600',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlconvert.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '6537cd0cfea294040c9d19f94dbe2e04',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xldelay.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f3cd982f09d768e6341ddfd2f9da8151',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((128 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (1 - 1)) of std_logic_vector((128 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    0 => "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((128 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((128 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(0);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((128 - 1) downto 0);
    q : out std_logic_vector((128 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_ee0f706095',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'c51e366ba3f9036aa3a03d57a6013ae6',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal ip_1_26: boolean;
  type array_type_op_mem_22_20 is array (0 to (1 - 1)) of boolean;
  signal op_mem_22_20: array_type_op_mem_22_20 := (
    0 => false);
  signal op_mem_22_20_front_din: boolean;
  signal op_mem_22_20_back: boolean;
  signal op_mem_22_20_push_front_pop_back_en: std_logic;
  signal internal_ip_12_1_bitnot: boolean;
begin
  ip_1_26 <= ((ip) = "1");
  op_mem_22_20_back <= op_mem_22_20(0);
  proc_op_mem_22_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_22_20_push_front_pop_back_en = \'1\')) then
        op_mem_22_20(0) <= op_mem_22_20_front_din;
      end if;
    end if;
  end process proc_op_mem_22_20;
  internal_ip_12_1_bitnot <= ((not boolean_to_vector(ip_1_26)) = "1");
  op_mem_22_20_front_din <= internal_ip_12_1_bitnot;
  op_mem_22_20_push_front_pop_back_en <= \'1\';
  op <= boolean_to_vector(op_mem_22_20_back);
end',
      'crippled_entity' => 'is
  port (
    ip : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'inverter_6844eee868',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'bdf08e8ca83a9a263b87a62d95c77c3e',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  signal d2_1_30: std_logic;
  signal fully_2_1_bit: std_logic;
begin
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  d2_1_30 <= d2(0);
  fully_2_1_bit <= d0_1_24 and d1_1_27 and d2_1_30;
  y <= std_logic_to_vector(fully_2_1_bit);
end',
      'crippled_entity' => 'is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    d2 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'logical_954ee29728',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '522fa3092b15c8743935231af7070dc2',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlregister.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '94352eadfc91cbe42a64959a71cd60c7',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal ip_1_23: unsigned((13 - 1) downto 0);
  type array_type_op_mem_46_20 is array (0 to (1 - 1)) of unsigned((13 - 1) downto 0);
  signal op_mem_46_20: array_type_op_mem_46_20 := (
    0 => "0000000000000");
  signal op_mem_46_20_front_din: unsigned((13 - 1) downto 0);
  signal op_mem_46_20_back: unsigned((13 - 1) downto 0);
  signal op_mem_46_20_push_front_pop_back_en: std_logic;
  signal cast_internal_ip_25_3_lsh: unsigned((25 - 1) downto 0);
  signal cast_internal_ip_36_3_convert: unsigned((13 - 1) downto 0);
begin
  ip_1_23 <= std_logic_vector_to_unsigned(ip);
  op_mem_46_20_back <= op_mem_46_20(0);
  proc_op_mem_46_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_46_20_push_front_pop_back_en = \'1\')) then
        op_mem_46_20(0) <= op_mem_46_20_front_din;
      end if;
    end if;
  end process proc_op_mem_46_20;
  cast_internal_ip_25_3_lsh <= u2u_cast(ip_1_23, 0, 25, 12);
  cast_internal_ip_36_3_convert <= u2u_cast(cast_internal_ip_25_3_lsh, 0, 13, 0);
  op_mem_46_20_front_din <= cast_internal_ip_36_3_convert;
  op_mem_46_20_push_front_pop_back_en <= \'1\';
  op <= unsigned_to_std_logic_vector(op_mem_46_20_back);
end',
      'crippled_entity' => 'is
  port (
    ip : in std_logic_vector((13 - 1) downto 0);
    op : out std_logic_vector((13 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'shift_07a28c25d6',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Binary_Counter virtex6 Xilinx,_Inc. 11.0',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET ainit_value = 0',
    'CSET ce = true',
    'CSET count_mode = UP',
    'CSET fb_latency = 0',
    'CSET final_count_value = 1',
    'CSET implementation = DSP48',
    'CSET increment_value = 10',
    'CSET latency = 1',
    'CSET load = false',
    'CSET output_width = 19',
    'CSET restrict_count = false',
    'CSET sclr = true',
    'CSET sinit = false',
    'CSET sset = false',
    'CSET sync_ce_priority = Sync_Overrides_CE',
    'CSET sync_threshold_output = false',
    'CSET syncctrlpriority = Reset_Overrides_Set',
    'CSET component_name = cntr_11_0_34bcfe5241b54e91',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ed0336cda78664870e86a3ea3bd780f9',
    'sourceFile' => 'hdl/xlcounter_free.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      clk: in std_logic;
      ce: in std_logic;
      SCLR: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)',
      'core_instance_text' => '        clk => clk,
        ce => core_ce,
        SCLR => core_sinit,
        q => op_net',
      'core_name0' => 'cntr_11_0_34bcfe5241b54e91',
      'entityName' => 'xlcounter_free_he6_cres_correlator',
      'entity_name.0' => 'xlcounter_free',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a91f06ecca81002127b2ea250fa72549',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '9a59f9304e32128a06f432edf817a554',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '1c7e7618a14cabd5cc5b1cc926d89451',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd9143e4183c3ae417e4137020969982d',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((8 - 1) downto 0);
  signal in1_1_27: unsigned((128 - 1) downto 0);
  signal in2_1_31: unsigned((8 - 1) downto 0);
  signal in3_1_35: unsigned((128 - 1) downto 0);
  signal y_2_1_concat: unsigned((272 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((8 - 1) downto 0);
    in1 : in std_logic_vector((128 - 1) downto 0);
    in2 : in std_logic_vector((8 - 1) downto 0);
    in3 : in std_logic_vector((128 - 1) downto 0);
    y : out std_logic_vector((272 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_fd1ce36c4a',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '0d3111feee31c577d23797f9f18b11f2',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal sel_1_20: std_logic_vector((1 - 1) downto 0);
  signal d0_1_24: std_logic_vector((272 - 1) downto 0);
  signal d1_1_27: std_logic_vector((272 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic_vector((272 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((272 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((272 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal unregy_join_6_1: std_logic_vector((272 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (pipe_16_22_push_front_pop_back_en = \'1\')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= \'1\';
  y <= pipe_16_22_back;
end',
      'crippled_entity' => 'is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((272 - 1) downto 0);
    d1 : in std_logic_vector((272 - 1) downto 0);
    y : out std_logic_vector((272 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'mux_ddf27bda35',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '382aade0283634c192974b5423ff6719',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "11";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((2 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_3a9a3daeb9',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'd63dc8952aebff3dd5208932917dbb8b',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic_vector((128 - 1) downto 0);
  signal d1_1_27: std_logic_vector((272 - 1) downto 0);
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((272 - 1) downto 0);
  signal cast_unregy_13_5_convert: std_logic_vector((128 - 1) downto 0);
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= cast(d0_1_24, 0, 272, 0, xlUnsigned);
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  cast_unregy_13_5_convert <= cast(unregy_join_6_1, 0, 128, 0, xlUnsigned);
  y <= cast_unregy_13_5_convert;
end',
      'crippled_entity' => 'is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((128 - 1) downto 0);
    d1 : in std_logic_vector((272 - 1) downto 0);
    y : out std_logic_vector((128 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'mux_5441ad2d93',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'af24922a26b20e718f854e0bfba6bb45',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal rst_1_40: boolean;
  signal en_1_45: boolean;
  signal count_reg_20_23: unsigned((1 - 1) downto 0) := "0";
  signal count_reg_20_23_rst: std_logic;
  signal count_reg_20_23_en: std_logic;
  signal bool_44_4: boolean;
  signal rst_limit_join_44_1: boolean;
  signal count_reg_join_44_1: unsigned((2 - 1) downto 0);
  signal count_reg_join_44_1_en: std_logic;
  signal count_reg_join_44_1_rst: std_logic;
begin
  rst_1_40 <= ((rst) = "1");
  en_1_45 <= ((en) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (count_reg_20_23_rst = \'1\')) then
        count_reg_20_23 <= "0";
      elsif ((ce = \'1\') and (count_reg_20_23_en = \'1\')) then 
        count_reg_20_23 <= count_reg_20_23 + std_logic_vector_to_unsigned("1");
      end if;
    end if;
  end process proc_count_reg_20_23;
  bool_44_4 <= rst_1_40 or false;
  proc_if_44_1: process (bool_44_4, count_reg_20_23, en_1_45)
  is
  begin
    if bool_44_4 then
      count_reg_join_44_1_rst <= \'1\';
    elsif en_1_45 then
      count_reg_join_44_1_rst <= \'0\';
    else 
      count_reg_join_44_1_rst <= \'0\';
    end if;
    if en_1_45 then
      count_reg_join_44_1_en <= \'1\';
    else 
      count_reg_join_44_1_en <= \'0\';
    end if;
    if bool_44_4 then
      rst_limit_join_44_1 <= false;
    elsif en_1_45 then
      rst_limit_join_44_1 <= false;
    else 
      rst_limit_join_44_1 <= false;
    end if;
  end process proc_if_44_1;
  count_reg_20_23_rst <= count_reg_join_44_1_rst;
  count_reg_20_23_en <= count_reg_join_44_1_en;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end',
      'crippled_entity' => 'is
  port (
    rst : in std_logic_vector((1 - 1) downto 0);
    en : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'counter_41314d726b',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Binary_Counter virtex6 Xilinx,_Inc. 11.0',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET ainit_value = 0',
    'CSET ce = true',
    'CSET count_mode = UP',
    'CSET fb_latency = 0',
    'CSET final_count_value = 1',
    'CSET implementation = Fabric',
    'CSET increment_value = 1',
    'CSET latency = 1',
    'CSET load = false',
    'CSET output_width = 2',
    'CSET restrict_count = false',
    'CSET sclr = false',
    'CSET sinit = true',
    'CSET sinit_value = 0',
    'CSET sset = false',
    'CSET sync_ce_priority = Sync_Overrides_CE',
    'CSET sync_threshold_output = false',
    'CSET syncctrlpriority = Reset_Overrides_Set',
    'CSET component_name = cntr_11_0_541f86689cddfa59',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '57cdaded15a8e22d23f29d3ae4e248ef',
    'sourceFile' => 'hdl/xlcounter_free.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)',
      'core_instance_text' => '        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net',
      'core_name0' => 'cntr_11_0_541f86689cddfa59',
      'entityName' => 'xlcounter_free_he6_cres_correlator',
      'entity_name.0' => 'xlcounter_free',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'ecb5ea445f624a7b441fbead4cbe1ffc',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic;
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  y <= std_logic_to_vector(unregy_join_6_1);
end',
      'crippled_entity' => 'is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'mux_d99e59b6d4',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '3782c4baf5fe582faa1adf91f221fbf6',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_17_32: unsigned((1 - 1) downto 0);
  signal b_17_35: unsigned((1 - 1) downto 0);
  type array_type_op_mem_91_20 is array (0 to (1 - 1)) of unsigned((1 - 1) downto 0);
  signal op_mem_91_20: array_type_op_mem_91_20 := (
    0 => "0");
  signal op_mem_91_20_front_din: unsigned((1 - 1) downto 0);
  signal op_mem_91_20_back: unsigned((1 - 1) downto 0);
  signal op_mem_91_20_push_front_pop_back_en: std_logic;
  type array_type_cout_mem_92_22 is array (0 to (1 - 1)) of unsigned((1 - 1) downto 0);
  signal cout_mem_92_22: array_type_cout_mem_92_22 := (
    0 => "0");
  signal cout_mem_92_22_front_din: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_back: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_push_front_pop_back_en: std_logic;
  signal prev_mode_93_22_next: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22_reg_i: std_logic_vector((3 - 1) downto 0);
  signal prev_mode_93_22_reg_o: std_logic_vector((3 - 1) downto 0);
  signal cast_71_18: signed((3 - 1) downto 0);
  signal cast_71_22: signed((3 - 1) downto 0);
  signal internal_s_71_5_addsub: signed((3 - 1) downto 0);
  signal cast_internal_s_83_3_convert: unsigned((1 - 1) downto 0);
begin
  a_17_32 <= std_logic_vector_to_unsigned(a);
  b_17_35 <= std_logic_vector_to_unsigned(b);
  op_mem_91_20_back <= op_mem_91_20(0);
  proc_op_mem_91_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_91_20_push_front_pop_back_en = \'1\')) then
        op_mem_91_20(0) <= op_mem_91_20_front_din;
      end if;
    end if;
  end process proc_op_mem_91_20;
  cout_mem_92_22_back <= cout_mem_92_22(0);
  proc_cout_mem_92_22: process (clk)
  is
    variable i_x_000000: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (cout_mem_92_22_push_front_pop_back_en = \'1\')) then
        cout_mem_92_22(0) <= cout_mem_92_22_front_din;
      end if;
    end if;
  end process proc_cout_mem_92_22;
  prev_mode_93_22_reg_i <= unsigned_to_std_logic_vector(prev_mode_93_22_next);
  prev_mode_93_22 <= std_logic_vector_to_unsigned(prev_mode_93_22_reg_o);
  prev_mode_93_22_reg_inst: entity work.synth_reg_w_init
    generic map (
      init_index => 2, 
      init_value => b"010", 
      latency => 1, 
      width => 3)
    port map (
      ce => ce, 
      clk => clk, 
      clr => clr, 
      i => prev_mode_93_22_reg_i, 
      o => prev_mode_93_22_reg_o);
  cast_71_18 <= u2s_cast(a_17_32, 0, 3, 0);
  cast_71_22 <= u2s_cast(b_17_35, 0, 3, 0);
  internal_s_71_5_addsub <= cast_71_18 - cast_71_22;
  cast_internal_s_83_3_convert <= s2u_cast(internal_s_71_5_addsub, 0, 1, 0);
  op_mem_91_20_push_front_pop_back_en <= \'0\';
  cout_mem_92_22_push_front_pop_back_en <= \'0\';
  prev_mode_93_22_next <= std_logic_vector_to_unsigned("000");
  s <= unsigned_to_std_logic_vector(cast_internal_s_83_3_convert);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((1 - 1) downto 0);
    b : in std_logic_vector((1 - 1) downto 0);
    s : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'addsub_c13097e33e',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '658afcb376af2c8f606f750fbb942a12',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((13 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((14 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((13 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((14 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_1658f5c814',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '8a5df695f116b6e62e38b050d9ec65f3',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlconvert.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '4cd5ebf632ba953e88a24542fb7cf323',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '9c03036c1cc81ecc53a849e6f3400c72',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'eb0d48597062bed14c3a66213dce87fc',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal sel_1_20: std_logic_vector((1 - 1) downto 0);
  signal d0_1_24: std_logic_vector((14 - 1) downto 0);
  signal d1_1_27: std_logic_vector((14 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((14 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  y <= unregy_join_6_1;
end',
      'crippled_entity' => 'is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((14 - 1) downto 0);
    d1 : in std_logic_vector((14 - 1) downto 0);
    y : out std_logic_vector((14 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'mux_fe93adb3c8',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '168e28eed6c1c087047a3d6eb900cc31',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((32 - 1) downto 0);
  signal in1_1_27: unsigned((32 - 1) downto 0);
  signal in2_1_31: unsigned((32 - 1) downto 0);
  signal in3_1_35: unsigned((32 - 1) downto 0);
  signal y_2_1_concat: unsigned((128 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((32 - 1) downto 0);
    in1 : in std_logic_vector((32 - 1) downto 0);
    in2 : in std_logic_vector((32 - 1) downto 0);
    in3 : in std_logic_vector((32 - 1) downto 0);
    y : out std_logic_vector((128 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_b11ec1c0d4',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '7c11a88b9478a95c15b7599d1ceb0769',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b57299230d6060e5cc21e189e34d472a',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '940cb2264659de037a980ca83c034da1',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '66293304673b96b78bf858cad6ab4b5c',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'b2add0e91dc015b602e079812efec0ab',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal input_port_1_40: unsigned((128 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end',
      'crippled_entity' => 'is
  port (
    input_port : in std_logic_vector((128 - 1) downto 0);
    output_port : out std_logic_vector((128 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'reinterpret_28b9ecc6fc',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '02aed856c4781a695e76c71cf9549025',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlconvert.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '823d97a9cc88c9f6500803ed37413bc1',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlconvert.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '7996b90f869d7f94ab0373b1458d6cd6',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal d_1_22: std_logic_vector((14 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (1 - 1)) of std_logic_vector((14 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    0 => "00000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((14 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((14 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(0);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_20_24_push_front_pop_back_en = \'1\')) then
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= \'1\';
  q <= op_mem_20_24_back;
end',
      'crippled_entity' => 'is
  port (
    d : in std_logic_vector((14 - 1) downto 0);
    q : out std_logic_vector((14 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'delay_93ae8f3a04',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '2d665862e8806e5427a7a907a2e63295',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlconvert.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f79c0f302e358bea6273328b2511ea15',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlconvert.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '0c43c631062122bdaffdc7f4a4a79d18',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlconvert.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '244a2ffefcf55c444617d47a014982f8',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((3 - 1) downto 0);
  signal in1_1_27: unsigned((24 - 1) downto 0);
  signal in2_1_31: boolean;
  signal in3_1_35: boolean;
  signal in4_1_39: boolean;
  signal in5_1_43: boolean;
  signal in6_1_47: boolean;
  signal y_2_1_concat: unsigned((32 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= ((in2) = "1");
  in3_1_35 <= ((in3) = "1");
  in4_1_39 <= ((in4) = "1");
  in5_1_43 <= ((in5) = "1");
  in6_1_47 <= ((in6) = "1");
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & boolean_to_vector(in2_1_31) & boolean_to_vector(in3_1_35) & boolean_to_vector(in4_1_39) & boolean_to_vector(in5_1_43) & boolean_to_vector(in6_1_47));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((3 - 1) downto 0);
    in1 : in std_logic_vector((24 - 1) downto 0);
    in2 : in std_logic_vector((1 - 1) downto 0);
    in3 : in std_logic_vector((1 - 1) downto 0);
    in4 : in std_logic_vector((1 - 1) downto 0);
    in5 : in std_logic_vector((1 - 1) downto 0);
    in6 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((32 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_07700a799a',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Binary_Counter virtex6 Xilinx,_Inc. 11.0',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET ainit_value = 0',
    'CSET ce = true',
    'CSET count_mode = UP',
    'CSET fb_latency = 0',
    'CSET final_count_value = 1',
    'CSET implementation = Fabric',
    'CSET increment_value = 1',
    'CSET latency = 1',
    'CSET load = false',
    'CSET output_width = 24',
    'CSET restrict_count = false',
    'CSET sclr = false',
    'CSET sinit = true',
    'CSET sinit_value = 0',
    'CSET sset = false',
    'CSET sync_ce_priority = Sync_Overrides_CE',
    'CSET sync_threshold_output = false',
    'CSET syncctrlpriority = Reset_Overrides_Set',
    'CSET component_name = cntr_11_0_6ebc7c4e4d61e8cb',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '2705ebb13c197fda0826695ccc6b6f71',
    'sourceFile' => 'hdl/xlcounter_free.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)',
      'core_instance_text' => '        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net',
      'core_name0' => 'cntr_11_0_6ebc7c4e4d61e8cb',
      'entityName' => 'xlcounter_free_he6_cres_correlator',
      'entity_name.0' => 'xlcounter_free',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '22e6c1a7772fc1d8392491d0dd1c05f7',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlslice.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '95538e6186a3c6fa9cdc2cea4be110fd',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal in0_1_23: unsigned((20 - 1) downto 0);
  signal in1_1_27: unsigned((10 - 1) downto 0);
  signal in2_1_31: unsigned((2 - 1) downto 0);
  signal y_2_1_concat: unsigned((32 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end',
      'crippled_entity' => 'is
  port (
    in0 : in std_logic_vector((20 - 1) downto 0);
    in1 : in std_logic_vector((10 - 1) downto 0);
    in2 : in std_logic_vector((2 - 1) downto 0);
    y : out std_logic_vector((32 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'concat_24a5eba783',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a98b0f54daf11cca702995a75a509c8f',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "111111111111111";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((15 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_2be7cd032c',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => 'f5863148b66927c3711d256ab2bc21b7',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlconvert.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'dc2163c144426063c95f7f6ffa3e8eef',
    'sourceFile' => '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen/hdl/xlconvert.vhd',
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => '86eacd057c178cdce9326f126fe487b0',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_1_31: unsigned((1 - 1) downto 0);
  signal b_1_34: unsigned((1 - 1) downto 0);
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_12_3_rel <= a_1_31 = b_1_34;
  op <= boolean_to_vector(result_12_3_rel);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((1 - 1) downto 0);
    b : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'relational_ee3d1b14c5',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '7d22c641bb695c48aa296749a5f14cdc',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal ip_1_23: signed((18 - 1) downto 0);
  type array_type_op_mem_46_20 is array (0 to (2 - 1)) of signed((18 - 1) downto 0);
  signal op_mem_46_20: array_type_op_mem_46_20 := (
    "000000000000000000",
    "000000000000000000");
  signal op_mem_46_20_front_din: signed((18 - 1) downto 0);
  signal op_mem_46_20_back: signed((18 - 1) downto 0);
  signal op_mem_46_20_push_front_pop_back_en: std_logic;
  signal cast_internal_ip_27_3_rsh: signed((19 - 1) downto 0);
  signal cast_internal_ip_36_3_convert: signed((18 - 1) downto 0);
begin
  ip_1_23 <= std_logic_vector_to_signed(ip);
  op_mem_46_20_back <= op_mem_46_20(1);
  proc_op_mem_46_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_46_20_push_front_pop_back_en = \'1\')) then
        for i in 1 downto 1 loop 
          op_mem_46_20(i) <= op_mem_46_20(i-1);
        end loop;
        op_mem_46_20(0) <= op_mem_46_20_front_din;
      end if;
    end if;
  end process proc_op_mem_46_20;
  cast_internal_ip_27_3_rsh <= s2s_cast(ip_1_23, 17, 19, 17);
  cast_internal_ip_36_3_convert <= s2s_cast(cast_internal_ip_27_3_rsh, 19, 18, 17);
  op_mem_46_20_front_din <= cast_internal_ip_36_3_convert;
  op_mem_46_20_push_front_pop_back_en <= \'1\';
  op <= signed_to_std_logic_vector(op_mem_46_20_back);
end',
      'crippled_entity' => 'is
  port (
    ip : in std_logic_vector((18 - 1) downto 0);
    op : out std_logic_vector((18 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'shift_5776544495',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = [
    'SELECT Multiplier virtex6 Xilinx,_Inc. 11.2',
    '# 14.7_P.79',
    '# DEVICE virtex6',
    '# VHDL',
    'CSET ccmimp = Distributed_Memory',
    'CSET clockenable = true',
    'CSET constvalue = 129',
    'CSET internaluser = 0',
    'CSET multiplier_construction = Use_Mults',
    'CSET multtype = Parallel_Multiplier',
    'CSET optgoal = Speed',
    'CSET outputwidthhigh = 35',
    'CSET outputwidthlow = 0',
    'CSET pipestages = 2',
    'CSET portatype = Signed',
    'CSET portawidth = 18',
    'CSET portbtype = Signed',
    'CSET portbwidth = 18',
    'CSET roundpoint = 0',
    'CSET sclrcepriority = CE_Overrides_SCLR',
    'CSET syncclear = true',
    'CSET use_custom_output_width = true',
    'CSET userounding = false',
    'CSET zerodetect = false',
    'CSET component_name = mult_11_2_04abf2475ee8564d',
    'GENERATE',
  ];
  push(@$results, &SgGenerateCores::saveXcoSequence($instrs));
  $instrs = {
    'entity_declaration_hash' => '3a573bda3b9e6f13f80498192cc23a08',
    'sourceFile' => 'hdl/xlmult.vhd',
    'templateKeyValues' => {
      'core_component_def' => '      b: in std_logic_vector(c_b_width - 1 downto 0);
      p: out std_logic_vector(c_output_width - 1 downto 0);
      clk: in std_logic;
      ce: in std_logic;
      sclr: in std_logic;
      a: in std_logic_vector(c_a_width - 1 downto 0)',
      'core_instance_text' => '        a => tmp_a,
        clk => clk,
        ce => internal_ce,
        sclr => internal_clr,
        p => tmp_p,
        b => tmp_b',
      'core_name0' => 'mult_11_2_04abf2475ee8564d',
      'entityName' => 'xlmult_he6_cres_correlator',
      'entity_name.0' => 'xlmult',
      'needs_core' => 1,
      'vivado_flow' => 0,
    },
  };
  push(@$results, &SgDeliverFile::saveCollaborationInfo($instrs));
  $instrs = {
    'entity_declaration_hash' => 'a275b883dc3ac9deb9015f6bf0124472',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
  signal a_17_32: signed((18 - 1) downto 0);
  signal b_17_35: signed((18 - 1) downto 0);
  type array_type_op_mem_91_20 is array (0 to (2 - 1)) of unsigned((18 - 1) downto 0);
  signal op_mem_91_20: array_type_op_mem_91_20 := (
    "000000000000000000",
    "000000000000000000");
  signal op_mem_91_20_front_din: unsigned((18 - 1) downto 0);
  signal op_mem_91_20_back: unsigned((18 - 1) downto 0);
  signal op_mem_91_20_push_front_pop_back_en: std_logic;
  type array_type_cout_mem_92_22 is array (0 to (2 - 1)) of unsigned((1 - 1) downto 0);
  signal cout_mem_92_22: array_type_cout_mem_92_22 := (
    "0",
    "0");
  signal cout_mem_92_22_front_din: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_back: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_push_front_pop_back_en: std_logic;
  signal prev_mode_93_22_next: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22_reg_i: std_logic_vector((3 - 1) downto 0);
  signal prev_mode_93_22_reg_o: std_logic_vector((3 - 1) downto 0);
  signal cast_69_18: signed((19 - 1) downto 0);
  signal cast_69_22: signed((19 - 1) downto 0);
  signal internal_s_69_5_addsub: signed((19 - 1) downto 0);
  signal internal_s_83_3_convert: unsigned((18 - 1) downto 0);
begin
  a_17_32 <= std_logic_vector_to_signed(a);
  b_17_35 <= std_logic_vector_to_signed(b);
  op_mem_91_20_back <= op_mem_91_20(1);
  proc_op_mem_91_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (op_mem_91_20_push_front_pop_back_en = \'1\')) then
        for i in 1 downto 1 loop 
          op_mem_91_20(i) <= op_mem_91_20(i-1);
        end loop;
        op_mem_91_20(0) <= op_mem_91_20_front_din;
      end if;
    end if;
  end process proc_op_mem_91_20;
  cout_mem_92_22_back <= cout_mem_92_22(1);
  proc_cout_mem_92_22: process (clk)
  is
    variable i_x_000000: integer;
  begin
    if (clk\'event and (clk = \'1\')) then
      if ((ce = \'1\') and (cout_mem_92_22_push_front_pop_back_en = \'1\')) then
        for i_x_000000 in 1 downto 1 loop 
          cout_mem_92_22(i_x_000000) <= cout_mem_92_22(i_x_000000-1);
        end loop;
        cout_mem_92_22(0) <= cout_mem_92_22_front_din;
      end if;
    end if;
  end process proc_cout_mem_92_22;
  prev_mode_93_22_reg_i <= unsigned_to_std_logic_vector(prev_mode_93_22_next);
  prev_mode_93_22 <= std_logic_vector_to_unsigned(prev_mode_93_22_reg_o);
  prev_mode_93_22_reg_inst: entity work.synth_reg_w_init
    generic map (
      init_index => 2, 
      init_value => b"010", 
      latency => 1, 
      width => 3)
    port map (
      ce => ce, 
      clk => clk, 
      clr => clr, 
      i => prev_mode_93_22_reg_i, 
      o => prev_mode_93_22_reg_o);
  cast_69_18 <= s2s_cast(a_17_32, 17, 19, 17);
  cast_69_22 <= s2s_cast(b_17_35, 17, 19, 17);
  internal_s_69_5_addsub <= cast_69_18 + cast_69_22;
  internal_s_83_3_convert <= std_logic_vector_to_unsigned(convert_type(signed_to_std_logic_vector(internal_s_69_5_addsub), 19, 17, xlSigned, 18, 17, xlUnsigned, xlRound, xlSaturate));
  op_mem_91_20_front_din <= internal_s_83_3_convert;
  op_mem_91_20_push_front_pop_back_en <= \'1\';
  cout_mem_92_22_front_din <= std_logic_vector_to_unsigned("0");
  cout_mem_92_22_push_front_pop_back_en <= \'1\';
  prev_mode_93_22_next <= std_logic_vector_to_unsigned("000");
  s <= unsigned_to_std_logic_vector(op_mem_91_20_back);
end',
      'crippled_entity' => 'is
  port (
    a : in std_logic_vector((18 - 1) downto 0);
    b : in std_logic_vector((18 - 1) downto 0);
    s : out std_logic_vector((18 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'addsub_81d69413d5',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  $instrs = {
    'entity_declaration_hash' => '68126042ad59d2e01a48551caef4280d',
    'sourceFile' => 'hdl/xlmcode.vhd',
    'templateKeyValues' => {
      'crippled_architecture' => 'is
begin
  op <= "00000000000000000000";
end',
      'crippled_entity' => 'is
  port (
    op : out std_logic_vector((20 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end',
      'entity_name' => 'constant_1a948534a7',
    },
  };
  push(@$results, &SgDeliverFile::deliverFile($instrs));
  local *wrapup = $Sg::{'wrapup'};
  push(@$results, &Sg::wrapup())   if (defined(&wrapup));
  local *wrapup = $SgDeliverFile::{'wrapup'};
  push(@$results, &SgDeliverFile::wrapup())   if (defined(&wrapup));
  local *wrapup = $SgGenerateCores::{'wrapup'};
  push(@$results, &SgGenerateCores::wrapup())   if (defined(&wrapup));
  use Carp qw(croak);
  $ENV{'SYSGEN'} = '/opt/Xilinx/14.7/ISE_DS/ISE/sysgen';
  open(RESULTS, '> /home/brent/Desktop/he6cres_correlator/he6_cres_correlator/sysgen/sysgen/script_results3088358142247382751') || 
    croak 'couldn\'t open /home/brent/Desktop/he6cres_correlator/he6_cres_correlator/sysgen/sysgen/script_results3088358142247382751';
  binmode(RESULTS);
  print RESULTS &Sg::toString($results) . "\n";
  close(RESULTS) || 
    croak 'trouble writing /home/brent/Desktop/he6cres_correlator/he6_cres_correlator/sysgen/sysgen/script_results3088358142247382751';
};

if ($@) {
  open(RESULTS, '> /home/brent/Desktop/he6cres_correlator/he6_cres_correlator/sysgen/sysgen/script_results3088358142247382751') || 
    croak 'couldn\'t open /home/brent/Desktop/he6cres_correlator/he6_cres_correlator/sysgen/sysgen/script_results3088358142247382751';
  binmode(RESULTS);
  print RESULTS $@ . "\n";
  close(RESULTS) || 
    croak 'trouble writing /home/brent/Desktop/he6cres_correlator/he6_cres_correlator/sysgen/sysgen/script_results3088358142247382751';
  exit(1);
}

exit(0);
